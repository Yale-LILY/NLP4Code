{"data_file": "/home/lily/yl2465/code/NLP4Code/results/mbpp-starcoder-3_shot/predictions_step_0_rank_0.jsonl", "total_num_examples": 500, "evaluation_indices": [463, 236, 340, 140, 186, 405, 206, 71, 100, 214, 91, 275, 268, 378, 440, 399, 32, 490, 159, 216, 390, 408, 207, 302, 8, 47, 477, 40, 452, 39, 459, 397, 439, 48, 402, 238, 86, 271, 256, 154, 410, 487, 26, 433, 356, 164, 111, 425, 246, 380, 101, 210, 261, 70, 188, 363, 384, 197, 175, 204, 375, 387, 142, 161, 424, 149, 383, 341, 248, 189, 192, 99, 181, 185, 6, 172, 194, 281, 474, 313, 93, 107, 283, 337, 404, 381, 245, 251, 417, 391, 485, 160, 394, 16, 270, 171, 344, 66, 451, 401]}
{"metadata": {"text": "Write a function to replace characters in a string.", "code": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2", "task_id": 474, "test_setup_code": "", "test_list": ["assert replace_char(\"polygon\",'y','l')==(\"pollgon\")", "assert replace_char(\"character\",'c','a')==(\"aharaater\")", "assert replace_char(\"python\",'l','a')==(\"python\")"], "challenge_test_list": [], "func_signature": "def replace_char(str1,ch,newch):", "func_body": " str2 = str1.replace(ch, newch)\n return str2", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\n\"\"\" Write a function to replace characters in a string. \"\"\""}, "evaluation": "same"}
{"metadata": {"text": "Write a function to find the longest palindromic subsequence in the given string.", "code": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]", "task_id": 247, "test_setup_code": "", "test_list": ["assert lps(\"TENS FOR TENS\") == 5 ", "assert lps(\"CARDIO FOR CARDS\") == 7", "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "], "challenge_test_list": [], "func_signature": "def lps(str): ", "func_body": "\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert lps(\"TENS FOR TENS\") == 5 \n\n\"\"\" Write a function to find the longest palindromic subsequence in the given string. \"\"\""}, "evaluation": "subtle"}
{"metadata": {"text": "Write a python function to find the first element occurring k times in a given array.", "code": "def first_Element(arr,n,k): \n    count_map = {}; \n    for i in range(0, n): \n        if(arr[i] in count_map.keys()): \n            count_map[arr[i]] += 1\n        else: \n            count_map[arr[i]] = 1\n        i += 1\n    for i in range(0, n):  \n        if (count_map[arr[i]] == k): \n            return arr[i] \n        i += 1 \n    return -1", "task_id": 351, "test_setup_code": "", "test_list": ["assert first_Element([0,1,2,3,4,5],6,1) == 0", "assert first_Element([1,2,1,3,4],5,2) == 1", "assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2"], "challenge_test_list": [], "func_signature": "def first_Element(arr,n,k): ", "func_body": "    count_map = {}; \n    for i in range(0, n): \n        if(arr[i] in count_map.keys()): \n            count_map[arr[i]] += 1\n        else: \n            count_map[arr[i]] = 1\n        i += 1\n    for i in range(0, n):  \n        if (count_map[arr[i]] == k): \n            return arr[i] \n        i += 1 \n    return -1", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\n\"\"\" Write a python function to find the first element occurring k times in a given array. \"\"\""}, "evaluation": "subtle"}
{"metadata": {"text": "Write a python function to check whether the given number is co-prime or not.", "code": "def gcd(p,q):\n    while q != 0:\n        p, q = q,p%q\n    return p\ndef is_coprime(x,y):\n    return gcd(x,y) == 1", "task_id": 151, "test_setup_code": "", "test_list": ["assert is_coprime(17,13) == True", "assert is_coprime(15,21) == False", "assert is_coprime(25,45) == False"], "challenge_test_list": [], "func_signature": "def gcd(p,q):", "func_body": "    while q != 0:\n        p, q = q,p%q\n    return p\ndef is_coprime(x,y):\n    return gcd(x,y) == 1", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_coprime(17,13) == True\n\n\"\"\" Write a python function to check whether the given number is co-prime or not. \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a function to perform the exponentiation of the given two tuples.", "code": "def find_exponentio(test_tup1, test_tup2):\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res)\n", "task_id": 197, "test_setup_code": "", "test_list": ["assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)", "assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)", "assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"], "challenge_test_list": [], "func_signature": "def find_exponentio(test_tup1, test_tup2):", "func_body": "  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res)\n", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\n\"\"\" Write a function to perform the exponentiation of the given two tuples. \"\"\""}, "evaluation": "same"}
{"metadata": {"text": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.", "code": "MAX = 1000000\ndef breakSum(n): \n\tdp = [0]*(n+1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \n\treturn dp[n]", "task_id": 416, "test_setup_code": "", "test_list": ["assert breakSum(12) == 13", "assert breakSum(24) == 27", "assert breakSum(23) == 23"], "challenge_test_list": [], "func_signature": "MAX = 1000000\ndef breakSum(n): ", "func_body": "\tdp = [0]*(n+1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \n\treturn dp[n]", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert breakSum(12) == 13\n\n\"\"\" Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number. \"\"\""}, "evaluation": "unclear"}
{"metadata": {"text": "Write a python function to find the first repeated character in a given string.", "code": "def first_Repeated_Char(str): \n    h = {}\n    for ch in str:\n        if ch in h: \n            return ch;\n        else: \n            h[ch] = 0\n    return '\\0'", "task_id": 217, "test_setup_code": "", "test_list": ["assert first_Repeated_Char(\"Google\") == \"o\"", "assert first_Repeated_Char(\"data\") == \"a\"", "assert first_Repeated_Char(\"python\") == '\\0'"], "challenge_test_list": [], "func_signature": "def first_Repeated_Char(str): ", "func_body": "    h = {}\n    for ch in str:\n        if ch in h: \n            return ch;\n        else: \n            h[ch] = 0\n    return '\\0'", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert first_Repeated_Char(\"Google\") == \"o\"\n\n\"\"\" Write a python function to find the first repeated character in a given string. \"\"\""}, "evaluation": "missing"}
{"metadata": {"text": "Write a function to find the volume of a sphere.", "code": "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume", "task_id": 82, "test_setup_code": "", "test_list": ["assert volume_sphere(10)==4188.790204786391", "assert volume_sphere(25)==65449.84694978735", "assert volume_sphere(20)==33510.32163829113"], "challenge_test_list": [], "func_signature": "import math\ndef volume_sphere(r):", "func_body": "  volume=(4/3)*math.pi*r*r*r\n  return volume", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert volume_sphere(10)==4188.790204786391\n\n\"\"\" Write a function to find the volume of a sphere. \"\"\""}, "evaluation": "subtle"}
{"metadata": {"text": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item", "code": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result", "task_id": 111, "test_setup_code": "", "test_list": ["assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]", "assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]", "assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"], "challenge_test_list": [], "func_signature": "def common_in_nested_lists(nestedlist):", "func_body": "    result = list(set.intersection(*map(set, nestedlist)))\n    return result", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\n\"\"\" Write a function to find common elements in given nested lists. * list item * list item * list item * list item \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a python function to find the minimum element in a sorted and rotated array.", "code": "def find_Min(arr,low,high): \n    while (low < high): \n        mid = low + (high - low) // 2;   \n        if (arr[mid] == arr[high]): \n            high -= 1; \n        elif (arr[mid] > arr[high]): \n            low = mid + 1; \n        else: \n            high = mid; \n    return arr[high]; ", "task_id": 225, "test_setup_code": "", "test_list": ["assert find_Min([1,2,3,4,5],0,4) == 1", "assert find_Min([4,6,8],0,2) == 4", "assert find_Min([2,3,5,7,9],0,4) == 2"], "challenge_test_list": [], "func_signature": "def find_Min(arr,low,high): ", "func_body": "    while (low < high): \n        mid = low + (high - low) // 2;   \n        if (arr[mid] == arr[high]): \n            high -= 1; \n        elif (arr[mid] > arr[high]): \n            low = mid + 1; \n        else: \n            high = mid; \n    return arr[high]; ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert find_Min([1,2,3,4,5],0,4) == 1\n\n\"\"\" Write a python function to find the minimum element in a sorted and rotated array. \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a function to convert snake case string to camel case string.", "code": "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))", "task_id": 102, "test_setup_code": "", "test_list": ["assert snake_to_camel('python_program')=='PythonProgram'", "assert snake_to_camel('python_language')==('PythonLanguage')", "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"], "challenge_test_list": [], "func_signature": "def snake_to_camel(word):", "func_body": "        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert snake_to_camel('python_program')=='PythonProgram'\n\n\"\"\" Write a function to convert snake case string to camel case string. \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.", "code": "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "task_id": 286, "test_setup_code": "", "test_list": ["assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30", "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59", "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"], "challenge_test_list": [], "func_signature": "def max_sub_array_sum_repeated(a, n, k): ", "func_body": "\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\n\"\"\" Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times. \"\"\""}, "evaluation": "subtle"}
{"metadata": {"text": "Write a function to find the nth decagonal number.", "code": "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n ", "task_id": 279, "test_setup_code": "", "test_list": ["assert is_num_decagonal(3) == 27", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(10) == 370"], "challenge_test_list": [], "func_signature": "def is_num_decagonal(n): ", "func_body": "\treturn 4 * n * n - 3 * n ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_num_decagonal(3) == 27\n\n\"\"\" Write a function to find the nth decagonal number. \"\"\""}, "evaluation": "subtle"}
{"metadata": {"text": "Write a function to find the n'th lucas number.", "code": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ", "task_id": 389, "test_setup_code": "", "test_list": ["assert find_lucas(9) == 76", "assert find_lucas(4) == 7", "assert find_lucas(3) == 4"], "challenge_test_list": [], "func_signature": "def find_lucas(n): ", "func_body": "\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert find_lucas(9) == 76\n\n\"\"\" Write a function to find the n'th lucas number. \"\"\""}, "evaluation": "subtle"}
{"metadata": {"text": "Write a function to remove all whitespaces from the given string using regex.", "code": "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))", "task_id": 451, "test_setup_code": "", "test_list": ["assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'", "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'", "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"], "challenge_test_list": [], "func_signature": "import re\ndef remove_whitespaces(text1):", "func_body": "  return (re.sub(r'\\s+', '',text1))", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\n\"\"\" Write a function to remove all whitespaces from the given string using regex. \"\"\""}, "evaluation": "same"}
{"metadata": {"text": "Write a function to find the minimum value in a given heterogeneous list.", "code": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val", "task_id": 410, "test_setup_code": "", "test_list": ["assert min_val(['Python', 3, 2, 4, 5, 'version'])==2", "assert min_val(['Python', 15, 20, 25])==15", "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"], "challenge_test_list": [], "func_signature": "def min_val(listval):", "func_body": "     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\n\"\"\" Write a function to find the minimum value in a given heterogeneous list. \"\"\""}, "evaluation": "missing"}
{"metadata": {"text": "Write a function to find sequences of lowercase letters joined with an underscore using regex.", "code": "import re\ndef text_match(text):\n  patterns = '^[a-z]+_[a-z]+$'\n  if re.search(patterns,  text):\n    return ('Found a match!')\n  else:\n    return ('Not matched!')", "task_id": 43, "test_setup_code": "", "test_list": ["assert text_match(\"aab_cbbbc\") == 'Found a match!'", "assert text_match(\"aab_Abbbc\") == 'Not matched!'", "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"], "challenge_test_list": ["assert text_match(\"aab-cbbbc\") == 'Not matched!'"], "func_signature": "import re\ndef text_match(text):", "func_body": "  patterns = '^[a-z]+_[a-z]+$'\n  if re.search(patterns,  text):\n    return ('Found a match!')\n  else:\n    return ('Not matched!')", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\n\"\"\" Write a function to find sequences of lowercase letters joined with an underscore using regex. \"\"\""}, "evaluation": "subtle"}
{"metadata": {"text": "Write a python function to find common divisor between two numbers in a given pair.", "code": "def ngcd(x,y):\n    i=1\n    while(i<=x and i<=y):\n        if(x%i==0 and y%i == 0):\n            gcd=i;\n        i+=1\n    return gcd;\ndef num_comm_div(x,y):\n  n = ngcd(x,y)\n  result = 0\n  z = int(n**0.5)\n  i = 1\n  while(i <= z):\n    if(n % i == 0):\n      result += 2 \n      if(i == n/i):\n        result-=1\n    i+=1\n  return result", "task_id": 501, "test_setup_code": "", "test_list": ["assert num_comm_div(2,4) == 2", "assert num_comm_div(2,8) == 2", "assert num_comm_div(12,24) == 6"], "challenge_test_list": [], "func_signature": "def ngcd(x,y):", "func_body": "    i=1\n    while(i<=x and i<=y):\n        if(x%i==0 and y%i == 0):\n            gcd=i;\n        i+=1\n    return gcd;\ndef num_comm_div(x,y):\n  n = ngcd(x,y)\n  result = 0\n  z = int(n**0.5)\n  i = 1\n  while(i <= z):\n    if(n % i == 0):\n      result += 2 \n      if(i == n/i):\n        result-=1\n    i+=1\n  return result", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert num_comm_div(2,4) == 2\n\n\"\"\" Write a python function to find common divisor between two numbers in a given pair. \"\"\""}, "evaluation": "missing"}
{"metadata": {"text": "Write a function to find sum of the numbers in a list between the indices of a specified range.", "code": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ", "task_id": 170, "test_setup_code": "", "test_list": ["assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29", "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16", "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"], "challenge_test_list": [], "func_signature": "def sum_range_list(list1, m, n):                                                                                                                                                                                                ", "func_body": "    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\n\"\"\" Write a function to find sum of the numbers in a list between the indices of a specified range. \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a function to find minimum of three numbers.", "code": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ", "task_id": 227, "test_setup_code": "", "test_list": ["assert min_of_three(10,20,0)==0", "assert min_of_three(19,15,18)==15", "assert min_of_three(-10,-20,-30)==-30"], "challenge_test_list": [], "func_signature": "def min_of_three(a,b,c): ", "func_body": "      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert min_of_three(10,20,0)==0\n\n\"\"\" Write a function to find minimum of three numbers. \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "code": "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "task_id": 401, "test_setup_code": "", "test_list": ["assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))", "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))", "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"], "challenge_test_list": [], "func_signature": "def add_nested_tuples(test_tup1, test_tup2):", "func_body": "  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\n\"\"\" Write a function to perform index wise addition of tuple elements in the given two nested tuples. \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "code": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum", "task_id": 419, "test_setup_code": "", "test_list": ["assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243", "assert round_and_sum([5,2,9,24.3,29])==345", "assert round_and_sum([25.0,56.7,89.2])==513"], "challenge_test_list": [], "func_signature": "def round_and_sum(list1):", "func_body": "  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\n\"\"\" Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list. \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a python function to find the minimum operations required to make two numbers equal.", "code": "import math   \ndef min_Operations(A,B):  \n    if (A > B): \n        swap(A,B)  \n    B = B // math.gcd(A,B);  \n    return B - 1", "task_id": 218, "test_setup_code": "", "test_list": ["assert min_Operations(2,4) == 1", "assert min_Operations(4,10) == 4", "assert min_Operations(1,4) == 3"], "challenge_test_list": [], "func_signature": "import math   \ndef min_Operations(A,B):  ", "func_body": "    if (A > B): \n        swap(A,B)  \n    B = B // math.gcd(A,B);  \n    return B - 1", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert min_Operations(2,4) == 1\n\n\"\"\" Write a python function to find the minimum operations required to make two numbers equal. \"\"\""}, "evaluation": "unclear"}
{"metadata": {"text": "Write a python function to print positive numbers in a list.", "code": "def pos_nos(list1):\n  for num in list1: \n    if num >= 0: \n       return num ", "task_id": 313, "test_setup_code": "", "test_list": ["assert pos_nos([-1,-2,1,2]) == 1,2", "assert pos_nos([3,4,-5]) == 3,4", "assert pos_nos([-2,-3,1]) == 1"], "challenge_test_list": [], "func_signature": "def pos_nos(list1):", "func_body": "  for num in list1: \n    if num >= 0: \n       return num ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert pos_nos([-1,-2,1,2]) == 1,2\n\n\"\"\" Write a python function to print positive numbers in a list. \"\"\""}, "evaluation": "unclear"}
{"metadata": {"text": "Write a function to find whether a given array of integers contains any duplicate element.", "code": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ", "task_id": 19, "test_setup_code": "", "test_list": ["assert test_duplicate(([1,2,3,4,5]))==False", "assert test_duplicate(([1,2,3,4, 4]))==True", "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"], "challenge_test_list": [], "func_signature": "def test_duplicate(arraynums):", "func_body": "    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert test_duplicate(([1,2,3,4,5]))==False\n\n\"\"\" Write a function to find whether a given array of integers contains any duplicate element. \"\"\""}, "evaluation": "same"}
{"metadata": {"text": "Write a python function to check whether the given two integers have opposite sign or not.", "code": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ", "task_id": 58, "test_setup_code": "", "test_list": ["assert opposite_Signs(1,-2) == True", "assert opposite_Signs(3,2) == False", "assert opposite_Signs(-10,-10) == False"], "challenge_test_list": [], "func_signature": "def opposite_Signs(x,y): ", "func_body": "    return ((x ^ y) < 0); ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert opposite_Signs(1,-2) == True\n\n\"\"\" Write a python function to check whether the given two integers have opposite sign or not. \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a function to find the area of a pentagon.", "code": "import math\ndef area_pentagon(a):\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\n  return area", "task_id": 488, "test_setup_code": "", "test_list": ["assert area_pentagon(5)==43.01193501472417", "assert area_pentagon(10)==172.0477400588967", "assert area_pentagon(15)==387.10741513251753"], "challenge_test_list": [], "func_signature": "import math\ndef area_pentagon(a):", "func_body": "  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\n  return area", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert area_pentagon(5)==43.01193501472417\n\n\"\"\" Write a function to find the area of a pentagon. \"\"\""}, "evaluation": "subtle"}
{"metadata": {"text": "Write a function to print check if the triangle is equilateral or not.", "code": "def check_equilateral(x,y,z):\n  if x == y == z:\n\t   return True\n  else:\n     return False", "task_id": 51, "test_setup_code": "", "test_list": ["assert check_equilateral(6,8,12)==False ", "assert check_equilateral(6,6,12)==False", "assert check_equilateral(6,6,6)==True"], "challenge_test_list": [], "func_signature": "def check_equilateral(x,y,z):", "func_body": "  if x == y == z:\n\t   return True\n  else:\n     return False", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert check_equilateral(6,8,12)==False \n\n\"\"\" Write a function to print check if the triangle is equilateral or not. \"\"\""}, "evaluation": "same"}
{"metadata": {"text": "Write a function to find the maximum product subarray of the given array.", "code": "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far", "task_id": 463, "test_setup_code": "", "test_list": ["assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112", "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ", "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"], "challenge_test_list": [], "func_signature": "def max_subarray_product(arr):", "func_body": "\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\n\"\"\" Write a function to find the maximum product subarray of the given array. \"\"\""}, "evaluation": "missing"}
{"metadata": {"text": "Write a function to find the list with minimum length using lambda function.", "code": "def min_length_list(input_list):\n    min_length = min(len(x) for x in input_list )  \n    min_list = min(input_list, key = lambda i: len(i))\n    return(min_length, min_list)", "task_id": 50, "test_setup_code": "", "test_list": ["assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])", "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])", "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"], "challenge_test_list": [], "func_signature": "def min_length_list(input_list):", "func_body": "    min_length = min(len(x) for x in input_list )  \n    min_list = min(input_list, key = lambda i: len(i))\n    return(min_length, min_list)", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\n\"\"\" Write a function to find the list with minimum length using lambda function. \"\"\""}, "evaluation": "unclear"}
{"metadata": {"text": "Write a function to find the pairwise addition of the elements of the given tuples.", "code": "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ", "task_id": 470, "test_setup_code": "", "test_list": ["assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)", "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)", "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"], "challenge_test_list": [], "func_signature": "def add_pairwise(test_tup):", "func_body": "  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\n\"\"\" Write a function to find the pairwise addition of the elements of the given tuples. \"\"\""}, "evaluation": "subtle"}
{"metadata": {"text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.", "code": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs", "task_id": 408, "test_setup_code": "", "test_list": ["assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]", "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]", "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"], "challenge_test_list": [], "func_signature": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):", "func_body": "   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\n\"\"\" Write a function to find k number of pairs which consist of one element from the first array and one element from the second array. \"\"\""}, "evaluation": "missing"}
{"metadata": {"text": "Write a function to extract specified size of strings from a give list of string values.", "code": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result", "task_id": 450, "test_setup_code": "", "test_list": ["assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']", "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']", "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"], "challenge_test_list": [], "func_signature": "def extract_string(str, l):", "func_body": "    result = [e for e in str if len(e) == l] \n    return result", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\n\"\"\" Write a function to extract specified size of strings from a give list of string values. \"\"\""}, "evaluation": "subtle"}
{"metadata": {"text": "Write a function to find the nth octagonal number.", "code": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ", "task_id": 59, "test_setup_code": "", "test_list": ["assert is_octagonal(5) == 65", "assert is_octagonal(10) == 280", "assert is_octagonal(15) == 645"], "challenge_test_list": [], "func_signature": "def is_octagonal(n): ", "func_body": "\treturn 3 * n * n - 2 * n ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_octagonal(5) == 65\n\n\"\"\" Write a function to find the nth octagonal number. \"\"\""}, "evaluation": "subtle"}
{"metadata": {"text": "Write a function to extract the nth element from a given list of tuples.", "code": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result", "task_id": 413, "test_setup_code": "", "test_list": ["assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']", "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]", "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"], "challenge_test_list": [], "func_signature": "def extract_nth_element(list1, n):", "func_body": "    result = [x[n] for x in list1]\n    return result", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\n\"\"\" Write a function to extract the nth element from a given list of tuples. \"\"\""}, "evaluation": "same"}
{"metadata": {"text": "Write a function to find the intersection of two arrays using lambda function.", "code": "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result", "task_id": 249, "test_setup_code": "", "test_list": ["assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]", "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]", "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"], "challenge_test_list": [], "func_signature": "def intersection_array(array_nums1,array_nums2):", "func_body": " result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\n\"\"\" Write a function to find the intersection of two arrays using lambda function. \"\"\""}, "evaluation": "same"}
{"metadata": {"text": "Write a function to find frequency count of list of lists.", "code": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n", "task_id": 97, "test_setup_code": "", "test_list": ["assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}", "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}", "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"], "challenge_test_list": [], "func_signature": "def frequency_lists(list1):", "func_body": "    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\n\"\"\" Write a function to find frequency count of list of lists. \"\"\""}, "evaluation": "same"}
{"metadata": {"text": "Write a function to substaract two lists using map and lambda function.", "code": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)", "task_id": 282, "test_setup_code": "", "test_list": ["assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]", "assert sub_list([1,2],[3,4])==[-2,-2]", "assert sub_list([90,120],[50,70])==[40,50]"], "challenge_test_list": [], "func_signature": "def sub_list(nums1,nums2):", "func_body": "  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\n\"\"\" Write a function to substaract two lists using map and lambda function. \"\"\""}, "evaluation": "same"}
{"metadata": {"text": "Write a python function to find the sum of squares of first n odd natural numbers.", "code": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ", "task_id": 267, "test_setup_code": "", "test_list": ["assert square_Sum(2) == 10", "assert square_Sum(3) == 35", "assert square_Sum(4) == 84"], "challenge_test_list": [], "func_signature": "def square_Sum(n):  ", "func_body": "    return int(n*(4*n*n-1)/3) ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert square_Sum(2) == 10\n\n\"\"\" Write a python function to find the sum of squares of first n odd natural numbers. \"\"\""}, "evaluation": "subtle"}
{"metadata": {"text": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.", "code": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ", "task_id": 165, "test_setup_code": "", "test_list": ["assert count_char_position(\"xbcefg\") == 2", "assert count_char_position(\"ABcED\") == 3", "assert count_char_position(\"AbgdeF\") == 5"], "challenge_test_list": [], "func_signature": "def count_char_position(str1): ", "func_body": "    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert count_char_position(\"xbcefg\") == 2\n\n\"\"\" Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet. \"\"\""}, "evaluation": "unclear"}
{"metadata": {"text": "Write a function to concatenate each element of tuple by the delimiter.", "code": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ", "task_id": 421, "test_setup_code": "", "test_list": ["assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'", "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'", "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"], "challenge_test_list": [], "func_signature": "def concatenate_tuple(test_tup):", "func_body": "    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\n\"\"\" Write a function to concatenate each element of tuple by the delimiter. \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a python function to find gcd of two positive integers.", "code": "def gcd(x, y):\n    gcd = 1\n    if x % y == 0:\n        return y\n    for k in range(int(y / 2), 0, -1):\n        if x % k == 0 and y % k == 0:\n            gcd = k\n            break  \n    return gcd", "task_id": 498, "test_setup_code": "", "test_list": ["assert gcd(12, 17) == 1", "assert gcd(4,6) == 2", "assert gcd(2,9) == 1"], "challenge_test_list": [], "func_signature": "def gcd(x, y):", "func_body": "    gcd = 1\n    if x % y == 0:\n        return y\n    for k in range(int(y / 2), 0, -1):\n        if x % k == 0 and y % k == 0:\n            gcd = k\n            break  \n    return gcd", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert gcd(12, 17) == 1\n\n\"\"\" Write a python function to find gcd of two positive integers. \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a function to sort a given mixed list of integers and strings.", "code": "def sort_mixed_list(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    str_part = sorted([i for i in mixed_list if type(i) is str])\n    return int_part + str_part", "task_id": 37, "test_setup_code": "", "test_list": ["assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']", "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']", "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"], "challenge_test_list": [], "func_signature": "def sort_mixed_list(mixed_list):", "func_body": "    int_part = sorted([i for i in mixed_list if type(i) is int])\n    str_part = sorted([i for i in mixed_list if type(i) is str])\n    return int_part + str_part", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\n\"\"\" Write a function to sort a given mixed list of integers and strings. \"\"\""}, "evaluation": "ERROR: program failed to execute"}
{"metadata": {"text": "Write a function to trim each tuple by k in the given tuple list.", "code": "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) ", "task_id": 444, "test_setup_code": "", "test_list": ["assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'", "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'", "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"], "challenge_test_list": [], "func_signature": "def trim_tuple(test_list, K):", "func_body": "  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\n\"\"\" Write a function to trim each tuple by k in the given tuple list. \"\"\""}, "evaluation": "subtle"}
{"metadata": {"text": "Write a function to check if a binary tree is balanced or not.", "code": "class Node: \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\ndef get_height(root): \n\tif root is None: \n\t\treturn 0\n\treturn max(get_height(root.left), get_height(root.right)) + 1\ndef is_tree_balanced(root): \n\tif root is None: \n\t\treturn True\n\tlh = get_height(root.left) \n\trh = get_height(root.right) \n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \n\troot.left) is True and is_tree_balanced( root.right) is True: \n\t\treturn True\n\treturn False", "task_id": 367, "test_setup_code": "root = Node(1) \r\nroot.left = Node(2) \r\nroot.right = Node(3) \r\nroot.left.left = Node(4) \r\nroot.left.right = Node(5) \r\nroot.left.left.left = Node(8) \r\nroot1 = Node(1) \r\nroot1.left = Node(2) \r\nroot1.right = Node(3) \r\nroot1.left.left = Node(4) \r\nroot1.left.right = Node(5) \r\nroot1.right.left = Node(6) \r\nroot1.left.left.left = Node(7)\r\nroot2 = Node(1) \r\nroot2.left = Node(2) \r\nroot2.right = Node(3) \r\nroot2.left.left = Node(4) \r\nroot2.left.right = Node(5)\r\nroot2.left.left.left = Node(7)", "test_list": ["assert is_tree_balanced(root) == False", "assert is_tree_balanced(root1) == True", "assert is_tree_balanced(root2) == False "], "challenge_test_list": [], "func_signature": "class Node: \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\ndef get_height(root): ", "func_body": "\tif root is None: \n\t\treturn 0\n\treturn max(get_height(root.left), get_height(root.right)) + 1\ndef is_tree_balanced(root): \n\tif root is None: \n\t\treturn True\n\tlh = get_height(root.left) \n\trh = get_height(root.right) \n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \n\troot.left) is True and is_tree_balanced( root.right) is True: \n\t\treturn True\n\treturn False", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_tree_balanced(root) == False\n\n\"\"\" Write a function to check if a binary tree is balanced or not. \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a function to verify validity of a string of parentheses.", "code": "def is_valid_parenthese( str1):\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n        for parenthese in str1:\n            if parenthese in pchar:\n                stack.append(parenthese)\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\n                return False\n        return len(stack) == 0", "task_id": 175, "test_setup_code": "", "test_list": ["assert is_valid_parenthese(\"(){}[]\")==True", "assert is_valid_parenthese(\"()[{)}\")==False", "assert is_valid_parenthese(\"()\")==True"], "challenge_test_list": [], "func_signature": "def is_valid_parenthese( str1):", "func_body": "        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n        for parenthese in str1:\n            if parenthese in pchar:\n                stack.append(parenthese)\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\n                return False\n        return len(stack) == 0", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_valid_parenthese(\"(){}[]\")==True\n\n\"\"\" Write a function to verify validity of a string of parentheses. \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a function to find n\u2019th smart number.", "code": "MAX = 3000 \ndef smartNumber(n): \n\tprimes = [0] * MAX \n\tresult = [] \n\tfor i in range(2, MAX): \n\t\tif (primes[i] == 0): \n\t\t\tprimes[i] = 1 \n\t\t\tj = i * 2 \n\t\t\twhile (j < MAX): \n\t\t\t\tprimes[j] -= 1 \n\t\t\t\tif ( (primes[j] + 3) == 0): \n\t\t\t\t\tresult.append(j) \n\t\t\t\tj = j + i \n\tresult.sort() \n\treturn result[n - 1] ", "task_id": 122, "test_setup_code": "", "test_list": ["assert smartNumber(1) == 30", "assert smartNumber(50) == 273", "assert smartNumber(1000) == 2664"], "challenge_test_list": [], "func_signature": "MAX = 3000 \ndef smartNumber(n): ", "func_body": "\tprimes = [0] * MAX \n\tresult = [] \n\tfor i in range(2, MAX): \n\t\tif (primes[i] == 0): \n\t\t\tprimes[i] = 1 \n\t\t\tj = i * 2 \n\t\t\twhile (j < MAX): \n\t\t\t\tprimes[j] -= 1 \n\t\t\t\tif ( (primes[j] + 3) == 0): \n\t\t\t\t\tresult.append(j) \n\t\t\t\tj = j + i \n\tresult.sort() \n\treturn result[n - 1] ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert smartNumber(1) == 30\n\n\"\"\" Write a function to find n\u2019th smart number. \"\"\""}, "evaluation": "unclear"}
{"metadata": {"text": "Write a python function to print negative numbers in a list.", "code": "def neg_nos(list1):\n  for num in list1: \n    if num < 0: \n       return num ", "task_id": 436, "test_setup_code": "", "test_list": ["assert neg_nos([-1,4,5,-6]) == -1,-6", "assert neg_nos([-1,-2,3,4]) == -1,-2", "assert neg_nos([-7,-6,8,9]) == -7,-6"], "challenge_test_list": [], "func_signature": "def neg_nos(list1):", "func_body": "  for num in list1: \n    if num < 0: \n       return num ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\n\"\"\" Write a python function to print negative numbers in a list. \"\"\""}, "evaluation": "unclear"}
{"metadata": {"text": "Write a function to swap two numbers.", "code": "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)", "task_id": 257, "test_setup_code": "", "test_list": ["assert swap_numbers(10,20)==(20,10)", "assert swap_numbers(15,17)==(17,15)", "assert swap_numbers(100,200)==(200,100)"], "challenge_test_list": [], "func_signature": "def swap_numbers(a,b):", "func_body": " temp = a\n a = b\n b = temp\n return (a,b)", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert swap_numbers(10,20)==(20,10)\n\n\"\"\" Write a function to swap two numbers. \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a function to convert more than one list to nested dictionary.", "code": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result", "task_id": 391, "test_setup_code": "", "test_list": ["assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]", "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]", "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"], "challenge_test_list": [], "func_signature": "def convert_list_dictionary(l1, l2, l3):", "func_body": "     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\n\"\"\" Write a function to convert more than one list to nested dictionary. \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a python function to find the perimeter of a cylinder.", "code": "def perimeter(diameter,height) : \n    return 2*(diameter+height)  ", "task_id": 112, "test_setup_code": "", "test_list": ["assert perimeter(2,4) == 12", "assert perimeter(1,2) == 6", "assert perimeter(3,1) == 8"], "challenge_test_list": [], "func_signature": "def perimeter(diameter,height) : ", "func_body": "    return 2*(diameter+height)  ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert perimeter(2,4) == 12\n\n\"\"\" Write a python function to find the perimeter of a cylinder. \"\"\""}, "evaluation": "subtle"}
{"metadata": {"text": "Write a python function to find the first even number in a given list of numbers.", "code": "def first_even(nums):\n    first_even = next((el for el in nums if el%2==0),-1)\n    return first_even", "task_id": 221, "test_setup_code": "", "test_list": ["assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4", "assert first_even([2, 3, 4]) == 2", "assert first_even([5, 6, 7]) == 6"], "challenge_test_list": [], "func_signature": "def first_even(nums):", "func_body": "    first_even = next((el for el in nums if el%2==0),-1)\n    return first_even", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\n\"\"\" Write a python function to find the first even number in a given list of numbers. \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a function to perfom the rear element extraction from list of tuples records.", "code": "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) ", "task_id": 272, "test_setup_code": "", "test_list": ["assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]", "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]", "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"], "challenge_test_list": [], "func_signature": "def rear_extract(test_list):", "func_body": "  res = [lis[-1] for lis in test_list]\n  return (res) ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\n\"\"\" Write a function to perfom the rear element extraction from list of tuples records. \"\"\""}, "evaluation": "spurious"}
{"metadata": {"text": "Write a function to zip the two given tuples.", "code": "def zip_tuples(test_tup1, test_tup2):\n  res = []\n  for i, j in enumerate(test_tup1):\n    res.append((j, test_tup2[i % len(test_tup2)])) \n  return (res) ", "task_id": 81, "test_setup_code": "", "test_list": ["assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]", "assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]", "assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"], "challenge_test_list": [], "func_signature": "def zip_tuples(test_tup1, test_tup2):", "func_body": "  res = []\n  for i, j in enumerate(test_tup1):\n    res.append((j, test_tup2[i % len(test_tup2)])) \n  return (res) ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\n\"\"\" Write a function to zip the two given tuples. \"\"\""}, "evaluation": "ERROR: program failed to execute"}
{"metadata": {"text": "Write a python function to find highest power of 2 less than or equal to given number.", "code": "def highest_Power_of_2(n): \n    res = 0; \n    for i in range(n, 0, -1):  \n        if ((i & (i - 1)) == 0): \n            res = i; \n            break;      \n    return res; ", "task_id": 199, "test_setup_code": "", "test_list": ["assert highest_Power_of_2(10) == 8", "assert highest_Power_of_2(19) == 16", "assert highest_Power_of_2(32) == 32"], "challenge_test_list": [], "func_signature": "def highest_Power_of_2(n): ", "func_body": "    res = 0; \n    for i in range(n, 0, -1):  \n        if ((i & (i - 1)) == 0): \n            res = i; \n            break;      \n    return res; ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert highest_Power_of_2(10) == 8\n\n\"\"\" Write a python function to find highest power of 2 less than or equal to given number. \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a function to print all permutations of a given string including duplicates.", "code": "def permute_string(str):\n    if len(str) == 0:\n        return ['']\n    prev_list = permute_string(str[1:len(str)])\n    next_list = []\n    for i in range(0,len(prev_list)):\n        for j in range(0,len(str)):\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\n            if new_str not in next_list:\n                next_list.append(new_str)\n    return next_list", "task_id": 374, "test_setup_code": "", "test_list": ["assert permute_string('ab')==['ab', 'ba']", "assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']", "assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']"], "challenge_test_list": [], "func_signature": "def permute_string(str):", "func_body": "    if len(str) == 0:\n        return ['']\n    prev_list = permute_string(str[1:len(str)])\n    next_list = []\n    for i in range(0,len(prev_list)):\n        for j in range(0,len(str)):\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\n            if new_str not in next_list:\n                next_list.append(new_str)\n    return next_list", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert permute_string('ab')==['ab', 'ba']\n\n\"\"\" Write a function to print all permutations of a given string including duplicates. \"\"\""}, "evaluation": "missing"}
{"metadata": {"text": "Write a python function to find the first non-repeated character in a given string.", "code": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None", "task_id": 395, "test_setup_code": "", "test_list": ["assert first_non_repeating_character(\"abcabc\") == None", "assert first_non_repeating_character(\"abc\") == \"a\"", "assert first_non_repeating_character(\"ababc\") == \"c\""], "challenge_test_list": [], "func_signature": "def first_non_repeating_character(str1):", "func_body": "  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert first_non_repeating_character(\"abcabc\") == None\n\n\"\"\" Write a python function to find the first non-repeated character in a given string. \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a function to check the given decimal with a precision of 2 by using regex.", "code": "import re\ndef is_decimal(num):\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n  result = num_fetch.search(num)\n  return bool(result)", "task_id": 208, "test_setup_code": "", "test_list": ["assert is_decimal('123.11') == True", "assert is_decimal('0.21') == True", "assert is_decimal('123.1214') == False"], "challenge_test_list": [], "func_signature": "import re\ndef is_decimal(num):", "func_body": "  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n  result = num_fetch.search(num)\n  return bool(result)", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_decimal('123.11') == True\n\n\"\"\" Write a function to check the given decimal with a precision of 2 by using regex. \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a function to search some literals strings in a string by using regex.", "code": "import re\ndef check_literals(text, patterns):\n  for pattern in patterns:\n    if re.search(pattern,  text):\n        return ('Matched!')\n    else:\n        return ('Not Matched!')", "task_id": 186, "test_setup_code": "", "test_list": ["assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'", "assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'", "assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'"], "challenge_test_list": [], "func_signature": "import re\ndef check_literals(text, patterns):", "func_body": "  for pattern in patterns:\n    if re.search(pattern,  text):\n        return ('Matched!')\n    else:\n        return ('Not Matched!')", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\n\"\"\" Write a function to search some literals strings in a string by using regex. \"\"\""}, "evaluation": "subtle"}
{"metadata": {"text": "Write a function to decode a run-length encoded given list.", "code": "def decode_list(alist):\n    def aux(g):\n        if isinstance(g, list):\n            return [(g[1], range(g[0]))]\n        else:\n            return [(g, [0])]\n    return [x for g in alist for x, R in aux(g) for i in R]", "task_id": 215, "test_setup_code": "", "test_list": ["assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]", "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']", "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"], "challenge_test_list": [], "func_signature": "def decode_list(alist):", "func_body": "    def aux(g):\n        if isinstance(g, list):\n            return [(g[1], range(g[0]))]\n        else:\n            return [(g, [0])]\n    return [x for g in alist for x, R in aux(g) for i in R]", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\n\"\"\" Write a function to decode a run-length encoded given list. \"\"\""}, "evaluation": "subtle"}
{"metadata": {"text": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.", "code": "def swap_count(s):\n\tchars = s\n\tcount_left = 0\n\tcount_right = 0\n\tswap = 0\n\timbalance = 0; \n\tfor i in range(len(chars)):\n\t\tif chars[i] == '[':\n\t\t\tcount_left += 1\n\t\t\tif imbalance > 0:\n\t\t\t\tswap += imbalance\n\t\t\t\timbalance -= 1\n\t\telif chars[i] == ']':\n\t\t\tcount_right += 1\n\t\t\timbalance = (count_right - count_left) \n\treturn swap", "task_id": 386, "test_setup_code": "", "test_list": ["assert swap_count(\"[]][][\") == 2", "assert swap_count(\"[[][]]\") == 0", "assert swap_count(\"[[][]]][\") == 1"], "challenge_test_list": [], "func_signature": "def swap_count(s):", "func_body": "\tchars = s\n\tcount_left = 0\n\tcount_right = 0\n\tswap = 0\n\timbalance = 0; \n\tfor i in range(len(chars)):\n\t\tif chars[i] == '[':\n\t\t\tcount_left += 1\n\t\t\tif imbalance > 0:\n\t\t\t\tswap += imbalance\n\t\t\t\timbalance -= 1\n\t\telif chars[i] == ']':\n\t\t\tcount_right += 1\n\t\t\timbalance = (count_right - count_left) \n\treturn swap", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert swap_count(\"[]][][\") == 2\n\n\"\"\" Write a function to find out the minimum no of swaps required for bracket balancing in the given string. \"\"\""}, "evaluation": "missing"}
{"metadata": {"text": "Write a function to compute the sum of digits of each number of a given list.", "code": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())", "task_id": 398, "test_setup_code": "", "test_list": ["assert sum_of_digits([10,2,56])==14", "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19", "assert sum_of_digits([10,20,-4,5,-70])==19"], "challenge_test_list": [], "func_signature": "def sum_of_digits(nums):", "func_body": "    return sum(int(el) for n in nums for el in str(n) if el.isdigit())", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert sum_of_digits([10,2,56])==14\n\n\"\"\" Write a function to compute the sum of digits of each number of a given list. \"\"\""}, "evaluation": "subtle"}
{"metadata": {"text": "Write a function to find the vertex of a parabola.", "code": "def parabola_vertex(a, b, c): \n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\n  return vertex", "task_id": 153, "test_setup_code": "", "test_list": ["assert parabola_vertex(5,3,2)==(-0.3, 1.55)", "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)", "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"], "challenge_test_list": [], "func_signature": "def parabola_vertex(a, b, c): ", "func_body": "  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\n  return vertex", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\n\"\"\" Write a function to find the vertex of a parabola. \"\"\""}, "evaluation": "ERROR: program failed to execute"}
{"metadata": {"text": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item", "code": "def count_occurance(s):\n  count=0\n  for i in range(len(s)):\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\n      count = count + 1\n  return count", "task_id": 172, "test_setup_code": "", "test_list": ["assert count_occurance(\"letstdlenstdporstd\") == 3", "assert count_occurance(\"truststdsolensporsd\") == 1", "assert count_occurance(\"makestdsostdworthit\") == 2"], "challenge_test_list": [], "func_signature": "def count_occurance(s):", "func_body": "  count=0\n  for i in range(len(s)):\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\n      count = count + 1\n  return count", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\n\"\"\" Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a python function to find the last digit of a given number.", "code": "def last_Digit(n) :\n    return (n % 10) ", "task_id": 435, "test_setup_code": "", "test_list": ["assert last_Digit(123) == 3", "assert last_Digit(25) == 5", "assert last_Digit(30) == 0"], "challenge_test_list": [], "func_signature": "def last_Digit(n) :", "func_body": "    return (n % 10) ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert last_Digit(123) == 3\n\n\"\"\" Write a python function to find the last digit of a given number. \"\"\""}, "evaluation": "same"}
{"metadata": {"text": "Write a function to find x and y that satisfies ax + by = n.", "code": "def solution (a, b, n): \n\ti = 0\n\twhile i * a <= n: \n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (\"x = \",i ,\", y = \", \n\t\t\tint((n - (i * a)) / b)) \n\t\t\treturn 0\n\t\ti = i + 1\n\treturn (\"No solution\") ", "task_id": 160, "test_setup_code": "", "test_list": ["assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)", "assert solution(4, 2, 7) == 'No solution'", "assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"], "challenge_test_list": [], "func_signature": "def solution (a, b, n): ", "func_body": "\ti = 0\n\twhile i * a <= n: \n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (\"x = \",i ,\", y = \", \n\t\t\tint((n - (i * a)) / b)) \n\t\t\treturn 0\n\t\ti = i + 1\n\treturn (\"No solution\") ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\n\"\"\" Write a function to find x and y that satisfies ax + by = n. \"\"\""}, "evaluation": "unclear"}
{"metadata": {"text": "Write a function to check if given tuple is distinct or not.", "code": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return (res) ", "task_id": 394, "test_setup_code": "", "test_list": ["assert check_distinct((1, 4, 5, 6, 1, 4)) == False", "assert check_distinct((1, 4, 5, 6)) == True", "assert check_distinct((2, 3, 4, 5, 6)) == True"], "challenge_test_list": [], "func_signature": "def check_distinct(test_tup):", "func_body": "  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return (res) ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\n\"\"\" Write a function to check if given tuple is distinct or not. \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a python function to check whether all the characters in a given string are unique.", "code": "def unique_Characters(str):\n    for i in range(len(str)):\n        for j in range(i + 1,len(str)): \n            if (str[i] == str[j]):\n                return False;\n    return True;", "task_id": 352, "test_setup_code": "", "test_list": ["assert unique_Characters('aba') == False", "assert unique_Characters('abc') == True", "assert unique_Characters('abab') == False"], "challenge_test_list": [], "func_signature": "def unique_Characters(str):", "func_body": "    for i in range(len(str)):\n        for j in range(i + 1,len(str)): \n            if (str[i] == str[j]):\n                return False;\n    return True;", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert unique_Characters('aba') == False\n\n\"\"\" Write a python function to check whether all the characters in a given string are unique. \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a function to maximize the given two tuples.", "code": "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "task_id": 259, "test_setup_code": "", "test_list": ["assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))", "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))", "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"], "challenge_test_list": [], "func_signature": "def maximize_elements(test_tup1, test_tup2):", "func_body": "  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\n\"\"\" Write a function to maximize the given two tuples. \"\"\""}, "evaluation": "unclear"}
{"metadata": {"text": "Write a function to find all index positions of the maximum values in a given list.", "code": "def position_max(list1):\n    max_val = max(list1)\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\n    return max_result", "task_id": 200, "test_setup_code": "", "test_list": ["assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]", "assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]", "assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]"], "challenge_test_list": [], "func_signature": "def position_max(list1):", "func_body": "    max_val = max(list1)\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\n    return max_result", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\n\"\"\" Write a function to find all index positions of the maximum values in a given list. \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a python function to find the hamming distance between given two integers.", "code": "def hamming_Distance(n1,n2) : \n    x = n1 ^ n2  \n    setBits = 0\n    while (x > 0) : \n        setBits += x & 1\n        x >>= 1\n    return setBits  ", "task_id": 203, "test_setup_code": "", "test_list": ["assert hamming_Distance(4,8) == 2", "assert hamming_Distance(2,4) == 2", "assert hamming_Distance(1,2) == 2"], "challenge_test_list": [], "func_signature": "def hamming_Distance(n1,n2) : ", "func_body": "    x = n1 ^ n2  \n    setBits = 0\n    while (x > 0) : \n        setBits += x & 1\n        x >>= 1\n    return setBits  ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert hamming_Distance(4,8) == 2\n\n\"\"\" Write a python function to find the hamming distance between given two integers. \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.", "code": "def extract_missing(test_list, strt_val, stop_val):\n  res = []\n  for sub in test_list:\n    if sub[0] > strt_val:\n      res.append((strt_val, sub[0]))\n      strt_val = sub[1]\n    if strt_val < stop_val:\n      res.append((strt_val, stop_val))\n  return (res) ", "task_id": 110, "test_setup_code": "", "test_list": ["assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]", "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]", "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"], "challenge_test_list": [], "func_signature": "def extract_missing(test_list, strt_val, stop_val):", "func_body": "  res = []\n  for sub in test_list:\n    if sub[0] > strt_val:\n      res.append((strt_val, sub[0]))\n      strt_val = sub[1]\n    if strt_val < stop_val:\n      res.append((strt_val, stop_val))\n  return (res) ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\n\"\"\" Write a function to extract the ranges that are missing from the given list with the given start range and end range values. \"\"\""}, "evaluation": "subtle"}
{"metadata": {"text": "Write a python function to check whether a string has atleast one letter and one number.", "code": "def check_String(str): \n    flag_l = False\n    flag_n = False\n    for i in str: \n        if i.isalpha(): \n            flag_l = True  \n        if i.isdigit(): \n            flag_n = True\n    return flag_l and flag_n ", "task_id": 192, "test_setup_code": "", "test_list": ["assert check_String('thishasboth29') == True", "assert check_String('python') == False", "assert check_String ('string') == False"], "challenge_test_list": [], "func_signature": "def check_String(str): ", "func_body": "    flag_l = False\n    flag_n = False\n    for i in str: \n        if i.isalpha(): \n            flag_l = True  \n        if i.isdigit(): \n            flag_n = True\n    return flag_l and flag_n ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert check_String('thishasboth29') == True\n\n\"\"\" Write a python function to check whether a string has atleast one letter and one number. \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a function to remove all the tuples with length k.", "code": "def remove_tuples(test_list, K):\n  res = [ele for ele in test_list if len(ele) != K]\n  return (res) ", "task_id": 196, "test_setup_code": "", "test_list": ["assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]", "assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]", "assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]"], "challenge_test_list": [], "func_signature": "def remove_tuples(test_list, K):", "func_body": "  res = [ele for ele in test_list if len(ele) != K]\n  return (res) ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\n\"\"\" Write a function to remove all the tuples with length k. \"\"\""}, "evaluation": "same"}
{"metadata": {"text": "Write a function to find the perimeter of a square.", "code": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter", "task_id": 17, "test_setup_code": "", "test_list": ["assert square_perimeter(10)==40", "assert square_perimeter(5)==20", "assert square_perimeter(4)==16"], "challenge_test_list": [], "func_signature": "def square_perimeter(a):", "func_body": "  perimeter=4*a\n  return perimeter", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert square_perimeter(10)==40\n\n\"\"\" Write a function to find the perimeter of a square. \"\"\""}, "evaluation": "same"}
{"metadata": {"text": "Write a function to count all the distinct pairs having a difference of k in any array.", "code": "def count_pairs(arr, n, k):\n  count=0;\n  for i in range(0,n):\n    for j in range(i+1, n):\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\n        count += 1\n  return count", "task_id": 183, "test_setup_code": "", "test_list": ["assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2", "assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5", "assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3"], "challenge_test_list": [], "func_signature": "def count_pairs(arr, n, k):", "func_body": "  count=0;\n  for i in range(0,n):\n    for j in range(i+1, n):\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\n        count += 1\n  return count", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\n\"\"\" Write a function to count all the distinct pairs having a difference of k in any array. \"\"\""}, "evaluation": "unclear"}
{"metadata": {"text": "Write a function to find the inversions of tuple elements in the given tuple list.", "code": "def inversion_elements(test_tup):\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\n  return (res) ", "task_id": 205, "test_setup_code": "", "test_list": ["assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)", "assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)", "assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"], "challenge_test_list": [], "func_signature": "def inversion_elements(test_tup):", "func_body": "  res = tuple(list(map(lambda x: ~x, list(test_tup))))\n  return (res) ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\n\"\"\" Write a function to find the inversions of tuple elements in the given tuple list. \"\"\""}, "evaluation": "subtle"}
{"metadata": {"text": "Write a python function to find quotient of two numbers.", "code": "def find(n,m):  \n    q = n//m \n    return (q)", "task_id": 292, "test_setup_code": "", "test_list": ["assert find(10,3) == 3", "assert find(4,2) == 2", "assert find(20,5) == 4"], "challenge_test_list": [], "func_signature": "def find(n,m):  ", "func_body": "    q = n//m \n    return (q)", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert find(10,3) == 3\n\n\"\"\" Write a python function to find quotient of two numbers. \"\"\""}, "evaluation": "same"}
{"metadata": {"text": "Write a function to find the largest palindromic number in the given array.", "code": "def is_palindrome(n) : \n\tdivisor = 1\n\twhile (n / divisor >= 10) : \n\t\tdivisor *= 10\n\twhile (n != 0) : \n\t\tleading = n // divisor \n\t\ttrailing = n % 10\n\t\tif (leading != trailing) : \n\t\t\treturn False\n\t\tn = (n % divisor) // 10\n\t\tdivisor = divisor // 100\n\treturn True\ndef largest_palindrome(A, n) : \n\tA.sort() \n\tfor i in range(n - 1, -1, -1) : \n\t\tif (is_palindrome(A[i])) : \n\t\t\treturn A[i] \n\treturn -1", "task_id": 485, "test_setup_code": "", "test_list": ["assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545", "assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5", "assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9"], "challenge_test_list": [], "func_signature": "def is_palindrome(n) : ", "func_body": "\tdivisor = 1\n\twhile (n / divisor >= 10) : \n\t\tdivisor *= 10\n\twhile (n != 0) : \n\t\tleading = n // divisor \n\t\ttrailing = n % 10\n\t\tif (leading != trailing) : \n\t\t\treturn False\n\t\tn = (n % divisor) // 10\n\t\tdivisor = divisor // 100\n\treturn True\ndef largest_palindrome(A, n) : \n\tA.sort() \n\tfor i in range(n - 1, -1, -1) : \n\t\tif (is_palindrome(A[i])) : \n\t\t\treturn A[i] \n\treturn -1", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\n\"\"\" Write a function to find the largest palindromic number in the given array. \"\"\""}, "evaluation": "missing"}
{"metadata": {"text": "Write a function to extract the sum of alternate chains of tuples.", "code": "def sum_of_alternates(test_tuple):\n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple):\n    if idx % 2:\n      sum1 += ele\n    else:\n      sum2 += ele\n  return ((sum1),(sum2)) ", "task_id": 324, "test_setup_code": "", "test_list": ["assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)", "assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)", "assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)"], "challenge_test_list": [], "func_signature": "def sum_of_alternates(test_tuple):", "func_body": "  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple):\n    if idx % 2:\n      sum1 += ele\n    else:\n      sum2 += ele\n  return ((sum1),(sum2)) ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\n\"\"\" Write a function to extract the sum of alternate chains of tuples. \"\"\""}, "evaluation": "subtle"}
{"metadata": {"text": "Write a function to sort each sublist of strings in a given list of lists using lambda function.", "code": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\r", "task_id": 104, "test_setup_code": "", "test_list": ["assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]", "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"], "challenge_test_list": [], "func_signature": "def sort_sublists(input_list):", "func_body": "    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\r", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\n\"\"\" Write a function to sort each sublist of strings in a given list of lists using lambda function. \"\"\""}, "evaluation": "subtle"}
{"metadata": {"text": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.", "code": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst", "task_id": 118, "test_setup_code": "", "test_list": ["assert string_to_list(\"python programming\")==['python','programming']", "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']", "assert string_to_list(\"write a program\")==['write','a','program']"], "challenge_test_list": [], "func_signature": "def string_to_list(string): ", "func_body": "    lst = list(string.split(\" \")) \n    return lst", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert string_to_list(\"python programming\")==['python','programming']\n\n\"\"\" [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list. \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a function to find the maximum value in a given heterogeneous list.", "code": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)", "task_id": 294, "test_setup_code": "", "test_list": ["assert max_val(['Python', 3, 2, 4, 5, 'version'])==5", "assert max_val(['Python', 15, 20, 25])==25", "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"], "challenge_test_list": [], "func_signature": "def max_val(listval):", "func_body": "     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\n\"\"\" Write a function to find the maximum value in a given heterogeneous list. \"\"\""}, "evaluation": "ERROR: program failed to execute"}
{"metadata": {"text": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.", "code": "def bin_coff(n, r): \n\tval = 1\n\tif (r > (n - r)): \n\t\tr = (n - r) \n\tfor i in range(0, r): \n\t\tval *= (n - i) \n\t\tval //= (i + 1) \n\treturn val \ndef find_ways(M): \n\tn = M // 2\n\ta = bin_coff(2 * n, n) \n\tb = a // (n + 1) \n\treturn (b) ", "task_id": 348, "test_setup_code": "", "test_list": ["assert find_ways(4) == 2", "assert find_ways(6) == 5", "assert find_ways(8) == 14"], "challenge_test_list": [], "func_signature": "def bin_coff(n, r): ", "func_body": "\tval = 1\n\tif (r > (n - r)): \n\t\tr = (n - r) \n\tfor i in range(0, r): \n\t\tval *= (n - i) \n\t\tval //= (i + 1) \n\treturn val \ndef find_ways(M): \n\tn = M // 2\n\ta = bin_coff(2 * n, n) \n\tb = a // (n + 1) \n\treturn (b) ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert find_ways(4) == 2\n\n\"\"\" Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values. \"\"\""}, "evaluation": "missing"}
{"metadata": {"text": "Write a python function to find a pair with highest product from a given array of integers.", "code": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ", "task_id": 415, "test_setup_code": "", "test_list": ["assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)", "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)", "assert max_Product([1,2,3]) == (2,3)"], "challenge_test_list": [], "func_signature": "def max_Product(arr): ", "func_body": "    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\n\"\"\" Write a python function to find a pair with highest product from a given array of integers. \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "code": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]", "task_id": 392, "test_setup_code": "", "test_list": ["assert get_max_sum(60) == 106", "assert get_max_sum(10) == 12", "assert get_max_sum(2) == 2"], "challenge_test_list": [], "func_signature": "def get_max_sum (n):", "func_body": "\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert get_max_sum(60) == 106\n\n\"\"\" Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n). \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a python function to count the number of prime numbers less than a given non-negative number.", "code": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr", "task_id": 256, "test_setup_code": "", "test_list": ["assert count_Primes_nums(5) == 2", "assert count_Primes_nums(10) == 4", "assert count_Primes_nums(100) == 25"], "challenge_test_list": [], "func_signature": "def count_Primes_nums(n):", "func_body": "    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert count_Primes_nums(5) == 2\n\n\"\"\" Write a python function to count the number of prime numbers less than a given non-negative number. \"\"\""}, "evaluation": "ERROR: program failed to execute"}
{"metadata": {"text": "Write a function to split a given list into two parts where the length of the first part of the list is given.", "code": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]", "task_id": 262, "test_setup_code": "", "test_list": ["assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])", "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])", "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"], "challenge_test_list": [], "func_signature": "def split_two_parts(list1, L):", "func_body": "    return list1[:L], list1[L:]", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\n\"\"\" Write a function to split a given list into two parts where the length of the first part of the list is given. \"\"\""}, "evaluation": "same"}
{"metadata": {"text": "Write a function to sort the given array by using shell sort.", "code": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list", "task_id": 428, "test_setup_code": "", "test_list": ["assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]", "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]", "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"], "challenge_test_list": [], "func_signature": "def shell_sort(my_list):", "func_body": "    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\n\"\"\" Write a function to sort the given array by using shell sort. \"\"\""}, "evaluation": "same"}
{"metadata": {"text": "Write a function to compute the value of ncr%p.", "code": "def ncr_modp(n, r, p): \n    C = [0 for i in range(r+1)]   \n    C[0] = 1\n    for i in range(1, n+1): \n        for j in range(min(i, r), 0, -1): \n            C[j] = (C[j] + C[j-1]) % p   \n    return C[r] ", "task_id": 402, "test_setup_code": "", "test_list": ["assert ncr_modp(10,2,13)==6", "assert ncr_modp(15,12,43)==25", "assert ncr_modp(17,9,18)==10"], "challenge_test_list": [], "func_signature": "def ncr_modp(n, r, p): ", "func_body": "    C = [0 for i in range(r+1)]   \n    C[0] = 1\n    for i in range(1, n+1): \n        for j in range(min(i, r), 0, -1): \n            C[j] = (C[j] + C[j-1]) % p   \n    return C[r] ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert ncr_modp(10,2,13)==6\n\n\"\"\" Write a function to compute the value of ncr%p. \"\"\""}, "evaluation": "missing"}
{"metadata": {"text": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef heap_queue_smallest(nums,n):\n  smallest_nums = hq.nsmallest(n, nums)\n  return smallest_nums", "task_id": 496, "test_setup_code": "", "test_list": ["assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ", "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]", "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]"], "challenge_test_list": [], "func_signature": "import heapq as hq\ndef heap_queue_smallest(nums,n):", "func_body": "  smallest_nums = hq.nsmallest(n, nums)\n  return smallest_nums", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\n\"\"\" Write a function to find the smallest integers from a given list of numbers using heap queue algorithm. \"\"\""}, "evaluation": "same"}
{"metadata": {"text": "Write a function to find the perimeter of a pentagon.", "code": "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter", "task_id": 171, "test_setup_code": "", "test_list": ["assert perimeter_pentagon(5)==25", "assert perimeter_pentagon(10)==50", "assert perimeter_pentagon(15)==75"], "challenge_test_list": [], "func_signature": "import math\ndef perimeter_pentagon(a):", "func_body": "  perimeter=(5*a)\n  return perimeter", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert perimeter_pentagon(5)==25\n\n\"\"\" Write a function to find the perimeter of a pentagon. \"\"\""}, "evaluation": "extra"}
{"metadata": {"text": "Write a function to check whether an element exists within a tuple.", "code": "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False", "task_id": 405, "test_setup_code": "", "test_list": ["assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True", "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False", "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"], "challenge_test_list": [], "func_signature": "def check_tuplex(tuplex,tuple1): ", "func_body": "  if tuple1 in tuplex:\n    return True\n  else:\n     return False", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\n\"\"\" Write a function to check whether an element exists within a tuple. \"\"\""}, "evaluation": "same"}
{"metadata": {"text": "Write a python function to remove all digits from a list of strings.", "code": "import re  \ndef remove(list): \n    pattern = '[0-9]'\n    list = [re.sub(pattern, '', i) for i in list] \n    return list", "task_id": 27, "test_setup_code": "", "test_list": ["assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']", "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']", "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"], "challenge_test_list": [], "func_signature": "import re  \ndef remove(list): ", "func_body": "    pattern = '[0-9]'\n    list = [re.sub(pattern, '', i) for i in list] \n    return list", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\n\"\"\" Write a python function to remove all digits from a list of strings. \"\"\""}, "evaluation": "subtle"}
{"metadata": {"text": "Write a python function to check if the elements of a given list are unique or not.", "code": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True", "task_id": 281, "test_setup_code": "", "test_list": ["assert all_unique([1,2,3]) == True", "assert all_unique([1,2,1,2]) == False", "assert all_unique([1,2,3,4,5]) == True"], "challenge_test_list": [], "func_signature": "def all_unique(test_list):", "func_body": "    if len(test_list) > len(set(test_list)):\n        return False\n    return True", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert all_unique([1,2,3]) == True\n\n\"\"\" Write a python function to check if the elements of a given list are unique or not. \"\"\""}, "evaluation": "different"}
{"metadata": {"text": "Write a function to find uppercase, lowercase, special character and numeric values using regex.", "code": "import re\ndef find_character(string):\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \n  lowercase_characters = re.findall(r\"[a-z]\", string) \n  numerical_characters = re.findall(r\"[0-9]\", string) \n  special_characters = re.findall(r\"[, .!?]\", string) \n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters", "task_id": 182, "test_setup_code": "", "test_list": ["assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])", "assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])", "assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"], "challenge_test_list": [], "func_signature": "import re\ndef find_character(string):", "func_body": "  uppercase_characters = re.findall(r\"[A-Z]\", string) \n  lowercase_characters = re.findall(r\"[a-z]\", string) \n  numerical_characters = re.findall(r\"[0-9]\", string) \n  special_characters = re.findall(r\"[, .!?]\", string) \n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\n\"\"\" Write a function to find uppercase, lowercase, special character and numeric values using regex. \"\"\""}, "evaluation": "subtle"}
{"metadata": {"text": "Write a python function to count the number of rectangles in a circle of radius r.", "code": "def count_Rectangles(radius):  \n    rectangles = 0 \n    diameter = 2 * radius \n    diameterSquare = diameter * diameter \n    for a in range(1, 2 * radius):  \n        for b in range(1, 2 * radius): \n            diagnalLengthSquare = (a * a +  b * b)  \n            if (diagnalLengthSquare <= diameterSquare) : \n                rectangles += 1\n    return rectangles ", "task_id": 355, "test_setup_code": "", "test_list": ["assert count_Rectangles(2) == 8", "assert count_Rectangles(1) == 1", "assert count_Rectangles(0) == 0"], "challenge_test_list": [], "func_signature": "def count_Rectangles(radius):  ", "func_body": "    rectangles = 0 \n    diameter = 2 * radius \n    diameterSquare = diameter * diameter \n    for a in range(1, 2 * radius):  \n        for b in range(1, 2 * radius): \n            diagnalLengthSquare = (a * a +  b * b)  \n            if (diagnalLengthSquare <= diameterSquare) : \n                rectangles += 1\n    return rectangles ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert count_Rectangles(2) == 8\n\n\"\"\" Write a python function to count the number of rectangles in a circle of radius r. \"\"\""}, "evaluation": "unclear"}
{"metadata": {"text": "Write a python function to find the difference between sum of even and odd digits.", "code": "def is_Diff(n): \n    return (n % 11 == 0) ", "task_id": 77, "test_setup_code": "", "test_list": ["assert is_Diff (12345) == False", "assert is_Diff(1212112) == True", "assert is_Diff(1212) == False"], "challenge_test_list": [], "func_signature": "def is_Diff(n): ", "func_body": "    return (n % 11 == 0) ", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_Diff (12345) == False\n\n\"\"\" Write a python function to find the difference between sum of even and odd digits. \"\"\""}, "evaluation": "unclear"}
{"metadata": {"text": "Write a function to find all possible combinations of the elements of a given list.", "code": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result", "task_id": 462, "test_setup_code": "", "test_list": ["assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]", "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]", "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"], "challenge_test_list": [], "func_signature": "def combinations_list(list1):", "func_body": "    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\n\"\"\" Write a function to find all possible combinations of the elements of a given list. \"\"\""}, "evaluation": "ERROR: program failed to execute"}
{"metadata": {"text": "Write a python function to remove odd numbers from a given list.", "code": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l", "task_id": 412, "test_setup_code": "", "test_list": ["assert remove_odd([1,2,3]) == [2]", "assert remove_odd([2,4,6]) == [2,4,6]", "assert remove_odd([10,20,3]) == [10,20]"], "challenge_test_list": [], "func_signature": "def remove_odd(l):", "func_body": "    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l", "pad_token_id": 0, "prompt": "## Given the natural language description and example assertion(s), write a python function.\n\n### Task Start ###\n# These are the assertions for your function:\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n\"\"\" Write a function to find the similar elements from the given two tuple lists. \"\"\"\ndef similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert is_not_prime(2) == False\n\n\"\"\" Write a python function to identify non-prime numbers. \"\"\"\nimport math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n\"\"\" Write a function to find the largest integers from a given list of numbers using heap queue algorithm. \"\"\"\nimport heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n### Task End ###\n\n### Task Start ###\n# These are the assertions for your function:\nassert remove_odd([1,2,3]) == [2]\n\n\"\"\" Write a python function to remove odd numbers from a given list. \"\"\""}, "evaluation": "different"}
