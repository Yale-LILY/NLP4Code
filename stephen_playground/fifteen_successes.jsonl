{"example": {"db_id": "flight_4", "query": "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10", "query_toks": ["SELECT", "T1.name", ",", "T2.alid", "FROM", "airlines", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.alid", "=", "T2.alid", "GROUP", "BY", "T2.alid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "10"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "alid", "from", "airlines", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "alid", "=", "t2", ".", "alid", "group", "by", "t2", ".", "alid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the names of the top 10 airlines that operate the most number of routes.", "question_toks": ["Find", "the", "names", "of", "the", "top", "10", "airlines", "that", "operate", "the", "most", "number", "of", "routes", "."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 6, false], null]]}, "select": [false, [[0, [0, [0, 19, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 10, "intersect": null, "union": null, "except": null}, "db_table_headers": {"routes": ["rid", "dst_apid", "dst_ap", "src_apid", "src_ap", "alid", "airline", "codeshare"], "airports": ["apid", "name", "city", "country", "x", "y", "elevation", "iata", "icao"], "airlines": ["alid", "name", "iata", "icao", "callsign", "country", "active"]}, "answer": [["Ryanair", 4296], ["American Airlines", 24], ["United Airlines", 5209], ["Delta Air Lines", 2009], ["US Airways", 5265], ["China Southern Airlines", 1767], ["China Eastern Airlines", 1758], ["Air China", 751], ["Southwest Airlines", 4547], ["easyJet", 2297]]}, "program_result_list": [["t1 = pd.merge(airlines, routes, on='alid')\nt2 = t1.groupby('alid').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(10).to_frame().reset_index()\nt4 = pd.merge(t3, airlines, on='alid')\nanswer = t4[['name_x', 'alid']]", false], ["t1 = pd.merge(airlines, routes, left_on='alid', right_on='alid')\nt2 = t1.groupby('alid').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(10).to_frame().reset_index()\nt4 = pd.merge(t3, airlines, left_on='alid', right_on='alid')\nanswer = t4[['name_y', 'alid']]", false], ["t1 = pd.merge(airlines, routes, on='alid')\nt2 = t1.groupby('alid').size().rename('count').sort_values(ascending=False)\nt3 = t2.head(10)\nt4 = t3.reset_index()\nt5 = pd.merge(t4, airlines, left_on='alid', right_on='alid')\nanswer = t5['name']", false], ["t1 = pd.merge(airlines, routes, on='alid')\nt2 = t1.groupby('alid').size().rename('count').sort_values(ascending=False).head(10).to_frame().reset_index()\nt3 = pd.merge(t2, airlines, left_on='alid', right_on='alid')\nanswer = t3['name_y']", false], ["t1 = pd.merge(airlines, routes, on='alid')\nt2 = t1.groupby(['alid', 'name'])['alid'].count().rename('count').sort_values(ascending=False).head(10).to_frame().reset_index()\nanswer = t2['name']", false], ["t1 = pd.merge(airlines, routes, left_on='alid', right_on='alid')\nt2 = t1.groupby('alid').size().rename('count').to_frame().reset_index()\nt3 = pd.merge(airlines, t2, left_on='alid', right_on='alid')\nanswer = t3.sort_values('count', ascending=False).head(10)[['name', 'alid']]", true], ["t1 = pd.merge(airlines, routes, left_on='alid', right_on='alid')\nt2 = t1.groupby('alid').size().rename('count').to_frame().reset_index()\nt3 = pd.merge(t2, airlines, left_on='alid', right_on='alid')\nanswer = t3[['name_y', 'alid']].sort_values('count', ascending=False).head(10)", false], ["t1 = pd.merge(airlines, routes, left_on='alid', right_on='alid')\nt2 = t1.groupby('alid').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(10).to_frame().reset_index()\nt4 = pd.merge(t3, airlines, left_on='alid', right_on='alid')\nanswer = t4[['name', 'alid']]", true], ["t1 = pd.merge(airlines, routes, left_on='alid', right_on='alid')\nt2 = t1.groupby('alid')['alid'].count()\nt3 = t2.sort_values(ascending=False).head(10).to_frame().reset_index()\nt4 = pd.merge(t3, airlines, left_on='alid', right_on='alid')\nanswer = t4[['name_x', 'alid']]", false], ["t1 = pd.merge(airlines, routes, left_on='alid', right_on='alid')\nt2 = t1.groupby(['alid', 'name']).size().rename('count')\nanswer = t2.sort_values(ascending=False).head(10).to_frame().reset_index()", false], ["t1 = pd.merge(routes, airlines, left_on='alid', right_on='alid')\nt2 = t1.groupby('alid').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(10).to_frame().reset_index()\nanswer = pd.merge(t3, airlines, left_on='alid', right_on='alid')[['name', 'alid']]", true], ["t1 = pd.merge(airlines, routes, left_on='alid', right_on='alid')\nt2 = t1.groupby('alid').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(10).to_frame().reset_index()\nt4 = pd.merge(t3, airlines, left_on='alid', right_on='alid')\nanswer = t4[['name_x', 'alid']]", false], ["t1 = pd.merge(airlines, routes, on='alid')\nt2 = t1.groupby(['alid', 'name']).size().rename('count')\nanswer = t2.sort_values(ascending=False).head(10).to_frame().reset_index()\nanswer = answer[['name', 'alid']]", true], ["t1 = pd.merge(airlines, routes, on='alid')\nt2 = t1.groupby(['alid', 'name']).size().rename('count')\nt3 = t2.sort_values(ascending=False).head(10).to_frame().reset_index()\nanswer = t3[['name', 'alid']]", true], ["t1 = pd.merge(airlines, routes, left_on='alid', right_on='alid')\nt2 = t1.groupby('alid').size().rename('count')\nt3 = pd.merge(t2.to_frame().reset_index(), airlines, left_on='alid', right_on='alid')\nanswer = t3[['name', 'alid']].sort_values('count', ascending=False).head(10)", false], ["t1 = pd.merge(airlines, routes, on='alid')\nt2 = t1.groupby('alid').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(10).to_frame().reset_index()\nt4 = pd.merge(t3, airlines, on='alid')\nanswer = t4[['name_x', 'alid']]", false], ["t1 = pd.merge(airlines, routes, on='alid')\nt2 = t1.groupby('alid').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(10).to_frame().reset_index()\nt4 = pd.merge(t3, airlines, on='alid')\nanswer = t4['name']", false], ["t1 = pd.merge(airlines, routes, left_on='alid', right_on='alid')\nt2 = t1.groupby(['alid', 'name']).size().rename('count').to_frame().reset_index()\nanswer = t2.sort_values(by='count', ascending=False).head(10)[['name', 'alid']]", true], ["t1 = pd.merge(airlines, routes, left_on='alid', right_on='alid')\nt2 = t1.groupby(['name', 'alid']).size().rename('count')\nanswer = t2.sort_values(ascending=False).head(10).to_frame().reset_index()", false], ["t1 = pd.merge(airlines, routes, left_on='alid', right_on='alid')\nt2 = t1.groupby('alid').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(10).to_frame().reset_index()\nt4 = pd.merge(t3, airlines, left_on='alid', right_on='alid')\nanswer = t4[['name_x', 'alid']]", false]]}
{"example": {"db_id": "twitter_1", "query": "SELECT count(*) FROM follows GROUP BY f1", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "follows", "GROUP", "BY", "f1"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "follows", "group", "by", "value"], "question": "Find the number of followers for each user.", "question_toks": ["Find", "the", "number", "of", "followers", "for", "each", "user", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"follows": ["f1", "f2"], "tweets": ["id", "uid", "text", "createdate"], "user_profiles": ["uid", "name", "email", "partitionid", "followers"]}, "answer": [[3], [1], [2], [2], [1]]}, "program_result_list": [["answer = follows.groupby('f1').size().rename('count').to_frame().reset_index()", false], ["t1 = follows.groupby('f1').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["t1 = follows.groupby('f1').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["t1 = follows.groupby('f1').size().rename('count').to_frame().reset_index()\nanswer = t1", false], ["t1 = follows.groupby('f1').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["answer = follows.groupby('f1').size().rename('count')", true], ["t1 = follows.groupby('f1').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["t1 = follows.groupby('f1').size().rename('count').to_frame().reset_index()\nanswer = t1", false], ["t1 = follows.groupby('f1').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["t1 = follows.groupby('f1').size().rename('count')\nanswer = t1.to_frame()", true], ["t1 = follows.groupby('f1').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["t1 = follows.groupby('f1').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["t1 = follows.groupby('f1').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["t1 = follows.groupby('f1').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["t1 = follows.groupby('f1').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["t1 = follows.groupby('f1').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["t1 = follows.groupby('f1').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["t1 = follows.groupby('f1').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["t1 = follows.groupby('f1').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["t1 = follows.groupby('f1').size().rename('count')\nanswer = t1.to_frame().reset_index()", false]]}
{"example": {"db_id": "restaurant_1", "query": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major != 600 AND Sex = 'F';", "query_toks": ["SELECT", "Fname", ",", "Lname", "FROM", "Student", "WHERE", "Age", ">", "18", "AND", "Major", "!", "=", "600", "AND", "Sex", "=", "'F", "'", ";"], "query_toks_no_value": ["select", "fname", ",", "lname", "from", "student", "where", "age", ">", "value", "and", "major", "!", "=", "value", "and", "sex", "=", "value"], "question": "List all female students age is older than 18 who is not majoring in 600. List students' first name and last name.", "question_toks": ["List", "all", "female", "students", "age", "is", "older", "than", "18", "who", "is", "not", "majoring", "in", "600", ".", "List", "students", "'", "first", "name", "and", "last", "name", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], 18.0, null], "and", [false, 7, [0, [0, 6, false], null], 600.0, null], "and", [false, 2, [0, [0, 5, false], null], "\"F\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Student": ["StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code"], "Restaurant": ["ResID", "ResName", "Address", "Rating"], "Type_Of_Restaurant": ["ResID", "ResTypeID"], "Restaurant_Type": ["ResTypeID", "ResTypeName", "ResTypeDescription"], "Visits_Restaurant": ["StuID", "ResID", "Time", "Spent"]}, "answer": [["Lisa", "Cheng"], ["Sarah", "Smith"], ["Sarah", "Schmidt"]]}, "program_result_list": [["answer = Student[(Student['age'] > 18) & (Student['major'] != 600) & (Student['sex'] == 'f')][['fname', 'lname']]", false], ["answer = Student[(Student['age'] > 18) & (Student['major'] != 600) & (Student['sex'] == 'f')][['fname', 'lname']]", false], ["t1 = Student[Student['age'] > 18]\nt2 = t1[t1['major'] != 600]\nt3 = t2[t2['sex'] == 'f']\nanswer = t3[['fname', 'lname']]", false], ["t1 = Student[(Student['age'] > 18) & (Student['major'] != 600) & (Student['sex'] == 'f')]\nanswer = t1[['fname', 'lname']]", false], ["answer = Student[(Student['age'] > 18) & (Student['major'] != 600) & (Student['sex'] == 'f')][['fname', 'lname']]", false], ["answer = Student[(Student['age'] > 18) & (Student['major'] != 600) & (Student['sex'] == 'f')][['fname', 'lname']]", false], ["answer = Student[(Student['age'] > 18) & (Student['major'] != 600) & (Student['sex'] == 'f')][['fname', 'lname']]", false], ["answer = Student[(Student['age'] > 18) & (Student['major'] != 600) & (Student['sex'] == 'f')][['fname', 'lname']]", false], ["t1 = Student[Student['age'] > 18]\nt2 = t1[t1['major'] != 600]\nt3 = t2[t2['sex'] == 'f']\nanswer = t3[['fname', 'lname']]", false], ["answer = Student[(Student['age'] > 18) & (Student['major'] != 600) & (Student['sex'] == 'f')][['fname', 'lname']]", false], ["t1 = Student[Student['age'] > 18]\nt2 = t1[t1['major'] != 600]\nt3 = t2[t2['sex'] == 'f']\nanswer = t3[['fname', 'lname']]", false], ["answer = Student[(Student['age'] > 18) & (Student['major'] != 600) & (Student['sex'] == 'f')][['fname', 'lname']]", false], ["t1 = Student[(Student['age'] > 18) & (Student['major'] != 600) & (Student['sex'] == 'f')]\nanswer = t1[['fname', 'lname']]", false], ["answer = Student[(Student['age'] > 18) & (Student['major'] != 600) & (Student['sex'] == 'F')][['fname', 'lname']]", true], ["answer = Student[(Student['age'] > 18) & (Student['major'] != 600) & (Student['sex'] == 'f')][['fname', 'lname']]", false], ["t1 = Student[Student['age'] > 18]\nt2 = t1[t1['major'] != 600]\nt3 = t2[t2['sex'] == 'f']\nanswer = t3[['fname', 'lname']]", false], ["answer = Student[(Student['major'] != 600) & (Student['sex'] == 'f') & (Student['age'] > 18)][['fname', 'lname']]", false], ["t1 = Student[Student['age'] > 18]\nt2 = t1[t1['major'] != 600]\nt3 = t2[t2['sex'] == 'f']\nanswer = t3[['fname', 'lname']]", false], ["answer = Student[(Student['age'] > 18) & (Student['major'] != 600) & (Student['sex'] == 'f')][['fname', 'lname']]", false], ["t1 = Student[Student['age'] > 18]\nt2 = t1[t1['major'] != 600]\nt3 = t2[t2['sex'] == 'F']\nanswer = t3[['fname', 'lname']]", true]]}
{"example": {"db_id": "hospital_1", "query": "SELECT name FROM procedures ORDER BY cost LIMIT 3", "query_toks": ["SELECT", "name", "FROM", "procedures", "ORDER", "BY", "cost", "LIMIT", "3"], "query_toks_no_value": ["select", "name", "from", "procedures", "order", "by", "cost", "limit", "value"], "question": "What are the three most costly procedures?", "question_toks": ["What", "are", "the", "three", "most", "costly", "procedures", "?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 13, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Physician": ["EmployeeID", "Name", "Position", "SSN"], "Department": ["DepartmentID", "Name", "Head"], "Affiliated_With": ["Physician", "Department", "PrimaryAffiliation"], "Procedures": ["Code", "Name", "Cost"], "Trained_In": ["Physician", "Treatment", "CertificationDate", "CertificationExpires"], "Patient": ["SSN", "Name", "Address", "Phone", "InsuranceID", "PCP"], "Nurse": ["EmployeeID", "Name", "Position", "Registered", "SSN"], "Appointment": ["AppointmentID", "Patient", "PrepNurse", "Physician", "Start", "End", "ExaminationRoom"], "Medication": ["Code", "Name", "Brand", "Description"], "Prescribes": ["Physician", "Patient", "Medication", "Date", "Appointment", "Dose"], "Block": ["BlockFloor", "BlockCode"], "Room": ["RoomNumber", "RoomType", "BlockFloor", "BlockCode", "Unavailable"], "On_Call": ["Nurse", "BlockFloor", "BlockCode", "OnCallStart", "OnCallEnd"], "Stay": ["StayID", "Patient", "Room", "StayStart", "StayEnd"], "Undergoes": ["Patient", "Procedures", "Stay", "DateUndergoes", "Physician", "AssistingNurse"]}, "answer": [["Follicular Demiectomy"], ["Reverse Rhinopodoplasty"], ["Obtuse Pyloric Recombobulation"]]}, "program_result_list": [["answer = Procedures.sort_values('cost', ascending=False).head(3)['name']", false], ["t1 = Procedures.sort_values(by='cost', ascending=False).head(3).reset_index()\nanswer = t1['name']", false], ["t1 = Procedures.sort_values(by='cost', ascending=False)\nanswer = t1['name'].head(3)", false], ["t1 = Procedures.sort_values(by='cost', ascending=False).head(3).reset_index()\nanswer = t1['name']", false], ["t1 = Procedures.sort_values('cost', ascending=False).head(3)\nanswer = t1['name']", false], ["t1 = Procedures.sort_values(by='cost', ascending=False)\nanswer = t1['name'].head(3)", false], ["answer = Procedures.sort_values('cost', ascending=False).head(3)['name']", false], ["t1 = Procedures.sort_values('cost', ascending=False).head(3)\nanswer = t1['name']", false], ["answer = Procedures.sort_values('cost', ascending=False).head(3)['name']", false], ["answer = Procedures.sort_values(by='cost', ascending=False).head(3)['name']", false], ["t1 = Procedures.sort_values(by='cost', ascending=False)\nanswer = t1['name'].head(3)", false], ["answer = Procedures.sort_values('cost', ascending=False).head(3)['name']", false], ["t1 = Procedures.sort_values(by='cost', ascending=False).head(3)\nanswer = t1['name']", false], ["t1 = Procedures.nlargest(3, 'cost')\nanswer = t1['name']", false], ["t1 = Procedures.sort_values('cost', ascending=False).head(3).reset_index()\nanswer = t1['name']", false], ["t1 = Procedures.sort_values('cost').head(3)\nanswer = t1['name']", true], ["answer = Procedures.sort_values('cost', ascending=False).head(3)['name']", false], ["t1 = Procedures.sort_values('cost', ascending=False).head(3)\nanswer = t1['name']", false], ["t1 = Procedures.copy()\nt1.sort_values('cost', ascending=False, inplace=True)\nanswer = t1['name'].head(3)", false], ["answer = Procedures.sort_values(by='cost').head(3)", false]]}
{"example": {"db_id": "college_3", "query": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8", "query_toks": ["SELECT", "DISTINCT", "T3.Fname", "FROM", "ENROLLED_IN", "AS", "T1", "JOIN", "GRADECONVERSION", "AS", "T2", "JOIN", "STUDENT", "AS", "T3", "ON", "T1.Grade", "=", "T2.lettergrade", "AND", "T1.StuID", "=", "T3.StuID", "WHERE", "T2.gradepoint", ">", "=", "3.8"], "query_toks_no_value": ["select", "distinct", "t3", ".", "fname", "from", "enrolled_in", "as", "t1", "join", "gradeconversion", "as", "t2", "join", "student", "as", "t3", "on", "t1", ".", "grade", "=", "t2", ".", "lettergrade", "and", "t1", ".", "stuid", "=", "t3", ".", "stuid", "where", "t2", ".", "gradepoint", ">", "=", "value"], "question": "Find the distinct student first names of all students that have grade point at least 3.8 in one course.", "question_toks": ["Find", "the", "distinct", "student", "first", "names", "of", "all", "students", "that", "have", "grade", "point", "at", "least", "3.8", "in", "one", "course", "."], "sql": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 37, false], null], [0, 38, false], null], "and", [false, 2, [0, [0, 35, false], null], [0, 1, false], null]]}, "select": [true, [[0, [0, [0, 3, false], null]]]], "where": [[false, 5, [0, [0, 39, false], null], 3.8, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Student": ["StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code"], "Faculty": ["FacID", "Lname", "Fname", "Rank", "Sex", "Phone", "Room", "Building"], "Department": ["DNO", "Division", "DName", "Room", "Building", "DPhone"], "Member_of": ["FacID", "DNO", "Appt_Type"], "Course": ["CID", "CName", "Credits", "Instructor", "Days", "Hours", "DNO"], "Minor_in": ["StuID", "DNO"], "Enrolled_in": ["StuID", "CID", "Grade"], "Gradeconversion": ["lettergrade", "gradepoint"]}, "answer": [["Linda"], ["Tracy"], ["Dinesh"], ["Paul"], ["Andy"], ["Lisa"], ["Jandy"], ["Eric"], ["Derek"], ["David"], ["Steven"], ["Charles"], ["Susan"], ["Mark"], ["Bruce"], ["Michael"], ["Arthur"], ["Ian"], ["George"], ["Stacy"], ["Jun"], ["Sarah"], ["William"]]}, "program_result_list": [["t1 = pd.merge(Enrolled_in, Gradeconversion, left_on='grade', right_on='lettergrade')\nt2 = pd.merge(t1, Student, left_on='stuid', right_on='stuid')\nanswer = t2[t2['gradepoint'] >= 3.8]['fname'].unique()", false], ["t1 = pd.merge(Enrolled_in, Gradeconversion, left_on='grade', right_on='lettergrade')\nt2 = pd.merge(Student, t1, left_on='stuid', right_on='stuid')\nt3 = t2[t2['gradepoint'] >= 3.8]\nanswer = t3['fname'].unique()", true], ["t1 = pd.merge(Enrolled_in, Gradeconversion, left_on='grade', right_on='lettergrade')\nt2 = t1[t1['gradepoint'] >= 3.8]\nt3 = pd.merge(t2, Student, left_on='stuid', right_on='stuid')\nanswer = t3['fname'].unique()", false], ["t1 = pd.merge(Enrolled_in, Gradeconversion, left_on='grade', right_on='lettergrade')\nt2 = pd.merge(t1, Student, left_on='stuid', right_on='stuid')\nt3 = t2[t2['gradepoint'] >= 3.8]\nanswer = t3['fname'].unique()", false], ["t1 = pd.merge(Enrolled_in, Gradeconversion, left_on='grade', right_on='lettergrade')\nt2 = pd.merge(t1, Student, left_on='stuid', right_on='stuid')\nt3 = t2[t2['gradepoint'] >= 3.8]\nanswer = t3['fname'].unique()", false], ["t1 = pd.merge(Enrolled_in, Gradeconversion, left_on='grade', right_on='lettergrade')\nt2 = pd.merge(t1, Student, left_on='stuid', right_on='stuid')\nt3 = t2[t2['gradepoint'] >= 3.8]\nanswer = t3['fname'].unique()", false], ["t1 = pd.merge(Enrolled_in, Gradeconversion, on='grade')\nt2 = pd.merge(t1, Student, on='stuid')\nt3 = t2[t2['gradepoint'] >= 3.8]\nanswer = t3['fname'].unique()", false], ["t1 = pd.merge(Enrolled_in, Gradeconversion, left_on='grade', right_on='lettergrade')\nt2 = pd.merge(t1, Student, left_on='stuid', right_on='stuid')\nt3 = t2[t2['gradepoint'] >= 3.8]\nanswer = t3['fname'].unique()", false], ["t1 = pd.merge(Enrolled_in, Gradeconversion, on='grade')\nt2 = pd.merge(t1, Student, on='stuid')\nanswer = t2[t2['gradepoint'] >= 3.8]['fname'].unique()", false], ["t1 = pd.merge(Enrolled_in, Gradeconversion, left_on='grade', right_on='lettergrade')\nt2 = pd.merge(t1, Student, left_on='stuid', right_on='stuid')\nt3 = t2[t2['gradepoint'] >= 3.8]\nanswer = t3['fname'].unique()", false], ["t1 = pd.merge(Enrolled_in, Gradeconversion, left_on='grade', right_on='lettergrade')\nt2 = pd.merge(t1, Student, left_on='stuid', right_on='stuid')\nt3 = t2[t2['gradepoint'] >= 3.8]\nanswer = t3['fname'].unique()", false], ["t1 = pd.merge(Enrolled_in, Gradeconversion, left_on='grade', right_on='lettergrade')\nt2 = pd.merge(t1, Student, left_on='stuid', right_on='stuid')\nt3 = t2[t2['gradepoint'] >= 3.8]\nanswer = t3['fname'].unique()", false], ["t1 = pd.merge(Enrolled_in, Gradeconversion, left_on='grade', right_on='lettergrade')\nt2 = pd.merge(t1, Student, left_on='stuid', right_on='stuid')\nt3 = t2[t2['gradepoint'] >= 3.8]\nanswer = t3['fname'].unique()", false], ["t1 = pd.merge(Enrolled_in, Gradeconversion, left_on='grade', right_on='lettergrade')\nt2 = pd.merge(t1, Student, left_on='stuid', right_on='stuid')\nt3 = t2[t2['gradepoint'] >= 3.8]\nanswer = t3['fname'].unique()", false], ["t1 = pd.merge(Enrolled_in, Gradeconversion, left_on='grade', right_on='lettergrade')\nt2 = pd.merge(t1, Student, left_on='stuid', right_on='stuid')\nanswer = t2[t2['gradepoint'] >= 3.8]['fname'].unique()", false], ["t1 = pd.merge(Enrolled_in, Gradeconversion, left_on='grade', right_on='lettergrade')\nt2 = pd.merge(t1, Student, left_on='stuid', right_on='stuid')\nanswer = t2[t2['gradepoint'] >= 3.8]['fname'].unique()", false], ["t1 = pd.merge(Enrolled_in, Gradeconversion, left_on='grade', right_on='lettergrade')\nt2 = pd.merge(t1, Student, left_on='stuid', right_on='stuid')\nt3 = t2[t2['gradepoint'] >= 3.8]\nanswer = t3['fname'].unique()", false], ["t1 = pd.merge(Enrolled_in, Gradeconversion, left_on='grade', right_on='lettergrade')\nt2 = pd.merge(t1, Student, left_on='stuid', right_on='stuid')\nt3 = t2[t2['gradepoint'] >= 3.8]\nanswer = t3['fname'].unique()", false], ["t1 = pd.merge(Enrolled_in, Gradeconversion, left_on='grade', right_on='lettergrade', how='outer')\nt2 = pd.merge(t1, Student, left_on='stuid', right_on='stuid', how='outer')\nt3 = t2[t2['gradepoint'] >= 3.8]\nanswer = t3['fname'].unique()", false], ["t1 = pd.merge(Enrolled_in, Gradeconversion, left_on='grade', right_on='lettergrade')\nt2 = pd.merge(t1, Student, left_on='stuid', right_on='stuid')\nt3 = t2[t2['gradepoint'] >= 3.8]\nanswer = t3['fname'].unique()", false]]}
{"example": {"db_id": "aircraft", "query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)", "query_toks": ["SELECT", "Aircraft", "FROM", "aircraft", "WHERE", "Aircraft_ID", "NOT", "IN", "(", "SELECT", "Winning_Aircraft", "FROM", "MATCH", ")"], "query_toks_no_value": ["select", "aircraft", "from", "aircraft", "where", "aircraft_id", "not", "in", "(", "select", "winning_aircraft", "from", "match", ")"], "question": "List the names of aircrafts and that did not win any match.", "question_toks": ["List", "the", "names", "of", "aircrafts", "and", "that", "did", "not", "win", "any", "match", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[true, 8, [0, [0, 4, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 16, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"pilot": ["Pilot_Id", "Name", "Age"], "aircraft": ["Aircraft_ID", "Aircraft", "Description", "Max_Gross_Weight", "Total_disk_area", "Max_disk_Loading"], "match": ["Round", "Location", "Country", "Date", "Fastest_Qualifying", "Winning_Pilot", "Winning_Aircraft"], "airport": ["Airport_ID", "Airport_Name", "Total_Passengers", "%_Change_2007", "International_Passengers", "Domestic_Passengers", "Transit_Passengers", "Aircraft_Movements", "Freight_Metric_Tonnes"], "airport_aircraft": ["ID", "Airport_ID", "Aircraft_ID"]}, "answer": []}, "program_result_list": [["t1 = pd.merge(aircraft, match, on='aircraft_id', how='left')\nt2 = t1[t1['winning_aircraft'].isnull()]['aircraft']\nanswer = t2", false], ["t1 = match['winning_aircraft'].unique()\nt2 = aircraft[~aircraft['aircraft_id'].isin(t1)]\nanswer = t2['aircraft']", false], ["t1 = aircraft[~aircraft['aircraft_id'].isin(match['winning_aircraft'])]\nanswer = t1['aircraft']", false], ["t1 = match[['winning_aircraft']]\nt2 = aircraft[['aircraft_id', 'aircraft']]\nt3 = pd.merge(t1, t2, left_on='winning_aircraft', right_on='aircraft_id')\nt4 = aircraft[['aircraft']]\nanswer = t4[~t4.aircraft.isin(t3.aircraft)]", false], ["t1 = match['winning_aircraft'].unique()\nanswer = aircraft[~aircraft['aircraft_id'].isin(t1)]['aircraft']", false], ["t1 = match['winning_aircraft'].unique()\nt2 = aircraft[~aircraft['aircraft_id'].isin(t1)]\nanswer = t2['aircraft']", false], ["t1 = aircraft[aircraft['aircraft_id'].isin(match['winning_aircraft']) == False]\nanswer = t1['aircraft']", false], ["t1 = match[['winning_aircraft']].drop_duplicates()\nt2 = pd.merge(aircraft, t1, left_on='aircraft_id', right_on='winning_aircraft', how='left')\nanswer = t2[t2['winning_aircraft'].isnull()]['aircraft']", false], ["t1 = match[['winning_aircraft']]\nt2 = aircraft[~aircraft['aircraft_id'].isin(t1['winning_aircraft'])]\nanswer = t2['aircraft']", false], ["t1 = match[['winning_aircraft']]\nt2 = aircraft[~aircraft['aircraft_id'].isin(t1)]\nanswer = t2['aircraft']", false], ["t1 = match.groupby('winning_aircraft').size().rename('count')\nt2 = t1[t1 == 0].to_frame().reset_index()\nt3 = pd.merge(aircraft, t2, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t3['aircraft']", true], ["t1 = match[['winning_aircraft']]\nt2 = pd.merge(t1, aircraft, left_on='winning_aircraft', right_on='aircraft_id', how='outer')\nt3 = t2[['aircraft', 'aircraft_id']].drop_duplicates()\nt4 = aircraft.merge(t3, how='left', on='aircraft_id')\nanswer = t4[t4['aircraft_id_y'].isna()][['aircraft']]", false], ["t1 = match['winning_aircraft'].unique()\nt2 = aircraft[~aircraft['aircraft_id'].isin(t1)]\nanswer = t2['aircraft']", false], ["t1 = match['winning_aircraft'].unique()\nt2 = aircraft[~aircraft['aircraft_id'].isin(t1)]\nanswer = t2['aircraft']", false], ["t1 = match['winning_aircraft'].unique()\nt2 = aircraft[~aircraft['aircraft_id'].isin(t1)]\nanswer = t2['aircraft']", false], ["t1 = match['winning_aircraft'].unique()\nt2 = aircraft[aircraft['aircraft_id'].isin(t1) == False]\nanswer = t2['aircraft']", false], ["t1 = match.groupby('winning_aircraft').size().rename('count')\nt2 = t1[t1 == 0].to_frame().reset_index()\nt3 = pd.merge(aircraft, t2, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t3['aircraft']", true], ["t1 = match[['winning_aircraft']].drop_duplicates()\nt2 = pd.merge(aircraft, t1, left_on='aircraft_id', right_on='winning_aircraft', how='outer', indicator=True)\nanswer = t2[t2['_merge'] == 'left_only']['aircraft']", false], ["t1 = match['winning_aircraft'].to_frame()\nt2 = pd.merge(aircraft, t1, left_on='aircraft_id', right_on='winning_aircraft', how='outer')\nt3 = t2[t2['winning_aircraft'].isnull()]\nanswer = t3['aircraft']", false], ["t1 = match[['winning_aircraft']].drop_duplicates()\nt2 = pd.merge(aircraft, t1, left_on='aircraft_id', right_on='winning_aircraft', how='outer', indicator=True)\nanswer = t2[t2['_merge'] == 'left_only'][['aircraft']]", false]]}
{"example": {"db_id": "movie_1", "query": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4", "query_toks": ["SELECT", "rID", "FROM", "Rating", "EXCEPT", "SELECT", "rID", "FROM", "Rating", "WHERE", "stars", "=", "4"], "query_toks_no_value": ["select", "rid", "from", "rating", "except", "select", "rid", "from", "rating", "where", "stars", "=", "value"], "question": "find the ids of reviewers who did not give 4 star.", "question_toks": ["find", "the", "ids", "of", "reviewers", "who", "did", "not", "give", "4", "star", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "db_table_headers": {"Movie": ["mID", "title", "year", "director"], "Reviewer": ["rID", "name"], "Rating": ["rID", "mID", "stars", "ratingDate"]}, "answer": [[204], [206], [207], [208]]}, "program_result_list": [["t1 = Rating['rid'].to_frame()\nt2 = Rating[Rating['stars'] == 4]['rid'].to_frame()\nanswer = t1[~t1.isin(t2)].dropna()", false], ["t1 = Rating.groupby('rid').size()\nt2 = Rating[Rating['stars'] == 4].groupby('rid').size()\nanswer = t1[~t1.index.isin(t2.index)].to_frame().reset_index()", false], ["t1 = Rating[Rating['stars'] == 4]['rid']\nanswer = Rating[~Rating['rid'].isin(t1)]['rid']", false], ["t1 = Rating[Rating['stars'] == 4]\nt2 = Rating[~Rating['rid'].isin(t1['rid'])]\nanswer = t2['rid']", false], ["t1 = Rating[Rating['stars'] == 4]\nt2 = Rating.drop_duplicates(subset='rid')\nanswer = t2[~t2['rid'].isin(t1['rid'])]['rid']", true], ["t1 = Rating[Rating['stars'] == 4]\nt2 = Rating[~Rating['rid'].isin(t1['rid'])]\nanswer = t2['rid']", false], ["t1 = Rating[Rating['stars'] != 4]\nt2 = Rating[Rating['stars'] == 4]\nanswer = t1[~t1.rid.isin(t2.rid)]", false], ["t1 = Rating.groupby('rid').size().rename('count')\nanswer = t1[t1 > 0].to_frame().reset_index()", false], ["t1 = Rating[Rating['stars'] == 4]\nanswer = Rating[~Rating['rid'].isin(t1['rid'])]", false], ["t1 = Rating[Rating['stars'] != 4]\nt2 = Rating[Rating['stars'] == 4]\nanswer = pd.concat([t1, t2]).drop_duplicates(keep=False)['rid']", false], ["t1 = Rating[Rating['stars'] != 4]\nanswer = t1['rid']", false], ["t1 = Rating[Rating['stars'] == 4]\nt2 = Rating[~Rating['rid'].isin(t1['rid'])]\nanswer = t2['rid']", false], ["t1 = Rating[Rating['stars'] == 4]\nt2 = Rating[~Rating.isin(t1)].dropna()\nanswer = t2['rid'].unique()", false], ["t1 = Rating[Rating['stars'] == 4].drop(['mid', 'stars', 'ratingdate'], axis=1)\nt2 = Rating.drop(['mid', 'stars', 'ratingdate'], axis=1)\nanswer = t2[~t2.isin(t1)].dropna()", false], ["t1 = Rating[Rating['stars'] == 4]\nt2 = Rating[~Rating['rid'].isin(t1['rid'])]\nanswer = t2['rid']", false], ["t1 = Rating[Rating['stars'] != 4]['rid']\nt2 = Rating[Rating['stars'] == 4]['rid']\nanswer = pd.concat([t1, t2])\nanswer = answer.drop_duplicates(keep=False)", false], ["t1 = Rating[Rating['stars'] == 4]\nt2 = Rating[~Rating['rid'].isin(t1['rid'])]\nanswer = t2['rid'].unique()", true], ["t1 = Rating[Rating['stars'] == 4]\nt2 = Rating[~Rating['rid'].isin(t1['rid'])]\nanswer = t2['rid']", false], ["t1 = pd.merge(Reviewer, Rating, left_on='rid', right_on='rid')\nt2 = t1[t1['stars'] == 4]\nt3 = pd.merge(Reviewer, Rating, left_on='rid', right_on='rid')\nanswer = t3[~t3['rid'].isin(t2['rid'])]", false], ["t1 = Rating[Rating['stars'] != 4]['rid']\nt2 = Rating[Rating['stars'] == 4]['rid']\nanswer = t1[~t1.isin(t2)]", false]]}
{"example": {"db_id": "gas_company", "query": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'", "query_toks": ["SELECT", "headquarters", "FROM", "company", "WHERE", "main_industry", "=", "'Banking", "'", "INTERSECT", "SELECT", "headquarters", "FROM", "company", "WHERE", "main_industry", "=", "'Oil", "and", "gas", "'"], "query_toks_no_value": ["select", "headquarters", "from", "company", "where", "main_industry", "=", "value", "intersect", "select", "headquarters", "from", "company", "where", "main_industry", "=", "value"], "question": "Show all headquarters with both a company in banking industry and a company in Oil and gas.", "question_toks": ["Show", "all", "headquarters", "with", "both", "a", "company", "in", "banking", "industry", "and", "a", "company", "in", "Oil", "and", "gas", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Banking\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Oil and gas\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "db_table_headers": {"company": ["Company_ID", "Rank", "Company", "Headquarters", "Main_Industry", "Sales_billion", "Profits_billion", "Assets_billion", "Market_Value"], "gas_station": ["Station_ID", "Open_Year", "Location", "Manager_Name", "Vice_Manager_Name", "Representative_Name"], "station_company": ["Station_ID", "Company_ID", "Rank_of_the_Year"]}, "answer": [["China"], ["UK"], ["USA"]]}, "program_result_list": [["t1 = company[company['main_industry'] == 'Banking']\nt2 = company[company['main_industry'] == 'Oil and gas']\nt3 = pd.merge(t1, t2, on='headquarters', how='inner')\nanswer = t3['headquarters'].unique()", true], ["t1 = company[company['main_industry'] == 'banking']\nt2 = company[company['main_industry'] == 'oil and gas']\nt3 = t1[t1['headquarters'].isin(t2['headquarters'])]\nanswer = t3['headquarters'].unique()", false], ["t1 = company[company['main_industry'] == 'banking']\nt2 = company[company['main_industry'] == 'oil and gas']\nt3 = pd.merge(t1, t2, on='headquarters', how='inner')\nanswer = t3['headquarters']", false], ["t1 = company[company['main_industry'] == 'banking']\nt2 = company[company['main_industry'] == 'oil and gas']\nanswer = t1.merge(t2, on='headquarters', how='inner')", false], ["t1 = company[company['main_industry'] == 'banking']['headquarters'].unique()\nt2 = company[company['main_industry'] == 'oil and gas']['headquarters'].unique()\nanswer = np.intersect1d(t1, t2)", false], ["t1 = company[company['main_industry'] == 'Banking']\nt2 = company[company['main_industry'] == 'Oil and gas']\nanswer = t1['headquarters'].intersection(t2['headquarters'])", false], ["t1 = company[company['main_industry'] == 'Banking']\nt2 = company[company['main_industry'] == 'Oil and gas']\nt3 = pd.merge(t1, t2, on='headquarters')\nanswer = t3['headquarters'].unique()", true], ["t1 = company[company['main_industry'] == 'banking']\nt2 = company[company['main_industry'] == 'oil and gas']\nt3 = pd.merge(t1, t2, left_on='headquarters', right_on='headquarters', how='inner')\nanswer = t3['headquarters']", false], ["t1 = company[company['main_industry'] == 'banking']\nt2 = company[company['main_industry'] == 'oil and gas']\nanswer = t1['headquarters'].isin(t2['headquarters'])", false], ["t1 = company[company['main_industry'] == 'banking']\nt2 = company[company['main_industry'] == 'oil and gas']\nt3 = pd.merge(t1, t2, on='headquarters', how='inner')\nanswer = t3['headquarters'].unique()", false], ["t1 = company[company['main_industry'] == 'banking']\nt2 = company[company['main_industry'] == 'oil and gas']\nanswer = pd.merge(t1, t2, on='headquarters', how='inner')['headquarters']", false], ["t1 = company[company['main_industry'] == 'banking']\nt2 = company[company['main_industry'] == 'oil and gas']\nt3 = t1['headquarters'].unique()\nt4 = t2['headquarters'].unique()\nanswer = np.intersect1d(t3, t4)", false], ["t1 = company[company.main_industry == 'banking']\nt2 = company[company.main_industry == 'oil and gas']\nt3 = t1.merge(t2, on='headquarters', how='inner')\nanswer = t3['headquarters']", false], ["t1 = company[company['main_industry'] == 'banking']['headquarters']\nt2 = company[company['main_industry'] == 'oil and gas']['headquarters']\nanswer = t1.intersection(t2)", false], ["t1 = company[company['main_industry'] == 'Banking']\nt2 = company[company['main_industry'] == 'Oil and gas']\nt3 = t1.merge(t2, on='headquarters', how='inner')\nanswer = t3['headquarters'].unique()", true], ["t1 = company[company['main_industry'] == 'Banking']\nt2 = company[company['main_industry'] == 'Oil and gas']\nanswer = t1['headquarters'].isin(t2['headquarters'])", false], ["t1 = company[company['main_industry'] == 'Banking']\nt2 = company[company['main_industry'] == 'Oil and gas']\nanswer = pd.merge(t1, t2, on='headquarters')['headquarters']", true], ["t1 = company[company['main_industry'] == 'banking']\nt2 = company[company['main_industry'] == 'oil and gas']\nt3 = t1[t1['headquarters'].isin(t2['headquarters'])].drop_duplicates(subset='headquarters')\nanswer = t3['headquarters']", false], ["t1 = company[company['main_industry'] == 'banking']\nt2 = company[company['main_industry'] == 'oil and gas']\nanswer = t1[t1['headquarters'].isin(t2['headquarters'])]['headquarters'].unique()", false], ["t1 = company[company['main_industry'] == 'banking']\nt2 = company[company['main_industry'] == 'oil and gas']\nanswer = t1.merge(t2, on='headquarters', how='inner')['headquarters'].unique()", false]]}
{"example": {"db_id": "college_2", "query": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1", "query_toks": ["SELECT", "avg", "(", "T1.salary", ")", ",", "count", "(", "*", ")", "FROM", "instructor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_name", "=", "T2.dept_name", "ORDER", "BY", "T2.budget", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "salary", ")", ",", "count", "(", "*", ")", "from", "instructor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_name", "=", "t2", ".", "dept_name", "order", "by", "t2", ".", "budget", "desc", "limit", "value"], "question": "Find the number and averaged salary of all instructors who are in the department with the highest budget.", "question_toks": ["Find", "the", "number", "and", "averaged", "salary", "of", "all", "instructors", "who", "are", "in", "the", "department", "with", "the", "highest", "budget", "."], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 4, false], null]]}, "select": [false, [[5, [0, [0, 14, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 6, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"classroom": ["building", "room_number", "capacity"], "department": ["dept_name", "building", "budget"], "course": ["course_id", "title", "dept_name", "credits"], "instructor": ["ID", "name", "dept_name", "salary"], "section": ["course_id", "sec_id", "semester", "year", "building", "room_number", "time_slot_id"], "teaches": ["ID", "course_id", "sec_id", "semester", "year"], "student": ["ID", "name", "dept_name", "tot_cred"], "takes": ["ID", "course_id", "sec_id", "semester", "year", "grade"], "advisor": ["s_ID", "i_ID"], "time_slot": ["time_slot_id", "day", "start_hr", "start_min", "end_hr", "end_min"], "prereq": ["course_id", "prereq_id"]}, "answer": [[77600.18819999999, 50]]}, "program_result_list": [["t1 = pd.merge(instructor, department, on='dept_name')\nt2 = t1.sort_values('budget', ascending=False).head(1)\nanswer = [t2['salary'].mean(), len(t2)]", false], ["t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1.sort_values(by='budget', ascending=False).head(1)\nanswer = [t2['salary'].mean(), t2['salary'].count()]", false], ["t1 = pd.merge(instructor, department, on='dept_name')\nt2 = t1.sort_values(by='budget', ascending=False).head(1)\nanswer = t2[['salary', 'id']].mean()", false], ["t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1.sort_values('budget', ascending=False).head(1)\nanswer = [t2['salary'].mean(), t2['salary'].count()]", false], ["t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1.sort_values('budget', ascending=False).head(1)\nanswer = t1.agg({'salary': ['mean', 'count']})", true], ["t1 = pd.merge(instructor, department, on='dept_name')\nt2 = t1.groupby('dept_name').agg({'salary': {'avg_salary': 'mean', 'num_instructors': 'count'}}).reset_index()\nt2.columns = t2.columns.droplevel()\nt3 = t2.sort_values(by='budget', ascending=False).head(1)\nanswer = t3[['avg_salary', 'num_instructors']]", false], ["t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1.groupby(['dept_name', 'budget']).agg({'salary': ['mean', 'count']}).reset_index()\nt3 = t2.sort_values(by=('budget', ''), ascending=False).head(1).reset_index()\nanswer = t3[['salary', 'budget']]", false], ["t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1.sort_values(by='budget', ascending=False).head(1)\nanswer = [t2['salary'].mean(), t2['salary'].count()]", false], ["t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1.sort_values(by='budget', ascending=False).head(1)\nanswer = t2[['salary']].mean()\nanswer = answer.append(pd.Series({'salary': t2.shape[0]}))", false], ["t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1[['salary', 'budget']].sort_values('budget', ascending=False).head(1)\nanswer = [t2['salary'].mean(), t2['salary'].size]", false], ["t1 = pd.merge(department, instructor, left_on='dept_name', right_on='dept_name')\nt2 = t1.sort_values(by=['budget'], ascending=[False]).head(1).reset_index()\nt3 = t2.groupby('id').size().rename('count')\nt4 = t2['salary'].mean()\nt5 = pd.DataFrame({'avg(t1.salary)': [t4], 'count(*)': [t3.iloc[0]]})\nanswer = t5", false], ["t1 = pd.merge(instructor, department, on='dept_name')\nt2 = t1.sort_values(by='budget', ascending=False).head(1)\nanswer = [t2['salary'].mean(), t2.shape[0]]", false], ["t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1.sort_values(by='budget', ascending=False)\nanswer = [t2['salary'].mean(), t2['salary'].count()]", true], ["t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1.sort_values(by='budget', ascending=False).head(1)\nanswer = t2[['salary', 'dept_name']].agg(['mean', 'count'])", false], ["t1 = pd.merge(instructor, department, on='dept_name')\nt2 = t1.groupby('dept_name').agg({'salary': 'mean', 'budget': 'max'}).rename(columns={'salary': 'avg_salary'})\nanswer = t2.sort_values('budget', ascending=False).head(1)", false], ["t1 = pd.merge(instructor, department, on='dept_name')\nt2 = t1.sort_values('budget', ascending=False).head(1)\nanswer = pd.DataFrame([[t2['salary'].mean(), t2['salary'].size]], columns=['avg(t1.salary)', 'count(*)'])", false], ["t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1.sort_values('budget', ascending=False).head(1)\nanswer = t2[['salary']].mean().append(t2[['salary']].count())", false], ["t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1.groupby('dept_name')['salary'].agg(['mean', 'count'])\nt3 = t2.sort_values(by='budget', ascending=False).head(1).reset_index()\nanswer = t3", false], ["t1 = pd.merge(department, instructor, left_on='dept_name', right_on='dept_name')\nt2 = t1.groupby(['dept_name', 'budget']).agg({'salary':['mean', 'count']}).reset_index()\nt3 = t2.sort_values(by=[('budget', '')], ascending=False).head(1).reset_index(drop=True)\nanswer = t3[('salary', 'mean')]", false], ["t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1.groupby(['dept_name', 'budget']).agg({'salary': ['mean', 'count']}).reset_index()\nt2.columns = ['dept_name', 'budget', 'avg_salary', 'count']\nt3 = t2.sort_values('budget', ascending=False).head(1)\nanswer = t3[['avg_salary', 'count']]", false]]}
{"example": {"db_id": "station_weather", "query": "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather", "query_toks": ["SELECT", "min", "(", "low_temperature", ")", ",", "max", "(", "wind_speed_mph", ")", "FROM", "weekly_weather"], "query_toks_no_value": ["select", "min", "(", "low_temperature", ")", ",", "max", "(", "wind_speed_mph", ")", "from", "weekly_weather"], "question": "show the lowest low temperature and highest wind speed in miles per hour.", "question_toks": ["show", "the", "lowest", "low", "temperature", "and", "highest", "wind", "speed", "in", "miles", "per", "hour", "."], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[2, [0, [0, 17, false], null]], [1, [0, [0, 19, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"train": ["id", "train_number", "name", "origin", "destination", "time", "interval"], "station": ["id", "network_name", "services", "local_authority"], "route": ["train_id", "station_id"], "weekly_weather": ["station_id", "day_of_week", "high_temperature", "low_temperature", "precipitation", "wind_speed_mph"]}, "answer": [[46, 24]]}, "program_result_list": [["t1 = weekly_weather.min()\nt2 = t1[['low_temperature', 'wind_speed_mph']]\nanswer = t2.to_frame().transpose()", false], ["answer = weekly_weather[['low_temperature', 'wind_speed_mph']].agg(['min', 'max'])", false], ["t1 = weekly_weather.agg({'low_temperature': 'min', 'wind_speed_mph': 'max'})\nanswer = t1", true], ["answer = weekly_weather[['low_temperature', 'wind_speed_mph']].agg({'low_temperature': 'min', 'wind_speed_mph': 'max'})", true], ["answer = weekly_weather[['low_temperature', 'wind_speed_mph']].agg(['min', 'max'])", false], ["answer = weekly_weather[['low_temperature', 'wind_speed_mph']].agg(['min', 'max'])", false], ["t1 = weekly_weather.groupby(['station_id', 'day_of_week']).agg({'low_temperature': 'min', 'wind_speed_mph': 'max'})\nanswer = t1[['low_temperature', 'wind_speed_mph']]", false], ["t1 = weekly_weather.groupby().agg({'low_temperature': 'min', 'wind_speed_mph': 'max'})\nanswer = t1", false], ["t1 = weekly_weather.groupby(['station_id', 'day_of_week']).size().rename('count')\nt2= t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t2[['low_temperature', 'wind_speed_mph']]", false], ["t1 = weekly_weather['low_temperature'].min()\nt2 = weekly_weather['wind_speed_mph'].max()\nanswer = pd.DataFrame([[t1, t2]], columns=['min(low_temperature)', 'max(wind_speed_mph)'])", true], ["t1 = weekly_weather.agg({'low_temperature': 'min', 'wind_speed_mph': 'max'})\nanswer = t1.to_frame().transpose()", true], ["t1 = weekly_weather[['low_temperature', 'wind_speed_mph']].agg(['min', 'max'])\nanswer = t1.iloc[0]", false], ["t1 = weekly_weather[['low_temperature', 'wind_speed_mph']]\nanswer = t1.agg(['min', 'max'])", false], ["answer = weekly_weather[['low_temperature', 'wind_speed_mph']].agg(['min', 'max'])", false], ["answer = weekly_weather[['low_temperature', 'wind_speed_mph']].agg({'low_temperature': 'min', 'wind_speed_mph': 'max'})", true], ["answer = weekly_weather[['low_temperature', 'wind_speed_mph']].agg(['min', 'max'])", false], ["answer = weekly_weather.agg(['min', 'max'])[['low_temperature', 'wind_speed_mph']]", false], ["t1 = weekly_weather.agg({'low_temperature':'min', 'wind_speed_mph':'max'})\nanswer = t1.to_frame().reset_index()", false], ["answer = weekly_weather[['low_temperature', 'wind_speed_mph']].agg(['min', 'max'])", false], ["t1 = weekly_weather[['low_temperature', 'wind_speed_mph']]\nanswer = t1.agg({'low_temperature': np.min, 'wind_speed_mph': np.max})", false]]}
{"example": {"db_id": "student_1", "query": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom", "query_toks": ["SELECT", "classroom", ",", "count", "(", "*", ")", "FROM", "list", "WHERE", "grade", "=", "``", "4", "''", "GROUP", "BY", "classroom"], "query_toks_no_value": ["select", "classroom", ",", "count", "(", "*", ")", "from", "list", "where", "grade", "=", "value", "group", "by", "classroom"], "question": "Report the total number of students for each fourth-grade classroom.", "question_toks": ["Report", "the", "total", "number", "of", "students", "for", "each", "fourth-grade", "classroom", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]], [3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], "\"4\"", null]], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"list": ["LastName", "FirstName", "Grade", "Classroom"], "teachers": ["LastName", "FirstName", "Classroom"]}, "answer": [[108, 2], [110, 6], [111, 4]]}, "program_result_list": [["t1 = list[list['grade'] == '4']\nanswer = t1.groupby('classroom').size().rename('count')", false], ["t1 = list[list['grade'] == '4']\nt2 = t1.groupby('classroom').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = list[list['grade'] == '4']\nt2 = t1.groupby('classroom').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = list[list['grade'] == 4]\nt2 = t1.groupby('classroom').size().rename('count')\nanswer = t2.to_frame().reset_index()", true], ["t1 = list[list['grade'] == '4']\nt2 = t1.groupby('classroom').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["answer = list[list['grade'] == '4'].groupby('classroom').size().rename('count').to_frame().reset_index()", false], ["t1 = list[list['grade'] == '4']\nt2 = t1.groupby('classroom').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = list[list['grade'] == '4'].groupby('classroom').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["answer = list[list['grade'] == '4'].groupby('classroom').size().rename('count')", false], ["t1 = list[list['grade'] == '4']\nt2 = t1.groupby('classroom').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = list[list['grade'] == '4']\nt2 = t1.groupby('classroom').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = list[list['grade'] == '4']\nt2 = t1.groupby('classroom').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = list[list['grade'] == '4']\nanswer = t1.groupby(['classroom']).size().rename('count')", false], ["t1 = list[list['grade'] == '4']\nt2 = t1.groupby('classroom').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = list[list['grade'] == '4']\nt2 = t1.groupby('classroom').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["answer = list[list['grade'] == '4'].groupby('classroom').size().rename('count').to_frame().reset_index()", false], ["t1 = list[list['grade'] == '4']\nt2 = t1.groupby('classroom').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = list[list['grade']=='4']\nt2 = t1.groupby('classroom').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = list[list['grade'] == '4']\nt2 = t1.groupby('classroom').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = list[list['grade'] == '4']\nt2 = t1.groupby('classroom').size().rename('count')\nanswer = t2.to_frame().reset_index()", false]]}
{"example": {"db_id": "tracking_software_problems", "query": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T2.product_id", "FROM", "problems", "AS", "T1", "JOIN", "product", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id", "GROUP", "BY", "T2.product_id"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t2", ".", "product_id", "from", "problems", "as", "t1", "join", "product", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "group", "by", "t2", ".", "product_id"], "question": "For each product with some problems, list the count of problems and the product id.", "question_toks": ["For", "each", "product", "with", "some", "problems", ",", "list", "the", "count", "of", "problems", "and", "the", "product", "id", "."], "sql": {"from": {"table_units": [["table_unit", 5], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 22, false], null], [0, 14, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [[0, 14, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Problem_Category_Codes": ["problem_category_code", "problem_category_description"], "Problem_Log": ["problem_log_id", "assigned_to_staff_id", "problem_id", "problem_category_code", "problem_status_code", "log_entry_date", "log_entry_description", "log_entry_fix", "other_log_details"], "Problem_Status_Codes": ["problem_status_code", "problem_status_description"], "Product": ["product_id", "product_name", "product_details"], "Staff": ["staff_id", "staff_first_name", "staff_last_name", "other_staff_details"], "Problems": ["problem_id", "product_id", "closure_authorised_by_staff_id", "reported_by_staff_id", "date_problem_reported", "date_problem_closed", "problem_description", "other_problem_details"]}, "answer": [[4, 1], [2, 2], [3, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 13], [1, 15]]}, "program_result_list": [["t1 = pd.merge(Problems, Product, left_on='product_id', right_on='product_id')\nt2 = t1.groupby('product_id').size().rename('count').to_frame()\nanswer = t2.reset_index()", false], ["t1 = pd.merge(Problems, Product, left_on='product_id', right_on='product_id')\nt2 = t1.groupby('product_id').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Problems, Product, left_on='product_id', right_on='product_id')\nt2 = t1.groupby('product_id').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Problems, Product, left_on='product_id', right_on='product_id')\nt2 = t1.groupby('product_id').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Problems, Product, left_on='product_id', right_on='product_id')\nt2 = t1.groupby('product_id').size().rename('count').to_frame().reset_index()\nanswer = t2[['count', 'product_id']]", true], ["t1 = pd.merge(Problems, Product, on='product_id')\nt2 = t1.groupby('product_id').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Problems, Product, on='product_id')\nt2 = t1.groupby('product_id').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Problems, Product, left_on='product_id', right_on='product_id')\nt2 = t1.groupby('product_id').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Problems, Product, left_on='product_id', right_on='product_id')\nt2 = t1.groupby('product_id').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Problems, Product, left_on='product_id', right_on='product_id')\nt2 = t1.groupby('product_id').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Problems, Product, left_on='product_id', right_on='product_id')\nt2 = t1.groupby(['product_id']).size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Problems, Product, on='product_id')\nt2 = t1.groupby('product_id').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Problems, Product, left_on='product_id', right_on='product_id')\nt2 = t1.groupby('product_id').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Problems, Product, on='product_id')\nt2 = t1['product_id'].value_counts().rename('count').to_frame().reset_index()\nanswer = t2", false], ["t1 = pd.merge(Problems, Product, left_on='product_id', right_on='product_id')\nanswer = t1.groupby('product_id').size().rename('count').to_frame().reset_index()", false], ["t1 = pd.merge(Problems, Product, left_on='product_id', right_on='product_id')\nt2 = t1['product_id'].value_counts().to_frame().reset_index()\nanswer = t2.rename(columns={'index': 'product_id', 'product_id': 'count'})", false], ["t1 = pd.merge(Problems, Product, left_on='product_id', right_on='product_id')\nt2 = t1.groupby('product_id').size().rename('count').to_frame().reset_index()\nanswer = t2", false], ["t1 = pd.merge(Problems, Product, on='product_id')\nt2 = t1.groupby('product_id').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Problems, Product, left_on='product_id', right_on='product_id')\nt2 = t1.groupby('product_id').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Problems, Product, left_on='product_id', right_on='product_id')\nt2 = t1.groupby('product_id').size().rename('count')\nanswer = t2.to_frame().reset_index()", false]]}
{"example": {"db_id": "dorm_1", "query": "SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "sum", "(", "student_capacity", ")", ",", "gender", "FROM", "dorm", "GROUP", "BY", "gender"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "sum", "(", "student_capacity", ")", ",", "gender", "from", "dorm", "group", "by", "gender"], "question": "Find the number of dorms and total capacity for each gender.", "question_toks": ["Find", "the", "number", "of", "dorms", "and", "total", "capacity", "for", "each", "gender", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [4, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [[0, 12, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Student": ["StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code"], "Dorm": ["dormid", "dorm_name", "student_capacity", "gender"], "Dorm_amenity": ["amenid", "amenity_name"], "Has_amenity": ["dormid", "amenid"], "Lives_in": ["stuid", "dormid", "room_number"]}, "answer": [[1, 128, "F"], [1, 116, "M"], [5, 1136, "X"]]}, "program_result_list": [["t1 = Dorm.groupby('gender').agg({'dormid' : 'count', 'student_capacity' : 'sum'})\nanswer = t1.reset_index()", false], ["answer = Dorm.groupby('gender').agg({'dormid':'count', 'student_capacity':'sum'})", false], ["t1 = Dorm.groupby('gender').agg({'dormid':'count','student_capacity':'sum'})\nt2 = t1.rename(columns={'dormid': 'count'})\nanswer = t2", false], ["t1 = Dorm.groupby('gender').size().rename('count')\nt2 = Dorm.groupby('gender')['student_capacity'].sum().rename('student_capacity')\nanswer = pd.merge(t1, t2, on='gender').to_frame().reset_index()", false], ["t1 = Dorm.groupby('gender')['student_capacity'].sum().rename('total_capacity')\nt2 = Dorm.groupby('gender').size().rename('count')\nanswer = pd.merge(t1, t2, on='gender')", false], ["t1 = Dorm.groupby(['gender']).size().rename('count')\nt2 = Dorm.groupby(['gender'])['student_capacity'].sum().rename('sum_student_capacity')\nanswer = pd.concat([t1, t2], axis=1)", false], ["t1 = Dorm.groupby('gender').agg({'dormid': 'count', 'student_capacity': 'sum'}).rename(columns={'dormid': 'count', 'student_capacity': 'sum'}).reset_index()\nanswer = t1[['count', 'sum', 'gender']]", true], ["t1 = Dorm.groupby('gender').agg({'dormid': 'count', 'student_capacity': 'sum'})\nanswer = t1.rename(columns={'dormid':'count', 'student_capacity': 'sum'})", false], ["t1 = Dorm.groupby('gender').agg({'dormid': 'count', 'student_capacity': 'sum'})\nanswer = t1", false], ["t1 = Dorm.groupby('gender').size().rename('count')\nt2 = Dorm.groupby('gender').sum()['student_capacity']\nanswer = pd.concat([t1, t2], axis=1).reset_index()", false], ["answer = Dorm.groupby('gender').agg({'dormid':'count', 'student_capacity':'sum'})", false], ["t1 = pd.merge(Dorm, Dorm_amenity, on='amenid')\nanswer = t1.groupby(['dormid', 'dorm_name', 'gender']).size().rename('count').to_frame().reset_index()", false], ["t1 = Dorm.groupby('gender').agg({'dormid': 'count', 'student_capacity': 'sum'})\nt1.columns = ['count', 'sum']\nanswer = t1.reset_index()", false], ["answer = Dorm.groupby('gender').agg({'dormid': 'count', 'student_capacity': 'sum'})", false], ["t1 = pd.merge(Dorm, Dorm_amenity, left_on='amenid', right_on='amenid')\nt2 = pd.DataFrame(t1.groupby(['dormid', 'dorm_name', 'student_capacity', 'gender'])['amenity_name'].count())\nt3 = t2.groupby(['dormid', 'dorm_name', 'student_capacity', 'gender'])['amenity_name'].count()\nt4 = t3.to_frame().reset_index()\nt5 = t4.groupby('gender')['student_capacity'].agg(['sum', 'count']).reset_index()\nt6 = t5.rename(columns={'sum': 'total_capacity', 'count': 'num_dorms'})\nanswer = t6[['gender', 'num_dorms', 'total_capacity']]", false], ["t1 = Dorm.groupby('gender').agg({'dormid': 'count', 'student_capacity' : 'sum'})\nanswer = t1", false], ["answer = Dorm.groupby('gender').agg({'dormid':'count', 'student_capacity': 'sum'})", false], ["t1 = Dorm.groupby('gender').agg({'dormid': 'count', 'student_capacity': 'sum'})\nanswer = t1.reset_index()", false], ["answer = Dorm.groupby('gender')[['student_capacity']].agg(['count', 'sum'])", false], ["t1 = Dorm.groupby(['gender']).agg({'dormid':'count', 'student_capacity':'sum'}).rename(columns={'dormid':'count'})\nanswer = t1.reset_index()", false]]}
{"example": {"db_id": "college_2", "query": "SELECT DISTINCT name FROM  instructor ORDER BY name", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "instructor", "ORDER", "BY", "name"], "query_toks_no_value": ["select", "distinct", "name", "from", "instructor", "order", "by", "name"], "question": "List the distinct names of the instructors, ordered by name.", "question_toks": ["List", "the", "distinct", "names", "of", "the", "instructors", ",", "ordered", "by", "name", "."], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [true, [[0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 12, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"classroom": ["building", "room_number", "capacity"], "department": ["dept_name", "building", "budget"], "course": ["course_id", "title", "dept_name", "credits"], "instructor": ["ID", "name", "dept_name", "salary"], "section": ["course_id", "sec_id", "semester", "year", "building", "room_number", "time_slot_id"], "teaches": ["ID", "course_id", "sec_id", "semester", "year"], "student": ["ID", "name", "dept_name", "tot_cred"], "takes": ["ID", "course_id", "sec_id", "semester", "year", "grade"], "advisor": ["s_ID", "i_ID"], "time_slot": ["time_slot_id", "day", "start_hr", "start_min", "end_hr", "end_min"], "prereq": ["course_id", "prereq_id"]}, "answer": [["Arias"], ["Arinb"], ["Atanassov"], ["Bancilhon"], ["Bawa"], ["Bertolino"], ["Bietzk"], ["Bondi"], ["Bourrier"], ["Choll"], ["DAgostino"], ["Dale"], ["Desyl"], ["Dusserre"], ["Gustafsson"], ["Gutierrez"], ["Hau"], ["Jaekel"], ["Kean"], ["Kenje"], ["Konstantinides"], ["Lembr"], ["Lent"], ["Levine"], ["Liley"], ["Luo"], ["Mahmoud"], ["McKinnon"], ["Mingoz"], ["Mird"], ["Moreira"], ["Morris"], ["Murata"], ["Pimenta"], ["Pingr"], ["Queiroz"], ["Romero"], ["Sakurai"], ["Sarkar"], ["Shuming"], ["Soisalon-Soininen"], ["Sullivan"], ["Tung"], ["Ullman "], ["Valtchev"], ["Vicentino"], ["Voronina"], ["Wieland"], ["Yazdi"], ["Yin"]]}, "program_result_list": [["t1 = instructor.drop_duplicates(subset=['name'])\nanswer = t1['name'].sort_values()", true], ["answer = instructor['name'].unique()", false], ["answer = instructor.sort_values('name')['name'].unique()", true], ["answer = instructor.name.unique()", false], ["answer = instructor['name'].unique()", false], ["answer = instructor['name'].unique()", false], ["answer = instructor['name'].unique()", false], ["answer = instructor['name'].unique()", false], ["answer = instructor['name'].unique()", false], ["answer = instructor['name'].unique()", false], ["answer = instructor['name'].unique().tolist()", false], ["answer = instructor.drop_duplicates(subset='name')['name']", false], ["t1 = instructor['name'].unique()\nanswer = t1", false], ["answer = instructor['name'].unique()", false], ["answer = instructor['name'].unique()", false], ["answer = instructor['name'].unique()", false], ["answer = instructor['name'].unique()", false], ["answer = instructor['name'].sort_values().unique()", true], ["answer = instructor['name'].unique()", false], ["answer = instructor['name'].unique()", false]]}
{"example": {"db_id": "ship_1", "query": "SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'", "query_toks": ["SELECT", "rank", "FROM", "captain", "WHERE", "CLASS", "=", "'Cutter", "'", "INTERSECT", "SELECT", "rank", "FROM", "captain", "WHERE", "CLASS", "=", "'Armed", "schooner", "'"], "query_toks_no_value": ["select", "rank", "from", "captain", "where", "class", "=", "value", "intersect", "select", "rank", "from", "captain", "where", "class", "=", "value"], "question": "What are the ranks of captains that are both in the Cutter and Armed schooner classes?", "question_toks": ["What", "are", "the", "ranks", "of", "captains", "that", "are", "both", "in", "the", "Cutter", "and", "Armed", "schooner", "classes", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Cutter\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Armed schooner\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "db_table_headers": {"captain": ["Captain_ID", "Name", "Ship_ID", "age", "Class", "Rank"], "Ship": ["Ship_ID", "Name", "Type", "Built_Year", "Class", "Flag"]}, "answer": [["Midshipman"]]}, "program_result_list": [["t1 = captain[captain['class'] == 'cutter']\nt2 = captain[captain['class'] == 'armed schooner']\nt3 = t1[['rank']]\nt4 = t2[['rank']]\nanswer = t3.merge(t4, how='inner')", false], ["t1 = captain[captain['class'] == 'cutter']\nt2 = captain[captain['class'] == 'armed schooner']\nanswer = t1.merge(t2, on='rank', how='inner')['rank']", false], ["t1 = captain[captain['class'] == 'cutter']\nt2 = captain[captain['class'] == 'armed schooner']\nt3 = pd.merge(t1, t2, on='rank', indicator=True, how='inner')\nanswer = t3['rank']", false], ["t1 = captain[captain['class'] == 'cutter']\nt2 = captain[captain['class'] == 'armed schooner']\nanswer = list(set(t1['rank']) & set(t2['rank']))", false], ["t1 = captain[captain['class'] == 'Cutter']\nt2 = captain[captain['class'] == 'Armed schooner']\nanswer = t1[t1['rank'].isin(t2['rank'])]['rank'].unique()", true], ["t1 = captain[captain['class'] == 'cutter']\nt2 = captain[captain['class'] == 'armed schooner']\nanswer = t1[t1['rank'].isin(t2['rank'])]['rank']", false], ["t1 = captain[captain['class'] == 'cutter']\nt2 = captain[captain['class'] == 'armed schooner']\nanswer = pd.merge(t1, t2, on='rank', how='inner')['rank'].unique()", false], ["t1 = captain[captain['class'] == 'cutter']\nt2 = captain[captain['class'] == 'armed schooner']\nanswer = set(t1['rank']) & set(t2['rank'])", false], ["t1 = captain[captain['class'] == 'cutter']\nt2 = captain[captain['class'] == 'armed schooner']\nanswer = pd.merge(t1, t2, how='inner', on='rank')['rank'].drop_duplicates()", false], ["t1 = captain[captain['class'] == 'cutter']\nt2 = captain[captain['class'] == 'armed schooner']\nanswer = t1.merge(t2, on='rank', how='inner')['rank']", false], ["t1 = captain.loc[captain['class'] == 'cutter', 'rank']\nt2 = captain.loc[captain['class'] == 'armed schooner', 'rank']\nanswer = t1.append(t2).unique()", false], ["t1 = captain[captain['class'] == 'cutter']\nt2 = captain[captain['class'] == 'armed schooner']\nanswer = pd.merge(t1, t2, on='rank', how='inner')['rank'].unique()", false], ["t1 = captain[captain['class'] == 'cutter']\nt2 = captain[captain['class'] == 'armed schooner']\nanswer = t1[['rank']].merge(t2[['rank']], on='rank', how='inner')['rank']", false], ["t1 = captain[captain['class'] == 'cutter']\nt2 = captain[captain['class'] == 'armed schooner']\nt3 = t1.merge(t2, on='rank', how='inner')\nanswer = t3['rank']", false], ["t1 = captain[captain['class'] == 'cutter']\nt2 = captain[captain['class'] == 'armed schooner']\nanswer = t1[t1['rank'].isin(t2['rank'])]['rank'].unique()", false], ["t1 = captain[captain['class'] == 'cutter']\nt2 = captain[captain['class'] == 'armed schooner']\nanswer = pd.merge(t1, t2, on='rank', how='inner')['rank']", false], ["t1 = captain[captain['class'] == 'cutter']\nt2 = captain[captain['class'] == 'armed schooner']\nanswer = np.intersect1d(t1['rank'], t2['rank'])", false], ["t1 = captain[captain['class'] == 'cutter'][['rank']]\nt2 = captain[captain['class'] == 'armed schooner'][['rank']]\nanswer = t1[t1['rank'].isin(t2['rank'])]", false], ["t1 = captain[captain['class'] == 'cutter']\nt2 = captain[captain['class'] == 'armed schooner']\nanswer = t1[t1.rank.isin(t2.rank)].rank.unique()", false], ["t1 = captain[captain['class'] == 'cutter']\nt2 = captain[captain['class'] == 'armed schooner']\nanswer = t1.merge(t2, on='rank')['rank']", false]]}