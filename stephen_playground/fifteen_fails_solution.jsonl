"t1 = pd.merge(campuses, faculty, left_on='Id', right_on='Campus')\nt2 = t1[(t1['Year_y'] == 2002) & (t1['County'] == 'Orange')]\nt3 = t1[(t1['Year_y'] == 2002) & (t1['Faculty'] > t2['Faculty'].max())]\nanswer = t3['Campus_x']"
"t1 = pd.merge(characteristics, product_characteristics, left_on='characteristic_id', right_on='characteristic_id', sort=True)\nanswer = characteristics[~characteristics['characteristic_id'].isin(t1['characteristic_id'])][['characteristic_name', 'other_characteristic_details', 'characteristic_data_type']]\nanswer = answer.sort_values(by=['characteristic_name', 'other_characteristic_details', 'characteristic_data_type'])"
"t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1.sort_values(by='budget', ascending=False)\nanswer = [t2['salary'].mean(), t2.shape[0]]"
"t1 = hotels.replace('', None).sort_values('price_range')\nanswer = t1.head(3)[['other_hotel_details', 'star_rating_code']]"
"weather = weather.replace('', None)\nanswer = weather[weather['max_temperature_f'] > 85]['date']" NOTE: Sql counts empty values as greater than 85 count as annotation noise
"t1 = pd.merge(assessment_notes, teachers, left_on='teacher_id', right_on='teacher_id')\nt2 = t1.groupby(['teacher_id', 'first_name'], as_index=False).size().sort_values(by='size', ascending=False).head(3)\nanswer = t2[['teacher_id', 'first_name']]"
"t1 = pd.merge(drama_workshop_groups, services, left_on='workshop_group_id', right_on='workshop_group_id')\nanswer = t1[['store_phone', 'store_email_address']]" NOTE: sorting error due to SQL non-determinist result without order by
"t1 = company.groupby('main_industry').sum()\nanswer = t1['market_value'].to_frame().reset_index()" NOTE: floating point error in sql solution
"t1 = pd.merge(physician, trained_in, left_on='employeeid', right_on='physician')\nt2 = pd.merge(t1, procedures, left_on='treatment', right_on='code')\nt3 = t2[t2['cost'] > 5000]\nanswer = t3['name_x']"
"courses.course_id = courses.course_id.astype('Int64')\nt1 = pd.merge(courses, student_course_registrations, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2.sort_values('registration_date')['student_id']"
