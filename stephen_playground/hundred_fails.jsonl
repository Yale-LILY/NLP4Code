{"example": {"db_id": "flight_4", "query": "SELECT max(elevation) FROM airports WHERE country  =  'Iceland'", "query_toks": ["SELECT", "max", "(", "elevation", ")", "FROM", "airports", "WHERE", "country", "=", "'Iceland", "'"], "query_toks_no_value": ["select", "max", "(", "elevation", ")", "from", "airports", "where", "country", "=", "value"], "question": "What is the highest elevation of an airport in the country of Iceland?", "question_toks": ["What", "is", "the", "highest", "elevation", "of", "an", "airport", "in", "the", "country", "of", "Iceland", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[1, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"Iceland\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"routes": ["rid", "dst_apid", "dst_ap", "src_apid", "src_ap", "alid", "airline", "codeshare"], "airports": ["apid", "name", "city", "country", "x", "y", "elevation", "iata", "icao"], "airlines": ["alid", "name", "iata", "icao", "callsign", "country", "active"]}, "answer": [[1030]], "pandas_converted": "pd.Series(airports[airports['country'] == 'Iceland']['elevation'].max())"}, "program_result_list": [["t1 = airports[airports['country'] == 'Iceland']\nanswer = t1['elevation'].max()", false], ["t1 = airports[airports['country'] == 'Iceland']\nanswer = t1['elevation'].max()", false], ["answer = airports[airports['country'] == 'Iceland']['elevation'].max()", false], ["t1 = airports[airports['country'] == 'Iceland']\nanswer = t1['elevation'].max()", false], ["t1 = airports[airports['country'] == 'Iceland']\nanswer = t1['elevation'].max()", false], ["answer = airports[airports['country'] == 'Iceland']['elevation'].max()", false], ["t1 = airports[airports['country'] == 'Iceland']\nanswer = t1['elevation'].max()", false], ["t1 = airports[airports['country'] == 'Iceland']\nanswer = t1['elevation'].max()", false], ["t1 = airports[airports['country'] == 'Iceland']\nanswer = t1['elevation'].max()", false], ["t1 = airports[airports['country'] == 'Iceland']\nanswer = t1['elevation'].max()", false], ["t1 = airports[airports.country == 'Iceland']\nanswer = t1.elevation.max()", false], ["t1 = airports[airports['country'] == 'Iceland']\nanswer = t1['elevation'].max()", false], ["t1 = airports[airports['country'] == 'Iceland']\nanswer = t1['elevation'].max()", false], ["answer = airports[airports['country'] == 'Iceland']['elevation'].max()", false], ["answer = airports[airports['country'] == 'Iceland']['elevation'].max()", false], ["t1 = airports[airports['country'] == 'Iceland']\nanswer = t1['elevation'].max()", false], ["t1 = airports[airports['country'] == 'Iceland']\nanswer = t1['elevation'].max()", false], ["t1 = airports[airports['country'] == 'Iceland']\nanswer = t1['elevation'].max()", false], ["answer = airports[airports['country'] == 'Iceland']['elevation'].max()", false], ["t1 = airports[airports['country'] == 'Iceland']\nanswer = t1['elevation'].max()", false]]}
{"example": {"db_id": "aircraft", "query": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft", "query_toks": ["SELECT", "T2.Location", ",", "T1.Aircraft", "FROM", "aircraft", "AS", "T1", "JOIN", "MATCH", "AS", "T2", "ON", "T1.Aircraft_ID", "=", "T2.Winning_Aircraft"], "query_toks_no_value": ["select", "t2", ".", "location", ",", "t1", ".", "aircraft", "from", "aircraft", "as", "t1", "join", "match", "as", "t2", "on", "t1", ".", "aircraft_id", "=", "t2", ".", "winning_aircraft"], "question": "What is the location and name of the winning aircraft?", "question_toks": ["What", "is", "the", "location", "and", "name", "of", "the", "winning", "aircraft", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"pilot": ["Pilot_Id", "Name", "Age"], "aircraft": ["Aircraft_ID", "Aircraft", "Description", "Max_Gross_Weight", "Total_disk_area", "Max_disk_Loading"], "match": ["Round", "Location", "Country", "Date", "Fastest_Qualifying", "Winning_Pilot", "Winning_Aircraft"], "airport": ["Airport_ID", "Airport_Name", "Total_Passengers", "%_Change_2007", "International_Passengers", "Domestic_Passengers", "Transit_Passengers", "Aircraft_Movements", "Freight_Metric_Tonnes"], "airport_aircraft": ["ID", "Airport_ID", "Aircraft_ID"]}, "answer": [["Mina' Zayid , Abu Dhabi", "Robinson R-22"], ["Swan River , Perth", "Robinson R-22"], ["Flamengo Beach , Rio de Janeiro", "Bell 206B3 JetRanger"], ["Windsor , Ontario", "Mil Mi-26"], ["New York City", "CH-47D Chinook"], ["EuroSpeedway Lausitz", "Mil Mi-26"], ["River Danube , Budapest", "CH-53E Super Stallion"]]}, "program_result_list": [["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false]]}
{"example": {"db_id": "bike_1", "query": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id", "query_toks": ["SELECT", "avg", "(", "T1.lat", ")", ",", "avg", "(", "T1.long", ")", "FROM", "station", "AS", "T1", "JOIN", "trip", "AS", "T2", "ON", "T1.id", "=", "T2.start_station_id"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "lat", ")", ",", "avg", "(", "t1", ".", "long", ")", "from", "station", "as", "t1", "join", "trip", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "start_station_id"], "question": "What is the average latitude and longitude of all starting stations for the trips?", "question_toks": ["What", "is", "the", "average", "latitude", "and", "longitude", "of", "all", "starting", "stations", "for", "the", "trips", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 16, false], null]]}, "select": [false, [[5, [0, [0, 3, false], null]], [5, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"station": ["id", "name", "lat", "long", "dock_count", "city", "installation_date"], "status": ["station_id", "bikes_available", "docks_available", "time"], "trip": ["id", "duration", "start_date", "start_station_name", "start_station_id", "end_date", "end_station_name", "end_station_id", "bike_id", "subscription_type", "zip_code"], "weather": ["date", "max_temperature_f", "mean_temperature_f", "min_temperature_f", "max_dew_point_f", "mean_dew_point_f", "min_dew_point_f", "max_humidity", "mean_humidity", "min_humidity", "max_sea_level_pressure_inches", "mean_sea_level_pressure_inches", "min_sea_level_pressure_inches", "max_visibility_miles", "mean_visibility_miles", "min_visibility_miles", "max_wind_Speed_mph", "mean_wind_speed_mph", "max_gust_speed_mph", "precipitation_inches", "cloud_cover", "events", "wind_dir_degrees", "zip_code"]}, "answer": [[37.74618133538529, -122.36134722346611]]}, "program_result_list": [["t1 = pd.merge(station, trip, left_on='id', right_on='start_station_id')\nanswer = t1[['lat', 'long']].agg(np.mean)", false], ["t1 = pd.merge(station, trip, left_on='id', right_on='start_station_id')\nanswer = t1[['lat', 'long']].mean()", false], ["t1 = pd.merge(station, trip, left_on='id', right_on='start_station_id')\nanswer = t1[['lat', 'long']].mean()", false], ["t1 = pd.merge(station, trip, left_on='id', right_on='start_station_id')\nt2 = t1[['lat', 'long']].mean()\nanswer = t2", false], ["t1 = pd.merge(station, trip, left_on='id', right_on='start_station_id')\nanswer = t1[['lat', 'long']].mean()", false], ["t1 = pd.merge(station, trip, left_on='id', right_on='start_station_id')\nanswer = t1[['lat', 'long']].mean()", false], ["t1 = pd.merge(station, trip, left_on='id', right_on='start_station_id')\nanswer = t1[['lat', 'long']].mean()", false], ["t1 = pd.merge(station, trip, left_on='id', right_on='start_station_id')\nanswer = t1[['lat', 'long']].mean()", false], ["t1 = pd.merge(station, trip, left_on='id', right_on='start_station_id')\nanswer = t1[['lat', 'long']].mean()", false], ["t1 = pd.merge(station, trip, left_on='id', right_on='start_station_id')\nanswer = t1[['lat', 'long']].mean()", false], ["t1 = pd.merge(station, trip, left_on='id', right_on='start_station_id')\nanswer = t1[['lat', 'long']].mean()", false], ["t1 = pd.merge(station, trip, left_on='id', right_on='start_station_id' )\nanswer = t1[['lat', 'long']].mean()", false], ["t1 = pd.merge(station, trip, left_on='id', right_on='start_station_id')\nanswer = t1[['lat', 'long']].mean()", false], ["t1 = pd.merge(station, trip, left_on='id', right_on='start_station_id')\nanswer = t1[['lat', 'long']].mean()", false], ["t1 = pd.merge(station, trip, left_on='id', right_on='start_station_id')\nanswer = t1[['lat', 'long']].mean()", false], ["t1 = pd.merge(station, trip, left_on='id', right_on='start_station_id')\nanswer = t1[['lat', 'long']].mean()", false], ["t1 = pd.merge(station, trip, left_on='id', right_on='start_station_id')\nt2 = t1.groupby(['start_station_id', 'start_station_name']).agg({'lat': np.mean, 'long': np.mean})\nanswer = t2.reset_index()", false], ["t1 = pd.merge(station, trip, left_on='id', right_on='start_station_id')\nanswer = t1[['lat', 'long']].mean()", false], ["t1 = pd.merge(station, trip, left_on='id', right_on='start_station_id')\nanswer = [t1['lat'].mean(), t1['long'].mean()]", false], ["t1 = pd.merge(station, trip, left_on='id', right_on='start_station_id')\nt2 = t1[['lat', 'long']].mean(axis=0)\nanswer = t2.to_frame().transpose()", false]]}
{"example": {"db_id": "student_1", "query": "SELECT DISTINCT firstname ,  lastname FROM teachers", "query_toks": ["SELECT", "DISTINCT", "firstname", ",", "lastname", "FROM", "teachers"], "query_toks_no_value": ["select", "distinct", "firstname", ",", "lastname", "from", "teachers"], "question": "Report the first name and last name of all the teachers.", "question_toks": ["Report", "the", "first", "name", "and", "last", "name", "of", "all", "the", "teachers", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [true, [[0, [0, [0, 6, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"list": ["LastName", "FirstName", "Grade", "Classroom"], "teachers": ["LastName", "FirstName", "Classroom"]}, "answer": [[" JEROME", "COVIN"], [" GORDON", "KAWA"], [" BILLIE", "KRIENER"], [" MIN", "MACROSTIE"], [" KIRK", "MARROTTE"], [" OTHA", "MOYER"], [" JERLENE", "NIBLER"], [" LORIA", "ONDERSMA"], [" ALFREDA", "SUGAI"], [" GEORGETTA", "SUMPTION"], [" LEIA", "TARRING"], [" CHARMAINE", "URSERY"]]}, "program_result_list": [["answer = teachers[['firstname', 'lastname']].drop_duplicates()", false], ["answer = teachers.drop_duplicates()", false], ["answer = teachers[['firstname', 'lastname']].drop_duplicates()", false], ["answer = teachers.drop_duplicates(['firstname', 'lastname'])", false], ["answer = teachers.drop_duplicates(subset=['firstname', 'lastname'])", false], ["answer = teachers.drop_duplicates(subset=['firstname', 'lastname'])", false], ["answer = teachers.drop_duplicates(subset=['firstname', 'lastname'])", false], ["answer = teachers[['firstname', 'lastname']].drop_duplicates()", false], ["answer = teachers[['firstname','lastname']].drop_duplicates()", false], ["answer = teachers[['firstname', 'lastname']].drop_duplicates()", false], ["answer = teachers.drop_duplicates(['firstname', 'lastname'])", false], ["answer = teachers.drop_duplicates()", false], ["answer = teachers[['firstname', 'lastname']].drop_duplicates()", false], ["answer = teachers.drop_duplicates(['firstname', 'lastname'])", false], ["t1 = teachers.drop_duplicates(['firstname', 'lastname'])\nanswer = t1[['firstname', 'lastname']]", false], ["answer = teachers.drop_duplicates(subset=['firstname', 'lastname'])", false], ["t1 = teachers.drop_duplicates()\nanswer = t1[['firstname', 'lastname']]", false], ["answer = teachers[['firstname', 'lastname']].drop_duplicates()", false], ["answer = teachers.drop_duplicates(['firstname', 'lastname'])", false], ["answer = teachers.drop_duplicates(['firstname', 'lastname'])", false]]}
{"example": {"db_id": "music_1", "query": "SELECT count(*) ,  formats FROM files GROUP BY formats", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "formats", "FROM", "files", "GROUP", "BY", "formats"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "formats", "from", "files", "group", "by", "formats"], "question": "For each file format, return the number of artists who released songs in that format.", "question_toks": ["For", "each", "file", "format", ",", "return", "the", "number", "of", "artists", "who", "released", "songs", "in", "that", "format", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [[0, 12, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"genre": ["g_name", "rating", "most_popular_in"], "artist": ["artist_name", "country", "gender", "preferred_genre"], "files": ["f_id", "artist_name", "file_size", "duration", "formats"], "song": ["song_name", "artist_name", "country", "f_id", "genre_is", "rating", "languages", "releasedate", "resolution"]}, "answer": [[2, "mp3"], [4, "mp4"]]}, "program_result_list": [["answer = files.groupby('formats').size().rename('count').to_frame().reset_index()", false], ["t1 = files.groupby('formats').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["t1 = files.groupby('formats').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["answer = files.groupby('formats').size().rename('count').to_frame().reset_index()", false], ["t1 = files.groupby('formats').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["answer = files.groupby('formats').size().rename('count').to_frame()", false], ["t1 = files.groupby('formats').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["t1 = files.groupby('formats').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["answer = files.groupby('formats').size().rename('count')", false], ["t1 = files.groupby('formats').size().rename('count')\nanswer = t1.to_frame()", false], ["answer = files.groupby('formats').size().rename('count').to_frame().reset_index()", false], ["t1 = files.groupby(['formats']).size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["t1 = files.groupby('formats').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["t1 = files.groupby('formats').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["answer = files.groupby('formats').size().rename('count').to_frame().reset_index()", false], ["t1 = files.groupby('formats').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["t1 = files.groupby('formats').size().rename('count').to_frame().reset_index()\nanswer = t1", false], ["t1 = files.groupby('formats').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["t1 = files.groupby('formats').size().rename('count').to_frame()\nanswer = t1.reset_index()", false], ["t1 = files.groupby('formats').size().rename('count')\nanswer = t1.to_frame().reset_index()", false]]}
{"example": {"db_id": "bike_1", "query": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"", "query_toks": ["SELECT", "T1.name", ",", "T1.id", "FROM", "station", "AS", "T1", "JOIN", "status", "AS", "T2", "ON", "T1.id", "=", "T2.station_id", "GROUP", "BY", "T2.station_id", "HAVING", "avg", "(", "T2.bikes_available", ")", ">", "14", "UNION", "SELECT", "name", ",", "id", "FROM", "station", "WHERE", "installation_date", "LIKE", "``", "12/", "%", "''"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "id", "from", "station", "as", "t1", "join", "status", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "station_id", "group", "by", "t2", ".", "station_id", "having", "avg", "(", "t2", ".", "bikes_available", ")", ">", "value", "union", "select", "name", ",", "id", "from", "station", "where", "installation_date", "like", "value"], "question": "What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?", "question_toks": ["What", "are", "the", "names", "and", "ids", "of", "stations", "that", "had", "more", "than", "14", "bikes", "available", "on", "average", "or", "were", "installed", "in", "December", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [[false, 3, [0, [5, 9, false], null], 14.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 1, false], null]]]], "where": [[false, 9, [0, [0, 7, false], null], "\"12/%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, "db_table_headers": {"station": ["id", "name", "lat", "long", "dock_count", "city", "installation_date"], "status": ["station_id", "bikes_available", "docks_available", "time"], "trip": ["id", "duration", "start_date", "start_station_name", "start_station_id", "end_date", "end_station_name", "end_station_id", "bike_id", "subscription_type", "zip_code"], "weather": ["date", "max_temperature_f", "mean_temperature_f", "min_temperature_f", "max_dew_point_f", "mean_dew_point_f", "min_dew_point_f", "max_humidity", "mean_humidity", "min_humidity", "max_sea_level_pressure_inches", "mean_sea_level_pressure_inches", "min_sea_level_pressure_inches", "max_visibility_miles", "mean_visibility_miles", "min_visibility_miles", "max_wind_Speed_mph", "mean_wind_speed_mph", "max_gust_speed_mph", "precipitation_inches", "cloud_cover", "events", "wind_dir_degrees", "zip_code"]}, "answer": [["Castro Street and El Camino Real", 32], ["Civic Center BART (7th at Market)", 72], ["Market at Sansome", 77], ["San Antonio Shopping Center", 31], ["Santa Clara County Civic Center", 80]]}, "program_result_list": [["t1 = pd.merge(station, status, left_on='id', right_on='station_id')\nt2 = t1.groupby('id').agg({'bikes_available': 'mean'}).rename(columns={'bikes_available': 'bikes_avg'})\nt3 = t2[t2['bikes_avg'] > 14].to_frame().reset_index()\nt4 = pd.merge(station, t3, left_on='id', right_on='id')\nt5 = station[station['installation_date'].str.contains('12/')][['name', 'id']]\nanswer = pd.concat([t4[['name', 'id']], t5], ignore_index=True).drop_duplicates(['name', 'id']).reset_index(drop=True)", false], ["t1 = pd.merge(station, status, left_on='id', right_on='station_id')\nt2 = t1.groupby(['id', 'name']).mean()\nt3 = t2[t2['bikes_available'] > 14]\nt4 = station[station['installation_date'].str.contains('12/')]\nt5 = pd.concat([t3, t4], ignore_index=True)\nanswer = t5[['name', 'id']].drop_duplicates()", false], ["t1 = pd.merge(station, status, left_on='id', right_on='station_id')\nt2 = t1.groupby(['name', 'id']).agg({'bikes_available': 'mean'}).rename(columns={'bikes_available': 'avg_bikes_available'})\nt3 = t2[t2['avg_bikes_available'] > 14]\nt4 = station[station['installation_date'].str.contains('12/')]\nt5 = t3.append(t4).drop_duplicates()\nanswer = t5[['name', 'id']].reset_index(drop=True)", false], ["t1 = pd.merge(station, status, left_on='id', right_on='station_id')\nt2 = t1.groupby('station_id', as_index=False).mean()\nt3 = t2[t2['bikes_available'] > 14]\nt4 = t1[t1['installation_date'].str.contains('12/')].drop_duplicates()\nt5 = t3.append(t4, sort=False).drop_duplicates()\nanswer = t5[['name', 'id']]", false], ["t1 = pd.merge(station, status, on='id')\nt2 = t1.groupby(['id', 'name']).mean()['bikes_available'].rename('avg_bikes_available')\nt3 = t2[t2 > 14].to_frame().reset_index()\nt4 = station[station['installation_date'].str.contains('12/')][['id', 'name']]\nanswer = pd.concat([t3, t4])", false], ["t1 = pd.merge(station, status, left_on='id', right_on='station_id').groupby('station_id').mean().rename(columns={'bikes_available': 'mean'})\nt2 = t1[t1['mean'] > 14].to_frame().reset_index()\nt3 = station[station['installation_date'].str.contains('12/')][['name', 'id']]\nanswer = pd.concat([t2['name'], t2['id'], t3], ignore_index=True)", false], ["t1 = pd.merge(station, status, on='id')\nt2 = t1.groupby('id').agg({'bikes_available': 'mean'})\nt3 = t2[t2['bikes_available'] > 14].reset_index()\nt4 = pd.merge(t3, station, on='id')\nt5 = station[station['installation_date'].str.contains(\"12/\")]\nanswer = pd.concat([t4[['name', 'id']], t5[['name', 'id']]])", false], ["t1 = pd.merge(station, status, left_on='id', right_on='station_id')\nt2 = t1[t1['bikes_available'] > 14]\nt3 = t2['station_id'].unique()\nt4 = station[station['installation_date'].str.contains('12/')]\nt5 = pd.concat([t4, t3])\nanswer = t5[['name', 'id']]", false], ["t1 = pd.merge(station, status, left_on='id', right_on='station_id')\nt2 = t1.groupby('station_id').mean()\nt3 = t2[t2['bikes_available'] > 14].reset_index()\nt4 = t3['station_id'].to_frame()\nt5 = pd.merge(station, t4, left_on='id', right_on='station_id')\nt6 = station[station['installation_date'].str.contains('12/')]\nanswer = pd.concat([t5[['id', 'name']], t6[['id', 'name']]]).drop_duplicates()", false], ["t1 = pd.merge(station, status, left_on='id', right_on='station_id')\nt2 = t1.groupby('station_id').agg({'name': 'first', 'id': 'first', 'bikes_available': 'mean'})\nt3 = t2[t2['bikes_available'] > 14][['name', 'id']]\nt4 = station[station['installation_date'].str.contains('12/')][['name', 'id']]\nanswer = pd.concat([t3, t4], ignore_index=True).drop_duplicates(subset=['name', 'id'])", false], ["t1 = pd.merge(station, status, left_on='id', right_on='station_id')\nt2 = t1.groupby('station_id').bikes_available.mean().rename('avg_bikes_available').to_frame().reset_index()\nt3 = t2[t2['avg_bikes_available'] > 14]\nt4 = station[station['installation_date'].str.contains('/12/')]\nanswer = pd.concat([t4[['name', 'id']], t3[['station_id', 'avg_bikes_available']]]).drop_duplicates()", false], ["t1 = pd.merge(station, status, left_on='id', right_on='station_id')\nt2 = t1.groupby('station_id').mean().reset_index()\nt3 = t2[t2['bikes_available'] > 14]\nt4 = station[station['installation_date'].str.contains('12/')]\nt5 = pd.concat([t3, t4])\nanswer = t5[['name', 'id']]", false], ["t1 = pd.merge(status, station, left_on='station_id', right_on='id')\nt2 = t1.groupby('station_id').mean()\nt3 = t2[t2['bikes_available'] > 14]\nt4 = station[station['installation_date'].str.contains('12/')]\nt5 = pd.merge(t3, station, left_on='station_id', right_on='id')\nt6 = pd.merge(t4, t5, how='outer')\nanswer = t6[['name_x', 'id_x']]", false], ["t1 = pd.merge(station, status, left_on='id', right_on='station_id')\nt2 = t1.groupby('station_id').mean()\nt3 = t2[t2['bikes_available'] > 14].reset_index()\nt4 = t3['station_id'].unique()\nt5 = station[station['id'].isin(t4)]\nt6 = station[station['installation_date'].str.contains('12/')]\nanswer = t5.append(t6)", false], ["t1 = pd.merge(station, status, left_on='id', right_on='station_id')\nt2 = t1.groupby(['name', 'id'])['bikes_available'].mean().rename('avg_bikes_available').to_frame().reset_index()\nt3 = t2[t2['avg_bikes_available'] > 14]\nt4 = station[station['installation_date'].str.contains('/12/')]\nanswer = pd.concat([t3, t4])", false], ["t1 = status.groupby('station_id').mean()[['bikes_available']].rename(columns={'bikes_available':'avg_bikes_available'})\nt2 = station[station['installation_date'].str.contains('12/')][['name', 'id']]\nt3 = t1[t1['avg_bikes_available'] > 14][['avg_bikes_available']].join(station)\nanswer = pd.concat([t2, t3[['name', 'id']]])", false], ["t1 = station[station['installation_date'].str.contains('12/')].drop_duplicates(['id', 'name'])\nt2 = station.merge(status, left_on='id', right_on='station_id').groupby('station_id').agg({'name':'first', 'id':'first', 'bikes_available':'mean'})\nt3 = t2[t2['bikes_available'] > 14]\nt4 = t1.append(t3).drop_duplicates(['id', 'name'])\nanswer = t4[['name', 'id']]", false], ["t1 = pd.merge(station, status, left_on='id', right_on='station_id')\nt2 = t1.groupby('station_id').bikes_available.mean().rename('avg').to_frame().reset_index()\nt3 = t2[t2['avg'] > 14]\nt4 = station[station['installation_date'].str.contains('12/')]\nt5 = pd.concat([t4, t3]).drop_duplicates()\nanswer = t5[['name', 'id']]", false], ["t1 = pd.merge(station, status, left_on='id', right_on='station_id')\nt2 = t1.groupby('station_id').mean()\nt3 = t2[t2['bikes_available'] > 14].reset_index()\nt4 = station[station['installation_date'].str.contains('12/')]\nt5 = t3[['name', 'id']].append(t4[['name', 'id']])\nanswer = t5.drop_duplicates()", false], ["t1 = pd.merge(station, status, left_on='id', right_on='station_id')\nt2 = t1.groupby('station_id').agg({'name': lambda x: x.iloc[0], 'id': lambda x: x.iloc[0], 'bikes_available': np.mean}).rename(columns={'bikes_available': 'avg_bikes_available'})\nt3 = t2[t2['avg_bikes_available'] > 14]\nt4 = station[station['installation_date'].str.contains('12/')]\nanswer = pd.concat([t3[['name', 'id']], t4[['name', 'id']]])", false]]}
{"example": {"db_id": "college_1", "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'", "query_toks": ["SELECT", "T1.stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T2.class_code", "=", "T3.class_code", "JOIN", "course", "AS", "T4", "ON", "T3.crs_code", "=", "T4.crs_code", "JOIN", "department", "AS", "T5", "ON", "T5.dept_code", "=", "T4.dept_code", "WHERE", "T5.dept_name", "=", "'Accounting", "'", "INTERSECT", "SELECT", "T1.stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T2.class_code", "=", "T3.class_code", "JOIN", "course", "AS", "T4", "ON", "T3.crs_code", "=", "T4.crs_code", "JOIN", "department", "AS", "T5", "ON", "T5.dept_code", "=", "T4.dept_code", "WHERE", "T5.dept_name", "=", "'Computer", "Info", ".", "Systems", "'"], "query_toks_no_value": ["select", "t1", ".", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t2", ".", "class_code", "=", "t3", ".", "class_code", "join", "course", "as", "t4", "on", "t3", ".", "crs_code", "=", "t4", ".", "crs_code", "join", "department", "as", "t5", "on", "t5", ".", "dept_code", "=", "t4", ".", "dept_code", "where", "t5", ".", "dept_name", "=", "value", "intersect", "select", "t1", ".", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t2", ".", "class_code", "=", "t3", ".", "class_code", "join", "course", "as", "t4", "on", "t3", ".", "crs_code", "=", "t4", ".", "crs_code", "join", "department", "as", "t5", "on", "t5", ".", "dept_code", "=", "t4", ".", "dept_code", "where", "t5", ".", "dept_name", "=", "value"], "question": "Find the first name of student who is taking classes from accounting and Computer Info. Systems departments", "question_toks": ["Find", "the", "first", "name", "of", "student", "who", "is", "taking", "classes", "from", "accounting", "and", "Computer", "Info", ".", "Systems", "departments"], "sql": {"from": {"table_units": [["table_unit", 6], ["table_unit", 4], ["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 25, false], null], "and", [false, 2, [0, [0, 24, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 2, false], null], [0, 7, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 34, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"Accounting\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 6], ["table_unit", 4], ["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 25, false], null], "and", [false, 2, [0, [0, 24, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 2, false], null], [0, 7, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 34, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"Computer Info. Systems\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "db_table_headers": {"CLASS": ["CLASS_CODE", "CRS_CODE", "CLASS_SECTION", "CLASS_TIME", "CLASS_ROOM", "PROF_NUM"], "COURSE": ["CRS_CODE", "DEPT_CODE", "CRS_DESCRIPTION", "CRS_CREDIT"], "DEPARTMENT": ["DEPT_CODE", "DEPT_NAME", "SCHOOL_CODE", "EMP_NUM", "DEPT_ADDRESS", "DEPT_EXTENSION"], "EMPLOYEE": ["EMP_NUM", "EMP_LNAME", "EMP_FNAME", "EMP_INITIAL", "EMP_JOBCODE", "EMP_HIREDATE", "EMP_DOB"], "ENROLL": ["CLASS_CODE", "STU_NUM", "ENROLL_GRADE"], "PROFESSOR": ["EMP_NUM", "DEPT_CODE", "PROF_OFFICE", "PROF_EXTENSION", "PROF_HIGH_DEGREE"], "STUDENT": ["STU_NUM", "STU_LNAME", "STU_FNAME", "STU_INIT", "STU_DOB", "STU_HRS", "STU_CLASS", "STU_GPA", "STU_TRANSFER", "DEPT_CODE", "STU_PHONE", "PROF_NUM"]}, "answer": [["Anne"], ["William"]]}, "program_result_list": [["t1 = pd.merge(STUDENT, ENROLL, how='inner', left_on='stu_num', right_on='stu_num')\nt2 = pd.merge(t1, CLASS, how='inner', left_on='class_code', right_on='class_code')\nt3 = pd.merge(t2, COURSE, how='inner', left_on='crs_code', right_on='crs_code')\nt4 = pd.merge(t3, DEPARTMENT, how='inner', left_on='dept_code', right_on='dept_code')\nt5 = t4[t4['dept_name'] == 'accounting']\nt6 = pd.merge(t1, CLASS, how='inner', left_on='class_code', right_on='class_code')\nt7 = pd.merge(t6, COURSE, how='inner', left_on='crs_code', right_on='crs_code')\nt8 = pd.merge(t", false], ["t1 = pd.merge(STUDENT, ENROLL, left_on='stu_num', right_on='stu_num')\nt2 = pd.merge(t1, CLASS, left_on='class_code', right_on='class_code')\nt3 = pd.merge(t2, COURSE, left_on='crs_code', right_on='crs_code')\nt4 = pd.merge(t3, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt5 = t4[t4['dept_name'] == 'accounting']\nt6 = t4[t4['dept_name'] == 'computer info. systems']\nanswer = pd.merge(t5, t6, left_on='stu_fname', right_on='stu_fname')['stu_fname'].unique()", false], ["t1 = pd.merge(STUDENT, ENROLL, left_on='stu_num', right_on='stu_num')\nt2 = pd.merge(t1, CLASS, left_on='class_code', right_on='class_code')\nt3 = pd.merge(t2, COURSE, left_on='crs_code', right_on='crs_code')\nt4 = pd.merge(t3, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt5 = t4[t4['dept_name'] == 'Accounting']\nt6 = t4[t4['dept_name'] == 'Computer Info. Systems']\nanswer = t5[t5['stu_fname'].isin(t6['stu_fname'])]['stu_fname']", false], ["t1 = pd.merge(STUDENT, ENROLL, left_on='stu_num', right_on='stu_num')\nt2 = pd.merge(t1, CLASS, left_on='class_code', right_on='class_code')\nt3 = pd.merge(t2, COURSE, left_on='crs_code', right_on='crs_code')\nt4 = pd.merge(t3, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt5 = t4[t4['dept_name'] == 'accounting']\nt6 = t4[t4['dept_name'] == 'computer info. systems']\nt7 = t5[['stu_fname']].merge(t6[['stu_fname']], on='stu_fname')\nanswer = t7['stu_fname'].unique()", false], ["t1 = pd.merge(STUDENT, ENROLL, on=['stu_num'])\nt2 = pd.merge(t1, CLASS, on=['class_code'])\nt3 = pd.merge(t2, COURSE, on=['crs_code'])\nt4 = pd.merge(t3, DEPARTMENT, on=['dept_code'])\nt5 = t4[t4['dept_name'] == 'Accounting']\nt6 = t4[t4['dept_name'] == 'Computer Info. Systems']\nt7 = pd.merge(t5, t6, on='stu_fname', how='inner')\nanswer = t7['stu_fname']", false], ["t1 = pd.merge(STUDENT, ENROLL, left_on='stu_num', right_on='stu_num')\nt2 = pd.merge(t1, CLASS, left_on='class_code', right_on='class_code')\nt3 = pd.merge(t2, COURSE, left_on='crs_code', right_on='crs_code')\nt4 = pd.merge(t3, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt5 = t4[t4['dept_name'] == 'Accounting']\nt6 = t4[t4['dept_name'] == 'Computer Info. Systems']\nanswer = t5[t5['stu_fname'].isin(t6['stu_fname'])]\n \n# Dataset college_1:", false], ["t1 = pd.merge(STUDENT, ENROLL, left_on='stu_num', right_on='stu_num')\nt2 = pd.merge(t1, CLASS, left_on='class_code', right_on='class_code')\nt3 = pd.merge(t2, COURSE, left_on='crs_code', right_on='crs_code')\nt4 = pd.merge(t3, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt5 = t4[t4['dept_name'] == 'Accounting']\nt6 = t4[t4['dept_name'] == 'Computer Info. Systems']\nt7 = pd.merge(t5, t6, on='stu_fname', how='inner')\nanswer = t7['stu_fname']", false], ["t1 = pd.merge(STUDENT, ENROLL, left_on='stu_num', right_on='stu_num')\nt2 = pd.merge(t1, CLASS, left_on='class_code', right_on='class_code')\nt3 = pd.merge(t2, COURSE, left_on='crs_code', right_on='crs_code')\nt4 = pd.merge(t3, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt5 = t4[t4['dept_name'] == 'Accounting']\nt6 = t4[t4['dept_name'] == 'Computer Info. Systems']\nanswer = t5[['stu_fname']].merge(t6[['stu_fname']], on='stu_fname')", false], ["t1 = pd.merge(STUDENT, ENROLL, left_on='stu_num', right_on='stu_num')\nt2 = pd.merge(t1, CLASS, left_on='class_code', right_on='class_code')\nt3 = pd.merge(t2, COURSE, left_on='crs_code', right_on='crs_code')\nt4 = pd.merge(t3, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt5 = t4[t4['dept_name'] == 'accounting']\nt6 = t4[t4['dept_name'] == 'computer info. systems']\nt7 = t5['stu_fname'].append(t6['stu_fname'])\nanswer = t7.unique()", false], ["t1 = pd.merge(STUDENT, ENROLL, left_on='stu_num', right_on='stu_num')\nt2 = pd.merge(t1, CLASS, left_on='class_code', right_on='class_code')\nt3 = pd.merge(t2, COURSE, left_on='crs_code', right_on='crs_code')\nt4 = pd.merge(t3, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt5 = t4[t4['dept_name'] == 'accounting']\nt6 = pd.merge(STUDENT, ENROLL, left_on='stu_num', right_on='stu_num')\nt7 = pd.merge(t6, CLASS, left_on='class_code', right_on='class_code')\nt8 = pd.merge(t7, COURSE, left_on='crs_code', right_on='crs_code", false], ["t1 = pd.merge(STUDENT, ENROLL, on='stu_num')\nt2 = pd.merge(t1, CLASS, on='class_code')\nt3 = pd.merge(t2, COURSE, on='crs_code')\nt4 = pd.merge(t3, DEPARTMENT, on='dept_code')\nt5 = t4[t4['dept_name'] == 'Accounting']\nt6 = t4[t4['dept_name'] == 'Computer Info. Systems']\nt7 = pd.merge(t5, t6, on='stu_fname', how='inner')\nanswer = t7['stu_fname']", false], ["t1 = pd.merge(STUDENT, ENROLL, left_on='stu_num', right_on='stu_num')\nt2 = pd.merge(t1, CLASS, left_on='class_code', right_on='class_code')\nt3 = pd.merge(t2, COURSE, left_on='crs_code', right_on='crs_code')\nt4 = pd.merge(t3, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt5 = t4[t4['dept_name'] == 'Accounting']\nt6 = t4[t4['dept_name'] == 'Computer Info. Systems']\nanswer = t5.merge(t6, on='stu_fname', how='intersection')['stu_fname']", false], ["t1 = pd.merge(STUDENT, ENROLL, left_on='stu_num', right_on='stu_num')\nt2 = pd.merge(t1, CLASS, left_on='class_code', right_on='class_code')\nt3 = pd.merge(t2, COURSE, left_on='crs_code', right_on='crs_code')\nt4 = pd.merge(t3, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt5 = t4[t4['dept_name'] == 'accounting']\nt6 = t4[t4['dept_name'] == 'computer info. systems']\nanswer = list(set(t5['stu_fname']).intersection(set(t6['stu_fname'])))", false], ["t1 = pd.merge(STUDENT, ENROLL, left_on='stu_num', right_on='stu_num')\nt2 = pd.merge(t1, CLASS, left_on='class_code', right_on='class_code')\nt3 = pd.merge(t2, COURSE, left_on='crs_code', right_on='crs_code')\nt4 = pd.merge(t3, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt5 = t4[t4['dept_name'] == 'Accounting']\nt6 = t4[t4['dept_name'] == 'Computer Info. Systems']\nt7 = pd.merge(t5, t6, on='stu_fname', how='inner')\nanswer = t7['stu_fname']", false], ["t1 = pd.merge(STUDENT, ENROLL, left_on='stu_num', right_on='stu_num')\nt2 = pd.merge(t1, CLASS, left_on='class_code', right_on='class_code')\nt3 = pd.merge(t2, COURSE, left_on='crs_code', right_on='crs_code')\nt4 = pd.merge(t3, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt5 = t4[t4['dept_name'] == 'Accounting']\nt6 = t4[t4['dept_name'] == 'Computer Info. Systems']\nt7 = pd.merge(t5, t6, on='stu_fname', how='inner')\nanswer = t7['stu_fname']", false], ["t1 = pd.merge(STUDENT, ENROLL, left_on='stu_num', right_on='stu_num')\nt2 = pd.merge(t1, CLASS, left_on='class_code', right_on='class_code')\nt3 = pd.merge(t2, COURSE, left_on='crs_code', right_on='crs_code')\nt4 = pd.merge(t3, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt5 = t4[t4['dept_name'] == 'Accounting']\nt6 = t4[t4['dept_name'] == 'Computer Info. Systems']\nt7 = t5.merge(t6, on='stu_fname', how='inner')\nanswer = t7['stu_fname']", false], ["t1 = pd.merge(STUDENT, ENROLL, left_on='stu_num', right_on='stu_num')\nt2 = pd.merge(t1, CLASS, left_on='class_code', right_on='class_code')\nt3 = pd.merge(t2, COURSE, left_on='crs_code', right_on='crs_code')\nt4 = pd.merge(t3, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt5 = t4[t4['dept_name'] == 'accounting']\nt6 = pd.merge(t1, CLASS, left_on='class_code', right_on='class_code')\nt7 = pd.merge(t6, COURSE, left_on='crs_code', right_on='crs_code')\nt8 = pd.merge(t7, DEPARTMENT, left_on='dept_code', right_on='dept_code')", false], ["t1 = pd.merge(STUDENT, ENROLL, left_on='stu_num', right_on='stu_num')\nt2 = pd.merge(t1, CLASS, left_on='class_code', right_on='class_code')\nt3 = pd.merge(t2, COURSE, left_on='crs_code', right_on='crs_code')\nt4 = pd.merge(t3, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt5 = t4[t4['dept_name'] == 'Accounting']\nt6 = t5[['stu_fname']]\nt7 = t4[t4['dept_name'] == 'Computer Info. Systems']\nt8 = t7[['stu_fname']]\nt9 = pd.merge(t6, t8, on='stu_fname')\nanswer = t9['stu_fname']", false], ["t1 = pd.merge(STUDENT, ENROLL, left_on='stu_num', right_on='stu_num')\nt2 = pd.merge(t1, CLASS, left_on='class_code', right_on='class_code')\nt3 = pd.merge(t2, COURSE, left_on='crs_code', right_on='crs_code')\nt4 = pd.merge(t3, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt5 = t4[t4['dept_name'] == 'Accounting']\nt6 = t4[t4['dept_name'] == 'Computer Info. Systems']\nt7 = pd.merge(t5, t6, on='stu_fname', how='inner')\nanswer = t7['stu_fname']", false], ["t1 = pd.merge(STUDENT, ENROLL, left_on='stu_num', right_on='stu_num')\nt2 = pd.merge(t1, CLASS, left_on='class_code', right_on='class_code')\nt3 = pd.merge(t2, COURSE, left_on='crs_code', right_on='crs_code')\nt4 = pd.merge(t3, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt5 = t4[t4['dept_name'] == 'Accounting']\nt6 = t4[t4['dept_name'] == 'Computer Info. Systems']\nt7 = t5[['stu_fname']].append(t6[['stu_fname']])\nanswer = t7['stu_fname'].unique()", false]]}
{"example": {"db_id": "music_1", "query": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7", "query_toks": ["SELECT", "DISTINCT", "artist_name", "FROM", "artist", "WHERE", "country", "=", "``", "Bangladesh", "''", "EXCEPT", "SELECT", "DISTINCT", "artist_name", "FROM", "song", "WHERE", "rating", ">", "7"], "query_toks_no_value": ["select", "distinct", "artist_name", "from", "artist", "where", "country", "=", "value", "except", "select", "distinct", "artist_name", "from", "song", "where", "rating", ">", "value"], "question": "Find the names of the artists who are from Bangladesh and have never received rating higher than 7.", "question_toks": ["Find", "the", "names", "of", "the", "artists", "who", "are", "from", "Bangladesh", "and", "have", "never", "received", "rating", "higher", "than", "7", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [true, [[0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Bangladesh\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [true, [[0, [0, [0, 14, false], null]]]], "where": [[false, 3, [0, [0, 18, false], null], 7.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "db_table_headers": {"genre": ["g_name", "rating", "most_popular_in"], "artist": ["artist_name", "country", "gender", "preferred_genre"], "files": ["f_id", "artist_name", "file_size", "duration", "formats"], "song": ["song_name", "artist_name", "country", "f_id", "genre_is", "rating", "languages", "releasedate", "resolution"]}, "answer": [["Farida"], ["Prity"]]}, "program_result_list": [["t1 = artist[artist['country'] == 'Bangladesh']\nt2 = song[song['rating'] > 7]\nanswer = t1[~t1['artist_name'].isin(t2['artist_name'])]", false], ["t1 = artist[artist['country'] == 'bangladesh']['artist_name']\nt2 = song[song['rating'] > 7]['artist_name']\nanswer = t1.append(t2).drop_duplicates(keep=False)", false], ["t1 = artist[artist['country'] == 'Bangladesh']['artist_name']\nt2 = song[song['rating'] > 7]['artist_name']\nanswer = t1[~t1.isin(t2)].to_frame().reset_index(drop=True)", false], ["t1 = artist[artist['country'] == 'Bangladesh']\nt2 = song[song['rating'] > 7]\nt3 = pd.merge(t1, t2, on='artist_name', how='outer', indicator=True)\nanswer = t3[t3['_merge'] == 'left_only']['artist_name']", false], ["t1 = artist[artist['country'] == 'Bangladesh']\nt2 = t1['artist_name'].to_frame()\nt3 = song[song['rating'] > 7]\nt4 = t3['artist_name'].to_frame()\nanswer = t2[~t2.isin(t4)].dropna(how='any')", false], ["t1 = artist[artist['country'] == 'Bangladesh'].drop_duplicates()\nt2 = song[song['rating'] > 7].drop_duplicates()\nt3 = pd.merge(t1, t2, on='artist_name', how='left', indicator=True)\nanswer = t3[t3['_merge'] == 'left_only']['artist_name'].drop_duplicates()", false], ["t1 = artist[artist['country'] == 'Bangladesh']['artist_name'].unique()\nt2 = song[song['rating'] > 7]['artist_name'].unique()\nt3 = np.setdiff1d(t1, t2)\nanswer = pd.DataFrame({'artist_name': t3})", false], ["t1 = artist[artist['country'] == 'Bangladesh']\nt2 = song[song['rating'] > 7]\nanswer = t1[~t1['artist_name'].isin(t2['artist_name'])]['artist_name']", false], ["t1 = artist[artist['country'] == 'Bangladesh']\nt2 = song[song['rating'] > 7]\nanswer = t1[~t1['artist_name'].isin(t2['artist_name'])]['artist_name'].unique()", false], ["t1 = artist[artist['country'] == 'Bangladesh']['artist_name'].to_frame()\nt2 = song[song['rating'] > 7]['artist_name'].to_frame()\nt3 = t1.merge(t2, left_on='artist_name', right_on='artist_name', how='outer', indicator=True)\nanswer = t3[t3['_merge'] == 'left_only']['artist_name']", false], ["t1 = artist[artist['country'] == 'Bangladesh']\nt2 = song[song['rating'] > 7]\nanswer = t1[~t1['artist_name'].isin(t2['artist_name'])]", false], ["t1 = artist[artist['country'] == 'Bangladesh']\nt2 = song[song['rating'] > 7]\nt3 = t1[~t1.artist_name.isin(t2.artist_name)]\nanswer = t3['artist_name']", false], ["t1 = artist[artist['country'] == 'Bangladesh'].drop_duplicates(subset='artist_name')\nt2 = song[song['rating'] > 7].drop_duplicates(subset='artist_name')\nanswer = t1.loc[~t1['artist_name'].isin(t2['artist_name'])]", false], ["t1 = artist[artist['country'] == 'Bangladesh']\nt2 = t1['artist_name'].unique()\nt3 = song[song['rating'] > 7]\nanswer = t2[~t2.isin(t3['artist_name'])]", false], ["t1 = artist[artist['country'] == 'Bangladesh']\nt2 = song[song['rating'] > 7]\nanswer = t1[~t1['artist_name'].isin(t2['artist_name'])]", false], ["t1 = artist[artist['country'] == 'Bangladesh'].drop_duplicates()\nt2 = song[song['rating'] > 7].drop_duplicates()\nt3 = pd.merge(t1, t2, on='artist_name', how='left')\nanswer = t3[t3['rating'].isnull()]['artist_name']", false], ["t1 = artist[artist['country'] == 'Bangladesh']\nt2 = t1['artist_name'].unique()\nt3 = song[song['rating'] > 7]\nt4 = t3['artist_name'].unique()\nanswer = np.setdiff1d(t2, t4)", false], ["t1 = artist[artist['country'] == 'Bangladesh']\nt2 = song[song['rating'] > 7]\nanswer = t1.append(t2).drop_duplicates(keep=False)", false], ["\nt1 = artist[artist['country'] == 'Bangladesh']['artist_name'].unique()\nt2 = song[song['rating'] > 7]['artist_name'].unique()\nanswer = np.setdiff1d(t1, t2)", false], ["t1 = artist[artist['country'] == 'Bangladesh']\nt2 = song[song['rating'] > 7]\nanswer = t1[~t1.artist_name.isin(t2.artist_name)]", false]]}
{"example": {"db_id": "gas_company", "query": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100", "query_toks": ["SELECT", "T3.location", "FROM", "station_company", "AS", "T1", "JOIN", "company", "AS", "T2", "ON", "T1.company_id", "=", "T2.company_id", "JOIN", "gas_station", "AS", "T3", "ON", "T1.station_id", "=", "T3.station_id", "WHERE", "T2.market_value", ">", "100"], "query_toks_no_value": ["select", "t3", ".", "location", "from", "station_company", "as", "t1", "join", "company", "as", "t2", "on", "t1", ".", "company_id", "=", "t2", ".", "company_id", "join", "gas_station", "as", "t3", "on", "t1", ".", "station_id", "=", "t3", ".", "station_id", "where", "t2", ".", "market_value", ">", "value"], "question": "Show all locations where a gas station for company with market value greater than 100 is located.", "question_toks": ["Show", "all", "locations", "where", "a", "gas", "station", "for", "company", "with", "market", "value", "greater", "than", "100", "is", "located", "."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 17, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 16, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 3, [0, [0, 9, false], null], 100.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"company": ["Company_ID", "Rank", "Company", "Headquarters", "Main_Industry", "Sales_billion", "Profits_billion", "Assets_billion", "Market_Value"], "gas_station": ["Station_ID", "Open_Year", "Location", "Manager_Name", "Vice_Manager_Name", "Representative_Name"], "station_company": ["Station_ID", "Company_ID", "Rank_of_the_Year"]}, "answer": [["Herne Hill"], ["Herne St"], ["Herne Ave"], ["Hennry Hill"], ["Maindy Ave"], ["Newport Rd"]]}, "program_result_list": [["t1 = pd.merge(station_company, company, left_on='company_id', right_on='company_id')\nt2 = pd.merge(t1, gas_station, left_on='station_id', right_on='station_id')\nt3 = t2[t2['market_value'] > 100]\nanswer = t3['location']", false], ["t1 = pd.merge(station_company, company, on='company_id')\nt2 = pd.merge(t1, gas_station, on='station_id')\nt3 = t2[t2['market_value'] > 100]\nanswer = t3['location']", false], ["t1 = pd.merge(company, station_company, left_on='company_id', right_on='company_id')\nt2 = pd.merge(t1, gas_station, left_on='station_id', right_on='station_id')\nt3 = t2[t2['market_value'] > 100]\nanswer = t3['location']", false], ["t1 = pd.merge(station_company, company, left_on='company_id', right_on='company_id')\nt2 = pd.merge(t1, gas_station, left_on='station_id', right_on='station_id')\nanswer = t2[t2['market_value'] > 100]['location']", false], ["t1 = pd.merge(station_company, company, left_on='company_id', right_on='company_id')\nt2 = pd.merge(t1, gas_station, left_on='station_id', right_on='station_id')\nt3 = t2[t2['market_value'] > 100]\nanswer = t3['location']", false], ["t1 = pd.merge(station_company, company, left_on='company_id', right_on='company_id')\nt2 = pd.merge(t1, gas_station, left_on='station_id', right_on='station_id')\nanswer = t2[t2['market_value'] > 100]['location']", false], ["t1 = pd.merge(station_company, company, left_on='company_id', right_on='company_id')\nt2 = pd.merge(t1, gas_station, left_on='station_id', right_on='station_id')\nt3 = t2[t2['market_value'] > 100]\nanswer = t3['location']", false], ["t1 = pd.merge(station_company, company, left_on='company_id', right_on='company_id')\nt2 = pd.merge(t1, gas_station, left_on='station_id', right_on='station_id')\nt3 = t2[t2['market_value'] > 100]\nanswer = t3['location']", false], ["t1 = pd.merge(station_company, company, left_on='company_id', right_on='company_id')\nt2 = pd.merge(t1, gas_station, left_on='station_id', right_on='station_id')\nt3 = t2[t2['market_value'] > 100]\nanswer = t3['location']", false], ["t1 = pd.merge(station_company, company, left_on='company_id', right_on='company_id')\nt2 = pd.merge(t1, gas_station, left_on='station_id', right_on='station_id')\nt3 = t2[t2['market_value'] > 100]\nanswer = t3['location']", false], ["t1 = pd.merge(station_company, company, left_on='company_id', right_on='company_id')\nt2 = pd.merge(t1, gas_station, left_on='station_id', right_on='station_id')\nanswer = t2[t2['market_value'] > 100]['location']", false], ["t1 = pd.merge(station_company, company, on='company_id')\nt2 = pd.merge(t1, gas_station, on='station_id')\nt3 = t2[t2['market_value'] > 100]\nanswer = t3['location']", false], ["t1 = pd.merge(station_company, company, left_on='company_id', right_on='company_id')\nt2 = pd.merge(t1, gas_station, left_on='station_id', right_on='station_id')\nt3 = t2[t2['market_value'] > 100]\nanswer = t3['location']", false], ["t1 = pd.merge(station_company, company, on='company_id')\nt2 = pd.merge(t1, gas_station, on='station_id')\nanswer = t2[t2['market_value'] > 100]['location']", false], ["t1 = pd.merge(station_company, company, on='company_id')\nt2 = pd.merge(t1, gas_station, on='station_id')\nt3 = t2[t2['market_value'] > 100]\nanswer = t3['location']", false], ["t1 = pd.merge(station_company, company, on='company_id')\nt2 = pd.merge(t1, gas_station, on='station_id')\nanswer = t2[t2['market_value'] > 100]['location']", false], ["t1 = pd.merge(station_company, company, left_on='company_id', right_on='company_id')\nt2 = pd.merge(t1, gas_station, left_on='station_id', right_on='station_id')\nanswer = t2[t2['market_value'] > 100]['location']", false], ["t1 = pd.merge(station_company, company, left_on='company_id', right_on='company_id')\nt2 = pd.merge(t1, gas_station, left_on='station_id', right_on='station_id')\nt3 = t2[t2['market_value'] > 100]\nanswer = t3['location']", false], ["t1 = pd.merge(station_company, company, left_on='company_id', right_on='company_id')\nt2 = pd.merge(t1, gas_station, left_on='station_id', right_on='station_id')\nt3 = t2[t2['market_value'] > 100]\nanswer = t3['location']", false], ["t1 = pd.merge(station_company, company, left_on='company_id', right_on='company_id')\nt2 = pd.merge(t1, gas_station, left_on='station_id', right_on='station_id')\nanswer = t2[t2['market_value'] > 100]['location']", false]]}
{"example": {"db_id": "inn_1", "query": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';", "query_toks": ["SELECT", "sum", "(", "beds", ")", "FROM", "Rooms", "WHERE", "bedtype", "=", "'King", "'", ";"], "query_toks_no_value": ["select", "sum", "(", "beds", ")", "from", "rooms", "where", "bedtype", "=", "value"], "question": "How many king beds are there?", "question_toks": ["How", "many", "king", "beds", "are", "there", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[4, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"King\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Rooms": ["RoomId", "roomName", "beds", "bedType", "maxOccupancy", "basePrice", "decor"], "Reservations": ["Code", "Room", "CheckIn", "CheckOut", "Rate", "LastName", "FirstName", "Adults", "Kids"]}, "answer": [[6]]}, "program_result_list": [["answer = Rooms[Rooms['bedtype'] == 'king']['beds'].sum()", false], ["t1 = Rooms[Rooms['bedtype'] == 'king']\nanswer = t1['beds'].sum()", false], ["answer = Rooms[Rooms['bedtype'] == 'king']['beds'].sum()", false], ["t1 = Rooms[Rooms['bedtype'] == 'king']\nanswer = t1['beds'].sum()", false], ["t1 = Rooms[Rooms['bedtype'] == 'king']\nanswer = t1['beds'].sum()", false], ["t1 = Rooms[Rooms['bedtype'] == 'king']\nt2 = t1['beds'].sum()\nanswer = t2", false], ["answer = Rooms[Rooms['bedtype'] == 'king']['beds'].sum()", false], ["answer = Rooms[Rooms['bedtype'] == 'king']['beds'].sum()", false], ["t1 = Rooms[Rooms['bedtype'] == 'king']\nanswer = t1['beds'].sum()", false], ["answer = Rooms[Rooms['bedtype'] == 'king']['beds'].sum()", false], ["t1 = Rooms[Rooms['bedtype'] == 'king']\nanswer = t1['beds'].sum()", false], ["answer = Rooms[Rooms['bedtype'] == 'king']['beds'].sum()", false], ["answer = Rooms[Rooms['bedtype'] == 'king']['beds'].sum()", false], ["t1 = Rooms[Rooms['bedtype'] == 'king']\nanswer = t1['beds'].sum()", false], ["t1 = Rooms[Rooms['bedtype'] == 'king']\nanswer = t1['beds'].sum()", false], ["answer = Rooms[Rooms['bedtype'] == 'king']['beds'].sum()", false], ["t1 = Rooms[Rooms['bedtype'] == 'king']\nanswer = t1['beds'].sum()", false], ["answer = Rooms[Rooms['bedtype'] == 'king']['beds'].sum()", false], ["t1 = Rooms[Rooms['bedtype'] == 'king']\nanswer = t1['beds'].sum()", false], ["t1 = Rooms[Rooms['bedtype'] == 'king']\nanswer = t1['beds'].sum()", false]]}
{"example": {"db_id": "hospital_1", "query": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.name", "FROM", "medication", "AS", "T1", "JOIN", "prescribes", "AS", "T2", "ON", "T1.code", "=", "T2.medication", "GROUP", "BY", "T1.brand"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "name", "from", "medication", "as", "t1", "join", "prescribes", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "medication", "group", "by", "t1", ".", "brand"], "question": "How many medications are prescribed for each brand?", "question_toks": ["How", "many", "medications", "are", "prescribed", "for", "each", "brand", "?"], "sql": {"from": {"table_units": [["table_unit", 8], ["table_unit", 9]], "conds": [[false, 2, [0, [0, 36, false], null], [0, 42, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 37, false], null]]]], "where": [], "groupBy": [[0, 38, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Physician": ["EmployeeID", "Name", "Position", "SSN"], "Department": ["DepartmentID", "Name", "Head"], "Affiliated_With": ["Physician", "Department", "PrimaryAffiliation"], "Procedures": ["Code", "Name", "Cost"], "Trained_In": ["Physician", "Treatment", "CertificationDate", "CertificationExpires"], "Patient": ["SSN", "Name", "Address", "Phone", "InsuranceID", "PCP"], "Nurse": ["EmployeeID", "Name", "Position", "Registered", "SSN"], "Appointment": ["AppointmentID", "Patient", "PrepNurse", "Physician", "Start", "End", "ExaminationRoom"], "Medication": ["Code", "Name", "Brand", "Description"], "Prescribes": ["Physician", "Patient", "Medication", "Date", "Appointment", "Dose"], "Block": ["BlockFloor", "BlockCode"], "Room": ["RoomNumber", "RoomType", "BlockFloor", "BlockCode", "Unavailable"], "On_Call": ["Nurse", "BlockFloor", "BlockCode", "OnCallStart", "OnCallEnd"], "Stay": ["StayID", "Patient", "Room", "StayStart", "StayEnd"], "Undergoes": ["Patient", "Procedures", "Stay", "DateUndergoes", "Physician", "AssistingNurse"]}, "answer": [[2, "Thesisin"], [1, "Procrastin-X"]]}, "program_result_list": [["t1 = pd.merge(Medication, Prescribes, left_on='code', right_on='medication')\nt2 = t1.groupby('brand').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Medication, Prescribes, left_on='code', right_on='medication')\nanswer = t1.groupby('brand')['medication'].count().rename('count').to_frame().reset_index()", false], ["t1 = pd.merge(Medication, Prescribes, left_on='code', right_on='medication')\nt2 = t1.groupby('name').size().rename('count').to_frame().reset_index()\nanswer = t2", false], ["t1 = pd.merge(Medication, Prescribes, left_on='code', right_on='medication')\nt2 = t1.groupby('name').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Medication, Prescribes, left_on='code', right_on='medication')\nt2 = t1.groupby(['name']).size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Medication, Prescribes, left_on='code', right_on='medication')\nanswer = t1.groupby('name').size().rename('count')", false], ["t1 = pd.merge(Medication, Prescribes, on='code')\nt2 = t1.groupby('name').size().rename('count').to_frame().reset_index()\nanswer = t2", false], ["t1 = pd.merge(Medication, Prescribes, left_on='code', right_on='medication')\nt2 = t1.groupby('name').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Medication, Prescribes, left_on='code', right_on='medication')\nanswer = t1.groupby('brand').size().rename('count').to_frame().reset_index()", false], ["t1 = pd.merge(Medication, Prescribes, left_on='code', right_on='medication')\nanswer = t1.groupby('brand').size().rename('count')", false], ["t1 = pd.merge(Medication, Prescribes, left_on='code', right_on='medication')\nt2 = t1.groupby('brand').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Medication, Prescribes, left_on='code', right_on='medication')\nt2 = t1.groupby('name').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Medication, Prescribes, left_on='code', right_on='medication')\nt2 = t1.groupby('brand').size().rename('count').to_frame().reset_index()\nanswer = t2", false], ["t1 = pd.merge(Medication, Prescribes, left_on='code', right_on='medication')\nt2 = t1.groupby('brand').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Medication, Prescribes, left_on='code', right_on='medication')\nanswer = t1.groupby('brand').size().rename('count').to_frame().reset_index()", false], ["t1 = pd.merge(Medication, Prescribes, left_on='code', right_on='medication')\nt2 = t1.groupby('brand').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Medication, Prescribes, on='code')\nt2 = t1.groupby('brand').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Medication, Prescribes, left_on='code', right_on='medication')\nanswer = t1.groupby('brand').size().rename('count').to_frame().reset_index()", false], ["t1 = pd.merge(Medication, Prescribes, left_on='code', right_on='medication')\nt2 = t1.groupby('brand').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Medication, Prescribes, left_on='code', right_on='medication')\nanswer = t1.groupby(['name'])['medication'].count().to_frame()", false]]}
{"example": {"db_id": "film_rank", "query": "SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID", "query_toks": ["SELECT", "T1.Title", ",", "T2.Type", "FROM", "film", "AS", "T1", "JOIN", "film_market_estimation", "AS", "T2", "ON", "T1.Film_ID", "=", "T2.Film_ID"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t2", ".", "type", "from", "film", "as", "t1", "join", "film_market_estimation", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id"], "question": "Please show the titles of films and the types of market estimations.", "question_toks": ["Please", "show", "the", "titles", "of", "films", "and", "the", "types", "of", "market", "estimations", "."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 12, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"film": ["Film_ID", "Title", "Studio", "Director", "Gross_in_dollar"], "market": ["Market_ID", "Country", "Number_cities"], "film_market_estimation": ["Estimation_ID", "Low_Estimate", "High_Estimate", "Film_ID", "Type", "Market_ID", "Year"]}, "answer": [["ET the Extra-Terrestrial", "Mass suicide murder"], ["Tootsie", "Mass suicide"], ["An Officer and a Gentleman", "Mass human sacrifice"], ["Rocky III", "Mass suicide"], ["Rocky III", "Mass suicide murder"], ["Rocky III", "Mass suicide"], ["Rocky III", "Mass suicide"], ["ET the Extra-Terrestrial", "Mass suicide"], ["ET the Extra-Terrestrial", "Mass suicide"]]}, "program_result_list": [["t1 = pd.merge(film, film_market_estimation, left_on='film_id', right_on='film_id')\nanswer = t1[['title', 'type']]", false], ["t1 = pd.merge(film, film_market_estimation, on='film_id')\nanswer = t1[['title', 'type']]", false], ["t1 = pd.merge(film, film_market_estimation, left_on='film_id', right_on='film_id')\nanswer = t1[['title', 'type']]", false], ["t1 = pd.merge(film, film_market_estimation, left_on='film_id', right_on='film_id')\nanswer = t1[['title', 'type']]", false], ["t1 = pd.merge(film, film_market_estimation, left_on='film_id', right_on='film_id')\nanswer = t1[['title', 'type']]", false], ["t1 = pd.merge(film, film_market_estimation, left_on='film_id', right_on='film_id')\nanswer = t1[['title', 'type']]", false], ["t1 = pd.merge(film, film_market_estimation, left_on='film_id', right_on='film_id')\nanswer = t1[['title', 'type']]", false], ["t1 = pd.merge(film, film_market_estimation, left_on='film_id', right_on='film_id')\nanswer = t1[['title', 'type']]", false], ["t1 = pd.merge(film, film_market_estimation, left_on='film_id', right_on='film_id')\nanswer = t1[['title', 'type']]", false], ["t1 = pd.merge(film, film_market_estimation, left_on='film_id', right_on='film_id')\nanswer = t1[['title', 'type']]", false], ["t1 = pd.merge(film, film_market_estimation, left_on='film_id', right_on='film_id')\nanswer = t1[['title', 'type']]", false], ["t1 = pd.merge(film, film_market_estimation, left_on='film_id', right_on='film_id')\nanswer = t1[['title', 'type']]", false], ["t1 = pd.merge(film, film_market_estimation, left_on='film_id', right_on='film_id')\nanswer = t1[['title', 'type']]", false], ["t1 = pd.merge(film, film_market_estimation, left_on='film_id', right_on='film_id')\nanswer = t1[['title', 'type']]", false], ["t1 = pd.merge(film, film_market_estimation, left_on='film_id', right_on='film_id')\nanswer = t1[['title', 'type']]", false], ["t1 = pd.merge(film, film_market_estimation, on='film_id')\nanswer = t1[['title', 'type']]", false], ["t1 = pd.merge(film, film_market_estimation, left_on='film_id', right_on='film_id')\nanswer = t1[['title', 'type']]", false], ["t1 = pd.merge(film, film_market_estimation, left_on='film_id', right_on='film_id')\nanswer = t1[['title', 'type']]", false], ["t1 = pd.merge(film, film_market_estimation, left_on='film_id', right_on='film_id')\nanswer = t1[['title', 'type']]", false], ["t1 = pd.merge(film, film_market_estimation, left_on='film_id', right_on='film_id')\nanswer = t1[['title', 'type']]", false]]}
{"example": {"db_id": "music_1", "query": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"", "query_toks": ["SELECT", "T1.artist_name", ",", "T1.gender", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.releasedate", "LIKE", "``", "%", "Mar", "%", "''"], "query_toks_no_value": ["select", "t1", ".", "artist_name", ",", "t1", ".", "gender", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "releasedate", "like", "value"], "question": "What are the names and genders of all artists who released songs in the month of March?", "question_toks": ["What", "are", "the", "names", "and", "genders", "of", "all", "artists", "who", "released", "songs", "in", "the", "month", "of", "March", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 6, false], null]]]], "where": [[false, 9, [0, [0, 20, false], null], "\"%Mar%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"genre": ["g_name", "rating", "most_popular_in"], "artist": ["artist_name", "country", "gender", "preferred_genre"], "files": ["f_id", "artist_name", "file_size", "duration", "formats"], "song": ["song_name", "artist_name", "country", "f_id", "genre_is", "rating", "languages", "releasedate", "resolution"]}, "answer": [["Michel", "Male"], ["Topu", "Female"]]}, "program_result_list": [["t1 = pd.merge(artist, song, on='artist_name')\nt2 = t1[t1['releasedate'].str.contains('mar')]\nanswer = t2[['artist_name', 'gender']]", false], ["t1 = pd.merge(artist, song, on='artist_name')\nt2 = t1[t1['releasedate'].str.contains('Mar')]\nanswer = t2[['artist_name', 'gender']]", false], ["t1 = pd.merge(artist, song, left_on='artist_name', right_on='artist_name')\nt2 = t1[t1['releasedate'].str.contains('mar')]\nanswer = t2[['artist_name', 'gender']]", false], ["t1 = pd.merge(artist, song, on='artist_name')\nt2 = t1[t1['releasedate'].str.contains('Mar')]\nanswer = t2[['artist_name', 'gender']]", false], ["t1 = pd.merge(artist, song, left_on='artist_name', right_on='artist_name')\nt2 = t1[t1['releasedate'].str.contains('Mar')]\nanswer = t2[['artist_name', 'gender']]", false], ["t1 = pd.merge(artist, song, on='artist_name')\nanswer = t1[t1['releasedate'].str.contains('Mar')][['artist_name', 'gender']]", false], ["t1 = pd.merge(artist, song, left_on='artist_name', right_on='artist_name')\nt2 = t1[t1['releasedate'].str.contains('mar', case=False)]\nanswer = t2[['artist_name', 'gender']]", false], ["t1 = pd.merge(artist, song, left_on='artist_name', right_on='artist_name')\nt2 = t1[t1['releasedate'].str.contains('mar', case=False, na=False)]\nanswer = t2[['artist_name', 'gender']]", false], ["t1 = pd.merge(artist, song, left_on='artist_name', right_on='artist_name')\nt2 = t1[t1['releasedate'].str.contains('Mar')]\nanswer = t2[['artist_name', 'gender']]", false], ["t1 = pd.merge(artist, song, on='artist_name')\nt2 = t1[t1['releasedate'].str.contains('Mar')]\nanswer = t2[['artist_name', 'gender']]", false], ["t1 = pd.merge(artist, song, left_on='artist_name', right_on='artist_name')\nt2 = t1[t1['releasedate'].str.contains('mar', case=False, na=False)]\nanswer = t2[['artist_name', 'gender']]", false], ["t1 = pd.merge(artist, song, left_on='artist_name', right_on='artist_name')\nt2 = t1[t1['releasedate'].str.contains('mar')]\nanswer = t2[['artist_name', 'gender']]", false], ["t1 = pd.merge(artist, song, left_on='artist_name', right_on='artist_name')\nt2 = t1[t1['releasedate'].str.contains('mar', case=False)]\nanswer = t2[['artist_name', 'gender']]", false], ["t1 = pd.merge(artist, song, on='artist_name')\nt2 = t1[t1['releasedate'].str.contains('mar')]\nanswer = t2[['artist_name', 'gender']]", false], ["t1 = pd.merge(artist, song, on='artist_name')\nt2 = t1[t1['releasedate'].str.contains('mar', case=False)]\nanswer = t2[['artist_name', 'gender']]", false], ["t1 = pd.merge(artist, song, on='artist_name')\nt2 = t1[t1['releasedate'].str.contains('mar')]\nanswer = t2[['artist_name', 'gender']]", false], ["t1 = pd.merge(artist, song, left_on='artist_name', right_on='artist_name')\nt2 = t1[t1['releasedate'].str.contains('Mar')]\nanswer = t2[['artist_name', 'gender']]\n ", false], ["t1 = pd.merge(artist, song, left_on='artist_name', right_on='artist_name')\nt2 = t1[t1['releasedate'].str.contains('Mar')]\nanswer = t2[['artist_name', 'gender']]", false], ["t1 = pd.merge(artist, song, left_on='artist_name', right_on='artist_name')\nt2 = t1[t1['releasedate'].str.contains('Mar')]\nanswer = t2[['artist_name', 'gender']]", false], ["t1 = pd.merge(artist, song, left_on='artist_name', right_on='artist_name')\nt2 = t1[t1['releasedate'].str.contains('mar')]\nanswer = t2[['artist_name', 'gender']]", false]]}
{"example": {"db_id": "wrestler", "query": "SELECT Name FROM wrestler WHERE Days_held  <  100", "query_toks": ["SELECT", "Name", "FROM", "wrestler", "WHERE", "Days_held", "<", "100"], "query_toks_no_value": ["select", "name", "from", "wrestler", "where", "days_held", "<", "value"], "question": "Return the names of wrestlers with fewer than 100 days held.", "question_toks": ["Return", "the", "names", "of", "wrestlers", "with", "fewer", "than", "100", "days", "held", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 4, [0, [0, 4, false], null], 100.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"wrestler": ["Wrestler_ID", "Name", "Reign", "Days_held", "Location", "Event"], "Elimination": ["Elimination_ID", "Wrestler_ID", "Team", "Eliminated_By", "Elimination_Move", "Time"]}, "answer": [["El Samurai"]]}, "program_result_list": [["t1 = wrestler[wrestler['days_held'] < 100]\nanswer = t1['name']", false], ["t1 = wrestler.groupby('name').size().rename('count')\nt2 = wrestler[wrestler['days_held'] < 100]\nanswer = t2['name']", false], ["answer = wrestler[wrestler['days_held'] < 100]['name']", false], ["answer = wrestler[wrestler['days_held'] < 100]['name']", false], ["answer = wrestler[wrestler['days_held'] < 100]['name']", false], ["answer = wrestler[wrestler['days_held'] < 100]['name']", false], ["t1 = wrestler[wrestler['days_held'] < 100]\nanswer = t1['name']", false], ["answer = wrestler[wrestler['days_held'] < 100]['name']", false], ["answer = wrestler[wrestler['days_held'] < 100]['name']", false], ["answer = wrestler[wrestler['days_held'] < 100]['name']", false], ["answer = wrestler[wrestler['days_held'] < 100]['name']", false], ["answer = wrestler[wrestler['days_held'] < 100]['name']", false], ["t1 = wrestler[wrestler['days_held'] < 100]\nanswer = t1['name']", false], ["answer = wrestler[wrestler['days_held'] < 100]['name']", false], ["t1 = wrestler[wrestler['days_held'] < 100]\nanswer = t1['name']", false], ["answer = wrestler[wrestler['days_held'] < 100]['name']", false], ["answer = wrestler[wrestler['days_held'] < 100]['name']", false], ["answer = wrestler[wrestler['days_held'] < 100]['name']", false], ["answer = wrestler[wrestler['days_held'] < 100]['name']", false], ["answer = wrestler[wrestler['days_held'] < 100]['name']", false]]}
{"example": {"db_id": "store_product", "query": "SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3", "query_toks": ["SELECT", "sum", "(", "city_population", ")", "FROM", "district", "ORDER", "BY", "city_area", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "sum", "(", "city_population", ")", "from", "district", "order", "by", "city_area", "desc", "limit", "value"], "question": "Find the total population of the top 3 districts with the largest area.", "question_toks": ["Find", "the", "total", "population", "of", "the", "top", "3", "districts", "with", "the", "largest", "area", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 17, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 18, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}, "db_table_headers": {"product": ["product_id", "product", "dimensions", "dpi", "pages_per_minute_color", "max_page_size", "interface"], "store": ["Store_ID", "Store_Name", "Type", "Area_size", "Number_of_product_category", "Ranking"], "district": ["District_ID", "District_name", "Headquartered_City", "City_Population", "City_Area"], "store_product": ["Store_ID", "Product_ID"], "store_district": ["Store_ID", "District_ID"]}, "answer": [[7478157.0]]}, "program_result_list": [["t1 = pd.merge(district, store_district, on='district_id')\nt2 = pd.merge(t1, store, on='store_id')\nt3 = t2.groupby(['district_id', 'district_name', 'headquartered_city', 'city_population', 'city_area']).size().rename('count')\nt4 = t3.sort_values(ascending=False).head(3).to_frame().reset_index()\nanswer = t4['city_population'].sum()", false], ["t1 = district.sort_values(by='city_area', ascending=False).head(3)\nanswer = t1['city_population'].sum()", false], ["t1 = district.sort_values('city_area', ascending=False).head(3)\nanswer = t1['city_population'].sum()", false], ["t1 = district.sort_values('city_area', ascending=False).head(3)\nanswer = t1['city_population'].sum()", false], ["t1 = district.sort_values('city_area', ascending=False).head(3)\nanswer = t1['city_population'].sum()", false], ["t1 = district.sort_values(by='city_area', ascending=False).head(3)\nanswer = t1['city_population'].sum()", false], ["t1 = district.sort_values(by='city_area', ascending=False).head(3)\nanswer = t1['city_population'].sum()", false], ["t1 = district.sort_values('city_area', ascending=False).head(3).reset_index()\nanswer = t1['city_population'].sum()", false], ["t1 = pd.merge(store_district, district, left_on='district_id', right_on='district_id')\nt2 = t1.groupby('district_id').sum().sort_values('city_area', ascending=False)\nanswer = t2['city_population'][:3].sum()", false], ["t1 = district.sort_values('city_area', ascending=False).head(3)\nanswer = t1['city_population'].sum()", false], ["t1 = district.sort_values('city_area', ascending=False).head(3)\nanswer = t1['city_population'].sum()", false], ["t1 = pd.merge(store, district, left_on='district_id', right_on='district_id')\nt2 = t1.groupby(['district_id', 'district_name', 'headquartered_city', 'city_population', 'city_area'])['store_id'].size().to_frame().reset_index()\nt2 = t2.sort_values('city_area', ascending=False).head(3)\nanswer = t2['city_population'].sum()", false], ["t1 = district.sort_values('city_area', ascending=False).head(3).sum()\nanswer = t1['city_population']", false], ["t1 = pd.merge(store_district, district, on='district_id')\nt2 = t1.groupby('district_id').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(3).to_frame().reset_index()\nt4 = pd.merge(t3, district, on='district_id')\nanswer = t4['city_population'].sum()", false], ["t1 = district.sort_values(by='city_area', ascending=False).head(3)\nanswer = t1['city_population'].sum()", false], ["t1 = district.sort_values('city_area', ascending=False).head(3)\nanswer = t1['city_population'].sum()", false], ["t1 = district.sort_values(by='city_area', ascending=False).head(3)\nanswer = t1['city_population'].sum()", false], ["t1 = district.sort_values('city_area', ascending=False).head(3)\nanswer = t1['city_population'].sum()", false], ["t1 = district.sort_values(by='city_area', ascending=False).head(3)\nanswer = t1['city_population'].sum()", false], ["t1 = district.sort_values('city_area', ascending=False).head(3)\nanswer = t1['city_population'].sum()", false]]}
{"example": {"db_id": "apartment_rentals", "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3", "query_toks": ["SELECT", "apt_type_code", "FROM", "Apartments", "GROUP", "BY", "apt_type_code", "ORDER", "BY", "avg", "(", "room_count", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "apt_type_code", "from", "apartments", "group", "by", "apt_type_code", "order", "by", "avg", "(", "room_count", ")", "desc", "limit", "value"], "question": "What are the top three apartment types in terms of the average room count? Give me the", "question_toks": ["What", "are", "the", "top", "three", "apartment", "types", "in", "terms", "of", "the", "average", "room", "count", "?", "Give", "me", "the"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [5, 14, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Apartment_Buildings": ["building_id", "building_short_name", "building_full_name", "building_description", "building_address", "building_manager", "building_phone"], "Apartments": ["apt_id", "building_id", "apt_type_code", "apt_number", "bathroom_count", "bedroom_count", "room_count"], "Apartment_Facilities": ["apt_id", "facility_code"], "Guests": ["guest_id", "gender_code", "guest_first_name", "guest_last_name", "date_of_birth"], "Apartment_Bookings": ["apt_booking_id", "apt_id", "guest_id", "booking_status_code", "booking_start_date", "booking_end_date"], "View_Unit_Status": ["apt_id", "apt_booking_id", "status_date", "available_yn"]}, "answer": [["Studio"], ["Flat"], ["Duplex"]]}, "program_result_list": [["t1 = Apartments.groupby('apt_type_code').mean()['room_count'].rename('avg_room_count')\nt2 = t1.sort_values(ascending=False).head(3).to_frame().reset_index()\nanswer = t2['apt_type_code']", false], ["t1 = Apartments.groupby('apt_type_code')['room_count'].mean().rename('avg_room_count')\nanswer = t1.sort_values(ascending=False).head(3).to_frame().reset_index()['apt_type_code']", false], ["t1 = Apartments.groupby('apt_type_code').mean()\nt2 = t1.sort_values('room_count', ascending=False)\nanswer = t2.head(3).index", false], ["t1 = Apartments.groupby('apt_type_code').agg({'room_count': 'mean'}).rename(columns={'room_count': 'avg_room_count'})\nt2 = t1.sort_values(by='avg_room_count', ascending=False).head(3).reset_index()\nanswer = t2['apt_type_code']", false], ["t1 = Apartments.groupby('apt_type_code').agg({'room_count': 'mean'})\nt2 = t1.sort_values('room_count', ascending=False).head(3).index.tolist()\nanswer = pd.DataFrame(t2, columns=['apt_type_code'])", false], ["t1 = Apartments.groupby('apt_type_code').room_count.mean().rename('avg_room_count')\nt2 = t1.sort_values(ascending=False).head(3).to_frame().reset_index()\nanswer = t2['apt_type_code'].to_frame()", false], ["t1 = Apartments.groupby('apt_type_code').agg({'room_count': 'mean'}).rename('avg_rooms').sort_values(ascending=False).head(3).reset_index()\nanswer = t1['apt_type_code']", false], ["t1 = Apartments.groupby('apt_type_code')['room_count'].mean().rename('avg_room_count')\nt2 = t1.sort_values(ascending=False).head(3).to_frame().reset_index()\nanswer = t2['apt_type_code']", false], ["t1 = Apartments.groupby('apt_type_code').mean()\nt2 = t1.sort_values('room_count', ascending=False).head(3).to_frame().reset_index()\nanswer = t2['apt_type_code']", false], ["t1 = Apartments.groupby('apt_type_code')['room_count'].mean().rename('avg_room_count').to_frame().reset_index()\nt2 = t1.sort_values('avg_room_count', ascending=False).head(3)\nanswer = t2['apt_type_code']", false], ["answer = Apartments.groupby('apt_type_code').agg({'room_count': 'mean'}).sort_values('room_count', ascending=False).head(3).index.tolist()", false], ["t1 = Apartments.groupby('apt_type_code')['room_count'].mean().rename('avg')\nanswer = t1.sort_values(ascending=False).head(3).to_frame().reset_index()", false], ["t1 = Apartments.groupby('apt_type_code').agg({'room_count':'mean'})\nt2 = t1.sort_values(by='room_count', ascending=False).head(3).reset_index()\nanswer = t2['apt_type_code']", false], ["t1 = Apartments.groupby('apt_type_code')['room_count'].mean().rename('room_count').to_frame()\nt2 = t1.sort_values(by='room_count', ascending=False).head(3).reset_index()\nanswer = t2['apt_type_code']", false], ["t1 = Apartments.groupby('apt_type_code').mean().rename({'room_count':'mean_room_count'}, axis=1).reset_index()\nt2 = t1.sort_values('mean_room_count', ascending=False).head(3).reset_index()\nanswer = t2['apt_type_code']", false], ["t1 = Apartments.groupby('apt_type_code').mean()\nt2 = t1.sort_values('room_count', ascending=False)\nanswer = t2.head(3).index.to_frame(index=False).rename(columns={'apt_type_code': 'apt_type_code'})", false], ["answer = Apartments.groupby('apt_type_code')['room_count'].mean().sort_values(ascending=False).head(3)", false], ["t1 = Apartments.groupby('apt_type_code')['room_count'].mean().rename('avg_room_count')\nt2 = t1.sort_values(ascending=False).head(3).to_frame().reset_index()\nanswer = t2['apt_type_code']", false], ["t1 = Apartments.groupby('apt_type_code').agg({'room_count': 'mean'}).rename(columns={'room_count': 'avg_room_count'})\nt2 = t1.sort_values('avg_room_count', ascending=False).head(3)\nanswer = t2.index", false], ["t1 = Apartments.groupby('apt_type_code').agg({'room_count': 'mean'}).rename(columns={'room_count': 'mean_room_count'})\nt2 = t1.sort_values('mean_room_count', ascending=False).head(3).to_frame().reset_index()\nanswer = t2['apt_type_code']", false]]}
{"example": {"db_id": "cinema", "query": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "LOCATION", "FROM", "cinema", "WHERE", "openning_year", ">", "=", "2010", "GROUP", "BY", "LOCATION", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "location", "from", "cinema", "where", "openning_year", ">", "=", "value", "group", "by", "location", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the location with the most cinemas opened in year 2010 or later?", "question_toks": ["What", "is", "the", "location", "with", "the", "most", "cinemas", "opened", "in", "year", "2010", "or", "later", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 5, [0, [0, 10, false], null], 2010.0, null]], "groupBy": [[0, 12, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"film": ["Film_ID", "Rank_in_series", "Number_in_season", "Title", "Directed_by", "Original_air_date", "Production_code"], "cinema": ["Cinema_ID", "Name", "Openning_year", "Capacity", "Location"], "schedule": ["Cinema_ID", "Film_ID", "Date", "Show_times_per_day", "Price"]}, "answer": [["County Tipperary"]]}, "program_result_list": [["t1 = cinema[cinema['openning_year'] >= 2010]\nt2 = t1.groupby('location').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3['location']", false], ["answer = cinema[cinema['openning_year'] >= 2010].groupby('location')['cinema_id'].count().sort_values(ascending=False).head(1).to_frame().reset_index()", false], ["t1 = cinema[cinema['openning_year'] >= 2010]\nt2 = t1.groupby('location').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3['location']", false], ["t1 = cinema[cinema['openning_year'] >= 2010]\nt2 = t1.groupby('location').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3['location']", false], ["t1 = cinema[cinema['openning_year'] >= 2010].groupby('location').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t2['location']", false], ["t1 = cinema[cinema['openning_year'] >= 2010]\nt2 = t1.groupby('location').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3['location']", false], ["t1 = cinema[cinema['openning_year'] >= 2010]\nt2 = t1.groupby('location').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3['location']", false], ["t1 = cinema[cinema['openning_year'] >= 2010].groupby('location').size().rename('count')\nanswer = t1.sort_values(ascending=False).head(1).to_frame().reset_index()['location']", false], ["t1 = cinema[cinema['openning_year'] >= 2010]\nt2 = t1.groupby('location').size().rename('count')\nanswer = t2.sort_values(ascending=False).head(1).to_frame().reset_index().iloc[0,0]", false], ["t1 = cinema[cinema['openning_year'] >= 2010]\nt2 = t1.groupby('location').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3['location']", false], ["t1 = cinema[cinema['openning_year'] >= 2010]\nt2 = t1.groupby('location').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3['location']", false], ["t1 = cinema[cinema['openning_year'] >= 2010]\nt2 = t1.groupby('location').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3['location']", false], ["t1 = cinema[cinema['openning_year'] >= 2010].groupby('location').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t2['location']", false], ["t1 = cinema[cinema['openning_year'] >= 2010]\nt2 = t1.groupby('location').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3['location']", false], ["t1 = cinema[cinema['openning_year'] >= 2010]\nt2 = t1.groupby('location').size().rename('count')\nanswer = t2.sort_values(ascending=False).head(1).to_frame().reset_index()['location']", false], ["t1 = cinema[cinema['openning_year'] >= 2010]\nt2 = t1.groupby('location').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3['location']", false], ["t1 = cinema[cinema['openning_year'] >= 2010]\nt2 = t1.groupby('location').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3['location']", false], ["t1 = cinema[cinema['openning_year'] >= 2010]\nt2 = t1.groupby('location').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3['location']", false], ["t1 = cinema[cinema['openning_year'] >= 2010]\nt2 = t1.groupby('location').size().rename('count')\nanswer = t2.sort_values(ascending=False).head(1).to_frame().reset_index()['location']", false], ["t1 = cinema[cinema['openning_year'] >= 2010].groupby('location').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t2['location']", false]]}
{"example": {"db_id": "cre_Theme_park", "query": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC", "query_toks": ["SELECT", "hotel_id", ",", "star_rating_code", "FROM", "HOTELS", "ORDER", "BY", "price_range", "ASC"], "query_toks_no_value": ["select", "hotel_id", ",", "star_rating_code", "from", "hotels", "order", "by", "price_range", "asc"], "question": "Find the id and star rating of each hotel and sort them in increasing order of price.", "question_toks": ["Find", "the", "id", "and", "star", "rating", "of", "each", "hotel", "and", "sort", "them", "in", "increasing", "order", "of", "price", "."], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 13, false], null]], [0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 16, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Ref_Hotel_Star_Ratings": ["star_rating_code", "star_rating_description"], "Locations": ["Location_ID", "Location_Name", "Address", "Other_Details"], "Ref_Attraction_Types": ["Attraction_Type_Code", "Attraction_Type_Description"], "Visitors": ["Tourist_ID", "Tourist_Details"], "Features": ["Feature_ID", "Feature_Details"], "Hotels": ["hotel_id", "star_rating_code", "pets_allowed_yn", "price_range", "other_hotel_details"], "Tourist_Attractions": ["Tourist_Attraction_ID", "Attraction_Type_Code", "Location_ID", "How_to_Get_There", "Name", "Description", "Opening_Hours", "Other_Details"], "Street_Markets": ["Market_ID", "Market_Details"], "Shops": ["Shop_ID", "Shop_Details"], "Museums": ["Museum_ID", "Museum_Details"], "Royal_Family": ["Royal_Family_ID", "Royal_Family_Details"], "Theme_Parks": ["Theme_Park_ID", "Theme_Park_Details"], "Visits": ["Visit_ID", "Tourist_Attraction_ID", "Tourist_ID", "Visit_Date", "Visit_Details"], "Photos": ["Photo_ID", "Tourist_Attraction_ID", "Name", "Description", "Filename", "Other_Details"], "Staff": ["Staff_ID", "Tourist_Attraction_ID", "Name", "Other_Details"], "Tourist_Attraction_Features": ["Tourist_Attraction_ID", "Feature_ID"]}, "answer": [[431, "2"], [426, "5"], [473, "1"], [555, "5"], [420, "5"], [172, "5"], [264, "1"], [442, "2"], [514, "5"], [123, "5"], [421, "3"], [379, "4"], [373, "5"], [314, "5"], [144, "4"], [222, "5"], [239, "3"], [331, "1"], [350, "1"], [376, "2"]]}, "program_result_list": [["t1 = pd.merge(Hotels, Ref_Hotel_Star_Ratings, left_on='star_rating_code', right_on='star_rating_code')\nanswer = t1.sort_values(by=['price_range'])[['hotel_id', 'star_rating_code']]", false], ["answer = Hotels[['hotel_id', 'star_rating_code']].sort_values(by='price_range')", false], ["answer = Hotels.sort_values(by='price_range')[['hotel_id', 'star_rating_code']]", false], ["answer = Hotels[['hotel_id', 'star_rating_code']].sort_values('price_range')", false], ["answer = Hotels[['hotel_id', 'star_rating_code']].sort_values(by='price_range')", false], ["answer = Hotels[['hotel_id', 'star_rating_code']].sort_values(by='price_range')", false], ["answer = Hotels[['hotel_id', 'star_rating_code']].sort_values(by='price_range')", false], ["answer = Hotels[['hotel_id', 'star_rating_code']].sort_values(by='price_range')", false], ["t1 = Hotels[['hotel_id', 'star_rating_code']].sort_values(by='price_range', ascending=True)\nanswer = t1", false], ["answer = Hotels[['hotel_id', 'star_rating_code']].sort_values(by=['price_range'])", false], ["answer = Hotels.sort_values('price_range')[['hotel_id', 'star_rating_code']]", false], ["answer = Hotels.sort_values('price_range')[['hotel_id', 'star_rating_code']]", false], ["answer = Hotels[['hotel_id', 'star_rating_code']].sort_values('price_range')", false], ["answer = Hotels[['hotel_id', 'star_rating_code']].sort_values(by='price_range')", false], ["answer = Hotels[['hotel_id', 'star_rating_code']].sort_values('price_range')", false], ["answer = Hotels[['hotel_id', 'star_rating_code']].sort_values('price_range')", false], ["answer = Hotels[['hotel_id', 'star_rating_code']].sort_values(by='price_range')", false], ["answer = Hotels[['hotel_id', 'star_rating_code']].sort_values('price_range')", false], ["answer = Hotels[['hotel_id', 'star_rating_code']].sort_values('price_range', ascending=True)", false], ["answer = Hotels[['hotel_id', 'star_rating_code']].sort_values('price_range')", false]]}
{"example": {"db_id": "flight_1", "query": "SELECT name ,  salary FROM Employee ORDER BY salary", "query_toks": ["SELECT", "name", ",", "salary", "FROM", "Employee", "ORDER", "BY", "salary"], "query_toks_no_value": ["select", "name", ",", "salary", "from", "employee", "order", "by", "salary"], "question": "Show name and salary for all employees sorted by salary.", "question_toks": ["Show", "name", "and", "salary", "for", "all", "employees", "sorted", "by", "salary", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 13, false], null]], [0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 14, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [["Milo Brooks", 20], ["Donald King", 18050], ["Richard Jackson", 23980], ["Patricia Jones", 24450], ["Linda Davis", 27984], ["Elizabeth Taylor", 32021], ["Haywood Kelly", 32899], ["Chad Stewart", 33546], ["David Anderson", 43001], ["Barbara Wilson", 43723], ["Robert Brown", 44740], ["Michael Miller", 48090], ["William Moore", 48250], ["Jennifer Thomas", 54921], ["William Ward", 84476], ["Michael Miller", 99890], ["Larry West", 101745], ["William Jones", 105743], ["Eric Cooper", 114323], ["James Smith", 120433], ["Dorthy Lewis", 152013], ["John Williams", 153972], ["Mary Johnson", 178345], ["Karen Scott", 205187], ["Mark Young", 205187], ["Lawrence Sperry", 212156], ["Angela Martinez", 212156], ["Joseph Thompson", 212156], ["Betty Adams", 227489], ["Lisa Walker", 256481], ["George Wright", 289950]]}, "program_result_list": [["answer = employee.sort_values('salary')", false], ["answer = employee.sort_values('salary')[['name', 'salary']]", false], ["answer = employee.sort_values('salary')", false], ["answer = employee.sort_values('salary')", false], ["answer = employee.sort_values(by='salary')[['name', 'salary']]", false], ["t1 = employee.sort_values('salary')\nanswer = t1[['name', 'salary']]", false], ["t1 = employee.sort_values('salary')\nanswer = t1[['name', 'salary']]", false], ["t1 = employee.sort_values(by='salary')\nanswer = t1[['name', 'salary']]", false], ["answer = employee.sort_values('salary')[['name', 'salary']]", false], ["t1 = employee.sort_values('salary')\nanswer = t1[['name', 'salary']]", false], ["t1 = employee.sort_values('salary')\nanswer = t1[['name', 'salary']]", false], ["answer = employee.sort_values('salary', ascending=True)[['name', 'salary']]", false], ["answer = employee.sort_values('salary')[['name', 'salary']]", false], ["t1 = employee.sort_values('salary')\nanswer = t1[['name', 'salary']]", false], ["answer = employee.sort_values(by='salary')[['name', 'salary']]", false], ["answer = employee.sort_values('salary', ascending=False)[['name', 'salary']]", false], ["answer = employee[['name', 'salary']].sort_values('salary')", false], ["t1 = employee.sort_values('salary').reset_index()\nanswer = t1[['name', 'salary']]", false], ["t1 = employee.sort_values('salary')\nanswer = t1[['name', 'salary']]", false], ["t1 = employee.sort_values('salary')\nanswer = t1[['name', 'salary']]", false]]}
{"example": {"db_id": "shop_membership", "query": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "branch", "WHERE", "membership_amount", ">", "(", "SELECT", "avg", "(", "membership_amount", ")", "FROM", "branch", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "branch", "where", "membership_amount", ">", "(", "select", "avg", "(", "membership_amount", ")", "from", "branch", ")"], "question": "How many branches where have more than average number of memberships are there?", "question_toks": ["How", "many", "branches", "where", "have", "more", "than", "average", "number", "of", "memberships", "are", "there", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 11, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 11, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"member": ["Member_ID", "Card_Number", "Name", "Hometown", "Level"], "branch": ["Branch_ID", "Name", "Open_year", "Address_road", "City", "membership_amount"], "membership_register_branch": ["Member_ID", "Branch_ID", "Register_Year"], "purchase": ["Member_ID", "Branch_ID", "Year", "Total_pounds"]}, "answer": [[5]]}, "program_result_list": [["t1 = branch[branch['membership_amount'] > branch['membership_amount'].mean()]\nanswer = t1.shape[0]", false], ["t1 = branch['membership_amount'].mean()\nanswer = branch[branch['membership_amount'] > t1].shape[0]", false], ["t1 = branch['membership_amount'].mean()\nt2 = branch[branch['membership_amount'] > t1]\nanswer = t2['membership_amount'].count()", false], ["t1 = branch['membership_amount'].mean()\nanswer = len(branch[branch['membership_amount'] > t1])", false], ["t1 = branch['membership_amount'].mean()\nanswer = branch[branch['membership_amount'] > t1].shape[0]", false], ["t1 = branch['membership_amount'].mean()\nt2 = branch[branch['membership_amount'] > t1]\nanswer = t2['branch_id'].count()", false], ["t1 = branch[branch['membership_amount'] > branch['membership_amount'].mean()]\nanswer = t1['branch_id'].count()", false], ["t1 = branch[branch['membership_amount'] > branch['membership_amount'].mean()]\nanswer = t1.shape[0]", false], ["t1 = branch['membership_amount'].mean()\nt2 = branch[branch['membership_amount'] > t1]\nanswer = len(t2)", false], ["t1 = branch[branch['membership_amount'] > branch['membership_amount'].mean()].shape[0]\nanswer = t1", false], ["answer = branch[branch['membership_amount'] > branch['membership_amount'].mean()].shape[0]", false], ["answer = branch[branch['membership_amount'] > branch['membership_amount'].mean()].shape[0]", false], ["answer = branch[branch['membership_amount'] > branch['membership_amount'].mean()].shape[0]", false], ["t1 = branch.groupby('membership_amount').size().rename('count')\nt2 = t1[t1 > t1.mean()].to_frame().reset_index()\nanswer = t2['count'].sum()", false], ["t1 = branch['membership_amount'].mean()\nt2 = branch[branch['membership_amount'] > t1].size\nanswer = t2", false], ["t1 = branch['membership_amount'].mean()\nanswer = len(branch[branch['membership_amount'] > t1])", false], ["t1 = branch['membership_amount'].mean()\nanswer = branch[branch['membership_amount'] > t1].count()", false], ["t1 = branch[branch['membership_amount'] > branch['membership_amount'].mean()]\nanswer = len(t1)", false], ["t1 = branch['membership_amount']\nt2 = branch[t1 > t1.mean()]\nanswer = len(t2)", false], ["t1 = branch.groupby('membership_amount')['membership_amount'].mean()\nt2 = t1[t1 > t1.mean()]\nanswer = len(t2)", false]]}
{"example": {"db_id": "customers_and_addresses", "query": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\"", "query_toks": ["SELECT", "sum", "(", "t2.order_quantity", ")", "FROM", "customer_orders", "AS", "t1", "JOIN", "order_items", "AS", "t2", "ON", "t1.order_id", "=", "t2.order_id", "WHERE", "t1.order_status", "=", "``", "Cancelled", "''"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "order_quantity", ")", "from", "customer_orders", "as", "t1", "join", "order_items", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "where", "t1", ".", "order_status", "=", "value"], "question": "What is the total number of products that are in orders with status \"Cancelled\"?", "question_toks": ["What", "is", "the", "total", "number", "of", "products", "that", "are", "in", "orders", "with", "status", "``", "Cancelled", "''", "?"], "sql": {"from": {"table_units": [["table_unit", 5], ["table_unit", 6]], "conds": [[false, 2, [0, [0, 25, false], null], [0, 30, false], null]]}, "select": [false, [[4, [0, [0, 32, false], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"Cancelled\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "address_content", "city", "zip_postcode", "state_province_county", "country", "other_address_details"], "Products": ["product_id", "product_details"], "Customers": ["customer_id", "payment_method", "customer_name", "date_became_customer", "other_customer_details"], "Customer_Addresses": ["customer_id", "address_id", "date_address_from", "address_type", "date_address_to"], "Customer_Contact_Channels": ["customer_id", "channel_code", "active_from_date", "active_to_date", "contact_number"], "Customer_Orders": ["order_id", "customer_id", "order_status", "order_date", "order_details"], "Order_Items": ["order_id", "product_id", "order_quantity"]}, "answer": [[77]]}, "program_result_list": [["t1 = pd.merge(Customer_Orders, Order_Items, left_on='order_id', right_on='order_id')\nt2 = t1[t1['order_status'] == 'Cancelled']\nanswer = t2['order_quantity'].sum()", false], ["t1 = pd.merge(Customer_Orders, Order_Items, left_on='order_id', right_on='order_id')\nt2 = t1[t1['order_status'] == 'Cancelled']\nanswer = t2['order_quantity'].sum()", false], ["t1 = pd.merge(Customer_Orders, Order_Items, left_on='order_id', right_on='order_id')\nt2 = t1[t1['order_status'] == 'Cancelled']\nanswer = t2['order_quantity'].sum()", false], ["t1 = pd.merge(Customer_Orders, Order_Items, left_on='order_id', right_on='order_id')\nt2 = t1[t1['order_status'] == 'Cancelled']\nanswer = t2['order_quantity'].sum()", false], ["t1 = pd.merge(Customer_Orders, Order_Items, left_on='order_id', right_on='order_id')\nt2 = t1[t1['order_status'] == 'Cancelled']\nanswer = t2['order_quantity'].sum()", false], ["t1 = pd.merge(Customer_Orders, Order_Items, left_on='order_id', right_on='order_id')\nt2 = t1[t1['order_status'] == 'Cancelled']\nanswer = t2['order_quantity'].sum()", false], ["t1 = pd.merge(Customer_Orders, Order_Items, left_on='order_id', right_on='order_id')\nt2 = t1[t1['order_status'] == 'Cancelled']\nanswer = t2['order_quantity'].sum()", false], ["t1 = pd.merge(Customer_Orders, Order_Items, on='order_id')\nt2 = t1[t1['order_status'] == 'Cancelled']\nanswer = t2['order_quantity'].sum()", false], ["t1 = pd.merge(Customer_Orders, Order_Items, left_on='order_id', right_on='order_id')\nt2 = t1[t1['order_status'] == 'Cancelled']\nanswer = t2['order_quantity'].sum()", false], ["t1 = pd.merge(Customer_Orders, Order_Items, left_on='order_id', right_on='order_id')\nt2 = t1[t1['order_status'] == 'Cancelled']\nanswer = t2['order_quantity'].sum()", false], ["t1 = pd.merge(Customer_Orders, Order_Items, on='order_id')\nt2 = t1[t1['order_status'] == 'Cancelled']\nanswer = t2['order_quantity'].sum()", false], ["t1 = pd.merge(Customer_Orders, Order_Items, left_on='order_id', right_on='order_id')\nt2 = t1[t1['order_status'] == 'Cancelled']\nanswer = t2['order_quantity'].sum()", false], ["t1 = pd.merge(Customer_Orders, Order_Items, left_on='order_id', right_on='order_id')\nanswer = t1[t1['order_status'] == 'Cancelled']['order_quantity'].sum()", false], ["t1 = pd.merge(Customer_Orders, Order_Items, left_on='order_id', right_on='order_id')\nt2 = t1[t1['order_status'] == 'cancelled']\nanswer = sum(t2['order_quantity'])", false], ["t1 = pd.merge(Customer_Orders, Order_Items, left_on='order_id', right_on='order_id')\nt2 = t1[t1['order_status'] == 'Cancelled']\nanswer = t2['order_quantity'].sum()", false], ["t1 = pd.merge(Customer_Orders, Order_Items, left_on='order_id', right_on='order_id')\nt2 = t1[t1['order_status'] == 'Cancelled']\nanswer = t2['order_quantity'].sum()", false], ["t1 = pd.merge(Customer_Orders, Order_Items, left_on='order_id', right_on='order_id')\nt2 = t1[t1['order_status'] == 'Cancelled']\nanswer = t2['order_quantity'].sum()", false], ["t1 = pd.merge(Customer_Orders, Order_Items, on='order_id')\nt2 = t1[t1['order_status'] == 'Cancelled']\nanswer = t2['order_quantity'].sum()", false], ["t1 = pd.merge(Customer_Orders, Order_Items, left_on='order_id', right_on='order_id')\nt2 = t1[t1['order_status'] == 'Cancelled']\nanswer = t2['order_quantity'].sum()", false], ["t1 = pd.merge(Customer_Orders, Order_Items, on='order_id')\nt2 = t1[t1['order_status'] == 'Cancelled']\nanswer = t2['order_quantity'].sum()", false]]}
{"example": {"db_id": "insurance_policies", "query": "SELECT sum(Amount_Settled) FROM Settlements", "query_toks": ["SELECT", "sum", "(", "Amount_Settled", ")", "FROM", "Settlements"], "query_toks_no_value": ["select", "sum", "(", "amount_settled", ")", "from", "settlements"], "question": "What is the total amount of settlement made for all the settlements?", "question_toks": ["What", "is", "the", "total", "amount", "of", "settlement", "made", "for", "all", "the", "settlements", "?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[4, [0, [0, 19, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Customers": ["Customer_ID", "Customer_Details"], "Customer_Policies": ["Policy_ID", "Customer_ID", "Policy_Type_Code", "Start_Date", "End_Date"], "Claims": ["Claim_ID", "Policy_ID", "Date_Claim_Made", "Date_Claim_Settled", "Amount_Claimed", "Amount_Settled"], "Settlements": ["Settlement_ID", "Claim_ID", "Date_Claim_Made", "Date_Claim_Settled", "Amount_Claimed", "Amount_Settled", "Customer_Policy_ID"], "Payments": ["Payment_ID", "Settlement_ID", "Payment_Method_Code", "Date_Payment_Made", "Amount_Payment"]}, "answer": [[21993]]}, "program_result_list": [["answer = Settlements['amount_settled'].sum()", false], ["answer = Settlements['amount_settled'].sum()", false], ["answer = Settlements['amount_settled'].sum()", false], ["answer = Settlements['amount_settled'].sum()", false], ["answer = Settlements['amount_settled'].sum()", false], ["t1 = Settlements.groupby('settlement_id').size().rename('count')\nanswer = Settlements['amount_settled'].sum()", false], ["answer = Settlements['amount_settled'].sum()", false], ["answer = Settlements['amount_settled'].sum()", false], ["answer = Settlements['amount_settled'].sum()", false], ["answer = Settlements['amount_settled'].sum()", false], ["answer = Settlements['amount_settled'].sum()", false], ["answer = Settlements['amount_settled'].sum()", false], ["answer = Settlements['amount_settled'].sum()", false], ["answer = Settlements['amount_settled'].sum()", false], ["t1 = Settlements.groupby('settlement_id').sum()\nanswer = t1['amount_settled']", false], ["answer = Settlements['amount_settled'].sum()", false], ["answer = Settlements['amount_settled'].sum()", false], ["answer = Settlements['amount_settled'].sum()", false], ["answer = Settlements['amount_settled'].sum()", false], ["answer = Settlements['amount_settled'].sum()", false]]}
{"example": {"db_id": "race_track", "query": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id", "query_toks": ["SELECT", "T1.name", ",", "T1.date", ",", "T2.name", "FROM", "race", "AS", "T1", "JOIN", "track", "AS", "T2", "ON", "T1.track_id", "=", "T2.track_id"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "date", ",", "t2", ".", "name", "from", "race", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "track_id", "=", "t2", ".", "track_id"], "question": "What are the names and dates of races, and the names of the tracks where they are held?", "question_toks": ["What", "are", "the", "names", "and", "dates", "of", "races", ",", "and", "the", "names", "of", "the", "tracks", "where", "they", "are", "held", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 6, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 4, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"race": ["Race_ID", "Name", "Class", "Date", "Track_ID"], "track": ["Track_ID", "Name", "Location", "Seating", "Year_Opened"]}, "answer": [["Rolex 24 At Daytona", "January 26 January 27", "Auto Club Speedway"], ["Gainsco Grand Prix of Miami", "March 29", "Chicagoland Speedway"], ["Mexico City 250", "April 19", "Chicagoland Speedway"], ["Bosch Engineering 250 at VIR", "April 27", "Daytona International Speedway"], ["RumBum.com 250", "May 17", "Homestead-Miami Speedway"], ["Lime Rock GT Classic 250", "May 26", "Kansas Speedway"], ["Sahlen's Six Hours of the Glen", "June 7", "Martinsville Speedway"]]}, "program_result_list": [["t1 = pd.merge(race, track, left_on='track_id', right_on='track_id')\nanswer = t1[['name_x', 'date', 'name_y']]", false], ["t1 = pd.merge(race, track, left_on='track_id', right_on='track_id')\nanswer = t1[['name_x', 'date', 'name_y']]", false], ["t1 = pd.merge(race, track, left_on='track_id', right_on='track_id')\nanswer = t1[['race_id', 'name_x', 'date', 'name_y']]", false], ["t1 = pd.merge(race, track, left_on='track_id', right_on='track_id')\nanswer = t1[['name_x', 'date', 'name_y']]", false], ["t1 = pd.merge(race, track, on='track_id')\nanswer = t1[['name_x', 'date', 'name_y']]", false], ["t1 = pd.merge(race, track, left_on='track_id', right_on='track_id')\nanswer = t1[['name_x', 'date', 'name_y']]", false], ["t1 = pd.merge(race, track, left_on='track_id', right_on='track_id')\nanswer = t1[['name_x', 'date', 'name_y']]", false], ["t1 = pd.merge(race, track, left_on='track_id', right_on='track_id')\nanswer = t1[['name_x', 'date', 'name_y']]", false], ["t1 = pd.merge(race, track, left_on='track_id', right_on='track_id')\nanswer = t1[['name_x', 'date', 'name_y']]", false], ["t1 = pd.merge(race, track, on='track_id')\nanswer = t1[['name_x', 'date', 'name_y']]", false], ["t1 = pd.merge(race, track, left_on='track_id', right_on='track_id')\nanswer = t1[['name_x', 'date', 'name_y']]", false], ["t1 = pd.merge(race, track, on='track_id')\nanswer = t1[['name_x', 'date', 'name_y']]", false], ["t1 = pd.merge(race, track, left_on='track_id', right_on='track_id')\nanswer = t1[['name_x', 'date', 'name_y']]", false], ["t1 = pd.merge(race, track, on='track_id')\nanswer = t1[['name_x', 'date', 'name_y']]", false], ["t1 = pd.merge(race, track, left_on='track_id', right_on='track_id')\nanswer = t1[['name_x', 'date', 'name_y']]", false], ["t1 = pd.merge(race, track, left_on='track_id', right_on='track_id')\nanswer = t1[['name_x', 'date', 'name_y']]", false], ["t1 = pd.merge(race, track, left_on='track_id', right_on='track_id')\nanswer = t1[['name_x', 'date', 'name_y']]", false], ["t1 = pd.merge(race, track, left_on='track_id', right_on='track_id')\nanswer = t1[['name_x', 'date', 'name_y']]", false], ["t1 = pd.merge(race, track, left_on='track_id', right_on='track_id')\nanswer = t1[['name_x', 'date', 'name_y']]", false], ["t1 = pd.merge(race, track, left_on='track_id', right_on='track_id')\nanswer = t1[['name_x', 'date', 'name_y']]", false]]}
{"example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "medicine", "WHERE", "FDA_approved", "=", "'No", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "medicine", "where", "fda_approved", "=", "value"], "question": "How many medicines were not approved by the FDA?", "question_toks": ["How", "many", "medicines", "were", "not", "approved", "by", "the", "FDA", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"No\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"medicine": ["id", "name", "Trade_Name", "FDA_approved"], "enzyme": ["id", "name", "Location", "Product", "Chromosome", "OMIM", "Porphyria"], "medicine_enzyme_interaction": ["enzyme_id", "medicine_id", "interaction_type"]}, "answer": [[11]]}, "program_result_list": [["answer = medicine[medicine['fda_approved'] == 'no'].shape[0]", false], ["t1 = medicine[medicine['fda_approved'] == 'no']\nanswer = t1.shape[0]", false], ["answer = medicine[medicine['fda_approved'] == 'no'].shape[0]", false], ["answer = medicine[medicine['fda_approved'] == 'no'].size", false], ["answer = medicine[medicine['fda_approved'] == 'no']['id'].count()", false], ["answer = len(medicine[medicine['fda_approved'] == 'no'])", false], ["t1 = medicine.loc[medicine['fda_approved'] == 'no']\nanswer = t1['id'].count()", false], ["answer = medicine[medicine['fda_approved'] == 'no']['id'].count()", false], ["t1 = medicine[medicine['fda_approved'] == 'no']\nanswer = len(t1)", false], ["answer = medicine[medicine['fda_approved'] == 'no'].shape[0]", false], ["t1 = medicine[medicine['fda_approved'] == 'no']\nanswer = t1.shape[0]", false], ["answer = len(medicine[medicine['fda_approved'] == 'no'])", false], ["t1 = medicine[medicine['fda_approved'] == 'no']\nanswer = t1['id'].count()", false], ["answer = medicine[medicine['fda_approved'] == 'no'].shape[0]", false], ["answer = medicine[medicine['fda_approved'] == 'no'].shape[0]", false], ["answer = medicine[medicine['fda_approved'] == 'no'].shape[0]", false], ["answer = medicine[medicine['fda_approved'] == 'no']['id'].count()", false], ["answer = medicine[medicine['fda_approved'] == 'no'].shape[0]", false], ["t1 = medicine[medicine['fda_approved'] == 'no'].count()\nanswer = t1['fda_approved']", false], ["answer = len(medicine[medicine['fda_approved'] == 'no'])", false]]}
{"example": {"db_id": "manufactory_1", "query": "SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer", "query_toks": ["SELECT", "AVG", "(", "Price", ")", ",", "Manufacturer", "FROM", "Products", "GROUP", "BY", "Manufacturer"], "query_toks_no_value": ["select", "avg", "(", "price", ")", ",", "manufacturer", "from", "products", "group", "by", "manufacturer"], "question": "What are the average prices of products, grouped by manufacturer code?", "question_toks": ["What", "are", "the", "average", "prices", "of", "products", ",", "grouped", "by", "manufacturer", "code", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 8, false], null]], [0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Manufacturers": ["Code", "Name", "Headquarter", "Founder", "Revenue"], "Products": ["Code", "Name", "Price", "Manufacturer"]}, "answer": [[240.0, 1], [150.0, 2], [162.0, 3], [150.0, 4], [240.0, 5], [62.5, 6]]}, "program_result_list": [["answer = Products.groupby('manufacturer').mean()['price']", false], ["answer = Products.groupby('manufacturer')['price'].mean().to_frame().rename(columns={'price': 'avg(price)'})", false], ["t1 = Products.groupby('manufacturer').mean()\nanswer = t1['price']", false], ["t1 = Products.groupby('manufacturer')['price'].mean().rename('average')\nanswer = t1.to_frame().reset_index()", false], ["t1 = Products.groupby('manufacturer').agg({'price': 'mean'}).rename(columns={'price': 'avg(price)'}).reset_index()\nanswer = t1", false], ["answer = Products.groupby('manufacturer').agg({'price': 'mean'})", false], ["t1 = Products.groupby('manufacturer')['price'].mean().rename('avg_price').to_frame()\nanswer = t1", false], ["answer = Products.groupby('manufacturer').mean().rename(columns={'price': 'avg(price)'})", false], ["t1 = Products.groupby('manufacturer')['price'].mean().rename('avg_price')\nanswer = t1.to_frame().reset_index()", false], ["t1 = Products.groupby('manufacturer')['price'].mean().rename('avg_price')\nanswer = pd.DataFrame(t1).reset_index()", false], ["answer = Products.groupby('manufacturer')['price'].mean().rename('avg_price').to_frame().reset_index()", false], ["t1 = Products.groupby('manufacturer').agg({'price':'mean'}).rename(columns={'price':'avg_price'})\nanswer = t1.reset_index()", false], ["t1 = Products.groupby('manufacturer')['price'].mean().rename('avg(price)')\nanswer = t1.to_frame().reset_index()", false], ["t1 = Products.groupby('manufacturer').mean()\nanswer = t1['price']", false], ["t1 = Products.groupby('manufacturer').mean()\nanswer = t1['price']", false], ["t1 = Products.groupby('manufacturer').mean()\nanswer = t1['price'].rename('average_price')", false], ["answer = Products.groupby('manufacturer').agg({'price': 'mean'})", false], ["t1 = Products.groupby('manufacturer')['price'].mean()\nanswer = t1.to_frame()", false], ["t1 = Products.groupby('manufacturer').agg({'price': 'mean'})\nanswer = t1.rename(columns={'price': 'avg(price)'}).reset_index()", false], ["t1 = Products.groupby('manufacturer')['price'].mean().rename('avg_price').to_frame().reset_index()\nanswer = t1", false]]}
{"example": {"db_id": "dorm_1", "query": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "sex", "FROM", "student", "WHERE", "age", ">", "(", "SELECT", "avg", "(", "age", ")", "FROM", "student", ")", "GROUP", "BY", "sex"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "sex", "from", "student", "where", "age", ">", "(", "select", "avg", "(", "age", ")", "from", "student", ")", "group", "by", "sex"], "question": "How many students are older than average for each gender?", "question_toks": ["How", "many", "students", "are", "older", "than", "average", "for", "each", "gender", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 5, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Student": ["StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code"], "Dorm": ["dormid", "dorm_name", "student_capacity", "gender"], "Dorm_amenity": ["amenid", "amenity_name"], "Has_amenity": ["dormid", "amenid"], "Lives_in": ["stuid", "dormid", "room_number"]}, "answer": [[5, "F"], [10, "M"]]}, "program_result_list": [["t1 = Student.groupby('age').size().rename('count')\nt2 = t1[t1 > Student['age'].mean()].to_frame().reset_index()\nt3 = pd.merge(t2, Student, left_on='age', right_on='age')\nanswer = t3.groupby('sex').size().rename('count')", false], ["t1 = Student[Student['age'] > Student['age'].mean()]\nt2 = t1.groupby('sex').size().rename('count').to_frame().reset_index()\nanswer = t2", false], ["t1 = Student[Student['age'] > Student['age'].mean()]\nanswer = t1.groupby('sex').size().rename('count').to_frame().reset_index()", false], ["t1 = Student.groupby('age').size().rename('count')\nt2 = t1.mean()\nt3 = Student[Student['age'] > t2]\nanswer = t3.groupby('sex').size().rename('count')", false], ["t1 = Student[Student['age'] > Student['age'].mean()]\nt2 = t1.groupby('sex').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = Student[Student['age'] > Student['age'].mean()].groupby('sex').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["t1 = Student[Student['age'] > Student['age'].mean()]\nt2 = t1.groupby('sex').size().rename('count')\nanswer = t2.to_frame()", false], ["t1 = Student[Student['age'] > Student['age'].mean()].groupby('sex').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["t1 = Student[Student['age'] > Student['age'].mean()].groupby('sex').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["t1 = Student.groupby('sex')['age'].mean().rename('avg_age')\nt2 = Student[Student['age'] > t1[Student['sex']].values].groupby('sex').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = Student.groupby('sex').mean()\nt2 = Student[Student['age'] > t1['age'][0]]\nanswer = t2.groupby('sex').size().rename('count').to_frame().reset_index()", false], ["t1 = Student.groupby('sex').mean().rename(columns={'age': 'avg_age'})\nt2 = pd.merge(Student, t1, on='sex')\nt3 = t2[t2['age_x'] > t2['age_y']]\nanswer = t3.groupby('sex').count()[['age_x']].rename(columns={'age_x': 'count'})", false], ["t1 = Student.groupby('sex').mean()['age']\nt2 = Student[Student['age'] > t1]\nanswer = t2.groupby('sex').size().rename('count')", false], ["t1 = Student.groupby('sex').agg({'age': 'mean'})\nt2 = Student[Student['age'] > t1['age'][0]]\nanswer = t2.groupby('sex').size().rename('count')", false], ["t1 = Student[Student['age'] > Student['age'].mean()]\nt2 = t1.groupby('sex').size().rename('count').to_frame().reset_index()\nanswer = t2", false], ["t1 = Student[Student['age'] > Student['age'].mean()]\nt2 = t1.groupby('sex').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = Student[Student['age'] > Student['age'].mean()]\nt2 = t1.groupby('sex').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = Student[Student['age'] > Student['age'].mean()].groupby('sex').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["t1 = Student.groupby('sex').size().rename('count')\nt2 = Student.groupby('sex')['age'].mean().rename('age_avg')\nt3 = pd.merge(t1, t2, left_index=True, right_index=True)\nt4 = Student[Student['age'] > t3['age_avg']]\nanswer = t4.groupby('sex').size().rename('count')", false], ["t1 = Student[Student['age'] > Student['age'].mean()].groupby('sex').size().rename('count')\nanswer = t1.to_frame().reset_index()", false]]}
{"example": {"db_id": "department_store", "query": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1", "query_toks": ["SELECT", "product_name", "FROM", "products", "WHERE", "product_type_code", "=", "'Hardware", "'", "ORDER", "BY", "product_price", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "product_name", "from", "products", "where", "product_type_code", "=", "value", "order", "by", "product_price", "desc", "limit", "value"], "question": "Find the name of the most expensive hardware product.", "question_toks": ["Find", "the", "name", "of", "the", "most", "expensive", "hardware", "product", "."], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], "\"Hardware\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 21, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "address_details"], "Staff": ["staff_id", "staff_gender", "staff_name"], "Suppliers": ["supplier_id", "supplier_name", "supplier_phone"], "Department_Store_Chain": ["dept_store_chain_id", "dept_store_chain_name"], "Customers": ["customer_id", "payment_method_code", "customer_code", "customer_name", "customer_address", "customer_phone", "customer_email"], "Products": ["product_id", "product_type_code", "product_name", "product_price"], "Supplier_Addresses": ["supplier_id", "address_id", "date_from", "date_to"], "Customer_Addresses": ["customer_id", "address_id", "date_from", "date_to"], "Customer_Orders": ["order_id", "customer_id", "order_status_code", "order_date"], "Department_Stores": ["dept_store_id", "dept_store_chain_id", "store_name", "store_address", "store_phone", "store_email"], "Departments": ["department_id", "dept_store_id", "department_name"], "Order_Items": ["order_item_id", "order_id", "product_id"], "Product_Suppliers": ["product_id", "supplier_id", "date_supplied_from", "date_supplied_to", "total_amount_purchased", "total_value_purchased"], "Staff_Department_Assignments": ["staff_id", "department_id", "date_assigned_from", "job_title_code", "date_assigned_to"]}, "answer": [["mic"]]}, "program_result_list": [["t1 = Products[Products['product_type_code'] == 'hardware']\nt2 = t1.sort_values('product_price', ascending=False).head(1).reset_index()\nanswer = t2['product_name']", false], ["t1 = Products[Products['product_type_code'] == 'hardware']\nanswer = t1.sort_values('product_price', ascending=False).head(1)['product_name']", false], ["t1 = Products[Products['product_type_code'] == 'hardware']\nanswer = t1['product_name'].head(1)", false], ["t1 = Products[Products['product_type_code'] == 'hardware']\nt2 = t1.sort_values(['product_price'], ascending=False).head(1)\nt3 = t2.reset_index()\nanswer = t3['product_name']", false], ["t1 = Products[Products['product_type_code'] == 'hardware'].sort_values(by='product_price', ascending=False).head(1)\nanswer = t1['product_name']", false], ["t1 = Products[Products['product_type_code'] == 'hardware']\nt2 = t1.sort_values(by='product_price', ascending=False).head(1)\nanswer = t2['product_name']", false], ["t1 = Products[Products['product_type_code'] == 'hardware']\nt2 = t1.sort_values('product_price', ascending=False).head(1)\nanswer = t2['product_name']", false], ["t1 = Products[Products['product_type_code'] == 'hardware']\nt2 = t1.sort_values('product_price', ascending=False).head(1)\nanswer = t2['product_name']", false], ["t1 = Products[Products['product_type_code'] == 'hardware']\nanswer = t1.sort_values(by='product_price', ascending=False).head(1)['product_name']", false], ["t1 = Products[Products['product_type_code'] == 'hardware']\nt2 = t1.sort_values('product_price', ascending=False).head(1)\nanswer = t2['product_name']", false], ["t1 = Products[Products['product_type_code'] == 'hardware']\nt2 = t1.sort_values('product_price', ascending=False).head(1)\nanswer = t2['product_name']", false], ["t1 = Products[Products['product_type_code'] == 'hardware']\nt2 = t1.sort_values('product_price', ascending=False).head(1)\nanswer = t2['product_name']", false], ["t1 = Products[Products['product_type_code'] == 'hardware']\nt2 = t1.sort_values('product_price', ascending=False).head(1)\nanswer = t2['product_name']", false], ["t1 = Products[Products['product_type_code'] == 'hardware']\nt2 = t1.sort_values('product_price', ascending=False)\nanswer = t2['product_name'].head(1)", false], ["t1 = Products[Products['product_type_code'] == 'hardware']\nt2 = t1.sort_values(by='product_price', ascending=False).head(1)\nanswer = t2['product_name']", false], ["t1 = Products[Products['product_type_code'] == 'hardware']\nt2 = t1.sort_values(by='product_price', ascending=False)\nanswer = t2.head(1)['product_name']", false], ["t1 = Products[Products['product_type_code'] == 'hardware']\nt2 = t1.sort_values('product_price', ascending=False)\nanswer = t2.head(1)['product_name']", false], ["t1 = Products[Products['product_type_code'] == 'hardware']\nt2 = t1.sort_values(by='product_price', ascending=False)\nanswer = t2.head(1)['product_name']", false], ["t1 = Products[Products['product_type_code'] == 'hardware']\nanswer = t1.sort_values(by='product_price', ascending=False).head(1)['product_name']", false], ["t1 = Products[Products['product_type_code'] == 'hardware']\nt2 = t1.sort_values(by='product_price', ascending=False).head(1)\nanswer = t2['product_name']", false]]}
{"example": {"db_id": "bike_1", "query": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "weather", "WHERE", "mean_humidity", ">", "50", "AND", "mean_visibility_miles", ">", "8"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "weather", "where", "mean_humidity", ">", "value", "and", "mean_visibility_miles", ">", "value"], "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?", "question_toks": ["What", "is", "the", "number", "of", "days", "that", "had", "an", "average", "humity", "above", "50", "and", "an", "average", "visibility", "above", "8", "?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 31, false], null], 50.0, null], "and", [false, 3, [0, [0, 37, false], null], 8.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"station": ["id", "name", "lat", "long", "dock_count", "city", "installation_date"], "status": ["station_id", "bikes_available", "docks_available", "time"], "trip": ["id", "duration", "start_date", "start_station_name", "start_station_id", "end_date", "end_station_name", "end_station_id", "bike_id", "subscription_type", "zip_code"], "weather": ["date", "max_temperature_f", "mean_temperature_f", "min_temperature_f", "max_dew_point_f", "mean_dew_point_f", "min_dew_point_f", "max_humidity", "mean_humidity", "min_humidity", "max_sea_level_pressure_inches", "mean_sea_level_pressure_inches", "min_sea_level_pressure_inches", "max_visibility_miles", "mean_visibility_miles", "min_visibility_miles", "max_wind_Speed_mph", "mean_wind_speed_mph", "max_gust_speed_mph", "precipitation_inches", "cloud_cover", "events", "wind_dir_degrees", "zip_code"]}, "answer": [[3013]]}, "program_result_list": [["t1 = weather[(weather['mean_humidity'] > 50) & (weather['mean_visibility_miles'] > 8)]\nanswer = t1.shape[0]", false], ["answer = weather[(weather['mean_humidity'] > 50) & (weather['mean_visibility_miles'] > 8)]", false], ["answer = len(weather[(weather['mean_humidity'] > 50) & (weather['mean_visibility_miles'] > 8)])", false], ["answer = weather[(weather['mean_humidity'] > 50) & (weather['mean_visibility_miles'] > 8)].groupby('date').size().rename('count').to_frame().reset_index()", false], ["t1 = weather[(weather['mean_humidity'] > 50) & (weather['mean_visibility_miles'] > 8)]\nanswer = len(t1.date.unique())", false], ["t1 = weather[(weather['mean_humidity'] > 50) & (weather['mean_visibility_miles'] > 8)]\nanswer = t1.groupby(['date']).size().rename('count').size", false], ["t1 = weather[(weather['mean_humidity'] > 50) & (weather['mean_visibility_miles'] > 8)]\nanswer = t1['date'].nunique()", false], ["answer = weather[(weather['mean_humidity'] > 50) & (weather['mean_visibility_miles'] > 8)].shape[0]", false], ["t1 = weather[(weather['mean_humidity'] > 50) & (weather['mean_visibility_miles'] > 8)]\nanswer = t1.groupby(['date']).size().rename('count').to_frame().reset_index()", false], ["", false], ["answer = weather[(weather['mean_humidity'] > 50) & (weather['mean_visibility_miles'] > 8)].shape[0]", false], ["t1 = weather[(weather['mean_humidity'] > 50) & (weather['mean_visibility_miles'] > 8)]\nt2 = t1.groupby('date').size().rename('count')\nanswer = len(t2)", false], ["t1 = weather[weather['mean_humidity'] > 50]\nt2 = t1[t1['mean_visibility_miles'] > 8]\nanswer = t2['mean_humidity'].count()", false], ["t1 = weather[(weather['mean_humidity'] > 50) & (weather['mean_visibility_miles'] > 8)]\nanswer = t1['date'].count()", false], ["t1 = weather[(weather['mean_humidity'] > 50) & (weather['mean_visibility_miles'] > 8)]\nanswer = t1['date'].nunique()", false], ["t1 = weather[weather['mean_humidity'] > 50]\nt2 = t1[t1['mean_visibility_miles'] > 8]\nanswer = t2.shape[0]", false], ["t1 = weather[(weather['mean_humidity'] > 50) & (weather['mean_visibility_miles'] > 8)]\nanswer = t1['date'].nunique()", false], ["t1 = weather[['date', 'mean_humidity', 'mean_visibility_miles']].copy()\nt2 = t1[(t1['mean_humidity'] > 50) & (t1['mean_visibility_miles'] > 8)]\nanswer = t2['date'].nunique()", false], ["t1 = weather[(weather['mean_humidity'] > 50) & (weather['mean_visibility_miles'] > 8)]\nanswer = len(t1['date'].unique())", false], ["t1 = weather[weather['mean_humidity'] > 50]\nt2 = t1[t1['mean_visibility_miles'] > 8]\nanswer = t2.shape[0]", false]]}
{"example": {"db_id": "cre_Theme_park", "query": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000", "query_toks": ["SELECT", "T2.star_rating_description", "FROM", "HOTELS", "AS", "T1", "JOIN", "Ref_Hotel_Star_Ratings", "AS", "T2", "ON", "T1.star_rating_code", "=", "T2.star_rating_code", "WHERE", "T1.price_range", ">", "10000"], "query_toks_no_value": ["select", "t2", ".", "star_rating_description", "from", "hotels", "as", "t1", "join", "ref_hotel_star_ratings", "as", "t2", "on", "t1", ".", "star_rating_code", "=", "t2", ".", "star_rating_code", "where", "t1", ".", "price_range", ">", "value"], "question": "Give me the star rating descriptions of the hotels that cost more than 10000.", "question_toks": ["Give", "me", "the", "star", "rating", "descriptions", "of", "the", "hotels", "that", "cost", "more", "than", "10000", "."], "sql": {"from": {"table_units": [["table_unit", 5], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 14, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 3, [0, [0, 16, false], null], 10000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Ref_Hotel_Star_Ratings": ["star_rating_code", "star_rating_description"], "Locations": ["Location_ID", "Location_Name", "Address", "Other_Details"], "Ref_Attraction_Types": ["Attraction_Type_Code", "Attraction_Type_Description"], "Visitors": ["Tourist_ID", "Tourist_Details"], "Features": ["Feature_ID", "Feature_Details"], "Hotels": ["hotel_id", "star_rating_code", "pets_allowed_yn", "price_range", "other_hotel_details"], "Tourist_Attractions": ["Tourist_Attraction_ID", "Attraction_Type_Code", "Location_ID", "How_to_Get_There", "Name", "Description", "Opening_Hours", "Other_Details"], "Street_Markets": ["Market_ID", "Market_Details"], "Shops": ["Shop_ID", "Shop_Details"], "Museums": ["Museum_ID", "Museum_Details"], "Royal_Family": ["Royal_Family_ID", "Royal_Family_Details"], "Theme_Parks": ["Theme_Park_ID", "Theme_Park_Details"], "Visits": ["Visit_ID", "Tourist_Attraction_ID", "Tourist_ID", "Visit_Date", "Visit_Details"], "Photos": ["Photo_ID", "Tourist_Attraction_ID", "Name", "Description", "Filename", "Other_Details"], "Staff": ["Staff_ID", "Tourist_Attraction_ID", "Name", "Other_Details"], "Tourist_Attraction_Features": ["Tourist_Attraction_ID", "Feature_ID"]}, "answer": [["star"], ["star"], ["star"], ["star"], ["star"], ["star"], ["star"], ["star"], ["star"], ["star"], ["star"], ["star"], ["star"], ["star"], ["star"]]}, "program_result_list": [["t1 = pd.merge(Hotels, Ref_Hotel_Star_Ratings, left_on='star_rating_code', right_on='star_rating_code')\nt2 = t1[t1['price_range'] > 10000]\nanswer = t2['star_rating_description']", false], ["t1 = pd.merge(Hotels, Ref_Hotel_Star_Ratings, left_on='star_rating_code', right_on='star_rating_code')\nt2 = t1[t1['price_range'] > 10000]\nanswer = t2['star_rating_description']", false], ["t1 = pd.merge(Hotels, Ref_Hotel_Star_Ratings, left_on='star_rating_code', right_on='star_rating_code')\nt2 = t1[t1['price_range'] > 10000]\nanswer = t2['star_rating_description']", false], ["t1 = pd.merge(Hotels, Ref_Hotel_Star_Ratings, on='star_rating_code')\nt2 = t1[t1['price_range'] > 10000]\nanswer = t2['star_rating_description']", false], ["t1 = pd.merge(Hotels, Ref_Hotel_Star_Ratings, left_on='star_rating_code', right_on='star_rating_code')\nt2 = t1[t1['price_range'] > 10000]\nanswer = t2['star_rating_description']", false], ["t1 = pd.merge(Hotels[Hotels['price_range'] > 10000], Ref_Hotel_Star_Ratings, on='star_rating_code')\nanswer = t1['star_rating_description']", false], ["t1 = pd.merge(Hotels, Ref_Hotel_Star_Ratings, left_on='star_rating_code', right_on='star_rating_code')\nt2 = t1[t1['price_range'] > 10000]\nanswer = t2['star_rating_description']", false], ["t1 = pd.merge(Hotels, Ref_Hotel_Star_Ratings, left_on='star_rating_code', right_on='star_rating_code')\nt2 = t1[t1['price_range'] > 10000]\nanswer = t2['star_rating_description']", false], ["t1 = pd.merge(Hotels, Ref_Hotel_Star_Ratings, left_on='star_rating_code', right_on='star_rating_code')\nt2 = t1[t1['price_range'] > 10000]\nanswer = t2['star_rating_description']", false], ["t1 = pd.merge(Hotels, Ref_Hotel_Star_Ratings, left_on='star_rating_code', right_on='star_rating_code')\nt2 = t1[t1['price_range'] > 10000]\nanswer = t2['star_rating_description']", false], ["t1 = pd.merge(Hotels, Ref_Hotel_Star_Ratings, left_on='star_rating_code', right_on='star_rating_code')\nanswer = t1[t1['price_range'] > 10000]['star_rating_description']", false], ["t1 = pd.merge(Hotels, Ref_Hotel_Star_Ratings, left_on='star_rating_code', right_on='star_rating_code')\nt2 = t1[t1['price_range'] > 10000]\nanswer = t2['star_rating_description']", false], ["t1 = pd.merge(Hotels, Ref_Hotel_Star_Ratings, left_on='star_rating_code', right_on='star_rating_code')\nt2 = t1[t1['price_range'] > 10000]\nanswer = t2['star_rating_description'].unique()", false], ["t1 = pd.merge(Hotels, Ref_Hotel_Star_Ratings, left_on='star_rating_code', right_on='star_rating_code')\nt2 = t1[t1['price_range'] > 10000]\nanswer = t2['star_rating_description']", false], ["t1 = pd.merge(Hotels, Ref_Hotel_Star_Ratings, left_on='star_rating_code', right_on='star_rating_code')\nt2 = t1[t1['price_range'] > 10000]\nanswer = t2['star_rating_description']", false], ["t1 = pd.merge(Hotels, Ref_Hotel_Star_Ratings, left_on='star_rating_code', right_on='star_rating_code')\nt2 = t1[t1['price_range'] > 10000]\nanswer = t2['star_rating_description']", false], ["t1 = pd.merge(Hotels, Ref_Hotel_Star_Ratings, left_on='star_rating_code', right_on='star_rating_code')\nt2 = t1[t1['price_range'] > 10000]\nanswer = t2['star_rating_description']", false], ["t1 = pd.merge(Hotels, Ref_Hotel_Star_Ratings, left_on='star_rating_code', right_on='star_rating_code')\nt2 = t1[t1['price_range'] > 10000]\nanswer = t2['star_rating_description']", false], ["t1 = pd.merge(Ref_Hotel_Star_Ratings, Hotels, on='star_rating_code')\nt2 = t1[t1['price_range'] > 10000]\nanswer = t2['star_rating_description']", false], ["t1 = pd.merge(Hotels, Ref_Hotel_Star_Ratings, left_on='star_rating_code', right_on='star_rating_code')\nanswer = t1[t1['price_range'] > 10000]['star_rating_description']", false]]}
{"example": {"db_id": "culture_company", "query": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'", "query_toks": ["SELECT", "T1.company_name", "FROM", "culture_company", "AS", "T1", "JOIN", "book_club", "AS", "T2", "ON", "T1.book_club_id", "=", "T2.book_club_id", "WHERE", "T2.publisher", "=", "'Alyson", "'"], "query_toks_no_value": ["select", "t1", ".", "company_name", "from", "culture_company", "as", "t1", "join", "book_club", "as", "t2", "on", "t1", ".", "book_club_id", "=", "t2", ".", "book_club_id", "where", "t2", ".", "publisher", "=", "value"], "question": "List all company names with a book published by Alyson.", "question_toks": ["List", "all", "company", "names", "with", "a", "book", "published", "by", "Alyson", "."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Alyson\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"book_club": ["book_club_id", "Year", "Author_or_Editor", "Book_Title", "Publisher", "Category", "Result"], "movie": ["movie_id", "Title", "Year", "Director", "Budget_million", "Gross_worldwide"], "culture_company": ["Company_name", "Type", "Incorporated_in", "Group_Equity_Shareholding", "book_club_id", "movie_id"]}, "answer": [["Culture China"]]}, "program_result_list": [["t1 = pd.merge(culture_company, book_club, left_on='book_club_id', right_on='book_club_id')\nt2 = t1[t1['publisher'] == 'Alyson']\nanswer = t2['company_name']", false], ["t1 = pd.merge(culture_company, book_club, left_on='book_club_id', right_on='book_club_id')\nanswer = t1[t1['publisher'] == 'Alyson']['company_name']", false], ["t1 = pd.merge(culture_company, book_club, left_on='book_club_id', right_on='book_club_id')\nt2 = t1[t1['publisher'] == 'Alyson']\nanswer = t2['company_name']", false], ["t1 = pd.merge(culture_company, book_club, left_on='book_club_id', right_on='book_club_id')\nt2 = t1[t1['publisher'] == 'Alyson']\nanswer = t2['company_name']", false], ["t1 = pd.merge(culture_company, book_club, left_on='book_club_id', right_on='book_club_id')\nt2 = t1[t1['publisher'] == 'Alyson']\nanswer = t2['company_name']", false], ["t1 = pd.merge(culture_company, book_club, left_on='book_club_id', right_on='book_club_id')\nanswer = t1[t1['publisher'] == 'Alyson']['company_name']", false], ["t1 = pd.merge(culture_company, book_club, left_on='book_club_id', right_on='book_club_id')\nt2 = t1[t1['publisher'] == 'Alyson']\nanswer = t2['company_name']", false], ["t1 = pd.merge(culture_company, book_club, left_on='book_club_id', right_on='book_club_id')\nanswer = t1[t1['publisher'] == 'Alyson']['company_name']", false], ["t1 = pd.merge(culture_company, book_club, left_on='book_club_id', right_on='book_club_id')\nt2 = t1[t1['publisher'] == 'Alyson']\nanswer = t2['company_name']", false], ["t1 = pd.merge(culture_company, book_club, left_on='book_club_id', right_on='book_club_id')\nt2 = t1[t1['publisher'] == 'Alyson']\nanswer = t2['company_name']", false], ["t1 = pd.merge(culture_company, book_club, left_on='book_club_id', right_on='book_club_id')\nt2 = t1[t1['publisher'] == 'Alyson']\nanswer = t2['company_name']", false], ["t1 = pd.merge(culture_company, book_club, left_on='book_club_id', right_on='book_club_id')\nt2 = t1[t1['publisher'] == 'Alyson']\nanswer = t2['company_name']", false], ["t1 = pd.merge(culture_company, book_club, left_on='book_club_id', right_on='book_club_id')\nt2 = t1[t1['publisher'] == 'Alyson']\nanswer = t2['company_name']", false], ["t1 = pd.merge(culture_company, book_club, left_on='book_club_id', right_on='book_club_id')\nt2 = t1[t1['publisher'] == 'Alyson']\nanswer = t2['company_name']", false], ["t1 = pd.merge(culture_company, book_club, left_on='book_club_id', right_on='book_club_id')\nt2 = t1[t1['publisher'] == 'Alyson']\nanswer = t2['company_name']", false], ["t1 = pd.merge(culture_company, book_club, left_on='book_club_id', right_on='book_club_id')\nt2 = t1[t1['publisher'] == 'Alyson']\nanswer = t2['company_name']", false], ["t1 = pd.merge(culture_company, book_club, left_on='book_club_id', right_on='book_club_id')\nt2 = t1[t1['publisher'] == 'Alyson']\nanswer = t2['company_name']", false], ["t1 = pd.merge(culture_company, book_club, left_on='book_club_id', right_on='book_club_id')\nt2 = t1[t1['publisher'] == 'Alyson']\nanswer = t2['company_name']", false], ["t1 = pd.merge(culture_company, book_club, left_on='book_club_id', right_on='book_club_id')\nt2 = t1[t1['publisher'] == 'Alyson']\nanswer = t2['company_name']", false], ["t1 = pd.merge(culture_company, book_club, left_on='book_club_id', right_on='book_club_id')\nt2 = t1[t1['publisher'] == 'Alyson']\nanswer = t2['company_name']", false]]}
{"example": {"db_id": "music_1", "query": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"", "query_toks": ["SELECT", "T1.artist_name", ",", "T1.country", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.song_name", "LIKE", "``", "%", "love", "%", "''"], "query_toks_no_value": ["select", "t1", ".", "artist_name", ",", "t1", ".", "country", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "song_name", "like", "value"], "question": "What is the name and country of origin of the artist who released a song that has \"love\" in its title?", "question_toks": ["What", "is", "the", "name", "and", "country", "of", "origin", "of", "the", "artist", "who", "released", "a", "song", "that", "has", "``", "love", "''", "in", "its", "title", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]], "where": [[false, 9, [0, [0, 13, false], null], "\"%love%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"genre": ["g_name", "rating", "most_popular_in"], "artist": ["artist_name", "country", "gender", "preferred_genre"], "files": ["f_id", "artist_name", "file_size", "duration", "formats"], "song": ["song_name", "artist_name", "country", "f_id", "genre_is", "rating", "languages", "releasedate", "resolution"]}, "answer": [["Enrique", "USA"]]}, "program_result_list": [["t1 = pd.merge(artist, song, left_on='artist_name', right_on='artist_name')\nt2 = t1[t1['song_name'].str.contains('love', case=False)]\nanswer = t2[['artist_name', 'country']]", false], ["t1 = pd.merge(artist, song, left_on='artist_name', right_on='artist_name')\nt2 = t1[t1['song_name'].str.contains('love')]\nanswer = t2[['artist_name', 'country']]", false], ["t1 = pd.merge(artist, song, on='artist_name')\nanswer = t1[t1['song_name'].str.contains('love')][['artist_name', 'country']]", false], ["t1 = pd.merge(artist, song, on='artist_name')\nt2 = t1[t1['song_name'].str.contains('love', case=False)]\nanswer = t2[['artist_name', 'country']]", false], ["t1 = pd.merge(artist, song, on='artist_name')\nt2 = t1[t1['song_name'].str.contains('love', case=False)]\nanswer = t2[['artist_name', 'country']]", false], ["t1 = pd.merge(artist, song, left_on='artist_name', right_on='artist_name')\nt2 = t1[t1['song_name'].str.contains('love', case=False)]\nanswer = t2[['artist_name', 'country']]", false], ["t1 = pd.merge(artist, song, left_on='artist_name', right_on='artist_name')\nt2 = t1[t1['song_name'].str.contains('love')]\nanswer = t2[['artist_name', 'country']]", false], ["t1 = pd.merge(artist, song, on='artist_name')\nt2 = t1[t1['song_name'].str.contains('love', case=False)]\nanswer = t2[['artist_name', 'country']]", false], ["t1 = pd.merge(artist, song, on='artist_name')\nanswer = t1[t1['song_name'].str.contains('love')][['artist_name', 'country']]", false], ["t1 = pd.merge(artist, song, left_on='artist_name', right_on='artist_name')\nanswer = t1[t1['song_name'].str.contains('love')][['artist_name', 'country']]", false], ["t1 = pd.merge(artist, song, left_on='artist_name', right_on='artist_name')\nt2 = t1[t1['song_name'].str.contains('love')]\nanswer = t2[['artist_name', 'country']]", false], ["t1 = pd.merge(artist, song, on='artist_name')\nt2 = t1[t1['song_name'].str.contains('love', case=False)]\nanswer = t2[['artist_name', 'country']]", false], ["t1 = pd.merge(song, artist, left_on='artist_name', right_on='artist_name')\nt2 = t1[t1['song_name'].str.contains('love', case=False)]\nanswer = t2[['artist_name', 'country']]", false], ["t1 = pd.merge(artist, song, left_on='artist_name', right_on='artist_name')\nt2 = t1[t1['song_name'].str.contains('love')]\nanswer = t2[['artist_name', 'country']]", false], ["t1 = pd.merge(artist, song, left_on='artist_name', right_on='artist_name')\nt2 = t1[t1['song_name'].str.contains('love', case=False)]\nanswer = t2[['artist_name', 'country']]", false], ["t1 = pd.merge(artist, song, left_on='artist_name', right_on='artist_name')\nt2 = t1[t1['song_name'].str.contains('love', case=False)]\nanswer = t2[['artist_name', 'country']]", false], ["t1 = pd.merge(artist, song, left_on='artist_name', right_on='artist_name')\nt2 = t1[t1['song_name'].str.contains('love')]\nanswer = t2[['artist_name', 'country']]", false], ["t1 = pd.merge(artist, song, left_on='artist_name', right_on='artist_name')\nt2 = t1[t1['song_name'].str.contains('love', case=False)]\nanswer = t2[['artist_name', 'country']]", false], ["t1 = pd.merge(artist, song, on='artist_name')\nt2 = t1[t1['song_name'].str.contains('love')]\nanswer = t2[['artist_name', 'country']]", false], ["t1 = pd.merge(artist, song, on='artist_name')\nt2 = t1[t1['song_name'].str.contains('love', case=False)]\nanswer = t2[['artist_name', 'country']]", false]]}
{"example": {"db_id": "small_bank_1", "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid", "query_toks": ["SELECT", "T2.balance", ",", "T3.balance", ",", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid"], "query_toks_no_value": ["select", "t2", ".", "balance", ",", "t3", ".", "balance", ",", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid"], "question": "What are the names, checking balances, and savings balances for all customers?", "question_toks": ["What", "are", "the", "names", ",", "checking", "balances", ",", "and", "savings", "balances", "for", "all", "customers", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 5, false], null], "and", [false, 2, [0, [0, 1, false], null], [0, 3, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 4, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"ACCOUNTS": ["custid", "name"], "SAVINGS": ["custid", "balance"], "CHECKING": ["custid", "balance"]}, "answer": [[10000.0, 200000.0, "Brown"], [2000.0, 999999999.0, "Wang"], [3000.0, 230000.0, "O'mahony"], [7000.0, 60.0, "Weeks"], [10000.0, 80000.0, "Granger"], [77.0, 240.0, "Porter"]]}, "program_result_list": [["t1 = pd.merge(ACCOUNTS, CHECKING, on='custid')\nt2 = pd.merge(t1, SAVINGS, on='custid')\nanswer = t2[['name', 'balance_x', 'balance_y']]", false], ["t1 = pd.merge(ACCOUNTS, CHECKING, left_on='custid', right_on='custid')\nt2 = pd.merge(t1, SAVINGS, left_on='custid', right_on='custid')\nanswer = t2[['name', 'balance_x', 'balance_y']]", false], ["t1 = pd.merge(ACCOUNTS, CHECKING, on='custid')\nt2 = pd.merge(t1, SAVINGS, on='custid')\nanswer = t2[['name', 'balance_x', 'balance_y']]", false], ["t1 = pd.merge(ACCOUNTS, CHECKING, left_on='custid', right_on='custid')\nt2 = pd.merge(t1, SAVINGS, left_on='custid', right_on='custid')\nanswer = t2[['name', 'balance_x', 'balance_y']]", false], ["t1 = pd.merge(ACCOUNTS, CHECKING, left_on='custid', right_on='custid')\nt2 = pd.merge(t1, SAVINGS, left_on='custid', right_on='custid')\nanswer = t2[['name', 'balance_x', 'balance_y']]", false], ["t1 = pd.merge(ACCOUNTS, CHECKING, left_on='custid', right_on='custid')\nt2 = pd.merge(t1, SAVINGS, left_on='custid', right_on='custid')\nanswer = t2[['name', 'balance_x', 'balance_y']]", false], ["t1 = pd.merge(ACCOUNTS, CHECKING, on='custid')\nt2 = pd.merge(t1, SAVINGS, on='custid')\nanswer = t2[['name', 'balance_x', 'balance_y']]", false], ["t1 = pd.merge(ACCOUNTS, CHECKING, left_on='custid', right_on='custid')\nt2 = pd.merge(t1, SAVINGS, left_on='custid', right_on='custid')\nanswer = t2[['name', 'checking_balance', 'savings_balance']]", false], ["t1 = pd.merge(ACCOUNTS, CHECKING, on='custid')\nt2 = pd.merge(t1, SAVINGS, on='custid')\nanswer = t2[['name', 'balance_x', 'balance_y']]", false], ["t1 = pd.merge(ACCOUNTS, CHECKING, left_on='custid', right_on='custid')\nt2 = pd.merge(t1, SAVINGS, left_on='custid', right_on='custid')\nanswer = t2[['name', 'balance_x', 'balance_y']]", false], ["t1 = pd.merge(ACCOUNTS, CHECKING, on='custid')\nt2 = pd.merge(t1, SAVINGS, on='custid')\nanswer = t2[['name', 'balance_x', 'balance_y']]", false], ["t1 = pd.merge(ACCOUNTS, CHECKING, on='custid')\nt2 = pd.merge(t1, SAVINGS, on='custid')\nanswer = t2[['name', 'balance_x', 'balance_y']]", false], ["t1 = pd.merge(ACCOUNTS, SAVINGS, on='custid')\nt2 = pd.merge(t1, CHECKING, on='custid')\nanswer = t2[['balance_x', 'balance_y', 'name']]", false], ["t1 = pd.merge(ACCOUNTS, SAVINGS, on='custid')\nt2 = pd.merge(t1, CHECKING, on='custid')\nanswer = t2[['name', 'balance_x', 'balance_y']]", false], ["t1 = pd.merge(ACCOUNTS, CHECKING, on='custid')\nt2 = pd.merge(t1, SAVINGS, on='custid')\nanswer = t2[['name', 'balance_x', 'balance_y']]", false], ["t1 = pd.merge(ACCOUNTS, CHECKING, on='custid')\nt2 = pd.merge(t1, SAVINGS, on='custid')\nanswer = t2[['name', 'balance_x', 'balance_y']]", false], ["t1 = pd.merge(ACCOUNTS, CHECKING, on='custid')\nt2 = pd.merge(t1, SAVINGS, on='custid')\nanswer = t2[['name', 'balance_x', 'balance_y']]", false], ["t1 = pd.merge(ACCOUNTS, SAVINGS, on='custid')\nt2 = pd.merge(t1, CHECKING, on='custid')\nanswer = t2[['balance_x', 'balance_y', 'name']]", false], ["t1 = pd.merge(ACCOUNTS, CHECKING, left_on='custid', right_on='custid')\nt2 = pd.merge(t1, SAVINGS, left_on='custid', right_on='custid')\nanswer = t2[['name', 'balance_x', 'balance_y']]", false], ["t1 = pd.merge(ACCOUNTS, CHECKING, left_on='custid', right_on='custid')\nt2 = pd.merge(t1, SAVINGS, left_on='custid', right_on='custid')\nanswer = t2[['name', 'balance_x', 'balance_y']]", false]]}
{"example": {"db_id": "flight_4", "query": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "city", "FROM", "airports", "WHERE", "country", "=", "'United", "States", "'", "GROUP", "BY", "city", "ORDER", "BY", "count", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "city", "from", "airports", "where", "country", "=", "value", "group", "by", "city", "order", "by", "count", "(", "*", ")", "desc"], "question": "How many airports are there per city in the United States? Order the cities by decreasing number of airports.", "question_toks": ["How", "many", "airports", "are", "there", "per", "city", "in", "the", "United", "States", "?", "Order", "the", "cities", "by", "decreasing", "number", "of", "airports", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"United States\"", null]], "groupBy": [[0, 11, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"routes": ["rid", "dst_apid", "dst_ap", "src_apid", "src_ap", "alid", "airline", "codeshare"], "airports": ["apid", "name", "city", "country", "x", "y", "elevation", "iata", "icao"], "airlines": ["alid", "name", "iata", "icao", "callsign", "country", "active"]}, "answer": [[7, "Columbus"], [6, "Houston"], [5, "Jacksonville"], [5, "Greenville"], [5, "Atlanta"], [4, "Tucson"], [4, "San Antonio"], [4, "Sacramento"], [4, "New York"], [4, "Las Vegas"], [4, "Georgetown"], [4, "Chicago"], [4, "Burlington"], [4, "Anchorage"], [3, "Wilmington"], [3, "Wichita"], [3, "Washington"], [3, "Tampa"], [3, "Springfield"], [3, "Spokane"], [3, "Shreveport"], [3, "San Diego"], [3, "Rochester"], [3, "Riverside"], [3, "Richmond"], [3, "Phoenix"], [3, "Philadelphia"], [3, "Panama City"], [3, "Palm Springs"], [3, "Oxford"], [3, "Oklahoma City"], [3, "New Orleans"], [3, "Mobile"], [3, "Miami"], [3, "Macon"], [3, "Key West"], [3, "Jackson"], [3, "Huntsville"], [3, "Douglas"], [3, "Detroit"], [3, "Denver"], [3, "Dayton"], [3, "Dallas"], [3, "Columbia"], [3, "Cleveland"], [3, "Charleston"], [3, "Brunswick"], [3, "Augusta"], [3, "Athens"], [3, "Alexandria"], [3, "Akron"], [2, "West Palm Beach"], [2, "Watertown"], [2, "Waco"], [2, "Valdosta"], [2, "Uvalde"], [2, "Tulsa"], [2, "Topeka"], [2, "Tonopah"], [2, "Tok"], [2, "Tacoma"], [2, "St. Petersburg"], [2, "Sidney"], [2, "Seattle"], [2, "Scranton"], [2, "Santa Barbara"], [2, "San Jose"], [2, "Salt Lake City"], [2, "Rome"], [2, "Rapid City"], [2, "Portland"], [2, "Port Angeles"], [2, "Pittsburgh"], [2, "Petersburg"], [2, "Peru"], [2, "Perry"], [2, "Pensacola"], [2, "Orlando"], [2, "Ontario"], [2, "Omaha"], [2, "Olathe"], [2, "Ogden"], [2, "Null"], [2, "Norfolk"], [2, "Mountain Home"], [2, "Morristown"], [2, "Montgomery"], [2, "Monroe"], [2, "Molokai"], [2, "Minot"], [2, "Milwaukee"], [2, "Mesa"], [2, "Merced"], [2, "Memphis"], [2, "Marysville"], [2, "Marshfield"], [2, "Marshall"], [2, "Madison"], [2, "Louisville"], [2, "Los Angeles"], [2, "Longview"], [2, "London"], [2, "Lompoc"], [2, "Lincoln"], [2, "Lewiston"], [2, "Leesburg"], [2, "Lawrence"], [2, "Lansing"], [2, "Lancaster"], [2, "Lafayette"], [2, "Knoxville"], [2, "Klawock"], [2, "Kansas City"], [2, "Jasper"], [2, "Jamestown"], [2, "Indianapolis"], [2, "Hillsboro"], [2, "Hayward"], [2, "Harrisburg"], [2, "Hampton"], [2, "Hamilton"], [2, "Glasgow"], [2, "Gainesville"], [2, "Fort Worth"], [2, "Fort Myers"], [2, "Fort Lauderdale"], [2, "Flagler"], [2, "Fayetteville"], [2, "Fairbanks"], [2, "Ely"], [2, "Elkhart"], [2, "El Paso"], [2, "Dillingham"], [2, "Del Rio"], [2, "Danville"], [2, "Crestview"], [2, "Corpus Christi"], [2, "Concord"], [2, "Cold Bay"], [2, "Clovis"], [2, "Clinton"], [2, "Cincinnati"], [2, "Carlsbad"], [2, "Bloomington"], [2, "Bedford"], [2, "Beaumont"], [2, "Baltimore"], [2, "Austin"], [2, "Arlington"], [2, "Albany"], [2, "Alamogordo"], [2, "Abilene"], [2, "Aberdeen"], [1, "Zuni Pueblo"], [1, "Zephyrhills"], [1, "Zelienople"], [1, "Zanesville"], [1, "Yuma"], [1, "Yuba City"], [1, "Youngstown"], [1, "Yankton"], [1, "Yakutat"], [1, "Yakima"], [1, "Yakataga"], [1, "Wuchula"], [1, "Wrightstown"], [1, "Wright"], [1, "Wrangell"], [1, "Worland"], [1, "Worcester"], [1, "Woodward"], [1, "Wolf Point"], [1, "Wisconsin Rapids"], [1, "Winter Haven"], [1, "Winston-salem"], [1, "Winslow"], [1, "Winnsboro"], [1, "Winnemucca"], [1, "Wink"], [1, "Winfield"], [1, "Windsor Locks"], [1, "Windom"], [1, "Winder"], [1, "Willow Grove"], [1, "Willoughby"], [1, "Williston"], [1, "Willimantic"], [1, "Williamsport"], [1, "Williamson"], [1, "Williamsburg"], [1, "Wilkes-Barre"], [1, "Wildwood"], [1, "Wickenburg"], [1, "Wichita Falls"], [1, "Whittier"], [1, "White Sands"], [1, "White Plains"], [1, "White Mountain"], [1, "Whidbey Island"], [1, "Wheeling"], [1, "Weyers Cave"], [1, "Westfield"], [1, "West Yellowstone"], [1, "West Hampton Beach"], [1, "West Goshen Township"], [1, "West Chicago"], [1, "Wendover"], [1, "Wenatchee"], [1, "Wellington"], [1, "Wausau"], [1, "Waupaca"], [1, "Watsonville"], [1, "Waterloo"], [1, "Wassau"], [1, "Wasilla"], [1, "Washington County"], [1, "Warsaw"], [1, "Wallops Island"], [1, "Wallace"], [1, "Walla Walla"], [1, "Wales"], [1, "Wainwright"], [1, "Waikoloa Village"], [1, "Wahoo"], [1, "Wahiawa"], [1, "Visalia"], [1, "Vineyard Haven MA"], [1, "Villa Rica"], [1, "Victorville"], [1, "Victoria"], [1, "Vero Beach"], [1, "Vernal"], [1, "Venice"], [1, "Venetie"], [1, "Van Wert"], [1, "Van Nuys"], [1, "Valparaiso IN"], [1, "Valparaiso"], [1, "Valentine"], [1, "Valdez"], [1, "Vail"], [1, "Upland"], [1, "Unalaska"], [1, "Unalakleet"], [1, "Ulysses"], [1, "Ukiah"], [1, "Tyler"], [1, "Twin Falls"], [1, "Twenty Nine Palms"], [1, "Tuscaloosa AL"], [1, "Tupelo"], [1, "Tunica"], [1, "Tucumcari"], [1, "Truth Or Consequences"], [1, "Truckee"], [1, "Troy"], [1, "Troutdale"], [1, "Trenton"], [1, "Traverse City"], [1, "Torrance"], [1, "Tomah"], [1, "Toledo"], [1, "Toksook Bay"], [1, "Togiak Village"], [1, "Toccoa"], [1, "Titusville"], [1, "Tin City"], [1, "Tillamook"], [1, "Tifton"], [1, "Thomson"], [1, "Thomasville"], [1, "Thief River Falls"], [1, "The Dalles"], [1, "Texarkana"], [1, "Teterboro"], [1, "Terre Haute"], [1, "Temple"], [1, "Telluride"], [1, "Teller"], [1, "Taunton"], [1, "Tatalina"], [1, "Tallahassee"], [1, "Talladega"], [1, "Talkeetna"], [1, "Syracuse"], [1, "Sylvania"], [1, "Sylacauga"], [1, "Sutton"], [1, "Sumter"], [1, "Summit"], [1, "Sugar Land"], [1, "Sublette"], [1, "Stuart"], [1, "Stratford"], [1, "Stockton"], [1, "Stinson"], [1, "Stillwater"], [1, "Stevens Point"], [1, "Sterling"], [1, "Stephenville"], [1, "Steamboat Springs"], [1, "Statesville"], [1, "State College Pennsylvania"], [1, "St. Paul Island"], [1, "St. Paul"], [1, "St. Michael"], [1, "St. Louis"], [1, "St. Augustine Airport"], [1, "St Mary's"], [1, "Spencer"], [1, "Spearfish-South Dakota"], [1, "Sparrevohn"], [1, "South Naknek"], [1, "South Lake Tahoe"], [1, "South Haven"], [1, "South Bend"], [1, "Sonora"], [1, "Somerville"], [1, "Somerset"], [1, "Soldotna"], [1, "Smyrna"], [1, "Smithfield"], [1, "Sleetmute"], [1, "Skagway"], [1, "Sitka"], [1, "Sioux Falls"], [1, "Sioux City"], [1, "Silver Springs"], [1, "Sikeston"], [1, "Shungnak"], [1, "Show Low"], [1, "Shishmaref"], [1, "Sheridan"], [1, "Shelton"], [1, "Shell Knob"], [1, "Shelbyville"], [1, "Sheboygan"], [1, "Shaktoolik"], [1, "Shageluk"], [1, "Seward"], [1, "Sewanee"], [1, "Selma"], [1, "Selawik"], [1, "Sedona"], [1, "Sebring"], [1, "Scottsdale"], [1, "Scottsbluff"], [1, "Scott City"], [1, "Scotia NY"], [1, "Scammon Bay"], [1, "Savoonga"], [1, "Savannah"], [1, "Sault Ste Marie"], [1, "Sarasota"], [1, "Saranac Lake"], [1, "Santa Rosa"], [1, "Santa Monica"], [1, "Santa Maria"], [1, "Santa Fe"], [1, "Santa Ana"], [1, "Sanford"], [1, "Sandusky"], [1, "Sand Point"], [1, "San Nicolas Island"], [1, "San Marcos"], [1, "San Luis Obispo"], [1, "San Luis"], [1, "San Francisco"], [1, "San Clemente Island"], [1, "San Carlos"], [1, "San Bernardino"], [1, "San Angelo"], [1, "Saluda"], [1, "Salmon"], [1, "Sallisaw"], [1, "Salisbury"], [1, "Salinas"], [1, "Salina"], [1, "Salem"], [1, "Saint George"], [1, "Saint Cloud"], [1, "Saginaw"], [1, "Safford"], [1, "Sabetha"], [1, "SARATOGA"], [1, "Rutland"], [1, "Russian Mission"], [1, "Russell"], [1, "Ruidoso"], [1, "Ruby"], [1, "Roxboro"], [1, "Roswell"], [1, "Rosecrans"], [1, "Rocky Mount"], [1, "Rockport"], [1, "Rockland"], [1, "Rockingham"], [1, "Rockford"], [1, "Rock Springs"], [1, "Rock Hill"], [1, "Robinson"], [1, "Roanoke VA"], [1, "Riverton WY"], [1, "Rifle"], [1, "Ridgely"], [1, "Richmond Heights"], [1, "Richfield"], [1, "Rhinelander"], [1, "Rhinebeck"], [1, "Renton"], [1, "Reno"], [1, "Redwood Falls"], [1, "Redstone"], [1, "Redmond-Bend"], [1, "Redlands"], [1, "Redding"], [1, "Red River"], [1, "Red Bluff"], [1, "Reading"], [1, "Rawlins"], [1, "Rancho Murieta"], [1, "Ramona"], [1, "Raleigh-durham"], [1, "Racine"], [1, "Quitman"], [1, "Quinhagak"], [1, "Quincy"], [1, "Queensbury"], [1, "Quantico"], [1, "Quakertown"], [1, "Punta Gorda"], [1, "Pullman"], [1, "Pueblo"], [1, "Provo"], [1, "Provincetown"], [1, "Providence"], [1, "Prosser"], [1, "Prospect Creek"], [1, "Prineville"], [1, "Princeton"], [1, "Price"], [1, "Presque Isle"], [1, "Prescott"], [1, "Pratt"], [1, "Poughkeepsie"], [1, "Poteau"], [1, "Portsmouth"], [1, "Port O\\\\'Connor"], [1, "Port Moller"], [1, "Port Huron"], [1, "Port Heiden"], [1, "Port Clinton"], [1, "Poplar Bluff"], [1, "Pontiac"], [1, "Ponca City"], [1, "Pompano Beach"], [1, "Point Mugu"], [1, "Point Lay"], [1, "Point Barrow"], [1, "Pocatello"], [1, "Plymouth"], [1, "Plattsburgh"], [1, "Placida"], [1, "Pineville"], [1, "Pinehurst-Southern Pines"], [1, "Pinedale"], [1, "Pine Mountain"], [1, "Pine Bluff"], [1, "Pilot Point"], [1, "Pikeville"], [1, "Pierre"], [1, "Phoenix "], [1, "Phillips"], [1, "Perryville"], [1, "Peoria"], [1, "Pendleton"], [1, "Pembina"], [1, "Pellston"], [1, "Pecos"], [1, "Patuxent River"], [1, "Paso Robles"], [1, "Pasco"], [1, "Paris"], [1, "Palo Alto"], [1, "Palmer"], [1, "Palmdale"], [1, "Palacios"], [1, "Pahokee"], [1, "Page"], [1, "PARKERSBURG"], [1, "PADUCAH"], [1, "Ozona"], [1, "Oxnard"], [1, "Owensboro"], [1, "Ottumwa"], [1, "Oshkosh"], [1, "Oscoda"], [1, "Ormond Beach"], [1, "Orangeburg"], [1, "Opolu"], [1, "Olympia"], [1, "Olive Branch"], [1, "Okmulgee"], [1, "Okeechobee"], [1, "Ogdensburg"], [1, "Oconomowoc"], [1, "Oceana"], [1, "Ocean Reef Club Airport"], [1, "Ocala"], [1, "Oakley"], [1, "Oakland"], [1, "Oak Island"], [1, "Nulato"], [1, "Nuiqsut"], [1, "Novato"], [1, "Norwood"], [1, "Northway"], [1, "North Wilkesboro"], [1, "North Platte"], [1, "North Myrtle Beach"], [1, "North Kingstown"], [1, "North Bend"], [1, "Norfolk  Nebraska"], [1, "Noorvik"], [1, "Nondalton"], [1, "Nome"], [1, "Nogales"], [1, "Noatak"], [1, "Nikolai"], [1, "Nightmute"], [1, "Niagara Falls"], [1, "Newton"], [1, "Newport News"], [1, "Newport"], [1, "Newnan"], [1, "Newburgh"], [1, "Newberry"], [1, "Newark"], [1, "New Stuyahok"], [1, "New Richmond"], [1, "New Philadelpha"], [1, "New Haven"], [1, "New Castle"], [1, "New Bern"], [1, "New Bedford"], [1, "Neodesha"], [1, "Nenana"], [1, "Nelson Lagoon"], [1, "Needles"], [1, "Nashville"], [1, "Nashua"], [1, "Nappanee "], [1, "Naples"], [1, "Napaskiak"], [1, "Napakiak"], [1, "Napa"], [1, "Nantucket"], [1, "Myrtle Beach"], [1, "Muskogee"], [1, "Muskegon"], [1, "Muscle Shoals"], [1, "Murrieta-Temecula"], [1, "Muncie"], [1, "Muir"], [1, "Mountain Village"], [1, "Mountain View"], [1, "Mount Sterling"], [1, "Mount Pocono"], [1, "Mount Pleasant"], [1, "Mount Holly"], [1, "Mount Clemens"], [1, "Morrisville"], [1, "Morgantown"], [1, "Morganton"], [1, "Monument Valley"], [1, "Montrose CO"], [1, "Montpelier"], [1, "Monticello"], [1, "Monterey"], [1, "Montauk"], [1, "Moline"], [1, "Mojave"], [1, "Modesto"], [1, "Mobridge"], [1, "Moab"], [1, "Missoula"], [1, "Misquite"], [1, "Miramar"], [1, "Minocqua - Woodruff"], [1, "Minneapolis"], [1, "Mineral Wells"], [1, "Milton"], [1, "Millville"], [1, "Millinocket"], [1, "Millington"], [1, "Milledgeville"], [1, "Miles City"], [1, "Midland"], [1, "Michigan City"], [1, "Metakatla"], [1, "Meridian"], [1, "Meriden"], [1, "Mercury"], [1, "Melbourne"], [1, "Mekoryuk"], [1, "Medford"], [1, "Meade"], [1, "Mcgrath"], [1, "Mcallen"], [1, "Mcalester"], [1, "McKinley Park"], [1, "McCook"], [1, "McCall"], [1, "Mc Pherson"], [1, "Mc Comb"], [1, "Mayport"], [1, "Mattawa"], [1, "Massena"], [1, "Mason City"], [1, "Mary Esther"], [1, "Martinsburg"], [1, "Marquette"], [1, "Mariposa"], [1, "Marion"], [1, "Marietta"], [1, "Marfa"], [1, "Marco Island Airport"], [1, "Marathon"], [1, "Marana"], [1, "Manteo"], [1, "Mansfield"], [1, "Manokotak"], [1, "Manley Hot Springs"], [1, "Mankato"], [1, "Manistee"], [1, "Manhattan"], [1, "Manchester NH"], [1, "Manassas"], [1, "Mammoth Lakes"], [1, "Malad City"], [1, "Madera"], [1, "Mackminnville"], [1, "MONTGOMERY"], [1, "Lynchburg"], [1, "Lumberton"], [1, "Lufkin"], [1, "Ludington"], [1, "Lubbock"], [1, "Lovelock"], [1, "Louisiana"], [1, "Los Alamos"], [1, "Lorain-Elyria"], [1, "Lopez"], [1, "Long Beach"], [1, "Lone Rock"], [1, "Logan"], [1, "Locust Grove"], [1, "Lockport"], [1, "Lock Haven"], [1, "Livingston-Montana"], [1, "Livermore"], [1, "Little Rock"], [1, "Linden"], [1, "Lima"], [1, "Lihue"], [1, "Liberty"], [1, "Liberal"], [1, "Lexington KY"], [1, "Lexington"], [1, "Lewistown"], [1, "Lewisburg"], [1, "Lemoore"], [1, "Lebanon"], [1, "Lawton"], [1, "Lawrenceville"], [1, "Latrobe"], [1, "Las Cruces"], [1, "Larsen Bay"], [1, "Larned"], [1, "Laredo"], [1, "Laramie"], [1, "Lanai"], [1, "Lampasas"], [1, "Lamar"], [1, "Lakeway"], [1, "Lakeview"], [1, "Lakeland"], [1, "Lakehurst"], [1, "Lake Placid"], [1, "Lake Minchumina"], [1, "Lake Havasu City"], [1, "Lake City"], [1, "Lake Charles"], [1, "Lahania-kapalua"], [1, "Lago Vista"], [1, "LaGrange"], [1, "La Verne"], [1, "La Junta"], [1, "La Grande"], [1, "La Crosse"], [1, "Kwigillingok"], [1, "Kwethluk"], [1, "Kuparuk"], [1, "Koyukuk"], [1, "Koyuk"], [1, "Kotzebue"], [1, "Kotlik"], [1, "Kongiganak"], [1, "Kona"], [1, "Koliganek"], [1, "Kokomo"], [1, "Kodiak"], [1, "Kobuk"], [1, "Knobnoster"], [1, "Klamath Falls"], [1, "Kivalina"], [1, "Kissimmee"], [1, "Kirksville"], [1, "Kipnuk"], [1, "Kinston"], [1, "King Salmon"], [1, "King Cove"], [1, "Killeen"], [1, "Kill Devil Hills"], [1, "Kiana"], [1, "Ketchikan"], [1, "Kerrville"], [1, "Keokuk"], [1, "Kenosha"], [1, "Kendall-tamiami"], [1, "Kenai"], [1, "Kelso"], [1, "Keene"], [1, "Kasigluk"], [1, "Karluk"], [1, "Kapolei"], [1, "Kankakee"], [1, "Kaneohe Bay"], [1, "Kamuela"], [1, "Kaltag"], [1, "Kalskag"], [1, "Kalispell"], [1, "Kalamazoo"], [1, "Kake"], [1, "Kaiser Lake Ozark"], [1, "Kahului"], [1, "Juneau"], [1, "Junction"], [1, "Joplin"], [1, "Jonesboro"], [1, "Joliet"], [1, "Johnstown"], [1, "Jesup"], [1, "Jefferson City"], [1, "Janesville"], [1, "Jacksonville NC"], [1, "Jacksn Hole"], [1, "Ithaca"], [1, "Islip"], [1, "Iron Mountain"], [1, "Iraan"], [1, "Iowa City"], [1, "Inyokern"], [1, "International Falls"], [1, "Indian Springs"], [1, "Indian Mountains"], [1, "Independence"], [1, "Imperial"], [1, "Immokalee "], [1, "Iliamna"], [1, "Igiugig"], [1, "Idaho Falls"], [1, "Hydaburg"], [1, "Hutchinson"], [1, "Huslia"], [1, "Huron"], [1, "Huntington"], [1, "Hunter Aaf"], [1, "Hughes"], [1, "Houlton"], [1, "Houghton Lake"], [1, "Hot Springs"], [1, "Hoquiam"], [1, "Hopkinsville"], [1, "Hooper Bay"], [1, "Hoonah"], [1, "Honolulu"], [1, "Hondo"], [1, "Homestead"], [1, "Homer"], [1, "Holy Cross"], [1, "Hollywood"], [1, "Holland"], [1, "Holdredge"], [1, "Hobbs"], [1, "Hobart"], [1, "Hilton Head Island"], [1, "Hilo"], [1, "Hickory"], [1, "Hibbing"], [1, "Henderson"], [1, "Helena"], [1, "Healy"], [1, "Hazleton"], [1, "Hays"], [1, "Hayden"], [1, "Hawthorne"], [1, "Havre"], [1, "Hattiesburg/Laurel"], [1, "Hattiesburg"], [1, "Hartsville"], [1, "Hartford"], [1, "Harrison"], [1, "Harlingen"], [1, "Hancock"], [1, "Hana"], [1, "Half Moon Bay"], [1, "Haines"], [1, "Hailey"], [1, "Hagerstown"], [1, "Gwinn"], [1, "Guymon"], [1, "Gustavus"], [1, "Gunnison"], [1, "Gulkana"], [1, "Gulfport"], [1, "Gulf Shores"], [1, "Grove"], [1, "Groton CT"], [1, "Groom Lake"], [1, "Greenwood"], [1, "Greenvile"], [1, "Greensboro"], [1, "Green Cove Springs"], [1, "Green Bay"], [1, "Greeley"], [1, "Great Falls"], [1, "Great Bend"], [1, "Grants"], [1, "Grant County Airport"], [1, "Grand Rapids MN"], [1, "Grand Rapids"], [1, "Grand Marais"], [1, "Grand Junction"], [1, "Grand Island"], [1, "Grand Forks"], [1, "Grand Canyon"], [1, "Goodyear"], [1, "Goodland"], [1, "Golovin"], [1, "Goldsboro"], [1, "Glendive"], [1, "Glendale"], [1, "Gladwin"], [1, "Gillette"], [1, "Gila Bend"], [1, "Gary"], [1, "Garden City"], [1, "Gambell"], [1, "Galveston"], [1, "Gallup"], [1, "Galion"], [1, "Galesburg"], [1, "Galena"], [1, "Gaithersburg"], [1, "Gadsden"], [1, "Funter Bay"], [1, "Fullerton"], [1, "Fryeburg"], [1, "Friday Harbor"], [1, "Fresno"], [1, "Frenchville"], [1, "Fremont"], [1, "Fredericksburg"], [1, "Franklin"], [1, "Frankfort"], [1, "Fostoria"], [1, "Fort Yukon"], [1, "Fort Wayne IN"], [1, "Fort Wayne"], [1, "Fort Wainwright"], [1, "Fort Stockton"], [1, "Fort Smith"], [1, "Fort Sill"], [1, "Fort Rucker/Ozark"], [1, "Fort Riley"], [1, "Fort Richardson"], [1, "Fort Polk"], [1, "Fort Pierce"], [1, "Fort Ord"], [1, "Fort Meade"], [1, "Fort Lewis"], [1, "Fort Leonardwood"], [1, "Fort Leavenworth"], [1, "Fort Knox"], [1, "Fort Irwin"], [1, "Fort Huachuca"], [1, "Fort Hood"], [1, "Fort Eustis"], [1, "Fort Drum"], [1, "Fort Dodge"], [1, "Fort Collins"], [1, "Fort Carson"], [1, "Fort Bridger"], [1, "Fort Bragg"], [1, "Fort Benning"], [1, "Fort Belvoir"], [1, "Fond du Lac"], [1, "Florence"], [1, "Flint"], [1, "Flagstaff"], [1, "Fitzgerald"], [1, "Fitchburg"], [1, "Findley"], [1, "Farmington"], [1, "Farmingdale"], [1, "Fargo"], [1, "False Pass"], [1, "Fairfield"], [1, "Everett"], [1, "Evansville"], [1, "Evanston"], [1, "Eureka"], [1, "Eugene"], [1, "Eufala"], [1, "Escanaba"], [1, "Erie"], [1, "Enumclaw"], [1, "Enterprise"], [1, "Enid"], [1, "Engelhard"], [1, "Endicott"], [1, "Emporia"], [1, "Emmonak"], [1, "Elmira"], [1, "Ellicott"], [1, "Elko"], [1, "Elkins"], [1, "Elim"], [1, "Elfin Cove"], [1, "El dorado springs"], [1, "El Monte"], [1, "El Dorado"], [1, "El Centro"], [1, "El Cajon"], [1, "Egegik"], [1, "Eek"], [1, "Edwards Afb"], [1, "Eden Prairie"], [1, "Eau Claire"], [1, "Eastsound"], [1, "Eastport"], [1, "Eastover"], [1, "Easton"], [1, "East Troy"], [1, "East Tawas"], [1, "Eagle River"], [1, "Eagle"], [1, "Durango"], [1, "Dunkirk"], [1, "Duncan"], [1, "Duluth"], [1, "Dubuque IA"], [1, "Dublin"], [1, "Du Bois"], [1, "Drummond Island"], [1, "Doylestown"], [1, "Dover"], [1, "Dothan"], [1, "Dodge City"], [1, "Dickinson"], [1, "Devils Lake"], [1, "Destin"], [1, "Des Moines"], [1, "Deridder"], [1, "Denton"], [1, "Deming"], [1, "Delta Junction"], [1, "Delta"], [1, "Dell"], [1, "Deering"], [1, "Decatur"], [1, "Deadhorse"], [1, "DeLand"], [1, "Daytona Beach"], [1, "Davis-Woodland-Winters"], [1, "Darlington"], [1, "Danbury"], [1, "Dalton"], [1, "Dallas-Fort Worth"], [1, "Dalhart"], [1, "Daggett"], [1, "DALLAS"], [1, "Cutbank"], [1, "Cushing"], [1, "Cumberland"], [1, "Crystal River"], [1, "Crystal"], [1, "Crossville"], [1, "Cross City"], [1, "Crescent City"], [1, "Council Bluffs"], [1, "Cotulla"], [1, "Cottonwood"], [1, "Corvallis"], [1, "Cortez"], [1, "Cornelia"], [1, "Cordova"], [1, "Cordele"], [1, "Cooldige"], [1, "Conway"], [1, "Conroe"], [1, "Connellsville"], [1, "Concord NH"], [1, "Columbus Mississippi"], [1, "Colorado Springs"], [1, "Colombus"], [1, "College Station"], [1, "Coldwater"], [1, "Coffeyville"], [1, "Coeur d'Alene"], [1, "Cody"], [1, "Cocoa Beach"], [1, "Coco Beach"], [1, "Coatesville"], [1, "Clemson"], [1, "Clearwater"], [1, "Clear Mews"], [1, "Clarksville"], [1, "Clarksburg"], [1, "Circle"], [1, "Christmas Valley"], [1, "Chino"], [1, "China Lake"], [1, "Childress"], [1, "Chicopee Falls"], [1, "Chico"], [1, "Chicago-Wheeling"], [1, "Cheyenne"], [1, "Chevak"], [1, "Cherry Point"], [1, "Cheraw"], [1, "Chenega"], [1, "Chehalis"], [1, "Chefornak"], [1, "Chattanooga"], [1, "Chatsworth"], [1, "Charlottesville VA"], [1, "Charlotte"], [1, "Charles City"], [1, "Charelvoix"], [1, "Chapel Hill"], [1, "Chanute"], [1, "Chandler"], [1, "Champaign"], [1, "Chalkyitsik"], [1, "Chadron"], [1, "Centre"], [1, "Central"], [1, "Cedar Rapids"], [1, "Cedar City"], [1, "Catalina Island"], [1, "Casper"], [1, "Casa Grande"], [1, "Cartersville"], [1, "Carrollton"], [1, "Caribou"], [1, "Carefree"], [1, "Carbondale/Murphysboro"], [1, "Cape Romanzof"], [1, "Cape Newenham"], [1, "Cape Lisburne"], [1, "Cape Girardeau"], [1, "Camp Springs"], [1, "Camp Douglas"], [1, "Camden"], [1, "Cambria"], [1, "Camarillo - CA"], [1, "Calhoun"], [1, "Calexico"], [1, "Caldwell"], [1, "Butte"], [1, "Bush Field"], [1, "Burns"], [1, "Burley"], [1, "Burbank"], [1, "Buffalo"], [1, "Buckley"], [1, "Buckland"], [1, "Buckeye"], [1, "Bryce Canyon"], [1, "Bryan"], [1, "Brownsville"], [1, "Broomfield-CO"], [1, "Brookneal"], [1, "Brigham City"], [1, "Brevig Mission"], [1, "Brenham"], [1, "Bremerton"], [1, "Breckenridge"], [1, "Brainerd"], [1, "Brady"], [1, "Bradshaw Field"], [1, "Bradford"], [1, "Bozeman"], [1, "Bowling Green"], [1, "Boulder"], [1, "Boston"], [1, "Boise"], [1, "Boca Raton"], [1, "Blytheville"], [1, "Blythe"], [1, "Bluefield"], [1, "Block Island"], [1, "Bismarck"], [1, "Bishop"], [1, "Birmingham"], [1, "Binghamton"], [1, "Biloxi"], [1, "Billings"], [1, "Big Timber"], [1, "Big Piney"], [1, "Big Mountain"], [1, "Beverly"], [1, "Bettles"], [1, "Bethel"], [1, "Bessemer"], [1, "Bentonville"], [1, "Benton"], [1, "Bend"], [1, "Bemidji"], [1, "Bellingham"], [1, "Belleville"], [1, "Beckley"], [1, "Beaver Falls"], [1, "Beaver"], [1, "Beaufort"], [1, "Bay City"], [1, "Baudette"], [1, "Battle Creek"], [1, "Baton Rouge"], [1, "Batavia"], [1, "Bartow"], [1, "Barter Island"], [1, "Barrow"], [1, "Barnstable"], [1, "Barking Sands"], [1, "Baraboo"], [1, "Bar Harbor"], [1, "Banning"], [1, "Bangor"], [1, "Ballston Spa"], [1, "Bakersfield"], [1, "Baker City"], [1, "Bainbridge"], [1, "BRISTOL"], [1, "Avon Park"], [1, "Aurora"], [1, "Auburn"], [1, "Atqasuk"], [1, "Atlantic City"], [1, "Atka"], [1, "Astoria"], [1, "Aspen"], [1, "Asheville"], [1, "Asheboro"], [1, "Ardmore"], [1, "Arctic Village"], [1, "Arcata CA"], [1, "Appleton"], [1, "Apalachicola"], [1, "Anvik"], [1, "Anoka"], [1, "Anniston"], [1, "Annette Island"], [1, "Annapolis"], [1, "Ann Arbor"], [1, "Ankeny"], [1, "Aniak"], [1, "Angoon"], [1, "Angola"], [1, "Angleton"], [1, "Andersen"], [1, "Anaktuvuk Pass"], [1, "Americus"], [1, "Ambler"], [1, "Amarillo"], [1, "Altus"], [1, "Altoona"], [1, "Alton/St Louis"], [1, "Alpine"], [1, "Alpena"], [1, "Alliance"], [1, "Allentown"], [1, "Allakaket"], [1, "Alice"], [1, "Alexander City"], [1, "Aleknagik"], [1, "Albuquerque"], [1, "Alamosa"], [1, "Alakanuk"], [1, "Alabaster"], [1, "Akutan"], [1, "Akiak"], [1, "Akhiok"], [1, "Aiken"], [1, "Addison"], [1, "Adak Island"], [1, "Ada"]]}, "program_result_list": [["t1 = airports[airports['country'] == 'United States']\nt2 = t1.groupby('city').size().rename('count')\nanswer = t2.sort_values(ascending=False).to_frame().reset_index()", false], ["t1 = airports[airports['country'] == 'United States']\nt2 = t1.groupby('city').size().rename('count')\nanswer = t2.sort_values(ascending=False).to_frame().reset_index()", false], ["t1 = airports[airports['country'] == 'United States']\nt2 = t1.groupby('city').size().rename('count').sort_values(ascending=False).to_frame().reset_index()\nanswer = t2", false], ["t1 = airports[airports['country'] == 'United States']\nt2 = t1.groupby('city').size().rename('count').to_frame().reset_index()\nanswer = t2.sort_values(by='count', ascending=False)", false], ["t1 = airports[airports['country'] == 'United States']\nanswer = t1.groupby('city').size().rename('count').sort_values(ascending=False).to_frame().reset_index()", false], ["t1 = airports[airports['country'] == 'United States']\nt2 = t1.groupby('city').size().rename('count')\nanswer = t2.sort_values(ascending=False).to_frame().reset_index()", false], ["t1 = airports[airports['country'] == 'United States']\nt2 = t1.groupby('city').size().rename('count')\nanswer = t2.sort_values(ascending=False).to_frame().reset_index()", false], ["t1 = airports[airports['country'] == 'United States'].groupby('city').size().rename('count')\nanswer = t1.sort_values(ascending=False).to_frame().reset_index()", false], ["t1 = airports[airports['country'] == 'United States']\nt2 = t1.groupby('city').size().rename('count').to_frame().reset_index()\nanswer = t2.sort_values('count', ascending=False)", false], ["t1 = airports[airports['country'] == 'United States']\nt2 = t1.groupby('city').size().rename('count')\nanswer = t2.sort_values(ascending=False).to_frame().reset_index()", false], ["t1 = airports[airports['country'] == 'United States']\nt2 = t1.groupby('city').size().rename('count').to_frame().reset_index()\nanswer = t2.sort_values('count', ascending=False)", false], ["t1 = airports[airports['country'] == 'United States']\nt2 = t1.groupby('city').size().rename('count').sort_values(ascending=False).to_frame().reset_index()\nanswer = t2", false], ["t1 = airports[airports['country'] == 'United States']\nt2 = t1.groupby('city').size().rename('count').to_frame().reset_index()\nanswer = t2.sort_values('count', ascending=False)", false], ["t1 = airports[airports['country'] == 'United States']\nt2 = t1.groupby('city').size().rename('count').sort_values(ascending=False).to_frame()\nanswer = t2.reset_index()", false], ["t1 = airports[airports['country'] == 'United States']\nanswer = t1.groupby('city').size().rename('count').sort_values(ascending=False).to_frame().reset_index()", false], ["t1 = airports[airports['country'] == 'United States']\nt2 = t1.groupby('city').size().rename('count')\nanswer = t2.sort_values(ascending=False).to_frame().reset_index()", false], ["t1 = airports[airports['country'] == 'United States']\nt2 = t1.groupby('city').size().rename('count').to_frame().reset_index()\nanswer = t2.sort_values('count', ascending=False)", false], ["t1 = airports[airports['country'] == 'United States']\nanswer = t1.groupby('city').size().rename('count').sort_values(ascending=False).to_frame().reset_index()", false], ["t1 = airports[airports['country'] == 'United States']\nt2 = t1.groupby('city').size().rename('count').to_frame().reset_index()\nanswer = t2.sort_values(by='count', ascending=False)", false], ["t1 = airports[airports['country'] == 'United States']\nt2 = t1.groupby('city').size().rename('count').to_frame().reset_index()\nanswer = t2.sort_values(by='count', ascending=False)", false]]}
{"example": {"db_id": "college_2", "query": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)", "query_toks": ["SELECT", "name", "FROM", "student", "WHERE", "id", "IN", "(", "SELECT", "id", "FROM", "takes", "WHERE", "semester", "=", "'Fall", "'", "AND", "YEAR", "=", "2003", ")"], "query_toks_no_value": ["select", "name", "from", "student", "where", "id", "in", "(", "select", "id", "from", "takes", "where", "semester", "=", "value", "and", "year", "=", "value", ")"], "question": "What are the names of students who took a course in the Fall of 2003?", "question_toks": ["What", "are", "the", "names", "of", "students", "who", "took", "a", "course", "in", "the", "Fall", "of", "2003", "?"], "sql": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 28, false], null]]]], "where": [[false, 8, [0, [0, 27, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 31, false], null]]]], "where": [[false, 2, [0, [0, 34, false], null], "\"Fall\"", null], "and", [false, 2, [0, [0, 35, false], null], 2003.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"classroom": ["building", "room_number", "capacity"], "department": ["dept_name", "building", "budget"], "course": ["course_id", "title", "dept_name", "credits"], "instructor": ["ID", "name", "dept_name", "salary"], "section": ["course_id", "sec_id", "semester", "year", "building", "room_number", "time_slot_id"], "teaches": ["ID", "course_id", "sec_id", "semester", "year"], "student": ["ID", "name", "dept_name", "tot_cred"], "takes": ["ID", "course_id", "sec_id", "semester", "year", "grade"], "advisor": ["s_ID", "i_ID"], "time_slot": ["time_slot_id", "day", "start_hr", "start_min", "end_hr", "end_min"], "prereq": ["course_id", "prereq_id"]}, "answer": [["Manber"], ["Zelty"], ["Colin"], ["Rzecz"], ["Ugarte"], ["Kieras"], ["Reed"], ["Okaf"], ["Allard"], ["Veselovsky"], ["Dhav"], ["Xue"], ["More"], ["Marlet"], ["Roses"], ["Jerns"], ["Morales"], ["Prasad"], ["Kerridge"], ["Schultz"], ["Tzeng"], ["Englund"], ["Al-Tahat"], ["Heckman"], ["Rokhs"], ["Foels"], ["Jr"], ["Peyse"], ["Rakoj"], ["Ng"], ["Kwan"], ["Kowe"], ["Skeen"], ["Knutson"], ["Thimm"], ["Griffiths"], ["Wingb"], ["Marcus"], ["Watson"], ["Power"], ["Sin"], ["Szczerban"], ["Ren"], ["Serrano"], ["Okano"], ["Alqui"], ["Bonatto"], ["Wolter"], ["Latour"], ["Adam"], ["Ignj"], ["Bedny"], ["Lazos"], ["Berger"], ["Belhadji"], ["Starker"], ["Miao"], ["Moszkowski"], ["Yoneda"], ["Takeshi"], ["Whitley"], ["Axte"], ["Ramadan"], ["Haigh"], ["Vagn"], ["Martinsen"], ["Lehtinen"], ["Malinen"], ["Philippe"], ["Kawahara"], ["Massour"], ["Enokib"], ["Sun"], ["Lapio"], ["Chien"], ["She"], ["Silbert"], ["Sasso"], ["Arinb"], ["Januszewski"], ["Anis"], ["Yeung"], ["Dink"], ["Marques"], ["Ross"], ["Wicki"], ["Sacchi"], ["Bandekar"], ["Liao"], ["Rahman"], ["Kanata"], ["Meyl"], ["Suppan"], ["Angs"], ["Stratulat"], ["Kuwadak"], ["Kantors"], ["Biehl"], ["Hakkinen"], ["Akaiw"], ["Swartj"], ["King"], ["Hazemi"], ["Chuon"], ["Kang"], ["Mathur"], ["Peter"], ["Ould"], ["Michel"], ["Pearlman"], ["Audeh"], ["Tavan"], ["Hamarn"], ["Brailsford"], ["Nirenbu"], ["Dhav"], ["Kangs"], ["Marinov"], ["Goodwin"], ["Coppens"], ["Ma"], ["Mori"], ["Araya"], ["Williamson"], ["Pampal"], ["Benson"], ["Masini"], ["Rubio"], ["Denecker"], ["Erdem"], ["Cavalcanti"], ["Hayashi"], ["Cai"], ["Chang"], ["Bouzeghoub"], ["Asahara"], ["Canas"], ["Colu"], ["Dawson"], ["Sahm"], ["Vanrell"], ["Savelieva"], ["Tiwari"], ["Fontana"], ["Adda"], ["Lewis"], ["Finney"], ["Lomi"], ["Laak"], ["Shuming"], ["Cheed"], ["Wunderli"], ["Geon"], ["Held"], ["Juchn"], ["McCarter"], ["Rais"], ["Nardi"], ["Agarwal"], ["Patel"], ["Garze"], ["Bradshaw"], ["Negron"], ["Cox"], ["Cheah"], ["Bates"], ["Sauer"], ["Cal"], ["Ockerb"], ["Gerstend"], ["Sundho"], ["Read"], ["Kinney"], ["Gordon"], ["Larion"], ["Daat"], ["Dang"], ["Oevers"], ["Wecker"], ["Wodn"], ["Dias"], ["Silverman"], ["Lykin"], ["Ceze"], ["Sahani"], ["Kempn"], ["Bouras"], ["Brunet"], ["Fierro-"], ["Lang"], ["Noda"], ["Shakhnovich"], ["Cecchi"], ["Kinney"], ["DAgostino"], ["Kalisz"], ["Russa"], ["Fauth"], ["Andert"], ["Juol"], ["\u00c3\u0081lvarez"], ["Jo"], ["Yap"], ["Greene"], ["Halbert"], ["Engeldr"], ["Tran-"], ["Segars"], ["Cotterill"], ["Palomo"], ["Visr"], ["Fenwick"], ["Boulah"], ["Baker"], ["Vassileva"], ["Hunter"], ["Moreira"], ["Sivew"], ["Calles"], ["Seyfert"], ["Ashmi"], ["Bertranp"], ["Simmel"], ["Tanaka"], ["Richter"], ["Goldbu"], ["Ende"], ["Neru"], ["Heers"], ["Veselovsky"], ["Baber"], ["Markin"], ["Veerar"], ["Trur"], ["Garze"], ["Fitzpatrick"], ["Date"], ["Ssu"], ["Leitner"], ["Tabarr"], ["Duong"], ["Brunt"], ["Y\u00c3\u00bcksel"], ["McQuillan"], ["Savelieva"], ["Evano"], ["Rougemont"], ["Grange"], ["Rajan"], ["Mai"], ["Sorensen"], ["Hirasawa"], ["Carr"], ["Catani"], ["Mathur"], ["Canellas"], ["Reiss"], ["Kennedy"], ["Chatterton"], ["Williamson"], ["Duxbury"], ["Berthold"], ["Reuver"], ["Gomez"], ["Simmel"], ["Aufr"], ["Sutter"], ["Daues"], ["Michael"], ["Oller"], ["Lykin"], ["Stokic"], ["Stetson"], ["Gaspar"], ["Beavis"], ["Solar"], ["Kogure"], ["Mateo"], ["Youseffi"], ["Ibrahim"], ["Humphrey"], ["Grude"], ["Ende"], ["Porr"], ["Lepp"], ["Folkers"], ["Marsh"], ["Arakawa"], ["Chaudhuri"], ["Mali"], ["Inoue"], ["Fonseca"], ["Shaffer"], ["Rueda"], ["Botha"], ["Arnoux"], ["Canas"], ["Zulueta"], ["Lhomme"], ["Porter"], ["Kawasaki"], ["Kacpr"], ["Resa"], ["Qian"], ["Rotter"], ["Bessou"], ["Okubo"], ["Neld"], ["Ueda"], ["Frost"], ["Tapia"], ["Nagashima"], ["Saariluoma"], ["Chormo"], ["Ouaz"], ["Nakajima"], ["Park"], ["Atre"], ["McCracken"], ["Suzuki"], ["Robins"], ["Leventhal"], ["Damas"], ["Curutchet"], ["Liley"], ["McCormack"], ["Stead"], ["Peck"], ["Otterm"], ["Saguez"], ["Kawakami"], ["Seike"], ["Mowbray"], ["Wood"], ["Asahara"], ["Orono"], ["Schreitm"], ["Mantzo"], ["Chan"], ["Bosnjak"], ["Nestor"], ["Baba"], ["Kacpr"], ["Hagedorn"], ["Lauciu"], ["Fries"], ["Nakajima"], ["Farr"], ["Basile"], ["Arndt"], ["Barkov"], ["Glaho"], ["Quimby"], ["Loc"], ["Shilv"], ["Ebou"], ["Cao"], ["Gradino"], ["Peskin"], ["Byrd"], ["Yamamoto"], ["John"], ["Letouzey"], ["Suppan"], ["\u00c3\u2013zel"], ["ODono"], ["Quaranta"], ["Szendrei"], ["Neuhold"], ["Souza"], ["Nair"], ["Story"], ["Karniel"], ["Baccou"], ["Narayanan"], ["Fathi"], ["Okaf"], ["Dalton"], ["Kamae"], ["Grieng"], ["Falconer"], ["Poize"], ["Warren"], ["Sohn"], ["Norman"], ["Frasinc"], ["Mes"], ["Valtchev"], ["Campbell"], ["Westbrook"], ["Kamata"], ["Signah"], ["Jiao"], ["Gay"], ["Beeu"], ["Vrato"], ["Zuyev"], ["Kosken"], ["Matsuda"], ["Hayat"], ["Harada"], ["Rzecz"], ["Fok"], ["Spector"], ["Swien"], ["Theodores"], ["Kreutz"], ["Murphy"], ["Maglioni"], ["Narasimhamu"], ["Loull"], ["Elme"], ["Reinhardt"], ["Soper"], ["Holloway"], ["Tsukamoto"], ["Macias"], ["Androutsopoulos"], ["Dwyer"], ["Wood"], ["Urano"], ["Dellwo"], ["Bartels"], ["Drig"], ["Jode"], ["Llam"], ["Xie"], ["Bouras"], ["Pacie"], ["Rowe"], ["Dima"], ["Coppens"], ["Rioult"], ["Petzo"], ["Fok"], ["Hubr"], ["Birtz"], ["Tola"], ["Beavis"], ["Meneses"], ["April"], ["Pietkiewicz"], ["Kaufman"], ["Tassel"], ["Chriso"], ["Curl"], ["Ortmann"], ["Jordan"], ["Gall"], ["Koch"], ["Freib"], ["Mezzar"], ["Fournier"], ["Nikut"], ["Wright"], ["Tsantis"], ["Amr"], ["Holland"], ["Lin"], ["Ram"], ["McGinn"], ["Kaiser"], ["Tanaka"], ["Shim"], ["Venturini"], ["Scher"], ["Yoon"], ["Cui"], ["Tam"], ["Meneses"], ["Tallis"], ["Papakir"], ["Makarychev"], ["Halbert"], ["Gilmour"], ["Steinmetz"], ["Sowerby"], ["Cox"], ["Labroc"], ["Yoshioka"], ["Nguyen"], ["Lanfr"], ["Abraham"], ["Cochran"], ["Stasko"], ["Zelek"], ["Ahmadian"], ["Hoyos"], ["Kiltz"], ["Yeoh"], ["Beekw"], ["Zaniolo"], ["Teng"], ["Hirasawa"], ["Pledg"], ["Kruglyak"], ["Bloom"], ["Houtsm"], ["Richardson"], ["Zander"], ["Kagd"], ["Ryoo"], ["Masamura"], ["Richi"], ["Barry"], ["Rafiq"], ["Correia"], ["Bakirc"], ["Albinal"], ["Wakamiya"], ["Warren"], ["Odell"], ["Xue"], ["Tso"], ["Lopes"], ["Gustafsson"], ["Krone"], ["Kolodko"], ["Elias"], ["Martyno"], ["Penneb"], ["Brown"], ["Emam"], ["Tuomisto"], ["Pup"], ["Wehen"], ["Ende"], ["Bonvin"], ["Vogel"], ["Chikar"], ["Wilson"], ["Rammer"], ["Rhyne"], ["Gotoh"], ["Karande"], ["Androutsopoulos"], ["Petersen"], ["Nikut"], ["Seike"], ["Haigh"], ["Milanic"], ["Urano"], ["Kurt"], ["Spengler"], ["Landau"], ["She"], ["Rajnov"], ["Recc"], ["Blanchard"], ["Lindner"], ["Concilio"], ["Allen"], ["Kandadai"], ["Pah"], ["Syng"], ["Lahtinen"], ["Ang"], ["Rao"], ["Willis"], ["Klivansky"], ["Sharpe"], ["Noga"], ["MacIntyre"], ["Guthk"], ["Peterson"], ["Nicol"], ["Nadg"], ["Engen"], ["Garg"], ["Noda"], ["Feyr"], ["Redw"], ["Nagle"], ["Fritsch"], ["Suwanno"], ["Wolff"], ["Boons"], ["Higuchi"], ["Recc"], ["Sznajder"], ["\u00c3\u2026str\u00c3\u00b6m"], ["Hobbs"], ["Saito"], ["Dahmann"], ["Hashim"], ["Adeni"], ["Keps"], ["Brandt"], ["Sayre"], ["Juan"], ["Lemoine"], ["Hasan"], ["Reina-"], ["Cashman"], ["Neubert"], ["Schwet"], ["Cordt"], ["Eck"], ["Byun"], ["Okabe"], ["Ludwig"], ["Diana"], ["Chun"], ["Gregga"], ["Tam"], ["Zarat\u00c3\u00a9"], ["Hancock"], ["Yu"], ["Reiss"], ["Thie"], ["Feng"], ["Levitan"], ["Pohlem"], ["Ivanov"], ["Thadani"], ["Kihn"], ["Apostolov"], ["Choung"], ["Bhat"], ["Mohamed"], ["Kameda"], ["Someren"], ["Fettes"], ["Zamani"], ["Strieg"], ["Schelten"], ["Yusop"], ["Souza"], ["Rolland"], ["Perozzo"], ["Lansi"], ["Sadry"], ["DeMil"], ["Zarpell"], ["Carey"], ["Osaka"], ["Swain"], ["Rotom"], ["Gray"], ["Janssen"], ["Katsik"], ["Margetts"], ["Haigh"], ["Theuniss"], ["Rehd"], ["Chatfield"], ["Roeder"], ["Soricu"], ["Holloway"], ["Stauf"], ["Pulido"], ["Albuquerque"], ["Fries"], ["Alexandri"], ["Aarde"], ["Weller"], ["Pelletier"], ["Lao"], ["Gei\u00c3\u0178l"], ["Lum"], ["Tiamp"], ["Afim"], ["Xiong"], ["Deng"], ["Lutes"], ["Ivanov"], ["Cronin"], ["Choung"], ["Hampp"], ["Fengl"], ["Ray"], ["Collet"], ["Reichl"], ["Belmes"], ["Badran"], ["Godfrey"], ["Morris"], ["Harrison"], ["Kothari"], ["Schoenfl"], ["Mertens"], ["Barwin"], ["Cox"], ["Dano"], ["Samel"], ["Nishida"], ["Dage"], ["Zander"], ["Nagal"], ["Emms"], ["Pietkiewicz"], ["Jovicic"], ["Bai"], ["Tuki"], ["Kangs"], ["Fukui"], ["Canon"], ["Barranco"], ["Bhavs"], ["Maity"], ["Tanno"], ["Vries"], ["Kissel"], ["Roytman"], ["Hartmann"], ["Sohn"], ["Baccou"], ["Towsey"], ["Brookh"], ["Cheed"], ["Durrant"], ["Im"], ["Komatsu"], ["Soni"], ["Hoffman"], ["Bocchi"], ["Camme"], ["Durrant"], ["Stylian"], ["Conradie"], ["Anderson"], ["Makowski"], ["Wagner"], ["Hochri"], ["Hoov"], ["Dostal"], ["Stilla"], ["So"], ["Luan"], ["Djurd"], ["Sellink"], ["Enokib"], ["Xie"], ["Pulido"], ["Fischer"], ["Mandviwall"], ["Bayn"], ["Kuo"], ["Kelly"], ["Aarde"], ["Mennif"], ["Mansint"], ["Doran"], ["Tiroz"], ["Midu"], ["Zander"], ["Lucas"], ["Pradhan"], ["Namer"], ["Desp"], ["Kane"], ["Kubo"], ["Kamez"], ["Deupree"], ["Yuanq"], ["Rossettin"], ["Hendrickson"], ["Katzenb"], ["Halbert"], ["Gall"], ["Papakir"], ["Spengler"], ["Winter"], ["Butler"], ["Karlsson"], ["Riser"], ["Schwarze"], ["Rossos"], ["Horecz"], ["Saad"], ["Yagit"], ["Aufr"], ["Roses"], ["Loudn"], ["Goldman"], ["Hughes"], ["Novak"], ["Planti"], ["Shishkin"], ["Morrison"], ["Szczerban"], ["Crick"], ["Brochhause"], ["Qvi"], ["Hsueh"], ["Schelten"], ["Gibson"], ["Xi"], ["Amberg"], ["Shevade"], ["Goldman"], ["Spengler"], ["Sui"], ["Westervelt"], ["Catona"], ["Chenu"], ["Aufr"], ["Yun"], ["Labroc"], ["Westphal"], ["Scherze"], ["Heilprin"], ["Ueno"], ["Dubu"], ["Garcia-Ferr"], ["Yoneda"], ["Cooper"], ["LaCo"], ["Psil"], ["Jones"], ["Sandberg"], ["Beeu"], ["Newitt"], ["Yamamoto"], ["Pigd"], ["Forestiero"], ["Blecken"], ["Cameron"], ["Teo"], ["Kim"], ["Hugo"], ["Tillmann"], ["Roessler"], ["Becker"], ["Jessup"], ["Kjellmer"], ["Kouan"], ["Larsson"], ["Hill"], ["Portillo"], ["Stratulat"], ["Sciore"], ["Mejia"], ["Masum"], ["Zaharak"], ["Gierl"], ["Aly"], ["Prabhakaran"], ["Bouamama"], ["Peip"], ["Barbosa"], ["Beichn"], ["Tan"], ["Putru"], ["Alexandri"], ["Boken"], ["Hoshi"], ["Mu\u00c3\u00b1oz"], ["Ra\u00c3\u00afev"], ["Aydin"], ["Konno"], ["Zhiyong"], ["Zle"], ["Hirvas"], ["Shevade"], ["Ballew"], ["Gryts"], ["Al-Hu"], ["Holn"], ["Kaska"], ["Holland"], ["Rajnov"], ["Holn"], ["Flecker"], ["Fredrickso"], ["Amann"], ["Scheine"], ["Stephenn"], ["Hayat"], ["Otsuki"], ["Eller"], ["Pace"], ["Wetzel"], ["Mulet"], ["Caleff"], ["Tuki"], ["Kashima"], ["Schmitz"], ["Queiroz"], ["Guix"], ["Akroy"], ["Fox"], ["Schweitzer"], ["Fall"], ["Stokic"], ["Baccou"], ["Blasbe"], ["Schulz"], ["Hwang"], ["Richardson"], ["Sachse"], ["Gubar"], ["Moei"], ["Sandberg"], ["Chettao"], ["Ledermann"], ["Ranno"], ["Cerime"], ["Eggers"], ["Vulp"], ["Giuffrida"], ["Wall"], ["Lao"], ["Hamagi"], ["Havill"], ["Chowdhury"], ["Rical"], ["Basturk"], ["Ravindranath"], ["Hughes"], ["Huo"], ["Miao"], ["Oller"], ["Griffin"], ["Simmel"], ["Tabor"], ["Morton"], ["Keuk"], ["Hahn-"], ["Yoshimoto"], ["Liedm"], ["Tavan"], ["Sakanushi"], ["Williamson"], ["Jovicic"], ["Potry"], ["Pettersen"], ["Maw"], ["Qian"], ["Dellwo"], ["Maher"], ["\u00c3\u2021ivi"], ["Miliko"], ["Rani"], ["Oblak"], ["Monger"], ["Alart"], ["Lemoine"], ["Cherchi"], ["Bollen"], ["Tyler"], ["Klepper"], ["Lohman"], ["Roschew"], ["Hayrapetyan"], ["Benitez"], ["Morales"], ["Krohn"], ["Lui"], ["Yap"], ["Erdem"], ["Visr"], ["Michael"], ["Xiong"], ["Someren"], ["Douss"], ["Kurt"], ["Beeu"], ["Dai"], ["Chakraborty"], ["Marlet"], ["Sherman"], ["Abdul-Rahman"], ["Shavel"], ["Koltso"], ["Lingamp"], ["Sanchez"], ["Velikovs"], ["Rumat"], ["Frost"], ["Jacobs"], ["Marongiu"], ["Martel-"], ["Schopp"], ["Marquis"], ["Breed"], ["Ikeda"], ["Witty"], ["Chiari"], ["Corr"], ["Clemme"], ["Boudjelo"], ["Heng"], ["Tsuji"], ["Mittelm"], ["Karv"], ["Bansal"], ["Nakamura"], ["Holz"], ["Eynd"], ["Almeida"], ["Homyk"], ["Mozayani"], ["Strzem"], ["Perna"], ["Atkins"], ["Masri"], ["Nirenbu"], ["Cordt"], ["Paddock"], ["Farr"], ["Ching"], ["Chiu"], ["Urwin"], ["Arora"], ["Perei"], ["Kereth"], ["Verma"], ["Hendrickson"], ["Towsey"], ["Peeri"], ["Koizumi"], ["Conti"], ["Grant"], ["Breuer"], ["Wyes"], ["Pomy"], ["Nirenbu"], ["Rote"], ["Das"], ["So"], ["Peip"], ["Duncan"], ["Ladu"], ["Harmon"], ["Caporali"], ["Ariav"], ["Tauber"], ["Chow"], ["Quinta"], ["Shoji"], ["Mehra"], ["Wunderli"], ["Whitten"], ["Godfrey"], ["Achilles"], ["Krasser"], ["Kaminsky"], ["Gregory"], ["Stenv"], ["Stylian"], ["Jordan"], ["Sakanushi"], ["Kuwadak"], ["Jode"], ["Jordan"], ["Schrefl"], ["Kurata"], ["Levie"], ["Christiansen"], ["Bra\u00c3\u00b1a"], ["Rammer"], ["Hennig"], ["Randers"], ["Luk"], ["Zuo"], ["Fernandez-Gonzalez"], ["Chaney"], ["Vicentino"], ["Yihn"], ["Kocsis"], ["Erol"], ["Bocchi"], ["Chapman"], ["Setiawan"], ["Bogdanova"], ["Champes"], ["Betho"], ["Kashima"], ["Aufr"], ["Stoltzfus"], ["Harass"], ["Levitan"], ["Kahs"], ["Juchn"], ["Spikov"], ["Moscarini"], ["Kaar"], ["Loher"], ["Cordt"], ["Martin"], ["Dair"], ["Peter"], ["Houtsm"], ["Franchet"], ["Unger"], ["Viani"], ["Berthold"], ["Hansch"], ["Gani"], ["Pinkus"], ["Koenig"], ["Kim"], ["Scheffer"], ["Carrera"], ["Liang"], ["Nakao"], ["McCracken"], ["Liepelt"], ["Turunen"], ["Reiss"], ["Zacharias"], ["Bouamama"], ["Stanko"], ["Lesaffre"], ["Yarmush"], ["Reiss"], ["Bongio"], ["Henriksen"], ["Mitsuhashi"], ["Slaw"], ["Warner"], ["Levine"], ["Smoro"], ["Frost"], ["Fonseca"], ["Stasko"], ["Wodn"], ["Palaniswami"], ["Guthk"], ["Juan"], ["Mitsuhashi"], ["Brenner"], ["Janssen"], ["Anse"], ["Kl\u00c3\u00b6pper"], ["Loyka"], ["Marques"], ["Walker"], ["Zubai"], ["Heilprin"], ["Maesf"], ["Unay"], ["Donofrio"], ["Barberis"], ["Esparza"], ["Mohan"], ["Koppit"], ["Jo"], ["Giannoulis"], ["Bruderm"], ["Godfrey"], ["Tomason"], ["Mohamed"], ["Lenhart"], ["Finance"], ["Grange"], ["Dair"], ["Ockerb"], ["Sud"], ["Clarkson"], ["Frangeu"], ["Schill"], ["Ohno"], ["Hoffman"], ["Streitf"], ["Steinmetz"], ["Sutter"], ["Tchuri"], ["Pourkas"], ["DAtri"], ["Nicol"], ["Dubink"], ["Enokib"], ["Mathias"], ["Mattor"], ["Makinen"], ["Cirsto"], ["Flossmann"], ["Rogers"], ["Mesne"], ["Gibbs"], ["McQuillan"], ["Carey"], ["Gault"], ["Rees-"], ["Graham"], ["Sendlm"], ["Mellor"], ["Smoro"], ["Zahrani"], ["Oberholzer"], ["Simon"], ["Winkler"], ["Bengtss"], ["Unger"], ["Milner"], ["Gierl"], ["Pampal"], ["Yip"], ["Wrzesz"], ["Sarnak"], ["Pettersen"], ["Ailamaki"], ["Neff"], ["Buril"], ["Chakraborty"], ["Xiang"], ["Kozlov"], ["Crimm"], ["Lykin"], ["Krishnakumar"], ["Bauer"], ["Mercank"], ["Chien"], ["Dickson"], ["Guiho"], ["Yang"], ["Hammond"], ["Hands"], ["Morgan"], ["Isogai"], ["Pampal"], ["Tellez"], ["Gruns"], ["Jakobsen"], ["Schrefl"], ["Cabr"], ["Batano"], ["Nakajima"], ["Beeu"], ["Marcol"], ["Sugavanam"], ["Nisso"], ["Hay"], ["Yasuda"], ["Koic"], ["Vulp"], ["Tong"], ["Sudirm"], ["Anty"], ["Katehakis"], ["Kobayashi"], ["Rieger"], ["Jamro"], ["Mohamed"], ["Bussel"], ["Bulash"], ["Rajnov"], ["Noda"], ["Labaye"], ["Rammer"], ["Awano"], ["Sacchi"], ["ODono"], ["Schinag"], ["Ciepl"], ["Furukawa"], ["Ratcliff"], ["Saill"], ["Patne"], ["Nilsson"], ["Alfaro"], ["Neru"], ["Frolova"], ["Julier"], ["Kun"], ["Hawthorne"], ["Hao"], ["Makarychev"], ["McGarr"], ["Pircher"], ["Tobin"], ["Fickl"], ["Bouzeghoub"], ["Wilks"], ["Strader"], ["Schrefl"], ["Bellman"], ["Beckert"], ["Savolainen"], ["Bennett"], ["Courtney"], ["Califieri"], ["Lv"], ["Epley"], ["Bravo"], ["Samo"]]}, "program_result_list": [["t1 = takes[(takes['semester'] == 'Fall') & (takes['year'] == 2003)]\nt2 = pd.merge(t1, student, left_on='id', right_on='id')\nanswer = t2['name']", false], ["t1 = takes[takes['semester'] == 'Fall']\nt2 = t1[t1['year'] == 2003]\nt3 = pd.merge(t2, student, left_on='id', right_on='id')\nanswer = t3['name']", false], ["t1 = takes[(takes['semester'] == 'Fall') & (takes['year'] == 2003)]\nt2 = pd.merge(t1, student, on='id')\nanswer = t2['name']", false], ["t1 = takes[(takes['semester'] == 'Fall') & (takes['year'] == 2003)]\nt2 = pd.merge(student, t1, on='id')\nanswer = t2['name']", false], ["t1 = takes[(takes['semester'] == 'Fall') & (takes['year'] == 2003)]\nt2 = pd.merge(t1, student, left_on='id', right_on='id')\nanswer = t2['name']", false], ["t1 = pd.merge(student, takes, on='id')\nt2 = t1[(t1['semester'] == 'Fall') & (t1['year'] == 2003)]\nanswer = t2['name']", false], ["t1 = takes[(takes['semester'] == 'Fall') & (takes['year'] == 2003)]['id']\nt2 = student[student['id'].isin(t1)]\nanswer = t2['name']", false], ["t1 = takes[(takes['semester'] == 'Fall') & (takes['year'] == 2003)]\nt2 = pd.merge(t1, student, left_on='id', right_on='id')\nanswer = t2['name']", false], ["t1 = takes[takes['semester'] == 'Fall']\nt2 = t1[t1['year'] == 2003]\nt3 = pd.merge(t2, student, left_on='id', right_on='id')\nanswer = t3['name']", false], ["t1 = takes[takes['semester'] == 'Fall']\nt2 = t1[t1['year'] == 2003]\nt3 = pd.merge(t2, student, left_on='id', right_on='id')\nanswer = t3['name']", false], ["t1 = takes[(takes['semester'] == 'Fall') & (takes['year'] == 2003)]\nt2 = pd.merge(student, t1, left_on='id', right_on='id')\nanswer = t2['name']", false], ["t1 = takes[takes['semester'] == 'Fall']\nt2 = t1[t1['year'] == 2003]\nt3 = pd.merge(student, t2, on='id')\nanswer = t3['name']", false], ["t1 = takes[(takes['semester'] == 'Fall') & (takes['year'] == 2003)]\nt2 = pd.merge(t1, student, on='id')\nanswer = t2['name']", false], ["t1 = takes[(takes['semester'] == 'Fall') & (takes['year'] == 2003)]\nt2 = pd.merge(t1, student, on='id')\nanswer = t2['name']", false], ["t1 = takes[(takes['semester'] == 'Fall') & (takes['year'] == 2003)]\nt2 = pd.merge(student, t1, left_on='id', right_on='id')\nanswer = t2['name']", false], ["t1 = takes[(takes['semester'] == 'Fall') & (takes['year'] == 2003)]\nt2 = pd.merge(student, t1, left_on='id', right_on='id')\nanswer = t2['name']", false], ["t1 = takes[(takes['semester'] == 'Fall') & (takes['year'] == 2003)]\nt2 = pd.merge(student, t1, left_on='id', right_on='id')\nanswer = t2['name']", false], ["t1 = takes[(takes['semester'] == 'Fall') & (takes['year'] == 2003)]\nt2 = pd.merge(t1, student, left_on='id', right_on='id')\nanswer = t2['name']", false], ["t1 = takes[(takes['semester'] == 'Fall') & (takes['year'] == 2003)]\nt2 = pd.merge(student, t1, left_on='id', right_on='id')\nanswer = t2['name']", false], ["t1 = takes[(takes['semester'] == 'Fall') & (takes['year'] == 2003)]\nt2 = pd.merge(student, t1, on='id', how='right')\nanswer = t2['name']", false]]}
{"example": {"db_id": "tracking_grants_for_research", "query": "SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'", "query_toks": ["SELECT", "date_from", ",", "date_to", "FROM", "Project_Staff", "WHERE", "project_id", "IN", "(", "SELECT", "project_id", "FROM", "Project_Staff", "GROUP", "BY", "project_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")", "UNION", "SELECT", "date_from", ",", "date_to", "FROM", "Project_Staff", "WHERE", "role_code", "=", "'leader", "'"], "query_toks_no_value": ["select", "date_from", ",", "date_to", "from", "project_staff", "where", "project_id", "in", "(", "select", "project_id", "from", "project_staff", "group", "by", "project_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")", "union", "select", "date_from", ",", "date_to", "from", "project_staff", "where", "role_code", "=", "value"], "question": "From what date and to what date do the staff work on a project that has the most staff and has staff in a leader role?", "question_toks": ["From", "what", "date", "and", "to", "what", "date", "do", "the", "staff", "work", "on", "a", "project", "that", "has", "the", "most", "staff", "and", "has", "staff", "in", "a", "leader", "role", "?"], "sql": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 26, false], null]], [0, [0, [0, 27, false], null]]]], "where": [[false, 8, [0, [0, 24, false], null], {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [], "groupBy": [[0, 24, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 26, false], null]], [0, [0, [0, 27, false], null]]]], "where": [[false, 2, [0, [0, 25, false], null], "\"leader\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, "db_table_headers": {"Document_Types": ["document_type_code", "document_description"], "Documents": ["document_id", "document_type_code", "grant_id", "sent_date", "response_received_date", "other_details"], "Grants": ["grant_id", "organisation_id", "grant_amount", "grant_start_date", "grant_end_date", "other_details"], "Organisation_Types": ["organisation_type", "organisation_type_description"], "Organisations": ["organisation_id", "organisation_type", "organisation_details"], "Project_Outcomes": ["project_id", "outcome_code", "outcome_details"], "Project_Staff": ["staff_id", "project_id", "role_code", "date_from", "date_to", "other_details"], "Projects": ["project_id", "organisation_id", "project_details"], "Research_Outcomes": ["outcome_code", "outcome_description"], "Research_Staff": ["staff_id", "employer_organisation_id", "staff_details"], "Staff_Roles": ["role_code", "role_description"], "Tasks": ["task_id", "project_id", "task_details", "eg Agree Objectives"]}, "answer": [["1970-01-02 15:35:05", "1985-09-22 09:06:08"], ["1970-04-06 15:50:21", "1983-03-19 16:06:31"], ["1973-12-12 11:46:28", "1971-07-19 22:49:05"], ["1981-10-04 22:44:50", "1985-05-30 22:26:30"], ["1981-10-09 21:32:53", "2004-12-16 13:03:36"], ["1999-10-21 22:07:15", "2008-09-25 20:06:28"], ["2003-04-19 15:06:20", "2010-12-08 11:55:36"], ["2004-11-01 23:52:38", "1988-03-04 19:30:05"]]}, "program_result_list": [["t1 = Project_Staff.groupby('project_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = Project_Staff[Project_Staff['project_id'].isin(t2['project_id'])]\nt4 = Project_Staff[Project_Staff['role_code'] == 'leader']\nt5 = pd.concat([t3, t4])\nanswer = t5[['date_from', 'date_to']]", false], ["t1 = Project_Staff.groupby('project_id').size().rename('count').idxmax()\nt2 = Project_Staff[Project_Staff['project_id'] == t1]\nt3 = Project_Staff[Project_Staff['role_code'] == 'leader']\nt4 = t2.append(t3)\nanswer = t4[['date_from', 'date_to']]", false], ["t1 = Project_Staff.groupby('project_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = pd.merge(Project_Staff, t2, on='project_id')\nt4 = Project_Staff[Project_Staff['role_code'] == 'leader']\nt5 = pd.merge(t3, t4, on=['date_from', 'date_to'], how='outer')\nanswer = t5[['date_from', 'date_to']]", false], ["t1 = Project_Staff.groupby('project_id').size().rename('count').sort_values(ascending=False).head(1).to_frame().reset_index()\nt2 = Project_Staff[Project_Staff['project_id'] == t1['project_id'].values[0]]\nt3 = Project_Staff[Project_Staff['role_code'] == 'leader']\nanswer = t2.append(t3)[['date_from', 'date_to']]", false], ["t1 = Project_Staff.groupby('project_id').size().rename('count').to_frame().reset_index()\nt2 = t1.sort_values(by='count', ascending=False).head(1).to_frame().reset_index()\nt3 = Project_Staff[Project_Staff['project_id'].isin(t2['project_id'])]\nt4 = Project_Staff[Project_Staff['role_code'] == 'leader']\nt5 = pd.concat([t3, t4])\nanswer = t5[['date_from', 'date_to']]", false], ["t1 = Project_Staff.groupby('project_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = Project_Staff[Project_Staff['project_id'].isin(t2['project_id'])]\nt4 = Project_Staff[Project_Staff['role_code'] == 'leader']\nt5 = pd.concat([t3, t4])\nanswer = t5[['date_from', 'date_to']]", false], ["t1 = Project_Staff.groupby('project_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = Project_Staff[Project_Staff['project_id'].isin(t2['project_id'])]\nt4 = Project_Staff[Project_Staff['project_code'] == 'leader']\nt5 = t3.append(t4)\nanswer = t5[['date_from', 'date_to']].drop_duplicates()", false], ["t1 = Project_Staff.groupby('project_id').size().rename('count').to_frame().reset_index()\nt2 = t1.sort_values('count', ascending=False).head(1).to_frame().reset_index()\nt3 = Project_Staff[Project_Staff['project_id'] == t2['project_id'].values[0]]\nt4 = Project_Staff[Project_Staff['role_code'] == 'leader']\nt5 = pd.concat([t3[['date_from', 'date_to']], t4[['date_from', 'date_to']]], ignore_index=True)\nanswer = t5", false], ["t1 = Project_Staff.groupby('project_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = Project_Staff[Project_Staff['project_id'].isin(t2['project_id'])]\nt4 = Project_Staff[Project_Staff['role_code'] == 'leader']\nt5 = pd.concat([t3, t4])\nanswer = t5[['date_from', 'date_to']]", false], ["t1 = Project_Staff.groupby('project_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = Project_Staff[Project_Staff['project_id'] == t2['project_id'].iloc[0]]\nt4 = t3[['date_from', 'date_to']]\nt5 = Project_Staff[Project_Staff['role_code'] == 'leader']\nanswer = pd.concat([t4, t5[['date_from', 'date_to']]]).reset_index(drop=True)", false], ["t1 = Project_Staff.groupby('project_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = Project_Staff.merge(t2, on='project_id', how='inner')\nt4 = Project_Staff[Project_Staff['role_code'] == 'leader']\nanswer = pd.concat([t3[['date_from', 'date_to']], t4[['date_from', 'date_to']]])", false], ["t1 = Project_Staff.groupby('project_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = t2.merge(Project_Staff, on='project_id', how='inner')\nt4 = t3[['date_from', 'date_to']]\nt5 = Project_Staff[Project_Staff['role_code'] == 'leader']\nanswer = pd.concat([t4, t5[['date_from', 'date_to']]])", false], ["t1 = Project_Staff.groupby('project_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = Project_Staff[Project_Staff['project_id'] == t2['project_id'].iloc[0]]\nt4 = Project_Staff[Project_Staff['role_code'] == 'leader']\nt5 = pd.concat([t3, t4])\nanswer = t5[['date_from', 'date_to']].drop_duplicates()", false], ["t1 = Project_Staff.groupby('project_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = Project_Staff.merge(t2, left_on='project_id', right_on='project_id')\nt4 = Project_Staff[Project_Staff['role_code'] == 'leader']\nt5 = t3.append(t4, ignore_index=True)\nanswer = t5[['date_from', 'date_to']]", false], ["t1 = Project_Staff.groupby('project_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = pd.merge(Project_Staff, t2, on='project_id')\nt4 = t3[['date_from', 'date_to']]\nt5 = Project_Staff[Project_Staff['role_code'] == 'leader']\nt6 = t5[['date_from', 'date_to']]\nanswer = pd.concat([t4, t6])", false], ["t1 = Project_Staff.groupby('project_id').size().rename('count').to_frame().reset_index()\nt2 = t1.sort_values('count', ascending=False).head(1)\nt3 = pd.merge(t2, Project_Staff, left_on='project_id', right_on='project_id')\nt4 = t3[['date_from', 'date_to']]\nt5 = Project_Staff[Project_Staff['role_code'] == 'leader']\nt6 = t4.append(t5[['date_from', 'date_to']])\nanswer = t6", false], ["t1 = Project_Staff.groupby('project_id').size().rename('count').to_frame().reset_index()\nt2 = t1.sort_values('count', ascending=False).head(1).to_frame().reset_index()\nt3 = Project_Staff[Project_Staff['project_id'].isin(t2['project_id'])]\nt4 = Project_Staff[Project_Staff['role_code'] == 'leader']\nanswer = pd.concat([t3, t4])[['date_from', 'date_to']]", false], ["t1 = Project_Staff.groupby('project_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = Project_Staff[Project_Staff['project_id'].isin(t2['project_id'])]\nt4 = Project_Staff[Project_Staff['role_code'] == 'leader']\nanswer = pd.concat([t3[['date_from', 'date_to']], t4[['date_from', 'date_to']]])", false], ["t1 = Project_Staff.groupby(Project_Staff['project_id']).size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = Project_Staff[Project_Staff['project_id'].isin(t2['project_id'])]\nt4 = Project_Staff[Project_Staff['role_code'] == 'leader']\nanswer = pd.concat([t3[['date_from', 'date_to']], t4[['date_from', 'date_to']]])", false], ["t1 = Project_Staff.groupby('project_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = Project_Staff[Project_Staff['project_id'].isin(t2['project_id'])]\nt4 = Project_Staff[Project_Staff['role_code'] == 'leader']\nanswer = pd.concat([t3, t4], ignore_index=True)", false]]}
{"example": {"db_id": "store_1", "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", "FROM", "employees", "AS", "T1", "JOIN", "customers", "AS", "T2", "ON", "T1.id", "=", "T2.support_rep_id", "GROUP", "BY", "T1.id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", "from", "employees", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "support_rep_id", "group", "by", "t1", ".", "id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the full name of the employee who has the most customers?", "question_toks": ["What", "is", "the", "full", "name", "of", "the", "employee", "who", "has", "the", "most", "customers", "?"], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 35, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [["Jane", "Peacock"]]}, "program_result_list": [["t1 = pd.merge(employees, customers, left_on='id', right_on='support_rep_id')\nt2 = t1.groupby(['id', 'first_name', 'last_name']).size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3[['first_name', 'last_name']]", false], ["t1 = pd.merge(employees, customers, on='id')\nt2 = t1.groupby('id').size().rename('count').to_frame().reset_index()\nt3 = pd.merge(t2, employees, on='id')\nanswer = t3.loc[t3['count'].idxmax(), ['first_name', 'last_name']]", false], ["t1 = pd.merge(customers, employees, left_on='support_rep_id', right_on='id')\nt2 = t1.groupby('id').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nt4 = pd.merge(t3, employees, left_on='id', right_on='id')\nanswer = t4[['first_name', 'last_name']]", false], ["t1 = pd.merge(customers, employees, left_on='support_rep_id', right_on='id')\nt2 = t1.groupby(['id', 'first_name', 'last_name']).size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3[['first_name', 'last_name']]", false], ["t1 = pd.merge(employees, customers, left_on='id', right_on='support_rep_id')\nt2 = t1.groupby('id').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nt4 = pd.merge(t3, employees, left_on='id', right_on='id')\nanswer = t4[['first_name', 'last_name']]", false], ["t1 = pd.merge(employees, customers, left_on='id', right_on='support_rep_id')\nt2 = t1.groupby(['first_name', 'last_name']).size().rename('count')\nanswer = t2.sort_values(ascending=False).head(1).to_frame().reset_index()", false], ["t1 = pd.merge(artists, albums, left_on='id', right_on='artist_id')\nt2 = pd.merge(t1, employees, left_on='id', right_on='id')\nt3 = pd.merge(t2, customers, left_on='id', right_on='support_rep_id')\nt4 = t3.groupby(['first_name', 'last_name']).size().rename('count')\nanswer = t4.sort_values(ascending=False).head(1).to_frame().reset_index()", false], ["t1 = pd.merge(employees, customers, left_on='id', right_on='support_rep_id')\nt2 = t1.groupby(['first_name', 'last_name'])['first_name'].size().rename('count').sort_values(ascending=False)\nanswer = t2.head(1).to_frame().reset_index()", false], ["t1 = pd.merge(employees, customers, left_on='id', right_on='support_rep_id')\nt2 = t1.groupby('id').size().rename('count')\nt3 = pd.merge(employees, t2, left_on='id', right_index=True)\nanswer = t3[t3['count'] == t3['count'].max()][['first_name', 'last_name']]", false], ["t1 = pd.merge(employees, customers, left_on='id', right_on='support_rep_id')\nt2 = t1.groupby(['id', 'first_name', 'last_name']).size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3[['first_name', 'last_name']]", false], ["t1 = pd.merge(customers, employees, left_on='support_rep_id', right_on='id')\nt2 = t1.groupby('id').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nt4 = pd.merge(t3, employees, left_on='id', right_on='id')\nanswer = t4[['first_name', 'last_name']]", false], ["t1 = pd.merge(employees, customers, left_on='id', right_on='support_rep_id')\nt2 = t1.groupby('id').size().rename('count')\nt3 = pd.merge(t2.to_frame().reset_index(), employees, left_on='id', right_on='id')\nanswer = t3[['first_name', 'last_name']].head(1)", false], ["t1 = pd.merge(employees, customers, left_on='id', right_on='support_rep_id')\nt1 = t1.groupby('id').size().rename('count').to_frame().reset_index()\nt2 = pd.merge(t1, employees, left_on='id', right_on='id')\nanswer = t2.sort_values(by='count', ascending=False).head(1)[['first_name', 'last_name']]", false], ["t1 = pd.merge(employees, customers, left_on='id', right_on='support_rep_id')\nt2 = t1.groupby('id').size().rename('count')\nt3 = pd.merge(t2.to_frame().reset_index(), employees, left_on='id', right_on='id')\nanswer = t3[['first_name', 'last_name']].iloc[0]", false], ["t1 = pd.merge(employees, customers, left_on='id', right_on='support_rep_id')\nt2 = t1.groupby('id').size().rename('count')\nt3 = t2.to_frame().reset_index()\nt4 = pd.merge(t3, employees, on='id')\nanswer = t4.loc[t4['count'].idxmax(), ['first_name', 'last_name']]", false], ["t1 = pd.merge(customers, employees, left_on='support_rep_id', right_on='id')\nt2 = t1.groupby(['first_name', 'last_name']).size().rename('count')\nanswer = t2.sort_values(ascending=False).head(1).to_frame().reset_index()", false], ["t1 = pd.merge(employees, customers, left_on='id', right_on='support_rep_id')\nt2 = t1.groupby(['id', 'first_name', 'last_name']).size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3[['first_name', 'last_name']]", false], ["t1 = pd.merge(employees, customers, left_on='id', right_on='support_rep_id')\nt2 = t1.groupby('id').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nt4 = pd.merge(t3, employees, left_on='id', right_on='id')\nanswer = t4[['first_name', 'last_name']]", false], ["t1 = pd.merge(customers, employees, left_on='support_rep_id', right_on='id')\nt2 = t1.groupby('id').size().rename('count').to_frame().reset_index()\nt3 = pd.merge(t2, employees, left_on='id', right_on='id')\nanswer = t3[['first_name', 'last_name']].head(1)", false], ["t1 = pd.merge(employees, customers, left_on='id', right_on='support_rep_id')\nt2 = t1.groupby('id').size().rename('count')\nt3 = pd.merge(t2.to_frame().reset_index(), employees, on='id')\nanswer = t3.sort_values(by='count', ascending=False).head(1)[['first_name', 'last_name']]", false]]}
{"example": {"db_id": "city_record", "query": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010", "query_toks": ["SELECT", "T1.city", "FROM", "city", "AS", "T1", "JOIN", "hosting_city", "AS", "T2", "ON", "T1.city_id", "=", "T2.host_city", "WHERE", "T2.year", ">", "2010"], "query_toks_no_value": ["select", "t1", ".", "city", "from", "city", "as", "t1", "join", "hosting_city", "as", "t2", "on", "t1", ".", "city_id", "=", "t2", ".", "host_city", "where", "t2", ".", "year", ">", "value"], "question": "Which cities served as a host city after 2010?", "question_toks": ["Which", "cities", "served", "as", "a", "host", "city", "after", "2010", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 27, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 3, [0, [0, 25, false], null], 2010.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"city": ["City_ID", "City", "Hanzi", "Hanyu_Pinyin", "Regional_Population", "GDP"], "match": ["Match_ID", "Date", "Venue", "Score", "Result", "Competition"], "temperature": ["City_ID", "Jan", "Feb", "Mar", "Apr", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], "hosting_city": ["Year", "Match_ID", "Host_City"]}, "answer": [["Wuxi ( Jiangsu )"], ["Taizhou ( Zhejiang )"], ["Jiaxing ( Zhejiang )"]]}, "program_result_list": [["t1 = pd.merge(city, hosting_city, left_on='city_id', right_on='host_city')\nt2 = t1[t1['year'] > 2010]\nanswer = t2['city']", false], ["t1 = pd.merge(hosting_city, city, left_on='host_city', right_on='city_id')\nt2 = t1[t1['year'] > 2010]\nanswer = t2['city']", false], ["t1 = pd.merge(city, hosting_city, left_on='city_id', right_on='host_city')\nanswer = t1[t1['year'] > 2010]['city']", false], ["t1 = pd.merge(city, hosting_city, left_on='city_id', right_on='host_city')\nanswer = t1[t1['year'] > 2010]['city']", false], ["t1 = pd.merge(city, hosting_city, left_on='city_id', right_on='host_city')\nanswer = t1[t1['year'] > 2010]['city']", false], ["t1 = pd.merge(city, hosting_city, left_on='city_id', right_on='host_city')\nanswer = t1[t1['year'] > 2010]['city']", false], ["t1 = pd.merge(city, hosting_city, left_on='city_id', right_on='host_city')\nt2 = t1[t1['year'] > 2010]\nanswer = t2['city'].unique()", false], ["t1 = pd.merge(city, hosting_city, left_on='city_id', right_on='host_city')\nt2 = t1[t1['year'] > 2010]\nanswer = t2['city']", false], ["t1 = pd.merge(city, hosting_city, left_on='city_id', right_on='host_city')\nt2 = t1[t1['year'] > 2010]\nanswer = t2['city']", false], ["t1 = pd.merge(city, hosting_city, left_on='city_id', right_on='host_city')\nt2 = t1[t2['year'] > 2010]\nanswer = t2['city']", false], ["t1 = pd.merge(city, hosting_city, left_on='city_id', right_on='host_city')\nanswer = t1[t1['year'] > 2010]['city']", false], ["t1 = pd.merge(city, hosting_city, left_on='city_id', right_on='host_city')\nt2 = t1[t1['year'] > 2010]\nanswer = t2['city']", false], ["t1 = pd.merge(city, hosting_city, left_on='city_id', right_on='host_city')\nanswer = t1[t1['year'] > 2010]['city']", false], ["t1 = pd.merge(city, hosting_city, left_on='city_id', right_on='host_city')\nt2 = t1[t1['year'] > 2010]\nanswer = t2['city']", false], ["t1 = pd.merge(city, hosting_city, left_on='city_id', right_on='host_city')\nt2 = t1[t1['year'] > 2010]\nanswer = t2['city']", false], ["t1 = pd.merge(city, hosting_city, left_on='city_id', right_on='host_city')\nt2 = t1[t1['year'] > 2010]\nanswer = t2['city']", false], ["t1 = pd.merge(city, hosting_city, left_on='city_id', right_on='host_city')\nt2 = t1[t1['year'] > 2010]\nanswer = t2['city']", false], ["t1 = pd.merge(city, hosting_city, left_on='city_id', right_on='host_city')\nanswer = t1[t1['year'] > 2010]['city']", false], ["t1 = pd.merge(city, hosting_city, left_on='city_id', right_on='host_city')\nt2 = t1[t1['year'] > 2010]\nanswer = t2['city']", false], ["t1 = pd.merge(city, hosting_city, left_on='city_id', right_on='host_city')\nanswer = t1[t1['year'] > 2010]['city']", false]]}
{"example": {"db_id": "apartment_rentals", "query": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"", "query_toks": ["SELECT", "sum", "(", "T2.room_count", ")", "FROM", "Apartment_Buildings", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.building_id", "=", "T2.building_id", "WHERE", "T1.building_short_name", "=", "``", "Columbus", "Square", "''"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "room_count", ")", "from", "apartment_buildings", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "building_id", "=", "t2", ".", "building_id", "where", "t1", ".", "building_short_name", "=", "value"], "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".", "question_toks": ["Show", "the", "total", "number", "of", "rooms", "of", "the", "apartments", "in", "the", "building", "with", "short", "name", "``", "Columbus", "Square", "''", "."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[4, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Columbus Square\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Apartment_Buildings": ["building_id", "building_short_name", "building_full_name", "building_description", "building_address", "building_manager", "building_phone"], "Apartments": ["apt_id", "building_id", "apt_type_code", "apt_number", "bathroom_count", "bedroom_count", "room_count"], "Apartment_Facilities": ["apt_id", "facility_code"], "Guests": ["guest_id", "gender_code", "guest_first_name", "guest_last_name", "date_of_birth"], "Apartment_Bookings": ["apt_booking_id", "apt_id", "guest_id", "booking_status_code", "booking_start_date", "booking_end_date"], "View_Unit_Status": ["apt_id", "apt_booking_id", "status_date", "available_yn"]}, "answer": [[29]]}, "program_result_list": [["t1 = pd.merge(Apartment_Buildings, Apartments, left_on='building_id', right_on='building_id')\nt2 = t1[t1['building_short_name'] == 'Columbus Square']\nanswer = t2['room_count'].sum()", false], ["t1 = pd.merge(Apartment_Buildings, Apartments, on='building_id')\nt2 = t1[t1['building_short_name'] == 'Columbus Square']\nanswer = t2['room_count'].sum()", false], ["t1 = pd.merge(Apartment_Buildings, Apartments, on='building_id')\nt2 = t1[t1['building_short_name'] == 'Columbus Square']\nanswer = t2['room_count'].sum()", false], ["t1 = pd.merge(Apartment_Buildings, Apartments, left_on='building_id', right_on='building_id')\nt2 = t1[t1['building_short_name'] == 'Columbus Square']\nanswer = t2['room_count'].sum()", false], ["t1 = pd.merge(Apartment_Buildings, Apartments, left_on='building_id', right_on='building_id')\nt2 = t1[t1['building_short_name'] == 'Columbus Square']\nanswer = t2['room_count'].sum()", false], ["t1 = pd.merge(Apartment_Buildings, Apartments, left_on='building_id', right_on='building_id')\nt2 = t1[t1['building_short_name'] == 'Columbus Square']\nanswer = t2['room_count'].sum()", false], ["t1 = pd.merge(Apartment_Buildings, Apartments, left_on='building_id', right_on='building_id')\nt2 = t1[t1['building_short_name'] == 'Columbus Square']\nanswer = t2.room_count.sum()", false], ["t1 = pd.merge(Apartment_Buildings, Apartments, left_on='building_id', right_on='building_id')\nt2 = t1[t1['building_short_name'] == 'Columbus Square']\nanswer = t2['room_count'].sum()", false], ["t1 = pd.merge(Apartment_Buildings, Apartments, on='building_id')\nt2 = t1[t1['building_short_name'] == 'Columbus Square']\nanswer = t2['room_count'].sum()", false], ["t1 = pd.merge(Apartment_Buildings, Apartments, left_on='building_id', right_on='building_id')\nt2 = t1[t1['building_short_name'] == 'Columbus Square']\nanswer = t2['room_count'].sum()", false], ["t1 = pd.merge(Apartment_Buildings, Apartments, left_on='building_id', right_on='building_id')\nt2 = t1[t1['building_short_name'] == 'Columbus Square']\nanswer = t2['room_count'].sum()", false], ["t1 = pd.merge(Apartment_Buildings, Apartments, left_on='building_id', right_on='building_id')\nt1 = t1[t1['building_short_name'] == 'Columbus Square']\nanswer = t1['room_count'].sum()", false], ["t1 = pd.merge(Apartment_Buildings, Apartments, left_on='building_id', right_on='building_id')\nt2 = t1[t1['building_short_name'] == 'Columbus Square']\nanswer = t2['room_count'].sum()", false], ["t1 = pd.merge(Apartment_Buildings, Apartments, left_on='building_id', right_on='building_id')\nanswer = t1[t1['building_short_name'] == 'Columbus Square']['room_count'].sum()", false], ["t1 = pd.merge(Apartment_Buildings, Apartments, on='building_id')\nt2 = t1[t1['building_short_name'] == 'Columbus Square']\nanswer = t2['room_count'].sum()", false], ["t1 = pd.merge(Apartment_Buildings, Apartments, on='building_id')\nt2 = t1[t1['building_short_name'] == 'Columbus Square']\nanswer = t2['room_count'].sum()", false], ["t1 = pd.merge(Apartment_Buildings, Apartments, left_on='building_id', right_on='building_id')\nt2 = t1[t1['building_short_name'] == 'Columbus Square']\nanswer = t2['room_count'].sum()", false], ["t1 = pd.merge(Apartment_Buildings, Apartments, left_on='building_id', right_on='building_id')\nt2 = t1[t1['building_short_name'] == 'Columbus Square']\nanswer = t2['room_count'].sum()", false], ["t1 = pd.merge(Apartments, Apartment_Buildings, left_on='building_id', right_on='building_id')\nt2 = t1[t1['building_short_name'] == 'Columbus Square']\nanswer = t2['room_count'].sum()", false], ["t1 = pd.merge(Apartment_Buildings, Apartments, left_on='building_id', right_on='building_id')\nt2 = t1[t1['building_short_name'] == 'Columbus Square']\nanswer = t2['room_count'].sum()", false]]}
{"example": {"db_id": "student_assessment", "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance", "query_toks": ["SELECT", "T2.student_id", "FROM", "courses", "AS", "T1", "JOIN", "student_course_attendance", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T1.course_name", "=", "``", "statistics", "''", "ORDER", "BY", "T2.date_of_attendance"], "query_toks_no_value": ["select", "t2", ".", "student_id", "from", "courses", "as", "t1", "join", "student_course_attendance", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t1", ".", "course_name", "=", "value", "order", "by", "t2", ".", "date_of_attendance"], "question": "List the id of students who attended  statistics courses in the order of attendance date.", "question_toks": ["List", "the", "id", "of", "students", "who", "attended", "statistics", "courses", "in", "the", "order", "of", "attendance", "date", "."], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 6]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 31, false], null]]}, "select": [false, [[0, [0, [0, 30, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], "\"statistics\"", null]], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 32, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1", "line_2", "city", "zip_postcode", "state_province_county", "country"], "People": ["person_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "login_name", "password"], "Students": ["student_id", "student_details"], "Courses": ["course_id", "course_name", "course_description", "other_details"], "People_Addresses": ["person_address_id", "person_id", "address_id", "date_from", "date_to"], "Student_Course_Registrations": ["student_id", "course_id", "registration_date"], "Student_Course_Attendance": ["student_id", "course_id", "date_of_attendance"], "Candidates": ["candidate_id", "candidate_details"], "Candidate_Assessments": ["candidate_id", "qualification", "assessment_date", "asessment_outcome_code"]}, "answer": [[111], [121], [141], [171]]}, "program_result_list": [["t1 = pd.merge(Courses, Student_Course_Attendance, on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2.sort_values('date_of_attendance')['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Attendance, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2.sort_values(by='date_of_attendance')['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Attendance, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2.sort_values(by='date_of_attendance')['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Attendance, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics'].sort_values('date_of_attendance')\nanswer = t2['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Attendance, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2.sort_values(by='date_of_attendance')['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Attendance, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2.sort_values(by='date_of_attendance')['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Attendance, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2.sort_values(by='date_of_attendance')['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Attendance, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2[['student_id']].sort_values(by='date_of_attendance')", false], ["t1 = pd.merge(Courses, Student_Course_Attendance, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2.sort_values(by='date_of_attendance')['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Attendance, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2.sort_values(by='date_of_attendance')['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Attendance, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2[['student_id']].sort_values(by='date_of_attendance')", false], ["t1 = pd.merge(Courses, Student_Course_Attendance, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics'].sort_values(by='date_of_attendance')\nanswer = t2['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Attendance, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2.sort_values(by='date_of_attendance', ascending=False)['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Attendance, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nt3 = t2.sort_values('date_of_attendance')\nanswer = t3['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Attendance, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2.sort_values('date_of_attendance')['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Attendance, on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2.sort_values(by='date_of_attendance')['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Attendance, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics'].sort_values(by='date_of_attendance')\nanswer = t2['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Attendance, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics'].sort_values(by='date_of_attendance')\nanswer = t2['student_id']", false], ["t1 = pd.merge(Courses[Courses['course_name'] == 'statistics'], Student_Course_Attendance, left_on='course_id', right_on='course_id')\nt2 = t1.sort_values('date_of_attendance')\nanswer = t2['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Attendance, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2[['student_id']].sort_values('date_of_attendance')", false]]}
{"example": {"db_id": "dorm_1", "query": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "avg", "(", "age", ")", ",", "city_code", "FROM", "student", "GROUP", "BY", "city_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "avg", "(", "age", ")", ",", "city_code", "from", "student", "group", "by", "city_code"], "question": "How many students live in each city and what are their average ages?", "question_toks": ["How", "many", "students", "live", "in", "each", "city", "and", "what", "are", "their", "average", "ages", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [5, [0, [0, 4, false], null]], [0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Student": ["StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code"], "Dorm": ["dormid", "dorm_name", "student_capacity", "gender"], "Dorm_amenity": ["amenid", "amenity_name"], "Has_amenity": ["dormid", "amenid"], "Lives_in": ["stuid", "dormid", "room_number"]}, "answer": [[1, 20.0, "ATL"], [4, 18.5, "BAL"], [1, 18.0, "BOS"], [1, 20.0, "CHI"], [1, 18.0, "DAL"], [1, 17.0, "DET"], [3, 18.0, "HKG"], [1, 17.0, "HOU"], [1, 27.0, "LON"], [1, 18.0, "LOS"], [1, 18.0, "NAR"], [3, 20.333333333333332, "NYC"], [1, 17.0, "PEK"], [3, 19.666666666666668, "PHL"], [4, 19.0, "PIT"], [1, 20.0, "ROC"], [1, 21.0, "SFO"], [3, 21.666666666666668, "WAS"], [2, 22.5, "YYZ"]]}, "program_result_list": [["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = t1.groupby('city_code')['age'].agg(['count', 'mean'])\nanswer = t2.rename(columns={'count': 'student_count', 'mean': 'average_age'})", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = t1.groupby('city_code').size().rename('count')\nt3 = t1.groupby('city_code')['age'].mean().rename('avg')\nanswer = pd.merge(t2, t3, left_on='city_code', right_on='city_code').reset_index()", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = t1.groupby('city_code').agg({'age': np.mean, 'stuid': np.size}).rename(columns={'age': 'average_age', 'stuid': 'count'})\nanswer = t2.reset_index()", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = t1.groupby('city_code').agg({'age': [np.mean, 'count']})\nanswer = t2.reset_index()", false], ["t1 = pd.merge(Student, Lives_in, on='stuid')\nt2 = t1.groupby('city_code').agg({'age': np.mean}).rename(columns={'age':'avg_age'})\nt3 = t1.groupby('city_code').size().rename('count')\nanswer = pd.concat([t2, t3], axis=1)", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = t1.groupby('city_code').agg({'age': ['mean', 'count']})\nanswer = t2", false], ["t1 = pd.merge(Lives_in, Student, left_on='stuid', right_on='stuid')\nt2 = t1.groupby(['city_code']).agg({'stuid': 'count', 'age': 'mean'}).rename(columns={'stuid': 'count', 'age': 'avg_age'})\nanswer = t2.reset_index()", false], ["t1 = Student.groupby('city_code').agg({'age': 'mean'}).rename(columns={'age': 'avg_age'})\nt2 = Student.groupby('city_code').size().rename('count')\nt3 = pd.merge(t1, t2, left_index=True, right_index=True)\nanswer = t3.reset_index()", false], ["t1 = Student.groupby('city_code').agg({'age': np.mean, 'city_code': 'count'}).rename(columns={'age': 'average_age', 'city_code': 'student_count'})\nanswer = t1.reset_index()", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nanswer = t1.groupby('city_code').agg({'age': 'mean', 'stuid': 'count'}).rename(columns={'age': 'average_age', 'stuid': 'count'})", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = t1.groupby('city_code').agg({'age':'mean'}).rename(columns={'age':'mean_age'})\nt3 = t1.groupby('city_code').size().rename('count')\nanswer = pd.concat([t2, t3], axis=1)", false], ["t1 = Student.groupby('city_code').agg({'age': np.mean, 'stuid': np.size}).rename(columns={'stuid':'count', 'age':'avg_age'})\nanswer = t1.reset_index()", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = t1.groupby('city_code').agg({'age': 'mean', 'stuid': 'count'})\nanswer = t2.rename(columns={'age': 'avg_age', 'stuid': 'count'})", false], ["t1 = pd.merge(Student, Lives_in, on='stuid')\nt2 = t1.groupby('city_code').agg({'stuid':'count', 'age':'mean'}).rename(columns={'stuid':'count', 'age':'average_age'})\nanswer = t2.reset_index()", false], ["answer = Student.groupby('city_code').agg({'age': 'mean', 'city_code': 'count'})", false], ["answer = pd.merge(Student, Lives_in, on='stuid')[['age', 'city_code']].groupby(['city_code']).agg({'age': ['count', 'mean']})", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = t1.groupby('city_code').agg({'age':'mean', 'stuid':'count'}).rename(columns={'age':'avg_age'})\nanswer = t2.reset_index()", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = t1.groupby('city_code').agg({'age': ['mean', 'count']})\nanswer = t2", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = t1.groupby('city_code').agg({'age': 'mean'})\nt3 = t1.groupby('city_code').size().rename('count')\nanswer = pd.merge(t2, t3, on='city_code')", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = t1.groupby('city_code').agg({'age': 'mean'}).rename({'age': 'average_age'}, axis=1)\nt3 = t1.groupby('city_code').size().rename('count')\nanswer = pd.concat([t3, t2], axis=1)", false]]}
{"example": {"db_id": "manufacturer", "query": "SELECT sum(num_of_component) FROM furniture", "query_toks": ["SELECT", "sum", "(", "num_of_component", ")", "FROM", "furniture"], "query_toks_no_value": ["select", "sum", "(", "num_of_component", ")", "from", "furniture"], "question": "How many furniture components are there in total?", "question_toks": ["How", "many", "furniture", "components", "are", "there", "in", "total", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[4, [0, [0, 8, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"manufacturer": ["Manufacturer_ID", "Open_Year", "Name", "Num_of_Factories", "Num_of_Shops"], "furniture": ["Furniture_ID", "Name", "Num_of_Component", "Market_Rate"], "furniture_manufacte": ["Manufacturer_ID", "Furniture_ID", "Price_in_Dollar"]}, "answer": [[49]], "pandas_converted": "pd.Series(furniture['num_of_component'].sum())"}, "program_result_list": [["answer = furniture['num_of_component'].sum()", false], ["answer = furniture['num_of_component'].sum()", false], ["answer = furniture['num_of_component'].sum()", false], ["answer = furniture['num_of_component'].sum()", false], ["answer = furniture['num_of_component'].sum()", false], ["answer = furniture['num_of_component'].sum()", false], ["answer = furniture['num_of_component'].sum()", false], ["answer = furniture['num_of_component'].sum()", false], ["answer = furniture['num_of_component'].sum()", false], ["answer = furniture['num_of_component'].sum()", false], ["answer = furniture['num_of_component'].sum()", false], ["answer = furniture['num_of_component'].sum()", false], ["answer = furniture['num_of_component'].sum()", false], ["answer = furniture['num_of_component'].sum()", false], ["answer = furniture['num_of_component'].sum()", false], ["answer = furniture['num_of_component'].sum()", false], ["answer = furniture['num_of_component'].sum()", false], ["t1 = furniture['num_of_component'].sum()\nanswer = t1", false], ["answer = furniture['num_of_component'].sum()", false], ["t1 = furniture['num_of_component'].sum()\nanswer = t1", false]]}
{"example": {"db_id": "candidate_poll", "query": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex", "query_toks": ["SELECT", "t1.name", ",", "t1.sex", ",", "min", "(", "oppose_rate", ")", "FROM", "people", "AS", "t1", "JOIN", "candidate", "AS", "t2", "ON", "t1.people_id", "=", "t2.people_id", "GROUP", "BY", "t1.sex"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "sex", ",", "min", "(", "oppose_rate", ")", "from", "people", "as", "t1", "join", "candidate", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "group", "by", "t1", ".", "sex"], "question": "Find the name of the candidates whose oppose percentage is the lowest for each sex.", "question_toks": ["Find", "the", "name", "of", "the", "candidates", "whose", "oppose", "percentage", "is", "the", "lowest", "for", "each", "sex", "."], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 10, false], null]], [2, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"candidate": ["Candidate_ID", "People_ID", "Poll_Source", "Date", "Support_rate", "Consider_rate", "Oppose_rate", "Unsure_rate"], "people": ["People_ID", "Sex", "Name", "Date_of_Birth", "Height", "Weight"]}, "answer": [["St\u00e9phane Antiga", "F", 0.32], ["Lo\u00efc De Kergret", "M", 0.32]]}, "program_result_list": [["t1 = pd.merge(people, candidate, left_on='people_id', right_on='people_id')\nt2 = t1.groupby(['name', 'sex']).agg({'oppose_rate': 'min'})\nanswer = t2.reset_index()", false], ["t1 = pd.merge(people, candidate, on='people_id')\nt2 = t1.groupby(['name', 'sex'])['oppose_rate'].min().to_frame().reset_index()\nanswer = t2.sort_values(by=['sex','oppose_rate'], ascending=False)", false], ["t1 = pd.merge(people, candidate, left_on='people_id', right_on='people_id')\nt2 = t1.groupby(['name', 'sex']).agg({'oppose_rate': 'min'})\nt3 = t2.groupby('sex').first()\nanswer = t3.reset_index()", false], ["t1 = pd.merge(people, candidate, left_on='people_id', right_on='people_id')\nt2 = t1.groupby('sex').agg(min_oppose_rate=('oppose_rate', 'min'))\nt3 = pd.merge(t1, t2, on='sex')\nanswer = t3[t3['oppose_rate'] == t3['min_oppose_rate']][['name', 'sex', 'min_oppose_rate']]", false], ["t1 = pd.merge(people, candidate, left_on='people_id', right_on='people_id')\nt2 = t1.groupby(['name', 'sex'])['oppose_rate'].min().rename('min_oppose_rate')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(people, candidate, left_on='people_id', right_on='people_id')\nt2 = t1.groupby(['name', 'sex'])['oppose_rate'].min().rename('min_oppose_rate')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(people, candidate, left_on='people_id', right_on='people_id')\nt2 = t1.groupby(['name', 'sex'])['oppose_rate'].min().rename('min_oppose_rate').to_frame().reset_index()\nanswer = t2", false], ["t1 = pd.merge(people, candidate, left_on='people_id', right_on='people_id')\nt2 = t1.groupby(['name', 'sex'])['oppose_rate'].min()\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(people, candidate, left_on='people_id', right_on='people_id')\nt2 = t1.groupby('sex')['oppose_rate'].min().rename('min_oppose_rate')\nt3 = pd.merge(t1, t2.to_frame().reset_index(), on=['sex', 'oppose_rate'])\nanswer = t3[['name', 'sex']]", false], ["t1 = pd.merge(people, candidate, on='people_id')\nt2 = t1.groupby(['name', 'sex']).agg({'oppose_rate':'min'})\nanswer = t2.reset_index()", false], ["t1 = pd.merge(people, candidate, left_on='people_id', right_on='people_id')\nt2 = t1.groupby(['name', 'sex']).agg({'oppose_rate':'min'}).reset_index()\nanswer = t2[['name', 'sex', 'oppose_rate']]", false], ["t1 = pd.merge(people, candidate, left_on='people_id', right_on='people_id')\nt2 = t1.groupby(['name', 'sex']).min()['oppose_rate'].rename('min_oppose').to_frame().reset_index()\nanswer = t2.sort_values(['sex', 'min_oppose'])[['name', 'sex']]", false], ["t1 = pd.merge(people, candidate, left_on='people_id', right_on='people_id')\nt2 = t1.groupby(['name', 'sex']).min().reset_index()\nanswer = t2[['name', 'sex', 'oppose_rate']]", false], ["t1 = pd.merge(people, candidate, left_on='people_id', right_on='people_id')\nt2 = t1.groupby(['name', 'sex']).agg({'oppose_rate': 'min'})\nanswer = t2.reset_index()", false], ["t1 = pd.merge(people, candidate, left_on='people_id', right_on='people_id')\nt2 = t1.groupby('sex').agg({'name': 'min', 'oppose_rate': 'min'})\nanswer = t2.reset_index()", false], ["t1 = pd.merge(people, candidate, left_on='people_id', right_on='people_id')\nt2 = t1.groupby(['name', 'sex'])['oppose_rate'].min().reset_index()\nanswer = t2[['name', 'sex']]", false], ["t1 = pd.merge(people, candidate, left_on='people_id', right_on='people_id')\nt2 = t1.groupby('sex')['oppose_rate'].min().rename('min_oppose_rate')\nt3 = pd.merge(t1, t2.to_frame(), left_on=['sex', 'oppose_rate'], right_on=['sex', 'min_oppose_rate'])\nanswer = t3[['name', 'sex']]", false], ["t1 = pd.merge(people, candidate, left_on='people_id', right_on='people_id')\nt2 = t1.groupby(['name', 'sex']).agg({'oppose_rate': np.min}).reset_index()\nanswer = t2[['name', 'sex', 'oppose_rate']]", false], ["t1 = pd.merge(people, candidate, left_on='people_id', right_on='people_id')\nt2 = t1.groupby(['name', 'sex']).apply(lambda x: x['oppose_rate'].min()).to_frame().reset_index()\nanswer = t2.sort_values('name')", false], ["t1 = pd.merge(people, candidate, left_on='people_id', right_on='people_id')\nt2 = t1.groupby(['sex', 'name'])['oppose_rate'].min()\nanswer = t2.to_frame().reset_index()", false]]}
{"example": {"db_id": "hospital_1", "query": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.blockcode", "FROM", "BLOCK", "AS", "T1", "JOIN", "room", "AS", "T2", "ON", "T1.blockfloor", "=", "T2.blockfloor", "AND", "T1.blockcode", "=", "T2.blockcode", "GROUP", "BY", "T1.blockcode"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "blockcode", "from", "block", "as", "t1", "join", "room", "as", "t2", "on", "t1", ".", "blockfloor", "=", "t2", ".", "blockfloor", "and", "t1", ".", "blockcode", "=", "t2", ".", "blockcode", "group", "by", "t1", ".", "blockcode"], "question": "How many rooms are located for each block code?", "question_toks": ["How", "many", "rooms", "are", "located", "for", "each", "block", "code", "?"], "sql": {"from": {"table_units": [["table_unit", 10], ["table_unit", 11]], "conds": [[false, 2, [0, [0, 46, false], null], [0, 50, false], null], "and", [false, 2, [0, [0, 47, false], null], [0, 51, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 47, false], null]]]], "where": [], "groupBy": [[0, 47, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Physician": ["EmployeeID", "Name", "Position", "SSN"], "Department": ["DepartmentID", "Name", "Head"], "Affiliated_With": ["Physician", "Department", "PrimaryAffiliation"], "Procedures": ["Code", "Name", "Cost"], "Trained_In": ["Physician", "Treatment", "CertificationDate", "CertificationExpires"], "Patient": ["SSN", "Name", "Address", "Phone", "InsuranceID", "PCP"], "Nurse": ["EmployeeID", "Name", "Position", "Registered", "SSN"], "Appointment": ["AppointmentID", "Patient", "PrepNurse", "Physician", "Start", "End", "ExaminationRoom"], "Medication": ["Code", "Name", "Brand", "Description"], "Prescribes": ["Physician", "Patient", "Medication", "Date", "Appointment", "Dose"], "Block": ["BlockFloor", "BlockCode"], "Room": ["RoomNumber", "RoomType", "BlockFloor", "BlockCode", "Unavailable"], "On_Call": ["Nurse", "BlockFloor", "BlockCode", "OnCallStart", "OnCallEnd"], "Stay": ["StayID", "Patient", "Room", "StayStart", "StayEnd"], "Undergoes": ["Patient", "Procedures", "Stay", "DateUndergoes", "Physician", "AssistingNurse"]}, "answer": [[12, 1], [12, 2], [12, 3]]}, "program_result_list": [["t1 = pd.merge(Block, Room, left_on=['blockfloor', 'blockcode'], right_on=['blockfloor', 'blockcode'])\nt2 = t1.groupby('blockcode').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Block, Room, left_on=['blockfloor', 'blockcode'], right_on=['blockfloor', 'blockcode'])\nanswer = t1.groupby('blockcode').size().rename('count').to_frame().reset_index()", false], ["t1 = pd.merge(Block, Room, left_on=['blockfloor', 'blockcode'], right_on=['blockfloor', 'blockcode'])\nt2 = t1.groupby(['blockcode']).size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Block, Room, left_on=['blockfloor', 'blockcode'], right_on=['blockfloor', 'blockcode'])\nanswer = t1.groupby('blockcode').size().rename('count').to_frame().reset_index()", false], ["t1 = pd.merge(Block, Room, left_on=['blockfloor', 'blockcode'], right_on=['blockfloor', 'blockcode'])\nt2 = t1.groupby('blockcode').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Block, Room, left_on=['blockfloor', 'blockcode'], right_on=['blockfloor', 'blockcode'])\nt2 = t1.groupby('blockcode').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Block, Room, left_on=['blockfloor', 'blockcode'], right_on=['blockfloor', 'blockcode'])\nt2 = t1.groupby('blockcode').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Block, Room, left_on=['blockfloor', 'blockcode'], right_on=['blockfloor', 'blockcode'])\nanswer = t1.groupby('blockcode').size().rename('count')", false], ["t1 = pd.merge(Block, Room, left_on=['blockfloor', 'blockcode'], right_on=['blockfloor', 'blockcode'])\nanswer = t1.groupby('blockcode').size().rename('count').to_frame().reset_index()", false], ["t1 = pd.merge(block, room, left_on=['blockfloor', 'blockcode'], right_on=['blockfloor', 'blockcode'])\nanswer = t1.groupby('blockcode').size().rename('count').to_frame().reset_index()", false], ["t1 = pd.merge(Block, Room, left_on=['blockfloor', 'blockcode'], right_on=['blockfloor', 'blockcode'])\nanswer = t1.groupby('blockcode').size().rename('count').to_frame().reset_index()", false], ["t1 = pd.merge(Block, Room, left_on=['blockfloor', 'blockcode'], right_on=['blockfloor', 'blockcode'])\nt2 = t1.groupby('blockcode').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Block, Room, left_on=['blockfloor', 'blockcode'], right_on=['blockfloor', 'blockcode'])\nt2 = t1.groupby('blockcode').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Block, Room, left_on=['blockfloor', 'blockcode'], right_on=['blockfloor', 'blockcode'])\nt2 = t1.groupby('blockcode').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Block, Room, left_on=['blockfloor', 'blockcode'], right_on=['blockfloor', 'blockcode'])\nanswer = t1.groupby('blockcode').size().rename('count').to_frame().reset_index()", false], ["t1 = pd.merge(Block, Room, on=['blockfloor', 'blockcode'])\nt2 = t1.groupby('blockcode').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Block, Room, left_on=['blockfloor','blockcode'], right_on=['blockfloor','blockcode'])\nt2 = t1.groupby('blockcode').size().rename('count').to_frame().reset_index()\nanswer = t2", false], ["t1 = pd.merge(Block, Room, left_on=['blockfloor', 'blockcode'], right_on=['blockfloor', 'blockcode'])\nt2 = t1.groupby('blockcode').size().rename('count').to_frame().reset_index()\nanswer = t2", false], ["t1 = pd.merge(Block, Room, left_on=['blockfloor', 'blockcode'], right_on=['blockfloor', 'blockcode'])\nt2 = t1.groupby('blockcode').size().rename('count').to_frame().reset_index()\nanswer = t2", false], ["t1 = pd.merge(Block, Room, left_on=['blockfloor', 'blockcode'], right_on=['blockfloor', 'blockcode'])\nt2 = t1.groupby('blockcode').size().rename('count').to_frame().reset_index()\nanswer = t2", false]]}
{"example": {"db_id": "store_1", "query": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;", "query_toks": ["SELECT", "billing_country", ",", "AVG", "(", "total", ")", "FROM", "invoices", "GROUP", "BY", "billing_country", "ORDER", "BY", "AVG", "(", "total", ")", "DESC", "LIMIT", "10", ";"], "query_toks_no_value": ["select", "billing_country", ",", "avg", "(", "total", ")", "from", "invoices", "group", "by", "billing_country", "order", "by", "avg", "(", "total", ")", "desc", "limit", "value"], "question": "What are the names of the countries and average invoice size of the top countries by size?", "question_toks": ["What", "are", "the", "names", "of", "the", "countries", "and", "average", "invoice", "size", "of", "the", "top", "countries", "by", "size", "?"], "sql": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 44, false], null]], [5, [0, [0, 46, false], null]]]], "where": [], "groupBy": [[0, 44, false]], "having": [], "orderBy": ["desc", [[0, [5, 46, false], null]]], "limit": 10, "intersect": null, "union": null, "except": null}, "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [["Chile", 6.659999999999999], ["Ireland", 6.517142857142857], ["Hungary", 6.517142857142857], ["Czech Republic", 6.445714285714287], ["Austria", 6.088571428571428], ["Finland", 5.945714285714287], ["Netherlands", 5.8028571428571425], ["India", 5.789230769230769], ["USA", 5.747912087912091], ["Norway", 5.659999999999999]]}, "program_result_list": [["t1 = invoices.groupby('billing_country').size().rename('count')\nt2 = invoices.groupby('billing_country').mean()['total'].rename('avg')\nt3 = pd.merge(t1, t2, left_index=True, right_index=True)\nt4 = t3.sort_values(by='total', ascending=False).head(10).reset_index()\nanswer = t4[['billing_country', 'avg']]", false], ["t1 = invoices.groupby('billing_country').mean()['total'].rename('avg_total')\nanswer = t1.sort_values(ascending=False).head(10).to_frame().reset_index()", false], ["t1 = invoices.groupby('billing_country')['total'].mean().rename('avg').head(10)\nanswer = t1.to_frame().reset_index()", false], ["t1 = invoices.groupby('billing_country').agg({'total': 'mean'}).rename(columns={'total': 'avg'}).sort_values(by='avg', ascending=False)\nanswer = t1.head(10).reset_index()", false], ["t1 = invoices.groupby('billing_country').agg({'total':'mean'}).sort_values('total', ascending=False).head(10)\nanswer = t1.reset_index()", false], ["t1 = invoices.groupby('billing_country')['total'].mean().rename('avg').sort_values(ascending=False).head(10).to_frame().reset_index()\nanswer = t1[['billing_country', 'avg']]", false], ["t1 = invoices.groupby('billing_country').mean()['total'].rename('avg').to_frame()\nt2 = t1.sort_values(by='avg', ascending=False).head(10).reset_index()\nanswer = t2[['billing_country', 'avg']]", false], ["t1 = invoices.groupby('billing_country').mean().rename(columns={'total':'avg_total'}).reset_index()\nt2 = t1.sort_values(by='avg_total', ascending=False).head(10).reset_index()\nanswer = t2[['billing_country', 'avg_total']]", false], ["t1 = invoices.groupby('billing_country').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(10).to_frame().reset_index()\nt3 = pd.merge(invoices, t2, on='billing_country')\nt4 = t3.groupby('billing_country').agg({'total': 'mean'})\nanswer = t4.reset_index()", false], ["t1 = invoices.groupby('billing_country').agg({'total': 'mean'}).rename(columns={'total': 'avg_total'}).sort_values('avg_total', ascending=False).head(10)\nanswer = t1.reset_index()", false], ["t1 = invoices.groupby('billing_country').mean().sort_values('total', ascending=False).head(10).reset_index()\nanswer = t1[['billing_country', 'total']]", false], ["t1 = invoices.groupby('billing_country').mean().rename(columns={'total': 'avg'})\nt2 = t1.sort_values(by=['avg'], ascending=False).head(10)\nanswer = t2.reset_index()[['billing_country', 'avg']]", false], ["t1 = invoices.groupby('billing_country').mean()\nt2 = t1.sort_values('total', ascending=False).head(10)\nanswer = t2[['total']]", false], ["t1 = invoices.groupby('billing_country').mean()['total'].rename('avg')\nt2 = t1.sort_values(ascending=False).head(10).to_frame().reset_index()\nanswer = t2[['billing_country', 'avg']]", false], ["t1 = invoices.groupby('billing_country').mean().rename(columns={'total': 'avg_total'})\nt2 = t1.sort_values('avg_total', ascending=False).head(10).reset_index()\nanswer = t2[['billing_country', 'avg_total']]", false], ["# Top countries by size:\n# 1. United States\n# 2. Canada\n# 3. Brazil\n# 4. France\n# 5. Germany\n# 6. United Kingdom\n# 7. Poland\n# 8. Portugal\n# 9. Italy\n# 10. Japan\nt1 = invoices.groupby('billing_country').mean().reset_index()\nt2 = t1.sort_values('total', ascending=False).head(10)\nanswer = t2[['billing_country', 'total']]", false], ["top10 = invoices.groupby('billing_country').agg({'total': np.mean}).sort_values('total', ascending=False).head(10)\nanswer = top10.reset_index()", false], ["t1 = invoices.groupby('billing_country').total.mean().rename('avg')\nt2 = t1.sort_values(ascending=False).head(10).to_frame().reset_index()\nanswer = t2.loc[:, ['billing_country', 'avg']]", false], ["t1 = invoices.groupby('billing_country')['total'].mean().rename('average_invoice_size')\nanswer = t1.sort_values(ascending=False).head(10).to_frame().reset_index()", false], ["t1 = invoices.groupby('billing_country').mean().rename(columns={'total': 'avg'}).sort_values(by='avg', ascending=False).head(10)\nanswer = t1.reset_index()", false]]}
{"example": {"db_id": "tracking_software_problems", "query": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"", "query_toks": ["SELECT", "product_id", "FROM", "problems", "AS", "T1", "JOIN", "staff", "AS", "T2", "ON", "T1.reported_by_staff_id", "=", "T2.staff_id", "WHERE", "T2.staff_first_name", "=", "``", "Dameon", "''", "AND", "T2.staff_last_name", "=", "``", "Frami", "''", "UNION", "SELECT", "product_id", "FROM", "problems", "AS", "T1", "JOIN", "staff", "AS", "T2", "ON", "T1.reported_by_staff_id", "=", "T2.staff_id", "WHERE", "T2.staff_first_name", "=", "``", "Jolie", "''", "AND", "T2.staff_last_name", "=", "``", "Weber", "''"], "query_toks_no_value": ["select", "product_id", "from", "problems", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "reported_by_staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "staff_first_name", "=", "value", "and", "t2", ".", "staff_last_name", "=", "value", "union", "select", "product_id", "from", "problems", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "reported_by_staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "staff_first_name", "=", "value", "and", "t2", ".", "staff_last_name", "=", "value"], "question": "Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems.", "question_toks": ["Which", "problems", "were", "reported", "by", "the", "staff", "named", "Dameon", "Frami", "or", "Jolie", "Weber", "?", "Give", "me", "the", "ids", "of", "the", "problems", "."], "sql": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 24, false], null], [0, 17, false], null]]}, "select": [false, [[0, [0, [0, 22, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], "\"Dameon\"", null], "and", [false, 2, [0, [0, 19, false], null], "\"Frami\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 24, false], null], [0, 17, false], null]]}, "select": [false, [[0, [0, [0, 22, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], "\"Jolie\"", null], "and", [false, 2, [0, [0, 19, false], null], "\"Weber\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, "db_table_headers": {"Problem_Category_Codes": ["problem_category_code", "problem_category_description"], "Problem_Log": ["problem_log_id", "assigned_to_staff_id", "problem_id", "problem_category_code", "problem_status_code", "log_entry_date", "log_entry_description", "log_entry_fix", "other_log_details"], "Problem_Status_Codes": ["problem_status_code", "problem_status_description"], "Product": ["product_id", "product_name", "product_details"], "Staff": ["staff_id", "staff_first_name", "staff_last_name", "other_staff_details"], "Problems": ["problem_id", "product_id", "closure_authorised_by_staff_id", "reported_by_staff_id", "date_problem_reported", "date_problem_closed", "problem_description", "other_problem_details"]}, "answer": [[1], [4], [6]]}, "program_result_list": [["t1 = pd.merge(Problems, Staff, left_on='reported_by_staff_id', right_on='staff_id')\nt2 = t1[(t1['staff_first_name'] == 'Dameon') & (t1['staff_last_name'] == 'Frami')]\nt3 = t1[(t1['staff_first_name'] == 'Jolie') & (t1['staff_last_name'] == 'Weber')]\nt4 = pd.concat([t2, t3])\nanswer = t4['product_id']", false], ["t1 = pd.merge(Problems, Staff, left_on='reported_by_staff_id', right_on='staff_id')\nt2 = t1[(t1['staff_first_name'] == 'Dameon') & (t1['staff_last_name'] == 'Frami')]\nt3 = t1[(t1['staff_first_name'] == 'Jolie') & (t1['staff_last_name'] == 'Weber')]\nt4 = t2['product_id'].append(t3['product_id'])\nanswer = t4.unique()", false], ["t1 = pd.merge(Problems, Staff, left_on='reported_by_staff_id', right_on='staff_id')\nt2 = t1[((t1['staff_first_name'] == 'Dameon') & (t1['staff_last_name'] == 'Frami')) | ((t1['staff_first_name'] == 'Jolie') & (t1['staff_last_name'] == 'Weber'))]\nanswer = t2['product_id']", false], ["t1 = pd.merge(Problems, Staff, on='reported_by_staff_id')\nt2 = t1[(t1['staff_first_name']=='Dameon') & (t1['staff_last_name']=='Frami')]\nt3 = t1[(t1['staff_first_name']=='Jolie') & (t1['staff_last_name']=='Weber')]\nt4 = pd.concat([t2, t3])\nanswer = t4['product_id']", false], ["t1 = pd.merge(Problems, Staff, left_on='reported_by_staff_id', right_on='staff_id')\nt2 = t1[(t1['staff_first_name'] == 'Dameon') & (t1['staff_last_name'] == 'Frami')]\nt3 = t1[(t1['staff_first_name'] == 'Jolie') & (t1['staff_last_name'] == 'Weber')]\nt4 = pd.concat([t2['product_id'], t3['product_id']], axis=0)\nanswer = t4.unique()", false], ["t1 = pd.merge(Problems, Staff, left_on='reported_by_staff_id', right_on='staff_id')\nt2 = t1[(t1['staff_first_name'] == 'Dameon') & (t1['staff_last_name'] == 'Frami')]\nt3 = t1[(t1['staff_first_name'] == 'Jolie') & (t1['staff_last_name'] == 'Weber')]\nt4 = t2.append(t3)\nanswer = t4['product_id']", false], ["t1 = pd.merge(Problems, Staff, left_on='reported_by_staff_id', right_on='staff_id')\nt2 = t1[(t1['staff_first_name'] == 'Dameon') & (t1['staff_last_name'] == 'Frami')]\nt3 = t1[(t1['staff_first_name'] == 'Jolie') & (t1['staff_last_name'] == 'Weber')]\nt4 = pd.concat([t2,t3])\nanswer = t4['product_id']", false], ["t1 = pd.merge(Problems, Staff, left_on='reported_by_staff_id', right_on='staff_id')\nt2 = t1[(t1['staff_first_name'] == 'Dameon') & (t1['staff_last_name'] == 'Frami')]\nt3 = t1[(t1['staff_first_name'] == 'Jolie') & (t1['staff_last_name'] == 'Weber')]\nt4 = pd.concat([t2, t3])\nanswer = t4['product_id'].unique()", false], ["t1 = pd.merge(Problems, Staff, left_on='reported_by_staff_id', right_on='staff_id')\nt2 = t1[(t1['staff_first_name'] == 'Dameon') & (t1['staff_last_name'] == 'Frami')]\nt3 = t1[(t1['staff_first_name'] == 'Jolie') & (t1['staff_last_name'] == 'Weber')]\nanswer = pd.concat([t2['product_id'], t3['product_id']]).drop_duplicates()", false], ["t1 = pd.merge(Problems, Staff, left_on='reported_by_staff_id', right_on='staff_id')\nt2 = t1[t1['staff_first_name'] == 'Dameon']\nt3 = t2[t2['staff_last_name'] == 'Frami']\nt4 = t1[t1['staff_first_name'] == 'Jolie']\nt5 = t4[t4['staff_last_name'] == 'Weber']\nt6 = t3.append(t5)\nanswer = t6['product_id']", false], ["t1 = pd.merge(Problems, Staff, left_on='reported_by_staff_id', right_on='staff_id')\nt2 = t1[t1['staff_first_name'] == 'Dameon']\nt3 = t2[t2['staff_last_name'] == 'Frami']\nt4 = t1[t1['staff_first_name'] == 'Jolie']\nt5 = t4[t4['staff_last_name'] == 'Weber']\nt6 = t3.append(t5)\nanswer = t6['product_id']", false], ["t1 = pd.merge(Problems, Staff, left_on='reported_by_staff_id', right_on='staff_id')\nt2 = t1[(t1['staff_first_name'] == 'Dameon') & (t1['staff_last_name'] == 'Frami')]\nt3 = t1[(t1['staff_first_name'] == 'Jolie') & (t1['staff_last_name'] == 'Weber')]\nt4 = t2[['product_id']].append(t3[['product_id']])\nanswer = t4['product_id'].unique()", false], ["t1 = pd.merge(Problems, Staff, on='reported_by_staff_id')\nt2 = t1[((t1['staff_first_name'] == 'Dameon') & (t1['staff_last_name'] == 'Frami')) | ((t1['staff_first_name'] == 'Jolie') & (t1['staff_last_name'] == 'Weber'))]\nanswer = t2['product_id']", false], ["t1 = pd.merge(Problems, Staff, left_on='reported_by_staff_id', right_on='staff_id')\nt2 = t1[(t1['staff_first_name'] == 'Dameon') & (t1['staff_last_name'] == 'Frami')]\nt3 = t1[(t1['staff_first_name'] == 'Jolie') & (t1['staff_last_name'] == 'Weber')]\nt4 = pd.concat([t2, t3])\nanswer = t4['product_id']", false], ["t1 = pd.merge(Problems, Staff, left_on='reported_by_staff_id', right_on='staff_id')\nt2 = t1[t1['staff_first_name'] == 'Dameon']\nt3 = t2[t2['staff_last_name'] == 'Frami']\nt4 = t1[t1['staff_first_name'] == 'Jolie']\nt5 = t4[t4['staff_last_name'] == 'Weber']\nt6 = pd.concat([t3, t5])\nanswer = t6['product_id'].unique()", false], ["t1 = pd.merge(Problems, Staff, left_on='reported_by_staff_id', right_on='staff_id')\nt2 = t1[(t1['staff_first_name'] == 'Dameon') & (t1['staff_last_name'] == 'Frami')]['product_id']\nt3 = t1[(t1['staff_first_name'] == 'Jolie') & (t1['staff_last_name'] == 'Weber')]['product_id']\nanswer = pd.concat([t2, t3])", false], ["t1 = pd.merge(Problems, Staff, left_on='reported_by_staff_id', right_on='staff_id')\nt2 = t1[(t1['staff_first_name'] == 'Dameon') & (t1['staff_last_name'] == 'Frami')]\nt3 = t1[(t1['staff_first_name'] == 'Jolie') & (t1['staff_last_name'] == 'Weber')]\nanswer = pd.concat([t2, t3])['product_id'].unique()", false], ["t1 = pd.merge(Problems, Staff, left_on='reported_by_staff_id', right_on='staff_id')\nt2 = t1[(t1['staff_first_name'] == 'Dameon') & (t1['staff_last_name'] == 'Frami')]\nt3 = t1[(t1['staff_first_name'] == 'Jolie') & (t1['staff_last_name'] == 'Weber')]\nt4 = t2.append(t3)\nanswer = t4['product_id'].unique()", false], ["t1 = pd.merge(Problems, Staff, left_on='reported_by_staff_id', right_on='staff_id')\nt2 = t1[(t1['staff_first_name'] == 'Dameon') & (t1['staff_last_name'] == 'Frami')]\nt3 = t1[(t1['staff_first_name'] == 'Jolie') & (t1['staff_last_name'] == 'Weber')]\nt4 = t2['product_id'].append(t3['product_id'])\nanswer = t4.unique()", false], ["t1 = pd.merge(Problems, Staff, left_on='reported_by_staff_id', right_on='staff_id')\nt2 = t1[((t1['staff_first_name'] == 'Dameon') & (t1['staff_last_name'] == 'Frami')) | ((t1['staff_first_name'] == 'Jolie') & (t1['staff_last_name'] == 'Weber'))]\nanswer = t2['product_id']", false]]}
{"example": {"db_id": "flight_1", "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate", "query_toks": ["SELECT", "eid", "FROM", "Employee", "EXCEPT", "SELECT", "eid", "FROM", "Certificate"], "query_toks_no_value": ["select", "eid", "from", "employee", "except", "select", "eid", "from", "certificate"], "question": "What are the ids of all employees that don't have certificates?", "question_toks": ["What", "are", "the", "ids", "of", "all", "employees", "that", "do", "n't", "have", "certificates", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [[15645489], [248965255], [254099823], [287321212], [310454877], [348121549], [486512566], [489221823], [489456522], [552455348], [619023588]]}, "program_result_list": [["t1 = employee[['eid']]\nt2 = certificate[['eid']]\nanswer = t1[~t1.isin(t2).all(1)]", false], ["answer = employee[~employee['eid'].isin(certificate['eid'])]['eid']", false], ["t1 = employee[['eid']]\nt2 = certificate[['eid']]\nanswer = t1[~t1.isin(t2)].dropna()", false], ["t1 = employee.copy()\nt2 = certificate.copy()\nt3 = pd.merge(t1, t2, on='eid', how='left', indicator=True)\nt4 = t3[t3['_merge'] == 'left_only']\nanswer = t4['eid']", false], ["t1 = employee[['eid']]\nt2 = certificate[['eid']]\nanswer = t1.merge(t2, on='eid', how='left', indicator=True).query('_merge == \"left_only\"').drop('_merge', axis=1)", false], ["t1 = employee[['eid']].drop_duplicates()\nt2 = certificate[['eid']].drop_duplicates()\nanswer = t1[~t1.eid.isin(t2.eid)]", false], ["t1 = employee.merge(certificate, how='left', on='eid', indicator=True)\nanswer = t1.query('_merge == \"left_only\"')['eid']", false], ["t1 = employee[['eid']]\nt2 = certificate[['eid']]\nanswer = t1[~t1.isin(t2)].dropna()", false], ["t1 = employee['eid']\nt2 = certificate['eid']\nt3 = t1[~t1.isin(t2)]\nanswer = t3.to_frame().reset_index(drop=True)", false], ["t1 = employee[['eid']].rename(columns={'eid':'eid1'})\nt2 = certificate[['eid']].rename(columns={'eid':'eid2'})\nanswer = t1[~t1.eid1.isin(t2.eid2)]", false], ["t1 = employee[['eid']]\nt2 = certificate[['eid']]\nanswer = t1[~t1.isin(t2)].dropna()", false], ["answer = pd.concat([employee['eid'], certificate['eid']]).drop_duplicates(keep=False)", false], ["t1 = employee['eid']\nt2 = certificate['eid']\nanswer = t1[~t1.isin(t2)]", false], ["t1 = employee.set_index('eid')\nt2 = certificate.set_index('eid')\nanswer = t1.index.difference(t2.index)", false], ["t1 = employee[['eid']]\nt2 = certificate[['eid']]\nanswer = t1[~t1.isin(t2)].dropna()", false], ["t1 = employee.merge(certificate, on='eid', how='left')\nt2 = t1[t1['aid'].isnull()]\nanswer = t2['eid']", false], ["t1 = employee.copy()\nt2 = certificate.copy()\nt3 = pd.merge(t1, t2, how='left', left_on='eid', right_on='eid')\nt4 = t3[t3['aid'].isnull()].drop('aid', axis=1)\nanswer = t4['eid']", false], ["t1 = employee['eid'].to_frame()\nt2 = certificate['eid'].to_frame()\nanswer = t1[~t1.isin(t2)].dropna()", false], ["answer = employee[~employee['eid'].isin(certificate['eid'])]['eid']", false], ["t1 = employee[['eid']].copy()\nt2 = certificate[['eid']].copy()\nanswer = pd.concat([t1, t2]).drop_duplicates(keep=False)", false]]}
{"example": {"db_id": "college_2", "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID", "query_toks": ["SELECT", "name", ",", "course_id", "FROM", "instructor", "AS", "T1", "JOIN", "teaches", "AS", "T2", "ON", "T1.ID", "=", "T2.ID"], "query_toks_no_value": ["select", "name", ",", "course_id", "from", "instructor", "as", "t1", "join", "teaches", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "id"], "question": "Find the names of all instructors who have taught some course and the course_id.", "question_toks": ["Find", "the", "names", "of", "all", "instructors", "who", "have", "taught", "some", "course", "and", "the", "course_id", "."], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 22, false], null]]}, "select": [false, [[0, [0, [0, 12, false], null]], [0, [0, [0, 23, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"classroom": ["building", "room_number", "capacity"], "department": ["dept_name", "building", "budget"], "course": ["course_id", "title", "dept_name", "credits"], "instructor": ["ID", "name", "dept_name", "salary"], "section": ["course_id", "sec_id", "semester", "year", "building", "room_number", "time_slot_id"], "teaches": ["ID", "course_id", "sec_id", "semester", "year"], "student": ["ID", "name", "dept_name", "tot_cred"], "takes": ["ID", "course_id", "sec_id", "semester", "year", "grade"], "advisor": ["s_ID", "i_ID"], "time_slot": ["time_slot_id", "day", "start_hr", "start_min", "end_hr", "end_min"], "prereq": ["course_id", "prereq_id"]}, "answer": [["Bondi", "747"], ["Gustafsson", "169"], ["Mingoz", "445"], ["Kean", "808"], ["DAgostino", "962"], ["Bietzk", "158"], ["Gustafsson", "561"], ["Bondi", "274"], ["Bondi", "571"], ["Ullman ", "345"], ["Queiroz", "559"], ["DAgostino", "991"], ["DAgostino", "400"], ["Voronina", "376"], ["Sullivan", "694"], ["Mingoz", "137"], ["Sakurai", "270"], ["Morris", "795"], ["Voronina", "443"], ["Mahmoud", "486"], ["Ullman ", "408"], ["Mingoz", "362"], ["Mingoz", "527"], ["Tung", "401"], ["Ullman ", "408"], ["Mahmoud", "493"], ["Luo", "679"], ["Dale", "237"], ["Sakurai", "258"], ["Jaekel", "334"], ["Kean", "366"], ["Wieland", "581"], ["Vicentino", "793"], ["Voronina", "959"], ["Tung", "421"], ["Mingoz", "426"], ["Mingoz", "362"], ["Mahmoud", "864"], ["Bourrier", "960"], ["Romero", "105"], ["Lent", "626"], ["Dale", "893"], ["DAgostino", "663"], ["Liley", "192"], ["Mingoz", "349"], ["Dale", "237"], ["DAgostino", "972"], ["Mahmoud", "704"], ["Morris", "242"], ["Dale", "158"], ["Wieland", "545"], ["Morris", "791"], ["DAgostino", "642"], ["Sakurai", "468"], ["Bourrier", "949"], ["Dale", "748"], ["Romero", "489"], ["Atanassov", "603"], ["Valtchev", "415"], ["Sarkar", "867"], ["Gustafsson", "631"], ["Voronina", "443"], ["Valtchev", "702"], ["Lembr", "843"], ["Voronina", "612"], ["Dale", "629"], ["Romero", "105"], ["Ullman ", "200"], ["Dale", "496"], ["Shuming", "468"], ["Morris", "696"], ["Mahmoud", "735"], ["Lembr", "200"], ["Choll", "461"], ["Mahmoud", "735"], ["Mingoz", "362"], ["Romero", "476"], ["Voronina", "239"], ["Mingoz", "304"], ["DAgostino", "599"], ["Jaekel", "852"], ["Ullman ", "760"], ["Wieland", "591"], ["Gustafsson", "169"], ["Morris", "313"], ["Tung", "692"], ["DAgostino", "867"], ["DAgostino", "482"], ["Bawa", "457"], ["Dale", "802"], ["DAgostino", "338"], ["DAgostino", "352"], ["DAgostino", "338"], ["Sakurai", "960"], ["Pimenta", "875"], ["DAgostino", "400"], ["Dale", "927"], ["Ullman ", "974"], ["Atanassov", "604"], ["Mingoz", "319"]]}, "program_result_list": [["t1 = pd.merge(instructor, teaches, left_on='id', right_on='id')\nanswer = t1[['name', 'course_id']]", false], ["t1 = pd.merge(instructor, teaches, left_on='id', right_on='id')\nanswer = t1[['name', 'course_id']]", false], ["t1 = pd.merge(instructor, teaches, left_on='id', right_on='id')\nanswer = t1[['name', 'course_id']]", false], ["t1 = pd.merge(instructor, teaches, on='id')\nanswer = t1[['name', 'course_id']]", false], ["t1 = pd.merge(instructor, teaches, left_on='id', right_on='id')\nanswer = t1[['name', 'course_id']]", false], ["t1 = pd.merge(instructor, teaches, left_on='id', right_on='id')\nanswer = t1[['name', 'course_id']]", false], ["t1 = pd.merge(instructor, teaches, on='id')\nanswer = t1[['name', 'course_id']]", false], ["t1 = pd.merge(instructor, teaches, left_on='id', right_on='id')\nanswer = t1[['name', 'course_id']]", false], ["t1 = pd.merge(instructor, teaches, left_on='id', right_on='id')\nanswer = t1[['name', 'course_id']]", false], ["t1 = pd.merge(instructor, teaches, left_on='id', right_on='id')\nanswer = t1[['name', 'course_id']]", false], ["t1 = pd.merge(instructor, teaches, left_on='id', right_on='id')\nanswer = t1[['name', 'course_id']]", false], ["t1 = pd.merge(instructor, teaches, on='id')\nanswer = t1[['name', 'course_id']]", false], ["t1 = pd.merge(instructor, teaches, on='id')\nanswer = t1[['name', 'course_id']]", false], ["t1 = pd.merge(instructor, teaches, on='id')\nanswer = t1[['name', 'course_id']]", false], ["t1 = pd.merge(instructor, teaches, left_on='id', right_on='id')\nanswer = t1[['name', 'course_id']]", false], ["t1 = pd.merge(instructor, teaches, left_on='id', right_on='id')\nanswer = t1[['name', 'course_id']]", false], ["t1 = pd.merge(instructor, teaches, on='id')\nanswer = t1[['name', 'course_id']]", false], ["t1 = pd.merge(instructor, teaches, left_on='id', right_on='id')\nanswer = t1[['name', 'course_id']]", false], ["t1 = pd.merge(instructor, teaches, on='id')\nanswer = t1[['name', 'course_id']]", false], ["t1 = pd.merge(instructor, teaches, left_on='id', right_on='id')\nanswer = t1[['name', 'course_id']]", false]]}
{"example": {"db_id": "bike_1", "query": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3", "query_toks": ["SELECT", "date", ",", "mean_temperature_f", ",", "mean_humidity", "FROM", "weather", "ORDER", "BY", "max_gust_speed_mph", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "date", ",", "mean_temperature_f", ",", "mean_humidity", "from", "weather", "order", "by", "max_gust_speed_mph", "desc", "limit", "value"], "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?", "question_toks": ["What", "are", "the", "date", ",", "mean", "temperature", "and", "mean", "humidity", "for", "the", "top", "3", "days", "with", "the", "largest", "max", "gust", "speeds", "?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]], [0, [0, [0, 25, false], null]], [0, [0, [0, 31, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 41, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}, "db_table_headers": {"station": ["id", "name", "lat", "long", "dock_count", "city", "installation_date"], "status": ["station_id", "bikes_available", "docks_available", "time"], "trip": ["id", "duration", "start_date", "start_station_name", "start_station_id", "end_date", "end_station_name", "end_station_id", "bike_id", "subscription_type", "zip_code"], "weather": ["date", "max_temperature_f", "mean_temperature_f", "min_temperature_f", "max_dew_point_f", "mean_dew_point_f", "min_dew_point_f", "max_humidity", "mean_humidity", "min_humidity", "max_sea_level_pressure_inches", "mean_sea_level_pressure_inches", "min_sea_level_pressure_inches", "max_visibility_miles", "mean_visibility_miles", "min_visibility_miles", "max_wind_Speed_mph", "mean_wind_speed_mph", "max_gust_speed_mph", "precipitation_inches", "cloud_cover", "events", "wind_dir_degrees", "zip_code"]}, "answer": [["10/14/2013", 64, 49], ["10/31/2013", 59, 54], ["8/31/2013", 68, 72]]}, "program_result_list": [["t1 = weather[['date', 'mean_temperature_f', 'mean_humidity']].sort_values('max_gust_speed_mph', ascending=False).head(3)\nanswer = t1", false], ["t1 = weather.sort_values(by='max_gust_speed_mph', ascending=False)\nanswer = t1.head(3)[['date', 'mean_temperature_f', 'mean_humidity']]", false], ["t1 = weather.sort_values(by='max_gust_speed_mph', ascending=False).head(3)\nanswer = t1[['date', 'mean_temperature_f', 'mean_humidity']]", false], ["t1 = weather.sort_values(by='max_gust_speed_mph', ascending=False).head(3)\nanswer = t1[['date', 'mean_temperature_f', 'mean_humidity']]", false], ["t1 = weather.sort_values('max_gust_speed_mph', ascending=False).head(3).reset_index()\nanswer = t1[['date', 'mean_temperature_f', 'mean_humidity']]", false], ["answer = weather[['date', 'mean_temperature_f', 'mean_humidity']].sort_values('max_gust_speed_mph', ascending=False).head(3)", false], ["t1 = weather.sort_values('max_gust_speed_mph', ascending=False).head(3).reset_index()\nanswer = t1[['date', 'mean_temperature_f', 'mean_humidity']]", false], ["t1 = weather.sort_values(by='max_gust_speed_mph', ascending=False).head(3)\nanswer = t1[['date', 'mean_temperature_f', 'mean_humidity']]", false], ["t1 = weather.sort_values(by='max_gust_speed_mph', ascending=False).head(3)\nanswer = t1[['date', 'mean_temperature_f', 'mean_humidity']]", false], ["t1 = weather.sort_values('max_gust_speed_mph', ascending=False).head(3)\nanswer = t1[['date', 'mean_temperature_f', 'mean_humidity']]", false], ["answer = weather.sort_values(by='max_gust_speed_mph', ascending=False).head(3)[['date', 'mean_temperature_f', 'mean_humidity']]", false], ["t1 = weather.sort_values(by='max_gust_speed_mph', ascending=False).head(3)\nanswer = t1[['date', 'mean_temperature_f', 'mean_humidity']]", false], ["t1 = weather.sort_values('max_gust_speed_mph', ascending=False).head(3).reset_index()\nanswer = t1[['date', 'mean_temperature_f', 'mean_humidity']]", false], ["t1 = weather.sort_values('max_gust_speed_mph', ascending=False).head(3)\nanswer = t1[['date', 'mean_temperature_f', 'mean_humidity']]", false], ["t1 = weather.sort_values(by='max_gust_speed_mph', ascending=False).head(3)\nanswer = t1[['date', 'mean_temperature_f', 'mean_humidity']]", false], ["answer = weather[['date', 'mean_temperature_f', 'mean_humidity']].sort_values('max_gust_speed_mph', ascending=False).head(3)", false], ["t1 = weather.sort_values(by='max_gust_speed_mph', ascending=False).head(3).reset_index()\nanswer = t1[['date', 'mean_temperature_f', 'mean_humidity']]", false], ["t1 = weather.sort_values('max_gust_speed_mph', ascending=False).head(3).reset_index(drop=True)\nanswer = t1[['date', 'mean_temperature_f', 'mean_humidity']]", false], ["t1 = weather.sort_values(by='max_gust_speed_mph', ascending=False).head(3).reset_index(drop=True)\nanswer = t1[['date', 'mean_temperature_f', 'mean_humidity']]", false], ["answer = weather[['date', 'mean_temperature_f', 'mean_humidity']].sort_values(by='max_gust_speed_mph', ascending=False).head(3)", false]]}
{"example": {"db_id": "party_people", "query": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != \"Progress Party\"", "query_toks": ["SELECT", "T1.member_name", "FROM", "Member", "AS", "T1", "JOIN", "party", "AS", "T2", "ON", "T1.party_id", "=", "T2.party_id", "WHERE", "T2.Party_name", "!", "=", "``", "Progress", "Party", "''"], "query_toks_no_value": ["select", "t1", ".", "member_name", "from", "member", "as", "t1", "join", "party", "as", "t2", "on", "t1", ".", "party_id", "=", "t2", ".", "party_id", "where", "t2", ".", "party_name", "!", "=", "value"], "question": "Which member names corresponding to members who are not in the Progress Party?", "question_toks": ["Which", "member", "names", "corresponding", "to", "members", "who", "are", "not", "in", "the", "Progress", "Party", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 7, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [[false, 7, [0, [0, 12, false], null], "\"Progress Party\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"region": ["Region_ID", "Region_name", "Date", "Label", "Format", "Catalogue"], "party": ["Party_ID", "Minister", "Took_office", "Left_office", "Region_ID", "Party_name"], "member": ["Member_ID", "Member_Name", "Party_ID", "In_office"], "party_events": ["Event_ID", "Event_Name", "Party_ID", "Member_in_charge_ID"]}, "answer": [["Hon Tony Abbott"], ["Hon John Anderson"], ["Peter Andren"], ["Hon Kevin Andrews"], ["Hon Fran Bailey"], ["Hon Bruce Baird"], ["Mark Baker"], ["Hon Bob Baldwin"], ["Phil Barresi"], ["Kerry Bartlett"], ["Hon Bruce Billson"]]}, "program_result_list": [["t1 = pd.merge(member, party, on='party_id')\nt2 = t1[t1['party_name'] != 'Progress Party']\nanswer = t2['member_name']", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nt2 = t1[t1['party_name'] != 'Progress Party']\nanswer = t2['member_name']", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nt2 = t1[t1['party_name'] != 'Progress Party']\nanswer = t2['member_name']", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nt2 = t1[t1['party_name'] != 'Progress Party']\nanswer = t2['member_name']", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nt2 = t1[t1['party_name'] != 'Progress Party']\nanswer = t2['member_name']", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nt2 = t1[t1['party_name'] != 'Progress Party']\nanswer = t2['member_name']", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nt2 = t1[t1['party_name'] != 'Progress Party']\nanswer = t2['member_name']", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nt2 = t1[t1['party_name'] != 'Progress Party']\nanswer = t2['member_name']", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nt2 = t1[t1['party_name'] != 'Progress Party']\nanswer = t2['member_name']", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nt2 = t1[t1['party_name'] != 'Progress Party']\nanswer = t2['member_name']", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nt2 = t1[t1['party_name'] != 'Progress Party']\nanswer = t2['member_name'].unique()", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nt2 = t1[t1['party_name'] != 'Progress Party']\nanswer = t2['member_name']", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nt2 = t1[t1['party_name'] != 'Progress Party']\nanswer = t2['member_name']", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nt2 = t1[t1['party_name'] != 'Progress Party']\nanswer = t2['member_name']", false], ["t1 = pd.merge(member, party, on='party_id')\nt2 = t1[t1['party_name'] != 'Progress Party']\nanswer = t2['member_name']", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nt2 = t1[t1['party_name'] != 'Progress Party']\nanswer = t2['member_name']", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nt2 = t1[t1['party_name'] != 'Progress Party']\nanswer = t2['member_name']", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nt2 = t1[t1['party_name'] != 'Progress Party']\nanswer = t2['member_name']", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nt2 = t1[t1['party_name'] != 'Progress Party']\nanswer = t2['member_name']", false], ["t1 = pd.merge(member, party, on='party_id', how='left')\nt2 = t1[t1['party_name'] != 'Progress Party']\nanswer = t2['member_name']", false]]}
{"example": {"db_id": "student_1", "query": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.firstname", ",", "T2.lastname", "FROM", "list", "AS", "T1", "JOIN", "teachers", "AS", "T2", "ON", "T1.classroom", "=", "T2.classroom", "GROUP", "BY", "T2.firstname", ",", "T2.lastname", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "firstname", ",", "t2", ".", "lastname", "from", "list", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "classroom", "=", "t2", ".", "classroom", "group", "by", "t2", ".", "firstname", ",", "t2", ".", "lastname", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name of the teacher who teaches the largest number of students.", "question_toks": ["Find", "the", "name", "of", "the", "teacher", "who", "teaches", "the", "largest", "number", "of", "students", "."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 7, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 6, false], [0, 5, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"list": ["LastName", "FirstName", "Grade", "Classroom"], "teachers": ["LastName", "FirstName", "Classroom"]}, "answer": [[" GORDON", "KAWA"]]}, "program_result_list": [["t1 = pd.merge(list, teachers, left_on='classroom', right_on='classroom')\nt2 = t1.groupby(['firstname', 'lastname']).size().rename('count')\nanswer = t2.sort_values(ascending=False).head(1).to_frame().reset_index()[['firstname', 'lastname']]", false], ["t1 = pd.merge(list, teachers, on='classroom')\nt2 = t1.groupby(['firstname', 'lastname']).size().rename('count')\nanswer = t2.sort_values(ascending=False).head(1).to_frame().reset_index()", false], ["t1 = pd.merge(list, teachers, on='classroom')\nt2 = t1.groupby(['firstname', 'lastname']).size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3[['firstname', 'lastname']]", false], ["t1 = pd.merge(list, teachers, left_on='classroom', right_on='classroom')\nt2 = t1.groupby(['firstname', 'lastname']).size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3[['firstname', 'lastname']]", false], ["t1 = pd.merge(list, teachers, left_on='classroom', right_on='classroom')\nt2 = t1.groupby(['firstname', 'lastname']).size().rename('count')\nanswer = t2.sort_values(ascending=False).head(1).to_frame().reset_index()", false], ["t1 = pd.merge(list, teachers, left_on='classroom', right_on='classroom')\nt2 = t1.groupby(['firstname', 'lastname']).size().rename('count')\nanswer = t2.sort_values(ascending=False).head(1).to_frame().reset_index()", false], ["t1 = pd.merge(list, teachers, on='classroom')\nt2 = t1.groupby(['firstname', 'lastname']).size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3[['firstname', 'lastname']]", false], ["t1 = pd.merge(list, teachers, left_on='classroom', right_on='classroom')\nt2 = t1.groupby(['firstname', 'lastname']).size().rename('count')\nanswer = t2.sort_values(ascending=False).head(1)", false], ["t1 = pd.merge(list, teachers, left_on='classroom', right_on='classroom')\nt2 = t1.groupby(['firstname', 'lastname']).size().rename('count')\nanswer = t2.sort_values(ascending=False).head(1).to_frame().reset_index().loc[:, ['firstname', 'lastname']]", false], ["t1 = pd.merge(list, teachers, left_on='classroom', right_on='classroom')\nt2 = t1.groupby(['firstname', 'lastname']).size().rename('count')\nanswer = t2.sort_values(ascending=False).head(1).to_frame().reset_index().iloc[:,[1,2]]", false], ["t1 = pd.merge(list, teachers, on='classroom')\nt2 = t1.groupby(['firstname', 'lastname']).size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3[['firstname', 'lastname']]", false], ["t1 = pd.merge(list, teachers, on='classroom')\nt2 = t1.groupby(['lastname', 'firstname']).size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3[['firstname', 'lastname']]", false], ["t1 = pd.merge(list, teachers, left_on='classroom', right_on='classroom')\nt2 = t1.groupby(['firstname', 'lastname']).size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3[['firstname', 'lastname']]", false], ["t1 = pd.merge(list, teachers, left_on='classroom', right_on='classroom')\nt2 = t1.groupby(['firstname', 'lastname']).size().rename('count').to_frame().reset_index()\nt3 = t2.sort_values('count', ascending=False).head(1)\nanswer = t3[['firstname', 'lastname']]", false], ["t1 = pd.merge(list, teachers, left_on='classroom', right_on='classroom')\nt2 = t1.groupby(['firstname', 'lastname']).size().rename('count')\nanswer = t2.sort_values(ascending=False).head(1).to_frame().reset_index()", false], ["t1 = pd.merge(list, teachers, left_on='classroom', right_on='classroom')\nt2 = t1.groupby(['firstname', 'lastname']).size().rename('count')\nt3 = t2.sort_values(ascending=False).to_frame().reset_index().head(1)\nanswer = t3[['firstname', 'lastname']]", false], ["t1 = pd.merge(list, teachers, left_on='classroom', right_on='classroom')\nt2 = t1.groupby(['firstname', 'lastname']).size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3[['firstname', 'lastname']]", false], ["t1 = pd.merge(list, teachers, on='classroom')\nt2 = t1.groupby(['firstname', 'lastname']).size().rename('count')\nanswer = t2.sort_values(ascending=False).head(1).to_frame().reset_index()", false], ["t1 = pd.merge(list, teachers, on='classroom')\nt2 = t1.groupby(['firstname','lastname']).size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3[['firstname', 'lastname']]", false], ["t1 = pd.merge(list, teachers, on='classroom')\nt2 = t1.groupby(['firstname', 'lastname']).size().rename('count')\nanswer = t2.sort_values(ascending=False).head(1).to_frame().reset_index()[['firstname', 'lastname']]", false]]}
{"example": {"db_id": "program_share", "query": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'", "query_toks": ["SELECT", "t1.name", "FROM", "channel", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.channel_id", "=", "t2.channel_id", "WHERE", "t2.time_of_day", "=", "'Morning", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "channel", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "channel_id", "=", "t2", ".", "channel_id", "where", "t2", ".", "time_of_day", "=", "value"], "question": "Which channels are broadcast in the morning? Give me the channel names.", "question_toks": ["Which", "channels", "are", "broadcast", "in", "the", "morning", "?", "Give", "me", "the", "channel", "names", "."], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], "\"Morning\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"program": ["Program_ID", "Name", "Origin", "Launch", "Owner"], "channel": ["Channel_ID", "Name", "Owner", "Share_in_percent", "Rating_in_percent"], "broadcast": ["Channel_ID", "Program_ID", "Time_of_day"], "broadcast_share": ["Channel_ID", "Program_ID", "Date", "Share_in_percent"]}, "answer": [["CCTV-1"], ["CCTV-8"], ["CCTV-3"], ["CCTV-6"]]}, "program_result_list": [["t1 = pd.merge(broadcast, channel, on=['channel_id'])\nt2 = t1[t1['time_of_day'] == 'morning']\nanswer = t2['name'].unique()", false], ["t1 = pd.merge(channel, broadcast, left_on='channel_id', right_on='channel_id')\nt2 = t1[t1['time_of_day'] == 'morning']\nanswer = t2['name']", false], ["t1 = pd.merge(channel, broadcast, on='channel_id')\nt2 = t1[t1['time_of_day'] == 'morning']\nanswer = t2['name'].unique()", false], ["t1 = pd.merge(channel, broadcast, left_on='channel_id', right_on='channel_id')\nt2 = t1[t1['time_of_day'] == 'morning']\nanswer = t2['name']", false], ["t1 = pd.merge(channel, broadcast, left_on='channel_id', right_on='channel_id')\nt2 = t1[t1['time_of_day'] == 'morning']\nanswer = t2['name'].unique()", false], ["t1 = pd.merge(channel, broadcast, left_on='channel_id', right_on='channel_id')\nt2 = t1[t1['time_of_day'] == 'morning']\nanswer = t2['name']", false], ["t1 = pd.merge(channel, broadcast, left_on='channel_id', right_on='channel_id')\nt2 = t1[t1['time_of_day'] == 'morning']\nanswer = t2['name'].unique()", false], ["t1 = pd.merge(channel, broadcast, left_on='channel_id', right_on='channel_id')\nt2 = t1[t1['time_of_day'] == 'morning']\nanswer = t2['name']", false], ["t1 = pd.merge(broadcast, channel, on='channel_id')\nt2 = t1[t1['time_of_day'] == 'morning']\nanswer = t2['name'].unique()", false], ["t1 = pd.merge(channel, broadcast, left_on='channel_id', right_on='channel_id')\nt2 = t1[t1['time_of_day'] == 'morning']\nanswer = t2['name']", false], ["t1 = pd.merge(channel, broadcast, left_on='channel_id', right_on='channel_id')\nt2 = t1[t1['time_of_day'] == 'morning']\nanswer = t2['name']", false], ["t1 = pd.merge(channel, broadcast, left_on='channel_id', right_on='channel_id')\nt2 = t1[t1['time_of_day'] == 'morning']\nanswer = t2['name']", false], ["t1 = pd.merge(channel, broadcast, left_on='channel_id', right_on='channel_id')\nt2 = t1[t1['time_of_day'] == 'morning']\nanswer = t2['name']", false], ["t1 = pd.merge(channel, broadcast, on='channel_id')\nt2 = t1[t1['time_of_day'] == 'morning']\nanswer = t2['name'].unique()", false], ["t1 = pd.merge(channel, broadcast, left_on='channel_id', right_on='channel_id')\nt2 = t1[t1['time_of_day'] == 'morning']\nanswer = t2['name'].unique()", false], ["t1 = pd.merge(channel, broadcast, left_on='channel_id', right_on='channel_id')\nt2 = t1[t1['time_of_day'] == 'morning']\nanswer = t2['name']", false], ["t1 = pd.merge(channel, broadcast, left_on='channel_id', right_on='channel_id')\nt2 = t1[t1['time_of_day'] == 'morning']\nanswer = t2['name'].unique()", false], ["t1 = pd.merge(channel, broadcast, on='channel_id')\nt2 = t1[t1['time_of_day'] == 'morning']\nanswer = t2['name'].unique()", false], ["t1 = pd.merge(channel, broadcast, left_on='channel_id', right_on='channel_id')\nt2 = t1[t1['time_of_day'] == 'morning']\nanswer = t2['name'].unique()", false], ["t1 = pd.merge(channel, broadcast, left_on='channel_id', right_on='channel_id')\nt2 = t1[t1['time_of_day'] == 'morning']\nanswer = t2['name']", false]]}
{"example": {"db_id": "allergy_1", "query": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"", "query_toks": ["SELECT", "DISTINCT", "T1.fname", ",", "T1.city_code", "FROM", "Student", "AS", "T1", "JOIN", "Has_Allergy", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "WHERE", "T2.Allergy", "=", "``", "Milk", "''", "OR", "T2.Allergy", "=", "``", "Cat", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "fname", ",", "t1", ".", "city_code", "from", "student", "as", "t1", "join", "has_allergy", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "where", "t2", ".", "allergy", "=", "value", "or", "t2", ".", "allergy", "=", "value"], "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?", "question_toks": ["What", "are", "the", "distinct", "first", "names", "and", "cities", "of", "the", "students", "who", "have", "allergy", "either", "to", "milk", "or", "to", "cat", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 3, false], null]]}, "select": [true, [[0, [0, [0, 7, false], null]], [0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"Milk\"", null], "or", [false, 2, [0, [0, 4, false], null], "\"Cat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Allergy_Type": ["Allergy", "AllergyType"], "Has_Allergy": ["StuID", "Allergy"], "Student": ["StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code"]}, "answer": [["Linda", "BAL"], ["Lisa", "PIT"], ["Derek", "HOU"], ["Mark", "DET"], ["David", "NYC"]]}, "program_result_list": [["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nanswer = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')][['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[ (t1['allergy'] == 'milk') | (t1['allergy'] == 'cat') ]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[(t1['allergy'] == 'cat') | (t1['allergy'] == 'milk')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Has_Allergy, Student, left_on='stuid', right_on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nanswer = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')][['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false]]}
{"example": {"db_id": "music_1", "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"", "query_toks": ["SELECT", "T2.song_name", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "WHERE", "T1.duration", "LIKE", "``", "4", ":", "%", "''", "UNION", "SELECT", "song_name", "FROM", "song", "WHERE", "languages", "=", "``", "english", "''"], "query_toks_no_value": ["select", "t2", ".", "song_name", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "where", "t1", ".", "duration", "like", "value", "union", "select", "song_name", "from", "song", "where", "languages", "=", "value"], "question": "What are the names of all songs that are approximately 4 minutes long or are in English?", "question_toks": ["What", "are", "the", "names", "of", "all", "songs", "that", "are", "approximately", "4", "minutes", "long", "or", "are", "in", "English", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 13, false], null]]]], "where": [[false, 9, [0, [0, 11, false], null], "\"4:%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 13, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], "\"english\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, "db_table_headers": {"genre": ["g_name", "rating", "most_popular_in"], "artist": ["artist_name", "country", "gender", "preferred_genre"], "files": ["f_id", "artist_name", "file_size", "duration", "formats"], "song": ["song_name", "artist_name", "country", "f_id", "genre_is", "rating", "languages", "releasedate", "resolution"]}, "answer": [["Aj ei akash"], ["Ami opar hoye"], ["Just beat it"], ["My love"]]}, "program_result_list": [["t1 = pd.merge(files, song, left_on='f_id', right_on='f_id')\nt2 = t1[t1['duration'].str.contains(\"4:\")]['song_name']\nt3 = song[song['languages'] == 'english']['song_name']\nanswer = t2.append(t3).drop_duplicates()", false], ["t1 = pd.merge(files, song, left_on='f_id', right_on='f_id')\nt2 = t1[t1['duration'].str.contains('4:')]\nt3 = song[song['languages'] == 'English']\nt4 = pd.concat([t2, t3], ignore_index=True)\nanswer = t4.song_name.unique()", false], ["t1 = pd.merge(files, song, left_on='f_id', right_on='f_id')\nt2 = t1[t1['duration'].str.contains('4:')]\nt3 = song[song['languages'] == 'english']\nanswer = t2['song_name'].append(t3['song_name']).drop_duplicates()", false], ["t1 = pd.merge(files, song, left_on='f_id', right_on='f_id')\nt2 = t1[t1['duration'].str.contains('4:')]\nt3 = song[song['languages'] == 'english']\nanswer = pd.concat([t2['song_name'], t3['song_name']]).drop_duplicates()", false], ["t1 = pd.merge(files, song, left_on='f_id', right_on='f_id')\nt2 = t1[t1['duration'].str.contains('4:')]\nanswer = t2[['song_name']].union(song[song['languages'] == 'english']['song_name']).sort_values(by='song_name')", false], ["t1 = pd.merge(files, song, left_on='f_id', right_on='f_id')\nt2 = t1[t1['duration'].str.contains('4:')]\nt3 = t2[['song_name']]\nt4 = song[song['languages'] == 'english']\nt5 = t4[['song_name']]\nanswer = pd.concat([t3, t5])", false], ["t1 = pd.merge(files, song, left_on='f_id', right_on='f_id')\nt2 = t1[t1['duration'].str.contains('4:')]\nt3 = song[song['languages'] == 'english']\nanswer = pd.concat([t2['song_name'], t3['song_name']]).unique()", false], ["t1 = pd.merge(files, song, on='f_id')\nt2 = t1[t1['duration'].str.contains('4:')]\nt3 = song[song['languages'] == 'english']\nanswer = pd.concat([t2['song_name'], t3['song_name']]).drop_duplicates()", false], ["t1 = pd.merge(files, song, on='f_id')\nt2 = t1[t1['duration'].str.contains(\"4:\")]\nt3 = song[song['languages'] == \"english\"]\nanswer = t2[['song_name']].append(t3[['song_name']]).drop_duplicates()", false], ["t1 = pd.merge(files, song, left_on='f_id', right_on='f_id')\nt2 = t1[t1['duration'].str.contains('4:')]\nt3 = song[song['languages'] == 'english']\nanswer = pd.concat([t2['song_name'], t3['song_name']]).unique()", false], ["t1 = pd.merge(files, song, left_on='f_id', right_on='f_id')\nt2 = t1[t1['duration'].str.contains('4:')]\nanswer = pd.concat([t2['song_name'], song[song['languages'] == 'english']['song_name']])", false], ["t1 = pd.merge(files, song, left_on='f_id', right_on='f_id')\nt2 = t1[t1['duration'].str.startswith('4:')]\nt3 = song[song['languages'] == 'english']\nanswer = t2.append(t3).drop_duplicates()['song_name']", false], ["t1 = pd.merge(files, song, left_on='f_id', right_on='f_id')\nt2 = t1[t1['duration'].str.contains(\"4:\")]\nt3 = song[song['languages'] == 'english']\nanswer = t2['song_name'].append(t3['song_name'])", false], ["t1 = pd.merge(files, song, left_on='f_id', right_on='f_id')\nt2 = t1[t1['duration'].str.contains(\"4:\")]\nt3 = song[song['languages'] == \"English\"]\nt4 = pd.merge(t2, t3, how='outer')\nanswer = t4['song_name']", false], ["t1 = pd.merge(files, song, left_on='f_id', right_on='f_id')\nt2 = t1[t1['duration'].str.contains(r'4:')].song_name\nt3 = song[song['languages'] == 'english'].song_name\nanswer = t2.append(t3).unique()", false], ["t1 = pd.merge(files, song, left_on='f_id', right_on='f_id')\nt2 = t1[t1['duration'].str.contains('4:')]\nt3 = song[song['languages'] == 'english']\nanswer = pd.concat([t2['song_name'], t3['song_name']]).drop_duplicates().reset_index(drop=True)", false], ["t1 = pd.merge(files, song, left_on='f_id', right_on='f_id')\nt2 = t1[t1['duration'].str.contains('4:')]['song_name']\nt3 = song[song['languages'] == 'english']['song_name']\nanswer = pd.concat([t2, t3])", false], ["t1 = pd.merge(files, song, left_on='f_id', right_on='f_id')\nt2 = t1[t1['duration'].str.contains('4:')]\nanswer = t2['song_name'].append(song[song['languages'] == 'english']['song_name']).unique()", false], ["t1 = pd.merge(files, song, on='f_id')\nt2 = t1[t1['duration'].str.contains('4:')]\nt3 = song[song['languages'] == 'english']\nanswer = pd.concat([t2['song_name'], t3['song_name']]).drop_duplicates()", false], ["t1 = pd.merge(files, song, left_on='f_id', right_on='f_id')\nt2 = t1[t1['duration'].str.contains('4:')]\nt3 = song[song['languages'] == 'English']\nanswer = pd.concat([t2['song_name'], t3['song_name']]).drop_duplicates()", false]]}
{"example": {"db_id": "csu_1", "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus", "query_toks": ["SELECT", "T1.campus", ",", "sum", "(", "T2.degrees", ")", "FROM", "campuses", "AS", "T1", "JOIN", "degrees", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", ">", "=", "1998", "AND", "T2.year", "<", "=", "2002", "GROUP", "BY", "T1.campus"], "query_toks_no_value": ["select", "t1", ".", "campus", ",", "sum", "(", "t2", ".", "degrees", ")", "from", "campuses", "as", "t1", "join", "degrees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", ">", "=", "value", "and", "t2", ".", "year", "<", "=", "value", "group", "by", "t1", ".", "campus"], "question": "report the total number of degrees granted between 1998 and 2002.", "question_toks": ["report", "the", "total", "number", "of", "degrees", "granted", "between", "1998", "and", "2002", "."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [4, [0, [0, 11, false], null]]]], "where": [[false, 5, [0, [0, 9, false], null], 1998.0, null], "and", [false, 6, [0, [0, 9, false], null], 2002.0, null]], "groupBy": [[0, 2, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Campuses": ["Id", "Campus", "Location", "County", "Year"], "csu_fees": ["Campus", "Year", "CampusFee"], "degrees": ["Year", "Campus", "Degrees"], "discipline_enrollments": ["Campus", "Discipline", "Year", "Undergraduate", "Graduate"], "enrollments": ["Campus", "Year", "TotalEnrollment_AY", "FTE_AY"], "faculty": ["Campus", "Year", "Faculty"]}, "answer": [["California  Maritime Academy", 405], ["California Polytechnic State University-San Luis Obispo", 16402], ["California State Polytechnic University-Pomona", 13493], ["California State University-Bakersfield", 4967], ["California State University-Channel Islands", 2], ["California State University-Chico", 13762], ["California State University-Dominguez Hills", 8681], ["California State University-East Bay", 11622], ["California State University-Fullerton", 23457], ["California State University-Los Angeles", 13032], ["California State University-Monterey Bay", 1626], ["California State University-Northridge", 22141], ["California State University-Sacramento", 20155], ["California State University-San Bernardino", 10959], ["California State University-San Marcos", 5275], ["California State University-Stanislaus", 6181], ["Fresno State University", 14060], ["Humboldt State University", 6963], ["Long Beach State University", 22502], ["San Diego State University", 26418], ["San Francisco State University", 21323], ["San Jose State University", 19945], ["Sonoma State University", 7204]]}, "program_result_list": [["t1 = pd.merge(Campuses, degrees, left_on='id', right_on='campus', how='left')\nt2 = t1[(t1['year_x'] >= 1998) & (t1['year_x'] <= 2002)]\nt3 = t2.groupby('campus_x').sum()\nanswer = t3['degrees'].to_frame().reset_index()", false], ["t1 = pd.merge(Campuses, degrees, left_on='id', right_on='campus')\nt2 = t1[(t1['year_x'] >= 1998) & (t1['year_x'] <= 2002)]\nanswer = t2.groupby('campus_x').sum()", false], ["t1 = pd.merge(Campuses, degrees, on='id')\nt2 = t1[(t1['year_x'] >= 1998) & (t1['year_x'] <= 2002)]\nanswer = t2.groupby('campus_x')['degrees'].sum().to_frame().reset_index()", false], ["t1 = pd.merge(Campuses, degrees, left_on='id', right_on='campus')\nt2 = t1[(t1['year_x'] >= 1998) & (t1['year_x'] <= 2002)]\nt3 = t2.groupby('campus_x').sum()\nanswer = t3['degrees']", false], ["t1 = pd.merge(Campuses, degrees, left_on='id', right_on='campus')\nt2 = t1[(t1['year_x'] >= 1998) & (t1['year_x'] <= 2002)]\nanswer = t2.groupby('campus_x').sum()['degrees']", false], ["t1 = pd.merge(Campuses, degrees, left_on='id', right_on='campus')\nanswer = t1[(t1['year_x'] >= 1998) & (t1['year_x'] <= 2002)].groupby('campus_x').sum().drop(columns=['id', 'year_x'])", false], ["t1 = pd.merge(Campuses, degrees, left_on='id', right_on='campus')\nt2 = t1[(t1['year_x'] >= 1998) & (t1['year_x'] <= 2002)]\nt3 = t2.groupby('campus_x').sum()\nanswer = t3['degrees']", false], ["t1 = pd.merge(Campuses, degrees, left_on='id', right_on='campus')\nt2 = t1[(t1['year_x'] >= 1998) & (t1['year_x'] <= 2002)]\nt3 = t2.groupby('campus_x').sum()\nanswer = t3['degrees']", false], ["t1 = pd.merge(Campuses, degrees, left_on='id', right_on='campus')\nt1 = t1[(t1['year_x'] >= 1998) & (t1['year_x'] <= 2002)]\nt2 = t1.groupby('campus_x').sum().reset_index()\nanswer = t2[['campus_x', 'degrees']]", false], ["t1 = pd.merge(Campuses, degrees, left_on='id', right_on='campus')\nt2 = t1[t1['year'] >= 1998]\nt3 = t2[t2['year'] <= 2002]\nt4 = t3.groupby('campus').sum()\nanswer = t4[['degrees']]", false], ["t1 = pd.merge(Campuses, degrees, left_on='id', right_on='campus')\nt2 = t1[(t1['year_x'] >= 1998) & (t1['year_x'] <= 2002)]\nt3 = t2.groupby('campus_x').sum()\nanswer = t3.reset_index()[['campus_x', 'degrees']]", false], ["t1 = pd.merge(Campuses, degrees, left_on='id', right_on='campus')\nt2 = t1[(t1['year_x'] >= 1998) & (t1['year_x'] <= 2002)]\nt3 = t2.groupby('campus_x')['degrees'].sum().to_frame().reset_index()\nanswer = t3[['campus_x', 'degrees']]", false], ["t1 = pd.merge(Campuses, degrees, on='campus')\nt2 = t1[(t1['year_y'] >= 1998) & (t1['year_y'] <= 2002)]\nt3 = t2.groupby('campus_id').sum()\nt4 = t3.rename(columns={'degrees':'sum_degrees'}).reset_index()\nanswer = t4[['campus_id', 'sum_degrees']]", false], ["t1 = pd.merge(Campuses, degrees, left_on='id', right_on='campus')\nt2 = t1[(t1['year_x'] >= 1998) & (t1['year_x'] <= 2002)].groupby('campus_x').sum()\nanswer = t2.rename(columns={'degrees': 'total_degrees'})", false], ["t1 = pd.merge(Campuses, degrees, left_on='id', right_on='campus')\nt2 = t1[(t1['year'] >= 1998) & (t1['year'] <= 2002)]\nt3 = t2.groupby('campus').sum()\nanswer = t3['degrees']", false], ["t1 = pd.merge(Campuses, degrees, left_on='id', right_on='campus')\nt2 = t1[(t1['year_x'] >= 1998) & (t1['year_x'] <= 2002)]\nt3 = t2.groupby('campus_x').sum()['degrees']\nanswer = t3", false], ["t1 = pd.merge(Campuses, degrees, left_on='id', right_on='campus')\nt2 = t1[(t1['year_x'] >= 1998) & (t1['year_x'] <= 2002)]\nt3 = t2.groupby('campus_x').sum()['degrees']\nanswer = t3.to_frame().reset_index()", false], ["t1 = pd.merge(Campuses, degrees, left_on='id', right_on='campus')\nt2 = t1[(t1['year_x'] >= 1998) & (t1['year_x'] <= 2002)]\nt3 = t2.groupby('campus_x').sum().reset_index()\nanswer = t3[['campus_x', 'degrees']]", false], ["t1 = pd.merge(Campuses, degrees, left_on='id', right_on='campus')\nanswer = t1[(t1['year'] >= 1998) & (t1['year'] <= 2002)].groupby('campus').sum()['degrees']", false], ["t1 = pd.merge(Campuses, degrees, left_on='id', right_on='campus')\nt2 = t1[(t1['year_x'] >= 1998) & (t1['year_x'] <= 2002)]\nt3 = t2.groupby('campus_x').sum()\nanswer = t3['degrees']", false]]}
{"example": {"db_id": "game_1", "query": "SELECT T2.Fname ,  T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.Fname", ",", "T2.Lname", "FROM", "Sportsinfo", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.StuID", "=", "T2.StuID", "GROUP", "BY", "T1.StuID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "fname", ",", "t2", ".", "lname", "from", "sportsinfo", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "group", "by", "t1", ".", "stuid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the first name and last name of the student who have most number of sports?", "question_toks": ["What", "is", "the", "first", "name", "and", "last", "name", "of", "the", "student", "who", "have", "most", "number", "of", "sports", "?"], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Student": ["StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code"], "Video_Games": ["GameID", "GName", "GType"], "Plays_Games": ["StuID", "GameID", "Hours_Played"], "SportsInfo": ["StuID", "SportName", "HoursPerWeek", "GamesPlayed", "OnScholarship"]}, "answer": [["David", "Shieber"]]}, "program_result_list": [["t1 = pd.merge(SportsInfo, Student, left_on='stuid', right_on='stuid')\nt2 = t1.groupby('stuid').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nt4 = pd.merge(t3, Student, left_on='stuid', right_on='stuid')\nanswer = t4[['fname', 'lname']]", false], ["t1 = pd.merge(SportsInfo, Student, left_on='stuid', right_on='stuid')\nt2 = t1.groupby('stuid').size().rename('count').to_frame().reset_index()\nanswer = t2.sort_values('count', ascending=False).head(1)[['fname', 'lname']]", false], ["t1 = pd.merge(SportsInfo, Student, left_on='stuid', right_on='stuid')\nanswer = t1.groupby(['fname', 'lname']).size().rename('count').sort_values(ascending=False).head(1).to_frame().reset_index()", false], ["t1 = pd.merge(SportsInfo, Student, left_on='stuid', right_on='stuid')\nt2 = t1.groupby('stuid').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nt4 = pd.merge(t3, Student, left_on='stuid', right_on='stuid')\nanswer = t4[['fname', 'lname']]", false], ["t1 = pd.merge(SportsInfo, Student, left_on='stuid', right_on='stuid')\nt2 = t1.groupby(['stuid'])['sportname'].agg('count').rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3['stuid']", false], ["t1 = pd.merge(SportsInfo, Student, left_on='stuid', right_on='stuid')\nt2 = t1.groupby(['fname', 'lname']).size().rename('count')\nanswer = t2.sort_values(ascending=False).head(1).to_frame().reset_index()", false], ["t1 = pd.merge(SportsInfo, Student, left_on='stuid', right_on='stuid')\nt2 = t1.groupby('stuid').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nt4 = pd.merge(t3, t1, left_on='stuid', right_on='stuid')\nanswer = t4[['fname', 'lname']]", false], ["t1 = pd.merge(SportsInfo, Student, left_on='stuid', right_on='stuid')\nt2 = t1.groupby(['stuid', 'fname', 'lname']).size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3[['fname', 'lname']]", false], ["t1 = pd.merge(SportsInfo, Student, left_on='stuid', right_on='stuid')\nt2 = t1.groupby(['fname', 'lname']).size().rename('count')\nanswer = t2.sort_values(ascending=False).head(1).to_frame().reset_index()", false], ["t1 = pd.merge(SportsInfo, Student, on='stuid')\nt2 = t1.groupby('stuid').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nt4 = pd.merge(t3, Student, left_on='stuid', right_on='stuid')\nanswer = t4[['fname', 'lname']]", false], ["t1 = pd.merge(SportsInfo, Student, left_on='stuid', right_on='stuid')\nt2 = t1.groupby('stuid').size().rename('count').to_frame().reset_index()\nt3 = t2.sort_values(by='count', ascending=False).head(1)\nanswer = pd.merge(t3, Student, left_on='stuid', right_on='stuid')[['fname', 'lname']]", false], ["t1 = pd.merge(SportsInfo, Student, left_on='stuid', right_on='stuid')\nt2 = t1.groupby('stuid').size().rename('count').to_frame().reset_index()\nt3 = pd.merge(t2, Student, left_on='stuid', right_on='stuid')\nanswer = t3[['fname', 'lname']].head(1)", false], ["t1 = pd.merge(SportsInfo, Student, left_on='stuid', right_on='stuid')\nt2 = t1.groupby('stuid').size().rename('count')\nt3 = pd.merge(t2.to_frame(), Student, on='stuid').sort_values(by='count', ascending=False).head(1)\nanswer = t3[['fname', 'lname']]", false], ["t1 = pd.merge(SportsInfo, Student, left_on='stuid', right_on='stuid')\nt2 = t1.groupby('stuid').size().rename('count').sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t2.merge(Student, on='stuid')[['fname', 'lname']]", false], ["t1 = pd.merge(SportsInfo, Student, left_on='stuid', right_on='stuid')\nt2 = t1.groupby('stuid').size().rename('count')\nt3= t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nt4 = pd.merge(t3, Student, left_on='stuid', right_on='stuid')\nanswer = t4[['fname','lname']]", false], ["t1 = pd.merge(SportsInfo, Student, left_on='stuid', right_on='stuid')\nt2 = t1.groupby('stuid').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nt4 = pd.merge(t3, Student, left_on='stuid', right_on='stuid')\nanswer = t4[['fname', 'lname']]", false], ["t1 = pd.merge(SportsInfo, Student, left_on='stuid', right_on='stuid')\nt2 = t1.groupby('stuid').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nt4 = pd.merge(t3, Student, left_on='stuid', right_on='stuid')\nanswer = t4[['fname', 'lname']]", false], ["t1 = pd.merge(SportsInfo, Student, left_on='stuid', right_on='stuid')\nt2 = t1.groupby('stuid').size().rename('count').to_frame().reset_index()\nt3 = t2.sort_values(by=['count'], ascending=False).head(1)\nt4 = pd.merge(t3, Student, on='stuid')\nanswer = t4[['fname', 'lname']]", false], ["t1 = pd.merge(Student, SportsInfo, left_on='stuid', right_on='stuid')\nt2 = t1.groupby('stuid').size().to_frame().reset_index()\nt3 = pd.merge(Student, t2, left_on='stuid', right_on='stuid')\nanswer = t3.sort_values(by=0, ascending=False).head(1)[['lname', 'fname']]", false], ["t1 = pd.merge(SportsInfo, Student, left_on='stuid', right_on='stuid')\nt2 = t1.groupby('stuid').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nt4 = pd.merge(t3, Student, left_on='stuid', right_on='stuid')\nanswer = t4[['fname', 'lname']]", false]]}
{"example": {"db_id": "dorm_1", "query": "SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name", "query_toks": ["SELECT", "avg", "(", "T1.age", ")", ",", "T3.dorm_name", "FROM", "student", "AS", "T1", "JOIN", "lives_in", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "dorm", "AS", "T3", "ON", "T3.dormid", "=", "T2.dormid", "GROUP", "BY", "T3.dorm_name"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "age", ")", ",", "t3", ".", "dorm_name", "from", "student", "as", "t1", "join", "lives_in", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "dorm", "as", "t3", "on", "t3", ".", "dormid", "=", "t2", ".", "dormid", "group", "by", "t3", ".", "dorm_name"], "question": "What is the average age for each dorm and what are the names of each dorm?", "question_toks": ["What", "is", "the", "average", "age", "for", "each", "dorm", "and", "what", "are", "the", "names", "of", "each", "dorm", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 4], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 17, false], null], "and", [false, 2, [0, [0, 9, false], null], [0, 18, false], null]]}, "select": [false, [[5, [0, [0, 4, false], null]], [0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Student": ["StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code"], "Dorm": ["dormid", "dorm_name", "student_capacity", "gender"], "Dorm_amenity": ["amenid", "amenity_name"], "Has_amenity": ["dormid", "amenid"], "Lives_in": ["stuid", "dormid", "room_number"]}, "answer": [[19.666666666666668, "Anonymous Donor Hall"], [20.0, "Bud Jones Hall"], [19.6, "Dorm-plex 2000"], [19.77777777777778, "Fawlty Towers"], [18.0, "Grad Student Asylum"], [20.166666666666668, "Smith Hall"], [18.0, "University Hovels"]]}, "program_result_list": [["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = pd.merge(t1, Dorm, left_on='dormid', right_on='dormid')\nanswer = t2.groupby('dorm_name').agg({'age': 'mean'}).reset_index()", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = pd.merge(t1, Dorm, left_on='dormid', right_on='dormid')\nt3 = t2.groupby('dorm_name').mean().rename(columns={'age':'avg_age'})\nanswer = t3[['avg_age']]", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = pd.merge(t1, Dorm, left_on='dormid', right_on='dormid')\nanswer = t2.groupby('dorm_name')['age'].mean().rename('avg').to_frame().reset_index()", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = pd.merge(t1, Dorm, left_on='dormid', right_on='dormid')\nt3 = t2.groupby('dorm_name').agg({'age': 'mean'}).rename({'age': 'average_age'}, axis=1)\nanswer = t3.reset_index()", false], ["t1 = pd.merge(Student, Lives_in, on='stuid')\nt2 = pd.merge(t1, Dorm, left_on='dormid', right_on='dormid')\nt3 = t2.groupby('dorm_name')['age'].mean().rename('avg_age')\nanswer = t3.to_frame().reset_index()", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = pd.merge(t1, Dorm, left_on='dormid', right_on='dormid')\nt3 = t2.groupby('dorm_name').agg({'age':'mean'})\nanswer = t3.reset_index()", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = pd.merge(t1, Dorm, left_on='dormid', right_on='dormid')\nt3 = t2.groupby('dorm_name').agg({'age':'mean'}).rename(columns={'age':'average_age'}).reset_index()\nanswer = t3", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = pd.merge(t1, Dorm, left_on='dormid', right_on='dormid')\nt3 = t2.groupby('dorm_name').age.mean().rename('avg_age').to_frame().reset_index()\nanswer = t3.sort_values('avg_age', ascending=False)", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = pd.merge(t1, Dorm, left_on='dormid', right_on='dormid')\nt3 = t2.groupby('dorm_name').agg({'age': 'mean'})\nanswer = t3", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = pd.merge(t1, Dorm, left_on='dormid', right_on='dormid')\nt3 = t2.groupby('dorm_name').agg({'age': ['mean']}).reset_index()\nt3.columns = ['_'.join(tup) for tup in t3.columns.tolist()]\nanswer = t3", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = pd.merge(t1, Dorm, left_on='dormid', right_on='dormid')\nt3 = t2.groupby('dorm_name').agg({'age': 'mean'})\nanswer = t3.reset_index()", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = pd.merge(t1, Dorm, left_on='dormid', right_on='dormid')\nt3 = t2.groupby('dorm_name')['age'].mean().rename('avg(t1.age)')\nanswer = t3.to_frame().reset_index()", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = pd.merge(t1, Dorm, left_on='dormid', right_on='dormid')\nt3 = t2.groupby('dorm_name')['age'].mean().rename('avg_age').to_frame().reset_index()\nanswer = t3", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = pd.merge(t1, Dorm, left_on='dormid', right_on='dormid')\nt3 = t2.groupby('dorm_name').agg({'age': np.average}).rename(columns={'age': 'average_age'})\nanswer = t3.reset_index()", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = pd.merge(t1, Dorm, left_on='dormid', right_on='dormid')\nt3 = t2.groupby('dorm_name').mean()\nanswer = t3", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = pd.merge(t1, Dorm, left_on='dormid', right_on='dormid')\nt3 = t2.groupby('dorm_name').agg({'age':'mean'})\nanswer = t3", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = pd.merge(t1, Dorm, left_on='dormid', right_on='dormid')\nt3 = t2.groupby('dorm_name').mean()['age'].rename('average_age').to_frame().reset_index()\nanswer = t3", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = pd.merge(t1, Dorm, left_on='dormid', right_on='dormid')\nt3 = t2.groupby('dorm_name').mean().reset_index()\nanswer = t3[['dorm_name', 'age']]", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = pd.merge(t1, Dorm, left_on='dormid', right_on='dormid')\nt3 = t2.groupby(['dorm_name'])['age'].agg('mean').rename('avg(age)')\nanswer = t3.to_frame().reset_index()", false], ["t1 = pd.merge(Student, Lives_in, left_on='stuid', right_on='stuid')\nt2 = pd.merge(t1, Dorm, left_on='dormid', right_on='dormid')\nt3 = t2.groupby('dorm_name').agg({'age': 'mean'}).reset_index()\nanswer = t3", false]]}
{"example": {"db_id": "soccer_1", "query": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85", "query_toks": ["SELECT", "player_api_id", "FROM", "Player", "WHERE", "height", ">", "=", "180", "INTERSECT", "SELECT", "player_api_id", "FROM", "Player_Attributes", "WHERE", "overall_rating", ">", "85"], "query_toks_no_value": ["select", "player_api_id", "from", "player", "where", "height", ">", "=", "value", "intersect", "select", "player_api_id", "from", "player_attributes", "where", "overall_rating", ">", "value"], "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.", "question_toks": ["List", "all", "of", "the", "player", "ids", "with", "a", "height", "of", "at", "least", "180cm", "and", "an", "overall", "rating", "higher", "than", "85", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 46, false], null]]]], "where": [[false, 5, [0, [0, 50, false], null], 180.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 3, [0, [0, 5, false], null], 85.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "db_table_headers": {"Player_Attributes": ["id", "player_fifa_api_id", "player_api_id", "date", "overall_rating", "potential", "preferred_foot", "attacking_work_rate", "defensive_work_rate", "crossing", "finishing", "heading_accuracy", "short_passing", "volleys", "dribbling", "curve", "free_kick_accuracy", "long_passing", "ball_control", "acceleration", "sprint_speed", "agility", "reactions", "balance", "shot_power", "jumping", "stamina", "strength", "long_shots", "aggression", "interceptions", "positioning", "vision", "penalties", "marking", "standing_tackle", "sliding_tackle", "gk_diving", "gk_handling", "gk_kicking", "gk_positioning", "gk_reflexes"], "sqlite_sequence": ["name", "seq"], "Player": ["id", "player_api_id", "player_name", "player_fifa_api_id", "birthday", "height", "weight"], "League": ["id", "country_id", "name"], "Country": ["id", "name"], "Team": ["id", "team_api_id", "team_fifa_api_id", "team_long_name", "team_short_name"], "Team_Attributes": ["id", "team_fifa_api_id", "team_api_id", "date", "buildUpPlaySpeed", "buildUpPlaySpeedClass", "buildUpPlayDribbling", "buildUpPlayDribblingClass", "buildUpPlayPassing", "buildUpPlayPassingClass", "buildUpPlayPositioningClass", "chanceCreationPassing", "chanceCreationPassingClass", "chanceCreationCrossing", "chanceCreationCrossingClass", "chanceCreationShooting", "chanceCreationShootingClass", "chanceCreationPositioningClass", "defencePressure", "defencePressureClass", "defenceAggression", "defenceAggressionClass", "defenceTeamWidth", "defenceTeamWidthClass", "defenceDefenderLineClass"]}, "answer": [[19243], [24503], [25759], [26098], [26166], [26173], [26295], [26564], [27299], [27301], [27326], [27424], [27430], [30549], [30592], [30612], [30617], [30618], [30620], [30622], [30626], [30627], [30631], [30638], [30648], [30649], [30657], [30679], [30682], [30690], [30696], [30699], [30706], [30709], [30714], [30716], [30717], [30720], [30723], [30726], [30728], [30740], [30743], [30822], [30834], [30843], [30853], [30859], [30865], [30872], [30889], [30893], [30911], [30931], [30960], [30962], [30989], [31921], [31996], [32118], [32867], [33074], [33085], [33761], [34106], [34305], [34534], [34602], [34947], [35561], [35606], [35724], [36183], [36378], [36388], [36615], [37259], [37482], [38460], [39027], [39774], [39989], [40636], [41044], [41884], [46509], [49677], [49939], [56678], [80562], [93447], [95078], [116772], [129944], [154257], [164684], [169200], [170323], [182917], [248453]]}, "program_result_list": [["t1 = Player[Player['height'] >= 180]['player_api_id']\nt2 = Player_Attributes[Player_Attributes['overall_rating'] > 85]['player_api_id']\nanswer = t1.merge(t2, how='inner')", false], ["t1 = Player[Player['height'] >= 180]['player_api_id']\nt2 = Player_Attributes[Player_Attributes['overall_rating'] > 85]['player_api_id']\nanswer = t1.intersection(t2)", false], ["t1 = Player[Player['height'] >= 180]\nt2 = Player_Attributes[Player_Attributes['overall_rating'] > 85]\nanswer = t1[t1['player_api_id'].isin(t2['player_api_id'])]", false], ["t1 = Player[Player['height'] >= 180]\nt2 = Player_Attributes[Player_Attributes['overall_rating'] > 85]\nanswer = t1.merge(t2, how='inner')['player_api_id']", false], ["t1 = Player[Player['height'] >= 180]['player_api_id']\nt2 = Player_Attributes[Player_Attributes['overall_rating'] > 85]['player_api_id']\nanswer = t1.merge(t2, how='inner')", false], ["t1 = Player[Player['height'] >= 180]['player_api_id']\nt2 = Player_Attributes[Player_Attributes['overall_rating'] > 85]['player_api_id']\nanswer = pd.merge(t1, t2, on='player_api_id')", false], ["t1 = Player[Player['height'] >= 180]\nt2 = Player_Attributes[Player_Attributes['overall_rating'] > 85]\nt3 = pd.merge(t1, t2, on='player_api_id')\nanswer = t3['player_api_id'].unique()", false], ["t1 = Player[Player['height'] >= 180]\nt2 = Player_Attributes[Player_Attributes['overall_rating'] > 85]\nt3 = t1.merge(t2, on='player_api_id')\nanswer = t3['player_api_id']", false], ["t1 = Player[Player['height'] >= 180]\nt2 = Player_Attributes[Player_Attributes['overall_rating'] > 85]\nanswer = t1[t1['player_api_id'].isin(t2['player_api_id'])]['player_api_id']", false], ["t1 = Player[Player['height'] >= 180]\nt2 = Player_Attributes[Player_Attributes['overall_rating'] > 85]\nanswer = pd.merge(t1, t2, on='player_api_id', how='inner')['player_api_id']", false], ["t1 = Player[Player['height'] >= 180]['player_api_id']\nt2 = Player_Attributes[Player_Attributes['overall_rating'] > 85]['player_api_id']\nanswer = t1.merge(t2, on='player_api_id', how='inner')", false], ["t1 = Player[Player['height'] >= 180]\nt2 = Player_Attributes[Player_Attributes['overall_rating'] > 85]\nanswer = t1.merge(t2, left_on='player_api_id', right_on='player_api_id')[['player_api_id']]", false], ["t1 = Player[Player['height'] >= 180]\nt2 = Player_Attributes[Player_Attributes['overall_rating'] > 85]\nt3 = pd.merge(t1, t2, left_on='player_api_id', right_on='player_api_id')\nanswer = t3['player_api_id']", false], ["t1 = Player[Player['height'] >= 180][['player_api_id']]\nt2 = Player_Attributes[Player_Attributes['overall_rating'] > 85][['player_api_id']]\nanswer = t1[t1['player_api_id'].isin(t2['player_api_id'])]", false], ["t1 = Player[Player['height'] >= 180]\nt2 = Player_Attributes[Player_Attributes['overall_rating'] > 85]\nanswer = pd.merge(t1, t2, on='player_api_id')['player_api_id'].to_frame().drop_duplicates()", false], ["t1 = Player[Player['height'] > 180]\nt2 = Player_Attributes[Player_Attributes['overall_rating'] > 85]\nanswer = t1.merge(t2, left_on='player_api_id', right_on='player_api_id')['player_api_id']", false], ["t1 = Player[Player['height'] >= 180]\nt2 = Player_Attributes[Player_Attributes['overall_rating'] > 85]\nanswer = pd.merge(t1, t2, on='player_api_id')['player_api_id']", false], ["height_over_180 = Player[Player['height'] >= 180]['player_api_id']\noverall_rating_over_85 = Player_Attributes[Player_Attributes['overall_rating'] > 85]['player_api_id']\nanswer = height_over_180.intersection(overall_rating_over_85)", false], ["t1 = Player[Player['height'] >= 180]['player_api_id']\nt2 = Player_Attributes[Player_Attributes['overall_rating'] > 85]['player_api_id']\nt3 = pd.merge(t1, t2, on='player_api_id', how='inner')\nanswer = t3['player_api_id']", false], ["t1 = Player[Player['height'] >= 180][['player_api_id']]\nt2 = Player_Attributes[Player_Attributes['overall_rating'] > 85][['player_api_id']]\nanswer = pd.merge(t1, t2, on='player_api_id', how='inner')", false]]}
{"example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "project_id", "FROM", "Documents", "WHERE", "document_type_code", "=", "``", "BK", "''", "GROUP", "BY", "project_id"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "project_id", "from", "documents", "where", "document_type_code", "=", "value", "group", "by", "project_id"], "question": "How many documents are with document type code BK for each product id?", "question_toks": ["How", "many", "documents", "are", "with", "document", "type", "code", "BK", "for", "each", "product", "id", "?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 10, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"BK\"", null]], "groupBy": [[0, 10, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Ref_Document_Types": ["Document_Type_Code", "Document_Type_Name", "Document_Type_Description"], "Ref_Budget_Codes": ["Budget_Type_Code", "Budget_Type_Description"], "Projects": ["Project_ID", "Project_Details"], "Documents": ["Document_ID", "Document_Type_Code", "Project_ID", "Document_Date", "Document_Name", "Document_Description", "Other_Details"], "Statements": ["Statement_ID", "Statement_Details"], "Documents_with_Expenses": ["Document_ID", "Budget_Type_Code", "Document_Details"], "Accounts": ["Account_ID", "Statement_ID", "Account_Details"]}, "answer": [[2, 30], [1, 35], [3, 105]]}, "program_result_list": [["t1 = Documents[Documents['document_type_code'] == 'bk']\nt2 = t1.groupby('project_id').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = Documents[Documents['document_type_code'] == 'BK']\nt2 = t1.groupby('project_id').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = Documents[Documents['document_type_code'] == 'BK'].groupby('project_id').size().rename('count')\nanswer = t1.to_frame().reset_index()", false], ["t1 = Documents[Documents['document_type_code'] == 'BK']\nt2 = t1.groupby('project_id').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = Documents[Documents['document_type_code'] == 'BK'].groupby('project_id').size().rename('count').to_frame().reset_index()\nanswer = t1", false], ["t1 = Documents[Documents['document_type_code'] == 'BK']\nt2 = t1.groupby('project_id').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = Documents[Documents['document_type_code'] == 'BK']\nt2 = t1.groupby('project_id').size().rename('count').to_frame().reset_index()\nanswer = t2", false], ["t1 = Documents[Documents['document_type_code'] == 'BK']\nanswer = t1.groupby('project_id').size().rename('count').to_frame().reset_index()", false], ["t1 = Documents[Documents['document_type_code'] == 'BK']\nt2 = t1.groupby('project_id').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = Documents.groupby(['project_id']).size().rename('count')\nt2 = t1.to_frame().reset_index()\nanswer = t2", false], ["t1 = Documents[Documents['document_type_code'] == 'BK']\nt2 = t1.groupby('project_id').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = Documents[Documents['document_type_code'] == 'BK']\nt2 = t1.groupby('project_id').size().rename('count').to_frame().reset_index()\nanswer = t2", false], ["t1 = Documents[Documents['document_type_code'] == 'BK']\nt2 = t1.groupby('project_id').size().rename('count').to_frame().reset_index()\nanswer = t2", false], ["t1 = Documents[Documents['document_type_code'] == 'BK']\nt2 = t1.groupby('project_id').size().rename('count').to_frame().reset_index()\nanswer = t2", false], ["t1 = Documents[Documents['document_type_code'] == 'bk']\nanswer = t1.groupby('project_id').size().rename('count').to_frame().reset_index()", false], ["t1 = Documents[Documents['document_type_code'] == 'BK']\nt2 = t1.groupby('project_id').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Documents, Ref_Document_Types, left_on='document_type_code', right_on='document_type_code')\nt2 = t1[t1['document_type_code'] == 'BK']\nanswer = t2.groupby('project_id').size().rename('count').to_frame().reset_index()", false], ["t1 = Documents[Documents['document_type_code'] == 'BK']\nanswer = t1.groupby('project_id').size().rename('count').to_frame().reset_index()", false], ["t1 = Documents[Documents['document_type_code'] == 'BK']\nanswer = t1.groupby('project_id').size().rename('count').to_frame().reset_index()", false], ["t1 = Documents[Documents['document_type_code'] == 'BK']\nt2 = t1.groupby('project_id').size().rename('count')\nanswer = t2.to_frame().reset_index()", false]]}
{"example": {"db_id": "customers_and_addresses", "query": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels", "query_toks": ["SELECT", "avg", "(", "active_to_date", "-", "active_from_date", ")", "FROM", "customer_contact_channels"], "query_toks_no_value": ["select", "avg", "(", "active_to_date", "-", "active_from_date", ")", "from", "customer_contact_channels"], "question": "What is the average time span of contact channels in the database?", "question_toks": ["What", "is", "the", "average", "time", "span", "of", "contact", "channels", "in", "the", "database", "?"], "sql": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[5, [1, [0, 23, false], [0, 22, false]]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "address_content", "city", "zip_postcode", "state_province_county", "country", "other_address_details"], "Products": ["product_id", "product_details"], "Customers": ["customer_id", "payment_method", "customer_name", "date_became_customer", "other_customer_details"], "Customer_Addresses": ["customer_id", "address_id", "date_address_from", "address_type", "date_address_to"], "Customer_Contact_Channels": ["customer_id", "channel_code", "active_from_date", "active_to_date", "contact_number"], "Customer_Orders": ["order_id", "customer_id", "order_status", "order_date", "order_details"], "Order_Items": ["order_id", "product_id", "order_quantity"]}, "answer": [[0.85]]}, "program_result_list": [["t1 = Customer_Contact_Channels.copy()\nt1['active_to_date'] = pd.to_datetime(t1['active_to_date'])\nt1['active_from_date'] = pd.to_datetime(t1['active_from_date'])\nanswer = (t1['active_to_date'] - t1['active_from_date']).mean()", false], ["t1 = Customer_Contact_Channels['active_to_date'] - Customer_Contact_Channels['active_from_date']\nanswer = t1.mean()", false], ["t1 = Customer_Contact_Channels['active_to_date'] - Customer_Contact_Channels['active_from_date']\nanswer = t1.mean()", false], ["t1 = Customer_Contact_Channels.copy()\nt1['active_to_date'] = pd.to_datetime(t1['active_to_date'])\nt1['active_from_date'] = pd.to_datetime(t1['active_from_date'])\nt1['time_span'] = t1['active_to_date'] - t1['active_from_date']\nanswer = t1['time_span'].mean()", false], ["answer = Customer_Contact_Channels['active_to_date'] - Customer_Contact_Channels['active_from_date']\nanswer = answer.mean()", false], ["t1 = Customer_Contact_Channels.assign(time_span=Customer_Contact_Channels['active_to_date'] - Customer_Contact_Channels['active_from_date'])\nanswer = t1['time_span'].mean()", false], ["answer = Customer_Contact_Channels['active_to_date'] - Customer_Contact_Channels['active_from_date']", false], ["answer = Customer_Contact_Channels['active_to_date'] - Customer_Contact_Channels['active_from_date']", false], ["t1 = Customer_Contact_Channels['active_to_date'] - Customer_Contact_Channels['active_from_date']\nanswer = t1.mean()", false], ["t1 = Customer_Contact_Channels.copy()\nt1['active_to_date'] = pd.to_datetime(t1['active_to_date'])\nt1['active_from_date'] = pd.to_datetime(t1['active_from_date'])\nt2 = t1['active_to_date'] - t1['active_from_date']\nanswer = t2.mean()", false], ["t1 = Customer_Contact_Channels.copy()\nt1['diff'] = t1['active_to_date'] - t1['active_from_date']\nanswer = t1['diff'].mean()", false], ["t1 = Customer_Contact_Channels.copy()\nt1['date_diff'] = t1['active_to_date'] - t1['active_from_date']\nanswer = t1['date_diff'].mean()", false], ["t1 = Customer_Contact_Channels.copy()\nt1['active_to_date'] = pd.to_datetime(Customer_Contact_Channels['active_to_date'])\nt1['active_from_date'] = pd.to_datetime(Customer_Contact_Channels['active_from_date'])\nt2 = t1['active_to_date'] - t1['active_from_date']\nanswer = t2.mean()", false], ["t1 = Customer_Contact_Channels\nanswer = t1['active_to_date'] - t1['active_from_date']", false], ["answer = Customer_Contact_Channels['active_to_date'] - Customer_Contact_Channels['active_from_date']", false], ["answer = Customer_Contact_Channels['active_to_date'] - Customer_Contact_Channels['active_from_date']\nanswer = answer.mean()", false], ["t1 = Customer_Contact_Channels.copy()\nt1['active_to_date'] = pd.to_datetime(t1['active_to_date'])\nt1['active_from_date'] = pd.to_datetime(t1['active_from_date'])\nt1['time_span'] = t1['active_to_date'] - t1['active_from_date']\nanswer = t1['time_span'].mean()", false], ["t1 = Customer_Contact_Channels['active_to_date'] - Customer_Contact_Channels['active_from_date']\nanswer = t1.mean()", false], ["t1 = Customer_Contact_Channels['active_to_date'] - Customer_Contact_Channels['active_from_date']\nanswer = t1.mean()", false], ["t1 = Customer_Contact_Channels.copy()\nt1['diff'] = t1['active_to_date'] - t1['active_from_date']\nanswer = t1['diff'].mean()", false]]}
{"example": {"db_id": "college_3", "query": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"", "query_toks": ["SELECT", "DName", "FROM", "DEPARTMENT", "WHERE", "Division", "=", "``", "AS", "''", "UNION", "SELECT", "DName", "FROM", "DEPARTMENT", "WHERE", "Division", "=", "``", "EN", "''", "AND", "Building", "=", "``", "NEB", "''"], "query_toks_no_value": ["select", "dname", "from", "department", "where", "division", "=", "value", "union", "select", "dname", "from", "department", "where", "division", "=", "value", "and", "building", "=", "value"], "question": "Find the names of departments that are either in division AS or in division EN and in Building NEB.", "question_toks": ["Find", "the", "names", "of", "departments", "that", "are", "either", "in", "division", "AS", "or", "in", "division", "EN", "and", "in", "Building", "NEB", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 19, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], "\"AS\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 19, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], "\"EN\"", null], "and", [false, 2, [0, [0, 21, false], null], "\"NEB\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, "db_table_headers": {"Student": ["StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code"], "Faculty": ["FacID", "Lname", "Fname", "Rank", "Sex", "Phone", "Room", "Building"], "Department": ["DNO", "Division", "DName", "Room", "Building", "DPhone"], "Member_of": ["FacID", "DNO", "Appt_Type"], "Course": ["CID", "CName", "Credits", "Instructor", "Days", "Hours", "DNO"], "Minor_in": ["StuID", "DNO"], "Enrolled_in": ["StuID", "CID", "Grade"], "Gradeconversion": ["lettergrade", "gradepoint"]}, "answer": [["Anthropology"], ["Biology"], ["Biomedical Engineering"], ["Chemical Engineering"], ["Chemistry"], ["Classics"], ["Cognitive Science"], ["Computer Science"], ["Economics"], ["English"], ["French"], ["German"], ["Hispanic/Italian Studies"], ["History"], ["History of Art"], ["History of Science"], ["Mathematics"], ["Near Eastern Studies"], ["Philosophy"], ["Physics and Astronomy"], ["Political Science"], ["Psychology"]]}, "program_result_list": [["t1 = Department[Department['division'] == 'AS']\nt2 = Department[(Department['division'] == 'EN') & (Department['building'] == 'NEB')]\nanswer = pd.concat([t1, t2]).drop_duplicates(['dname'])['dname']", false], ["t1 = Department[Department['division'] == 'AS']\nt2 = Department[(Department['division'] == 'EN') & (Department['building'] == 'NEB')]\nanswer = pd.concat([t1, t2], axis=0)[['dname']]", false], ["t1 = Department[Department['division'] == 'AS']\nt2 = Department[(Department['division'] == 'EN') & (Department['building'] == 'NEB')]\nanswer = pd.concat([t1, t2])['dname'].unique()", false], ["t1 = Department[Department['division'] == 'AS']\nt2 = Department[Department['division'] == 'EN']\nt3 = Department[Department['building'] == 'NEB']\nt4 = pd.concat([t1, t2, t3])\nt5 = t4.drop_duplicates(subset=['dname'])\nanswer = t5['dname']", false], ["t1 = Department[Department['division'] == 'AS']\nt2 = Department[(Department['division'] == 'EN') & (Department['building'] == 'NEB')]\nanswer = pd.concat([t1, t2])[['dname']]", false], ["t1 = Department[Department['division'] == 'AS']\nt2 = Department[(Department['division'] == 'EN') & (Department['building'] == 'NEB')]\nt3 = pd.concat([t1, t2])\nanswer = t3['dname']", false], ["t1 = Department[Department['division'] == 'AS'].copy()\nt2 = Department[(Department['division'] == 'EN') & (Department['building'] == 'NEB')].copy()\nt3 = pd.concat([t1, t2])\nanswer = t3['dname']", false], ["t1 = Department[Department['division'] == 'AS']\nt2 = Department[(Department['division'] == 'EN') & (Department['building'] == 'NEB')]\nanswer = pd.concat([t1, t2])[['dname']]", false], ["t1 = Department[Department['division'] == 'AS']\nt2 = Department[(Department['division'] == 'EN') & (Department['building'] == 'NEB')]\nanswer = pd.concat([t1, t2])['dname'].drop_duplicates()", false], ["t1 = Department[Department['division'] == 'AS']\nt2 = Department[(Department['division'] == 'EN') & (Department['building'] == 'NEB')]\nanswer = pd.concat([t1, t2])['dname']", false], ["t1 = Department[Department['division'] == 'AS']\nt2 = Department[(Department['division'] == 'EN') & (Department['building'] == 'NEB')]\nanswer = pd.concat([t1, t2], axis=0)['dname'].unique()", false], ["t1 = Department[Department['division'] == 'AS']\nt2 = Department[(Department['division'] == 'EN') & (Department['building'] == 'NEB')]\nanswer = pd.concat([t1, t2])['dname'].unique()", false], ["t1 = Department[Department['division'] == 'AS']\nt2 = Department[(Department['division'] == 'EN') & (Department['building'] == 'NEB')]\nt3 = pd.merge(t1, t2, how='outer', on=['dno', 'division', 'dname', 'room', 'building', 'dphone'])\nanswer = t3['dname']", false], ["t1 = Department[Department['division'] == 'AS']\nt2 = Department[(Department['division'] == 'EN') & (Department['building'] == 'NEB')]\nanswer = pd.concat([t1, t2], ignore_index=True)['dname']", false], ["t1 = Department[Department['division'] == 'AS']\nt2 = Department[(Department['division'] == 'EN') & (Department['building'] == 'NEB')]\nt3 = pd.concat([t1, t2])\nanswer = t3['dname']", false], ["t1 = Department[Department['division'] == 'AS']\nt2 = Department[(Department['division'] == 'EN') & (Department['building'] == 'NEB')]\nanswer = pd.concat([t1['dname'], t2['dname']]).unique()", false], ["t1 = Department[Department['division'] == 'AS'][['dname']]\nt2 = Department[(Department['division'] == 'EN') & (Department['building'] == 'NEB')][['dname']]\nanswer = pd.concat([t1, t2]).drop_duplicates()", false], ["t1 = Department[Department['division'] == 'AS'][['dname']]\nt2 = Department[(Department['division'] == 'EN') & (Department['building'] == 'NEB')][['dname']]\nanswer = pd.concat([t1, t2]).drop_duplicates(keep='first')", false], ["t1 = Department[Department['division'] == 'AS']\nt2 = Department[(Department['division'] == 'EN') & (Department['building'] == 'NEB')]\nanswer = pd.concat([t1, t2], ignore_index=True)['dname']", false], ["t1 = Department[Department['division'] == 'AS']\nt2 = Department[(Department['division'] == 'EN') & (Department['building'] == 'NEB')]\nt3 = pd.concat([t1, t2])\nanswer = t3['dname']", false]]}
{"example": {"db_id": "college_1", "query": "SELECT dept_address FROM department WHERE dept_name  =  'History'", "query_toks": ["SELECT", "dept_address", "FROM", "department", "WHERE", "dept_name", "=", "'History", "'"], "query_toks_no_value": ["select", "dept_address", "from", "department", "where", "dept_name", "=", "value"], "question": "Where is the history department?", "question_toks": ["Where", "is", "the", "history", "department", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"History\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"CLASS": ["CLASS_CODE", "CRS_CODE", "CLASS_SECTION", "CLASS_TIME", "CLASS_ROOM", "PROF_NUM"], "COURSE": ["CRS_CODE", "DEPT_CODE", "CRS_DESCRIPTION", "CRS_CREDIT"], "DEPARTMENT": ["DEPT_CODE", "DEPT_NAME", "SCHOOL_CODE", "EMP_NUM", "DEPT_ADDRESS", "DEPT_EXTENSION"], "EMPLOYEE": ["EMP_NUM", "EMP_LNAME", "EMP_FNAME", "EMP_INITIAL", "EMP_JOBCODE", "EMP_HIREDATE", "EMP_DOB"], "ENROLL": ["CLASS_CODE", "STU_NUM", "ENROLL_GRADE"], "PROFESSOR": ["EMP_NUM", "DEPT_CODE", "PROF_OFFICE", "PROF_EXTENSION", "PROF_HIGH_DEGREE"], "STUDENT": ["STU_NUM", "STU_LNAME", "STU_FNAME", "STU_INIT", "STU_DOB", "STU_HRS", "STU_CLASS", "STU_GPA", "STU_TRANSFER", "DEPT_CODE", "STU_PHONE", "PROF_NUM"]}, "answer": [["DRE 156, Box 284"]]}, "program_result_list": [["t1 = DEPARTMENT[DEPARTMENT['dept_name'] == 'history']\nanswer = t1['dept_address']", false], ["t1 = DEPARTMENT[DEPARTMENT['dept_name'] == 'history']\nanswer = t1['dept_address']", false], ["answer = DEPARTMENT[DEPARTMENT['dept_name'] == 'history']['dept_address']", false], ["t1 = DEPARTMENT[DEPARTMENT['dept_name'] == 'history']\nanswer = t1['dept_address']", false], ["t1 = DEPARTMENT[DEPARTMENT['dept_name'] == 'history']\nanswer = t1['dept_address']", false], ["answer = DEPARTMENT[DEPARTMENT['dept_name'] == 'history']['dept_address']", false], ["answer = DEPARTMENT[DEPARTMENT['dept_name'] == 'history']['dept_address']", false], ["answer = DEPARTMENT[DEPARTMENT['dept_name'] == 'history']['dept_address']", false], ["answer = DEPARTMENT[DEPARTMENT['dept_name'] == 'history']['dept_address']", false], ["t1 = DEPARTMENT[DEPARTMENT['dept_name'] == 'history']\nanswer = t1['dept_address']", false], ["t1 = DEPARTMENT[DEPARTMENT['dept_name'] == 'history']\nanswer = t1['dept_address']", false], ["t1 = DEPARTMENT[DEPARTMENT['dept_name'] == 'history']\nanswer = t1['dept_address']", false], ["t1 = DEPARTMENT[DEPARTMENT['dept_name'] == 'history']\nanswer = t1['dept_address']", false], ["t1 = DEPARTMENT[DEPARTMENT['dept_name'] == 'history']\nanswer = t1['dept_address']", false], ["t1 = DEPARTMENT[DEPARTMENT['dept_name'] == 'history']\nanswer = t1['dept_address']", false], ["t1 = DEPARTMENT[DEPARTMENT['dept_name'] == 'history']\nanswer = t1['dept_address']", false], ["answer = DEPARTMENT[DEPARTMENT['dept_name'] == 'history']['dept_address']", false], ["answer = DEPARTMENT[DEPARTMENT['dept_name'] == 'history']['dept_address']", false], ["t1 = DEPARTMENT[DEPARTMENT['dept_name'] == 'history']\nanswer = t1['dept_address']", false], ["t1 = DEPARTMENT[DEPARTMENT['dept_name'] == 'history']\nanswer = t1['dept_address']", false]]}
{"example": {"db_id": "driving_school", "query": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";", "query_toks": ["SELECT", "sum", "(", "T1.lesson_time", ")", "FROM", "Lessons", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.first_name", "=", "``", "Rylan", "''", "AND", "T2.last_name", "=", "``", "Goodwin", "''", ";"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "lesson_time", ")", "from", "lessons", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "first_name", "=", "value", "and", "t2", ".", "last_name", "=", "value"], "question": "How long is the total lesson time took by the customer named Rylan Goodwin?", "question_toks": ["How", "long", "is", "the", "total", "lesson", "time", "took", "by", "the", "customer", "named", "Rylan", "Goodwin", "?"], "sql": {"from": {"table_units": [["table_unit", 5], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 34, false], null], [0, 18, false], null]]}, "select": [false, [[4, [0, [0, 39, false], null]]]], "where": [[false, 2, [0, [0, 23, false], null], "\"Rylan\"", null], "and", [false, 2, [0, [0, 24, false], null], "\"Goodwin\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1_number_building", "city", "zip_postcode", "state_province_county", "country"], "Staff": ["staff_id", "staff_address_id", "nickname", "first_name", "middle_name", "last_name", "date_of_birth", "date_joined_staff", "date_left_staff"], "Vehicles": ["vehicle_id", "vehicle_details"], "Customers": ["customer_id", "customer_address_id", "customer_status_code", "date_became_customer", "date_of_birth", "first_name", "last_name", "amount_outstanding", "email_address", "phone_number", "cell_mobile_phone_number"], "Customer_Payments": ["customer_id", "datetime_payment", "payment_method_code", "amount_payment"], "Lessons": ["lesson_id", "customer_id", "lesson_status_code", "staff_id", "vehicle_id", "lesson_date", "lesson_time", "price"]}, "answer": [[11]]}, "program_result_list": [["t1 = pd.merge(Lessons, Customers, left_on='customer_id', right_on='customer_id')\nt2 = t1[(t1['first_name'] == 'Rylan') & (t1['last_name'] == 'Goodwin')]\nanswer = t2['lesson_time'].sum()", false], ["t1 = pd.merge(Lessons, Customers, left_on='customer_id', right_on='customer_id')\nt2 = t1[(t1['first_name'] == 'Rylan') & (t1['last_name'] == 'Goodwin')]\nanswer = t2['lesson_time'].sum()", false], ["t1 = pd.merge(Lessons, Customers, left_on='customer_id', right_on='customer_id')\nt2 = t1[(t1['first_name'] == 'Rylan') & (t1['last_name'] == 'Goodwin')]\nanswer = t2['lesson_time'].sum()", false], ["t1 = pd.merge(Lessons, Customers, left_on='customer_id', right_on='customer_id')\nt2 = t1[(t1['first_name'] == 'Rylan') & (t1['last_name'] == 'Goodwin')]\nanswer = t2['lesson_time'].sum()", false], ["t1 = pd.merge(Lessons, Customers, left_on='customer_id', right_on='customer_id')\nt2 = t1[(t1['first_name'] == 'Rylan') & (t1['last_name'] == 'Goodwin')]\nanswer = t2['lesson_time'].sum()", false], ["t1 = pd.merge(Lessons, Customers, left_on='customer_id', right_on='customer_id')\nt2 = t1[(t1['first_name'] == 'Rylan') & (t1['last_name'] == 'Goodwin')]\nanswer = t2['lesson_time'].sum()", false], ["t3 = Lessons.merge(Customers, left_on='customer_id', right_on='customer_id')\nt4 = t3[(t3['first_name'] == 'Rylan') & (t3['last_name'] == 'Goodwin')]\nanswer = t4['lesson_time'].sum()", false], ["t1 = pd.merge(Lessons, Customers, left_on='customer_id', right_on='customer_id')\nt2 = t1[(t1['first_name'] == 'Rylan') & (t1['last_name'] == 'Goodwin')]\nanswer = t2['lesson_time'].sum()", false], ["t1 = pd.merge(Lessons, Customers, left_on='customer_id', right_on='customer_id')\nt2 = t1[(t1['first_name'] == 'Rylan') & (t1['last_name'] == 'Goodwin')]\nanswer = t2['lesson_time'].sum()", false], ["t1 = pd.merge(Lessons, Customers, left_on='customer_id', right_on='customer_id')\nt2 = t1[(t1['first_name'] == 'Rylan') & (t1['last_name'] == 'Goodwin')]\nanswer = t2['lesson_time'].sum()", false], ["t1 = pd.merge(Customers, Lessons, left_on='customer_id', right_on='customer_id')\nt2 = t1[(t1['first_name'] == 'Rylan') & (t1['last_name'] == 'Goodwin')]\nanswer = t2['lesson_time'].sum()", false], ["t1 = pd.merge(Lessons, Customers, left_on='customer_id', right_on='customer_id')\nt2 = t1[t1['first_name'] == 'Rylan']\nt3 = t2[t2['last_name'] == 'Goodwin']\nanswer = t3['lesson_time'].sum()", false], ["t1 = pd.merge(Lessons, Customers, left_on='customer_id', right_on='customer_id')\nt2 = t1[(t1['first_name'] == 'Rylan') & (t1['last_name'] == 'Goodwin')]\nanswer = t2['lesson_time'].sum()", false], ["t1 = pd.merge(Lessons, Customers, left_on='customer_id', right_on='customer_id')\nt2 = t1[(t1['first_name'] == 'Rylan') & (t1['last_name'] == 'Goodwin')]\nanswer = t2['lesson_time'].sum()", false], ["t1 = pd.merge(Lessons, Customers, left_on='customer_id', right_on='customer_id')\nt2 = t1[(t1['first_name'] == 'Rylan') & (t1['last_name'] == 'Goodwin')]\nanswer = t2['lesson_time'].sum()", false], ["t1 = pd.merge(Lessons, Customers, left_on='customer_id', right_on='customer_id')\nt2 = t1[(t1['first_name'] == 'Rylan') & (t1['last_name'] == 'Goodwin')]\nanswer = t2['lesson_time'].sum()", false], ["t1 = pd.merge(Lessons, Customers, left_on='customer_id', right_on='customer_id')\nt1 = t1[(t1['first_name'] == 'Rylan') & (t1['last_name'] == 'Goodwin')]\nanswer = t1['lesson_time'].sum()", false], ["t1 = pd.merge(Lessons, Customers, left_on='customer_id', right_on='customer_id')\nt2 = t1[(t1['first_name'] == 'Rylan') & (t1['last_name'] == 'Goodwin')]\nanswer = t2['lesson_time'].sum()", false], ["t1 = pd.merge(Lessons, Customers, left_on='customer_id', right_on='customer_id')\nt2 = t1[(t1['first_name'] == 'Rylan') & (t1['last_name'] == 'Goodwin')]\nanswer = t2['lesson_time'].sum()", false], ["t1 = pd.merge(Lessons, Customers, left_on='customer_id', right_on='customer_id')\nt2 = t1[(t1['first_name'] == 'Rylan') & (t1['last_name'] == 'Goodwin')]\nanswer = t2['lesson_time'].sum()", false]]}
{"example": {"db_id": "tracking_grants_for_research", "query": "SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Project_outcomes", "WHERE", "outcome_code", "=", "'Patent", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "project_outcomes", "where", "outcome_code", "=", "value"], "question": "How many Patent outcomes are generated from all the projects?", "question_toks": ["How", "many", "Patent", "outcomes", "are", "generated", "from", "all", "the", "projects", "?"], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Patent\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Document_Types": ["document_type_code", "document_description"], "Documents": ["document_id", "document_type_code", "grant_id", "sent_date", "response_received_date", "other_details"], "Grants": ["grant_id", "organisation_id", "grant_amount", "grant_start_date", "grant_end_date", "other_details"], "Organisation_Types": ["organisation_type", "organisation_type_description"], "Organisations": ["organisation_id", "organisation_type", "organisation_details"], "Project_Outcomes": ["project_id", "outcome_code", "outcome_details"], "Project_Staff": ["staff_id", "project_id", "role_code", "date_from", "date_to", "other_details"], "Projects": ["project_id", "organisation_id", "project_details"], "Research_Outcomes": ["outcome_code", "outcome_description"], "Research_Staff": ["staff_id", "employer_organisation_id", "staff_details"], "Staff_Roles": ["role_code", "role_description"], "Tasks": ["task_id", "project_id", "task_details", "eg Agree Objectives"]}, "answer": [[5]]}, "program_result_list": [["t1 = Project_Outcomes[Project_Outcomes['outcome_code'] == 'patent']\nanswer = t1.shape[0]", false], ["t1 = pd.merge(Project_Outcomes, Research_Outcomes, on='outcome_code')\nanswer = t1[t1['outcome_description'] == 'patent'].shape[0]", false], ["t1 = pd.merge(Project_Outcomes, Research_Outcomes, left_on='outcome_code', right_on='outcome_code')\nt2 = t1[t1['outcome_description'] == 'Patent']\nanswer = t2.shape[0]", false], ["t1 = Project_Outcomes[Project_Outcomes['outcome_code'] == 'patent']\nanswer = t1.count()[0]", false], ["t1 = Project_Outcomes[Project_Outcomes['outcome_code'] == 'patent']\nanswer = t1.size", false], ["t1 = Project_Outcomes[Project_Outcomes['outcome_code'] == 'patent']\nanswer = t1.shape[0]", false], ["t1 = Project_Outcomes[Project_Outcomes['outcome_code'] == 'patent']\nanswer = t1['outcome_code'].count()", false], ["t1 = Project_Outcomes[Project_Outcomes['outcome_code'] == 'patent'].groupby('project_id')\nanswer = t1.size().sum()", false], ["t1 = Project_Outcomes[Project_Outcomes['outcome_code'] == 'patent']\nanswer = t1.size", false], ["t1 = Project_Outcomes[Project_Outcomes['outcome_code'] == 'patent']\nanswer = t1.shape[0]", false], ["t1 = Project_Outcomes[Project_Outcomes['outcome_code'] == 'patent']\nanswer = t1.shape[0]", false], ["t1 = Project_Outcomes[Project_Outcomes['outcome_code'] == 'patent']\nanswer = t1['outcome_code'].count()", false], ["t1 = Project_Outcomes[Project_Outcomes['outcome_code'] == 'patent']\nanswer = t1.count()", false], ["t1 = Project_Outcomes[Project_Outcomes['outcome_code'] == 'patent']\nanswer = t1.count()[0]", false], ["t1 = pd.merge(Project_Outcomes, Research_Outcomes, on='outcome_code')\nanswer = t1[t1['outcome_description'] == 'patent'].count()", false], ["t1 = Project_Outcomes[Project_Outcomes['outcome_code'] == 'patent']\nanswer = len(t1)", false], ["t1 = Project_Outcomes[Project_Outcomes['outcome_code'] == 'patent']\nanswer = t1.shape[0]", false], ["t1 = pd.merge(Project_Outcomes, Research_Outcomes, left_on='outcome_code', right_on='outcome_code')\nt2 = t1[t1['outcome_description'] == 'Patent']\nanswer = t2['outcome_code'].count()", false], ["t1 = Project_Outcomes[Project_Outcomes['outcome_code'] == 'patent']\nanswer = t1['outcome_code'].count()", false], ["t1 = Project_Outcomes[Project_Outcomes['outcome_code'] == 'patent']\nanswer = t1['outcome_code'].count()", false]]}
{"example": {"db_id": "e_learning", "query": "SELECT count(course_id) FROM Student_Course_Enrolment", "query_toks": ["SELECT", "count", "(", "course_id", ")", "FROM", "Student_Course_Enrolment"], "query_toks_no_value": ["select", "count", "(", "course_id", ")", "from", "student_course_enrolment"], "question": "Find the number of distinct courses that have enrolled students.", "question_toks": ["Find", "the", "number", "of", "distinct", "courses", "that", "have", "enrolled", "students", "."], "sql": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[3, [0, [0, 27, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Course_Authors_and_Tutors": ["author_id", "author_tutor_ATB", "login_name", "password", "personal_name", "middle_name", "family_name", "gender_mf", "address_line_1"], "Students": ["student_id", "date_of_registration", "date_of_latest_logon", "login_name", "password", "personal_name", "middle_name", "family_name"], "Subjects": ["subject_id", "subject_name"], "Courses": ["course_id", "author_id", "subject_id", "course_name", "course_description"], "Student_Course_Enrolment": ["registration_id", "student_id", "course_id", "date_of_enrolment", "date_of_completion"], "Student_Tests_Taken": ["registration_id", "date_test_taken", "test_result"]}, "answer": [[20]]}, "program_result_list": [["answer = Student_Course_Enrolment['course_id'].nunique()", false], ["t1 = Student_Course_Enrolment['course_id'].nunique()\nt2 = Student_Course_Enrolment['course_id'].count()\nanswer = t1", false], ["t1 = Student_Course_Enrolment['course_id'].nunique()\nanswer = t1", false], ["answer = len(Student_Course_Enrolment['course_id'].unique())", false], ["t1 = Student_Course_Enrolment.groupby('course_id').size().rename('count').to_frame().reset_index()\nanswer = t1['count'].sum()", false], ["answer = Student_Course_Enrolment['course_id'].nunique()", false], ["t1 = Student_Course_Enrolment['course_id'].unique().size\nanswer = t1", false], ["t1 = Student_Course_Enrolment.groupby('course_id').size().rename('count')\nanswer = t1[t1 > 0].count()", false], ["answer = Student_Course_Enrolment['course_id'].nunique()", false], ["t1 = Student_Course_Enrolment['course_id'].unique().size\nanswer = t1", false], ["t1 = Student_Course_Enrolment['course_id'].unique()\nanswer = len(t1)", false], ["t1 = Student_Course_Enrolment['course_id'].unique()\nanswer = len(t1)", false], ["answer = Student_Course_Enrolment['course_id'].unique().size", false], ["t1 = Student_Course_Enrolment.groupby('course_id').size().rename('count')\nanswer = t1.size", false], ["answer = Student_Course_Enrolment['course_id'].nunique()", false], ["t1 = Student_Course_Enrolment.groupby('course_id').size().rename('count').to_frame().reset_index()\nanswer = t1['count'].sum()", false], ["answer = Student_Course_Enrolment['course_id'].nunique()", false], ["t1 = Student_Course_Enrolment['course_id'].unique()\nanswer = len(t1)", false], ["t1 = Student_Course_Enrolment['course_id'].nunique()\nanswer = t1", false], ["t1 = Student_Course_Enrolment[['course_id']]\nanswer = [len(t1['course_id'].unique())]", false]]}
{"example": {"db_id": "csu_1", "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1", "query_toks": ["SELECT", "T2.faculty", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "t2.campus", "JOIN", "degrees", "AS", "T3", "ON", "T1.id", "=", "t3.campus", "AND", "t2.year", "=", "t3.year", "WHERE", "t2.year", "=", "2002", "ORDER", "BY", "t3.degrees", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "faculty", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "join", "degrees", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "campus", "and", "t2", ".", "year", "=", "t3", ".", "year", "where", "t2", ".", "year", "=", "value", "order", "by", "t3", ".", "degrees", "desc", "limit", "value"], "question": "How many faculty lines are there in the university that conferred the most number of degrees in year 2002?", "question_toks": ["How", "many", "faculty", "lines", "are", "there", "in", "the", "university", "that", "conferred", "the", "most", "number", "of", "degrees", "in", "year", "2002", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 5], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 21, false], null], "and", [false, 2, [0, [0, 1, false], null], [0, 10, false], null], "and", [false, 2, [0, [0, 22, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], 2002.0, null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 11, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Campuses": ["Id", "Campus", "Location", "County", "Year"], "csu_fees": ["Campus", "Year", "CampusFee"], "degrees": ["Year", "Campus", "Degrees"], "discipline_enrollments": ["Campus", "Discipline", "Year", "Undergraduate", "Graduate"], "enrollments": ["Campus", "Year", "TotalEnrollment_AY", "FTE_AY"], "faculty": ["Campus", "Year", "Faculty"]}, "answer": [[1555.7]]}, "program_result_list": [["t1 = pd.merge(Campuses, faculty, on='id')\nt2 = pd.merge(t1, degrees, left_on=['id', 'year'], right_on=['campus', 'year'])\nt3 = t2[t2['year'] == 2002]\nt4 = t3.sort_values('degrees', ascending=False).head(1)\nanswer = t4['faculty']", false], ["t1 = pd.merge(Campuses, faculty, left_on='id', right_on='campus')\nt2 = pd.merge(t1, degrees, left_on=['id', 'year'], right_on=['campus', 'year'])\nt3 = t2[t2['year'] == 2002]\nt4 = t3.sort_values(by='degrees', ascending=False).head(1)\nanswer = t4['faculty']", false], ["t1 = pd.merge(Campuses, faculty, left_on='id', right_on='campus')\nt2 = pd.merge(t1, degrees, left_on=['id', 'year'], right_on=['campus', 'year'])\nt3 = t2[t2['year'] == 2002].sort_values(by='degrees', ascending=False).head(1)\nanswer = t3['faculty']", false], ["t1 = pd.merge(Campuses, faculty, on='campus')\nt2 = pd.merge(t1, degrees, on=['campus', 'year'])\nt3 = t2[t2['year'] == 2002]\nanswer = t3.sort_values('degrees', ascending=False).head(1)[['faculty']]", false], ["t1 = pd.merge(Campuses, faculty, on='id')\nt2 = pd.merge(t1, degrees, on=['id', 'year'])\nt3 = t2[t2['year'] == 2002]\nt4 = t3.sort_values('degrees', ascending=False).head(1)\nanswer = t4['faculty']", false], ["t1 = pd.merge(Campuses, faculty, left_on='id', right_on='campus')\nt2 = pd.merge(t1, degrees, left_on=['id', 'year'], right_on=['campus', 'year'])\nt3 = t2[t2['year'] == 2002]\nanswer = t3.sort_values('degrees', ascending=False).head(1)['faculty']", false], ["t1 = pd.merge(Campuses, faculty, left_on='id', right_on='campus')\nt2 = pd.merge(t1, degrees, left_on=['id', 'year'], right_on=['campus', 'year'])\nt3 = t2[t2['year'] == 2002].sort_values(by='degrees', ascending=False).head(1)\nanswer = t3['faculty']", false], ["t1 = pd.merge(Campuses, faculty, left_on=['id', 'year'], right_on=['campus', 'year'])\nt2 = pd.merge(t1, degrees, left_on=['id', 'year'], right_on=['campus', 'year'])\nt3 = t2[t2['year'] == 2002].sort_values(by=['degrees'], ascending=False).head(1)\nanswer = t3['faculty']", false], ["t1 = pd.merge(Campuses, faculty, on='id')\nt2 = pd.merge(t1, degrees, on=['id', 'year'])\nt3 = t2[t2['year'] == 2002]\nt4 = t3.sort_values('degrees', ascending=False).head(1)\nanswer = t4['faculty']", false], ["t1 = pd.merge(Campuses, faculty, left_on='id', right_on='campus')\nt2 = pd.merge(t1, degrees, left_on=['id', 'year'], right_on=['campus', 'year'])\nt3 = t2[t2['year'] == 2002]\nanswer = t3['faculty'].head(1)", false], ["t1 = pd.merge(Campuses, faculty, left_on='id', right_on='campus', suffixes=('_Campuses', '_faculty'))\nt2 = pd.merge(t1, degrees, left_on=['id', 'year'], right_on=['campus', 'year'])\nt3 = t2[t2['year'] == 2002]\nanswer = t3.sort_values(by=['degrees'], ascending=False).head(1)['faculty']", false], ["t1 = pd.merge(Campuses, faculty, left_on='id', right_on='campus')\nt2 = pd.merge(t1, degrees, left_on=['id', 'year'], right_on=['campus', 'year'])\nt3 = t2.sort_values('degrees', ascending=False).head(1)\nanswer = t3['faculty']", false], ["t1 = pd.merge(Campuses, faculty, left_on='id', right_on='campus')\nt2 = pd.merge(t1, degrees, left_on=['id', 'year'], right_on=['campus', 'year'])\nt3 = t2[t2['year'] == 2002].sort_values(by='degrees', ascending=False).head(1)\nanswer = t3['faculty']", false], ["t1 = pd.merge(Campuses, faculty, left_on='id', right_on='campus')\nt2 = pd.merge(t1, degrees, left_on=['id', 'year'], right_on=['campus', 'year'])\nt3 = t2[t2['year'] == 2002].sort_values('degrees', ascending=False).head(1).reset_index(drop=True)\nanswer = t3['faculty']", false], ["t1 = pd.merge(Campuses, faculty, left_on=['id', 'year'], right_on=['campus', 'year'])\nt2 = pd.merge(t1, degrees, left_on=['campus', 'year'], right_on=['campus', 'year'])\nt3 = t2[t2['year'] == 2002].sort_values('degrees', ascending=False).head(1)\nanswer = t3['faculty']", false], ["t1 = pd.merge(Campuses, faculty, on='campus')\nt2 = pd.merge(t1, degrees, on=['campus', 'year'])\nt3 = t2[t2['year'] == 2002].sort_values('degrees', ascending=False).head(1).to_frame().reset_index()\nanswer = t3['faculty']", false], ["t1 = pd.merge(Campuses, faculty, left_on='id', right_on='campus')\nt2 = pd.merge(t1, degrees, left_on=['id', 'year'], right_on=['campus', 'year'])\nt3 = t2[t2['year'] == 2002].sort_values(by='degrees', ascending=False).head(1).to_frame()\nanswer = t3['faculty']", false], ["t1 = pd.merge(Campuses, faculty, left_on='id', right_on='campus')\nt2 = pd.merge(t1, degrees, left_on=['id', 'year'], right_on=['campus', 'year'])\nt3 = t2[t2['year'] == 2002].sort_values('degrees', ascending=False).head(1).reset_index()\nanswer = t3['faculty']", false], ["t1 = pd.merge(Campuses, faculty, on=['id', 'year'])\nt2 = pd.merge(t1, degrees, on=['campus', 'year'])\nt3 = t2[t2['year'] == 2002]\nt4 = t3.sort_values('degrees', ascending=False).head(1)\nanswer = t4['faculty']", false], ["t1 = pd.merge(Campuses, faculty, left_on=['id', 'year'], right_on=['campus', 'year'])\nt2 = pd.merge(t1, degrees, left_on=['id', 'year'], right_on=['campus', 'year'])\nt3 = t2[t2['year'] == 2002].sort_values('degrees', ascending=False).head(1).reset_index()\nanswer = t3['faculty']", false]]}
{"example": {"db_id": "formula_1", "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1", "query_toks": ["SELECT", "DISTINCT", "T1.forename", "FROM", "drivers", "AS", "T1", "JOIN", "driverstandings", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "T2.position", "=", "1", "AND", "T2.wins", "=", "1"], "query_toks_no_value": ["select", "distinct", "t1", ".", "forename", "from", "drivers", "as", "t1", "join", "driverstandings", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "t2", ".", "position", "=", "value", "and", "t2", ".", "wins", "=", "value"], "question": "What are all the different first names of the drivers who are in position as standing and won?", "question_toks": ["What", "are", "all", "the", "different", "first", "names", "of", "the", "drivers", "who", "are", "in", "position", "as", "standing", "and", "won", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 8]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 63, false], null]]}, "select": [true, [[0, [0, [0, 22, false], null]]]], "where": [[false, 2, [0, [0, 65, false], null], 1.0, null], "and", [false, 2, [0, [0, 67, false], null], 1.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"circuits": ["circuitId", "circuitRef", "name", "location", "country", "lat", "lng", "alt", "url"], "races": ["raceId", "year", "round", "circuitId", "name", "date", "time", "url"], "drivers": ["driverId", "driverRef", "number", "code", "forename", "surname", "dob", "nationality", "url"], "status": ["statusId", "status"], "seasons": ["year", "url"], "constructors": ["constructorId", "constructorRef", "name", "nationality", "url"], "constructorStandings": ["constructorStandingsId", "raceId", "constructorId", "points", "position", "positionText", "wins"], "results": ["resultId", "raceId", "driverId", "constructorId", "number", "grid", "position", "positionText", "positionOrder", "points", "laps", "time", "milliseconds", "fastestLap", "rank", "fastestLapTime", "fastestLapSpeed", "statusId"], "driverStandings": ["driverStandingsId", "raceId", "driverId", "points", "position", "positionText", "wins"], "constructorResults": ["constructorResultsId", "raceId", "constructorId", "points", "status"], "qualifying": ["qualifyId", "raceId", "driverId", "constructorId", "number", "position", "q1", "q2", "q3"], "pitStops": ["raceId", "driverId", "stop", "lap", "time", "duration", "milliseconds"], "lapTimes": ["raceId", "driverId", "lap", "position", "time", "milliseconds"]}, "answer": [["Lewis"], ["Kimi"], ["Robert"], ["Giancarlo"], ["Fernando"], ["Michael"], ["Mika"], ["Damon"], ["Nigel"], ["Jenson"], ["Alain"], ["Ayrton"], ["David"], ["Eddie"], ["Nelson"], ["Elio"], ["Michele"], ["Keke"], ["Alan"], ["Carlos"], ["Nino"], ["Juan"], ["Piero"], ["Alberto"], ["Maurice"], ["Peter"], ["Stirling"], ["Phil"], ["Graham"], ["Jackie"], ["Jack"], ["Mike"], ["Bruce"], ["Jim"], ["Pedro"], ["Denny"], ["Mario"], ["Emerson"], ["Clay"], ["Niki"], ["Patrick"], ["Jody"], ["Jacques"], ["Sebastian"], ["Nico"]]}, "program_result_list": [["t1 = pd.merge(drivers, driverStandings, on='driverid')\nt1 = t1[(t1['position'] == 1) & (t1['wins'] == 1)][['forename']]\nanswer = t1['forename'].unique()", false], ["t1 = pd.merge(drivers, driverStandings, left_on='driverid', right_on='driverid')\nt2 = t1[(t1['position'] == 1) & (t1['wins'] == 1)]\nanswer = t2['forename'].unique()", false], ["t1 = pd.merge(drivers, driverStandings, left_on='driverid', right_on='driverid')\nt2 = t1[(t1['position'] == 1) & (t1['wins'] == 1)]\nanswer = t2['forename'].unique()", false], ["t1 = pd.merge(driverStandings, drivers, left_on='driverid', right_on='driverid')\nt2 = t1[(t1['position'] == 1) & (t1['wins'] == 1)]\nanswer =t2['forename'].unique()", false], ["t1 = pd.merge(drivers, driverStandings, left_on='driverid', right_on='driverid')\nt2 = t1[(t1['position'] == 1) & (t1['wins'] == 1)]\nanswer = t2['forename'].unique()", false], ["t1 = pd.merge(drivers, driverStandings, left_on='driverid', right_on='driverid')\nt2 = t1[(t1['position'] == 1) & (t1['wins'] == 1)]\nanswer = t2['forename'].unique()", false], ["t1 = pd.merge(drivers, driverStandings, left_on='driverid', right_on='driverid')\nt2 = t1[(t1['position'] == 1) & (t1['wins'] == 1)]\nanswer = t2['forename'].unique()", false], ["t1 = pd.merge(drivers, driverStandings, left_on='driverid', right_on='driverid')\nt2 = t1[(t1['position'] == 1) & (t1['wins'] == 1)]\nanswer = t2['forename'].unique()", false], ["t1 = pd.merge(drivers, driverStandings, left_on='driverid', right_on='driverid')\nt2 = t1[(t1['position'] == 1) & (t1['wins'] == 1)]\nanswer = t2['forename'].unique()", false], ["t1 = pd.merge(drivers, driverStandings, left_on='driverid', right_on='driverid')\nt2 = t1[(t1['position'] == 1) & (t1['wins'] == 1)]\nanswer = t2['forename'].unique()", false], ["t1 = pd.merge(drivers, driverStandings, left_on='driverid', right_on='driverid')\nt2 = t1[(t1['position'] == 1) & (t1['wins'] == 1)]\nanswer = t2['forename'].unique()", false], ["t1 = pd.merge(drivers, driverStandings, left_on='driverid', right_on='driverid')\nt2 = t1[(t1['position'] == 1) & (t1['wins'] == 1)]\nanswer = t2['forename'].unique()", false], ["t1 = pd.merge(drivers, driverStandings, left_on='driverid', right_on='driverid')\nt2 = t1[(t1['position'] == 1) & (t1['wins'] == 1)]\nanswer = t2['forename'].unique()", false], ["t1 = pd.merge(drivers, driverStandings, left_on='driverid', right_on='driverid')\nt2 = t1[(t1['position'] == 1) & (t1['wins'] == 1)]\nanswer = t2['forename'].unique()", false], ["t1 = pd.merge(drivers, driverStandings, on='driverid')\nt2 = t1[(t1['position'] == 1) & (t1['wins'] == 1)]\nanswer = t2['forename'].unique()", false], ["t1 = pd.merge(drivers, driverStandings, left_on='driverid', right_on='driverid')\nt2 = t1[(t1['position'] == 1) & (t1['wins'] == 1)]\nanswer = t2['forename'].unique()", false], ["t1 = pd.merge(drivers, driverStandings, left_on='driverid', right_on='driverid')\nt2 = t1[(t1['position'] == 1) & (t1['wins'] == 1)]\nanswer = t2['forename'].unique()", false], ["t1 = pd.merge(drivers, driverStandings, left_on='driverid', right_on='driverid')\nt2 = t1[t1['position'] == 1]\nt3 = t2[t2['wins'] == 1]\nanswer = t3['forename'].unique()", false], ["t1 = pd.merge(drivers, driverStandings, left_on='driverid', right_on='driverid')\nt2 = t1[(t1['position']==1) & (t1['wins']==1)]\nanswer = t2['forename'].unique()", false], ["t1 = pd.merge(drivers, driverStandings, left_on='driverid', right_on='driverid')\nt2 = t1[(t1['position'] == 1) & (t1['wins'] == 1)]\nanswer = t2['forename'].unique()", false]]}
{"example": {"db_id": "e_government", "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)", "query_toks": ["SELECT", "t1.party_email", "FROM", "parties", "AS", "t1", "JOIN", "party_forms", "AS", "t2", "ON", "t1.party_id", "=", "t2.party_id", "WHERE", "t2.form_id", "=", "(", "SELECT", "form_id", "FROM", "party_forms", "GROUP", "BY", "form_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "t1", ".", "party_email", "from", "parties", "as", "t1", "join", "party_forms", "as", "t2", "on", "t1", ".", "party_id", "=", "t2", ".", "party_id", "where", "t2", ".", "form_id", "=", "(", "select", "form_id", "from", "party_forms", "group", "by", "form_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "What are the party emails associated with parties that used the party form that is the most common?", "question_toks": ["What", "are", "the", "party", "emails", "associated", "with", "parties", "that", "used", "the", "party", "form", "that", "is", "the", "most", "common", "?"], "sql": {"from": {"table_units": [["table_unit", 5], ["table_unit", 8]], "conds": [[false, 2, [0, [0, 28, false], null], [0, 41, false], null]]}, "select": [false, [[0, [0, [0, 31, false], null]]]], "where": [[false, 2, [0, [0, 42, false], null], {"from": {"table_units": [["table_unit", 8]], "conds": []}, "select": [false, [[0, [0, [0, 42, false], null]]]], "where": [], "groupBy": [[0, 42, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1_number_building", "town_city", "zip_postcode", "state_province_county", "country"], "Services": ["service_id", "service_type_code", "service_name", "service_descriptio"], "Forms": ["form_id", "form_type_code", "service_id", "form_number", "form_name", "form_description"], "Individuals": ["individual_id", "individual_first_name", "individual_middle_name", "inidividual_phone", "individual_email", "individual_address", "individual_last_name"], "Organizations": ["organization_id", "date_formed", "organization_name", "uk_vat_number"], "Parties": ["party_id", "payment_method_code", "party_phone", "party_email"], "Organization_Contact_Individuals": ["individual_id", "organization_id", "date_contact_from", "date_contact_to"], "Party_Addresses": ["party_id", "address_id", "date_address_from", "address_type_code", "date_address_to"], "Party_Forms": ["party_id", "form_id", "date_completion_started", "form_status_code", "date_fully_completed"], "Party_Services": ["booking_id", "customer_id", "service_id", "service_datetime", "booking_made_date"]}, "answer": [["alanna.boehm@example.net"], ["lucinda83@example.org"], ["erick.mills@example.com"]]}, "program_result_list": [["t1 = pd.merge(Parties, Party_Forms, left_on='party_id', right_on='party_id')\nt2 = t1.groupby('form_id').size().rename('count').to_frame().reset_index()\nform_id = t2.sort_values('count', ascending=False).head(1)['form_id'].values[0]\nt3 = t1[t1['form_id'] == form_id]\nanswer = t3['party_email']", false], ["t1 = pd.merge(Parties, Party_Forms, left_on='party_id', right_on='party_id')\nt2 = t1.groupby('form_id').size().rename('count').sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = pd.merge(t1, t2, on='form_id')\nanswer = t3['party_email']", false], ["t1 = pd.merge(Parties, Party_Forms, left_on='party_id', right_on='party_id')\nt2 = t1.groupby(['form_id']).size().rename('count').to_frame().reset_index()\nt3 = t2.sort_values('count', ascending=False).head(1)\nt4 = pd.merge(t3, t1, on='form_id')\nanswer = t4['party_email']", false], ["t1 = pd.merge(Forms, Party_Forms, left_on='form_id', right_on='form_id')\nt2 = pd.merge(Parties, t1, left_on='party_id', right_on='party_id')\nt3 = t2.groupby('form_id').size().sort_values(ascending=False)\nt4 = t3.head(1).to_frame().reset_index()\nt5 = t4.iloc[0]['form_id']\nanswer = t2[t2['form_id'] == t5][['party_email']]", false], ["t1 = pd.merge(Parties, Party_Forms, left_on='party_id', right_on='party_id')\nmost_common_form = Party_Forms.groupby('form_id').size().sort_values(ascending=False).head(1).reset_index()[['form_id']]\nt2 = pd.merge(t1, most_common_form, left_on='form_id', right_on='form_id')\nanswer = t2['party_email']", false], ["t1 = pd.merge(Parties, Party_Forms, left_on='party_id', right_on='party_id')\nt2 = t1.groupby('form_id').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nt4 = t1[t1['form_id'] == t3['form_id'].values[0]]\nanswer = t4['party_email']", false], ["t1 = pd.merge(parties, party_forms, left_on='party_id', right_on='party_id')\nt2 = t1.groupby('form_id').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = t3.iloc[0]['form_id']\nt4 = t1[t1['form_id'] == t3]\nanswer = t4['party_email']", false], ["t1 = pd.merge(Parties, Party_Forms, left_on='party_id', right_on='party_id')\nt2 = t1.groupby('form_id').size().rename('count').sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = pd.merge(t1, t2, on='form_id')\nanswer = t3['party_email']", false], ["t1 = pd.merge(Parties, Party_Forms, left_on='party_id', right_on='party_id')\nt2 = Party_Forms.groupby('form_id').size().sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = pd.merge(t1, t2, on='form_id')\nanswer = t3['party_email']", false], ["t1 = pd.merge(Party_Forms, Parties, left_on='party_id', right_on='party_id')\nt2 = t1.groupby('form_id').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nt4 = t3.loc[0, 'form_id']\nt5 = t1[t1['form_id'] == t4]\nanswer = t5['party_email']", false], ["t1 = pd.merge(Parties, Party_Forms, left_on='party_id', right_on='party_id')\nanswer = t1[t1['form_id'] == t1['form_id'].value_counts().index[0]]['party_email']", false], ["t1 = pd.merge(Parties, Party_Forms, left_on='party_id', right_on='party_id')\nt2 = t1[t1['form_id'] == Party_Forms.groupby('form_id').size().sort_values(ascending=False).head(1).index[0]]\nanswer = t2['party_email']", false], ["t1 = pd.merge(Parties, Party_Forms, on='party_id')\nt2 = t1.groupby('form_id').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nt4 = pd.merge(t3, t1, on='form_id')\nanswer = t4['party_email']", false], ["t1 = Party_Forms.groupby('form_id').size().rename('count').sort_values(ascending=False).head(1).to_frame().reset_index()\nt2 = pd.merge(Party_Forms, Parties, left_on='party_id', right_on='party_id')\nt3 = pd.merge(t2, t1, on='form_id')\nanswer = t3['party_email']", false], ["t1 = pd.merge(Parties, Party_Forms, left_on='party_id', right_on='party_id')\nt2 = t1.groupby('form_id').size().rename('count').to_frame().reset_index()\nt3 = t2.sort_values(by='count', ascending=False).head(1).to_frame().reset_index()\nt4 = t1[t1['form_id'] == t3.iloc[0,0]]\nanswer = t4['party_email']", false], ["t1 = pd.merge(Parties, Party_Forms, left_on='party_id', right_on='party_id')\nt2 = t1.groupby('form_id').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nt4 = t3[['form_id']]\nt5 = pd.merge(t1, t4, on='form_id')\nanswer = t5['party_email']", false], ["t1 = pd.merge(Parties, Party_Forms, left_on='party_id', right_on='party_id')\nt2 = t1.groupby('form_id').size().rename('count').to_frame().reset_index()\nt3 = t2.sort_values(by='count', ascending=False).head(1).reset_index()\nt4 = t1[t1['form_id'] == t3.iloc[0]['form_id']]\nanswer = t4['party_email']", false], ["t1 = pd.merge(Parties, Party_Forms, left_on='party_id', right_on='party_id')\nt2 = Party_Forms.groupby('form_id').size().rename('count').to_frame().reset_index().sort_values(by='count', ascending=False).head(1)\nt3 = pd.merge(t1, t2, on='form_id')\nanswer = t3['party_email']", false], ["t1 = pd.merge(Party_Forms, Parties, left_on='party_id', right_on='party_id')\nt2 = Party_Forms.groupby('form_id').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nt4 = pd.merge(t1, t3, left_on='form_id', right_on='form_id')\nanswer = t4['party_email']", false], ["t1 = pd.merge(Parties, Party_Forms, left_on='party_id', right_on='party_id')\nanswer = t1[t1['form_id'] == t1['form_id'].value_counts().head(1).index[0]]['party_email']", false]]}
{"example": {"db_id": "hr_1", "query": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id", "query_toks": ["SELECT", "first_name", ",", "last_name", ",", "hire_date", ",", "salary", ",", "department_id", "FROM", "employees", "WHERE", "first_name", "NOT", "LIKE", "'", "%", "M", "%", "'", "ORDER", "BY", "department_id"], "query_toks_no_value": ["select", "first_name", ",", "last_name", ",", "hire_date", ",", "salary", ",", "department_id", "from", "employees", "where", "first_name", "not", "like", "value", "order", "by", "department_id"], "question": "What are the full name, hire data, salary and department id for employees without the letter M in their first name, ordered by ascending department id?", "question_toks": ["What", "are", "the", "full", "name", ",", "hire", "data", ",", "salary", "and", "department", "id", "for", "employees", "without", "the", "letter", "M", "in", "their", "first", "name", ",", "ordered", "by", "ascending", "department", "id", "?"], "sql": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 16, false], null]], [0, [0, [0, 19, false], null]], [0, [0, [0, 21, false], null]], [0, [0, [0, 24, false], null]]]], "where": [[true, 9, [0, [0, 15, false], null], "\"%M%\"", null]], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 24, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"regions": ["REGION_ID", "REGION_NAME"], "countries": ["COUNTRY_ID", "COUNTRY_NAME", "REGION_ID"], "departments": ["DEPARTMENT_ID", "DEPARTMENT_NAME", "MANAGER_ID", "LOCATION_ID"], "jobs": ["JOB_ID", "JOB_TITLE", "MIN_SALARY", "MAX_SALARY"], "employees": ["EMPLOYEE_ID", "FIRST_NAME", "LAST_NAME", "EMAIL", "PHONE_NUMBER", "HIRE_DATE", "JOB_ID", "SALARY", "COMMISSION_PCT", "MANAGER_ID", "DEPARTMENT_ID"], "job_history": ["EMPLOYEE_ID", "START_DATE", "END_DATE", "JOB_ID", "DEPARTMENT_ID"], "locations": ["LOCATION_ID", "STREET_ADDRESS", "POSTAL_CODE", "CITY", "STATE_PROVINCE", "COUNTRY_ID"]}, "answer": [["Jennifer", "Whalen", "1987-09-25", 4400, 10], ["Pat", "Fay", "1987-09-27", 6000, 20], ["Den", "Raphaely", "1987-07-01", 11000, 30], ["Alexander", "Khoo", "1987-07-02", 3100, 30], ["Shelli", "Baida", "1987-07-03", 2900, 30], ["Sigal", "Tobias", "1987-07-04", 2800, 30], ["Guy", "Himuro", "1987-07-05", 2600, 30], ["Karen", "Colmenares", "1987-07-06", 2500, 30], ["Susan", "Mavris", "1987-09-28", 6500, 40], ["Shanta", "Vollman", "1987-07-10", 6500, 50], ["Kevin", "Mourgos", "1987-07-11", 5800, 50], ["Julia", "Nayer", "1987-07-12", 3200, 50], ["Irene", "Mikkilineni", "1987-07-13", 2700, 50], ["Steven", "Markle", "1987-07-15", 2200, 50], ["Laura", "Bissot", "1987-07-16", 3300, 50], ["TJ", "Olson", "1987-07-19", 2100, 50], ["Jason", "Mallin", "1987-07-20", 3300, 50], ["Ki", "Gee", "1987-07-22", 2400, 50], ["Hazel", "Philtanker", "1987-07-23", 2200, 50], ["Renske", "Ladwig", "1987-07-24", 3600, 50], ["Stephen", "Stiles", "1987-07-25", 3200, 50], ["John", "Seo", "1987-07-26", 2700, 50], ["Joshua", "Patel", "1987-07-27", 2500, 50], ["Trenna", "Rajs", "1987-07-28", 3500, 50], ["Curtis", "Davies", "1987-07-29", 3100, 50], ["Randall", "Matos", "1987-07-30", 2600, 50], ["Peter", "Vargas", "1987-07-31", 2500, 50], ["Winston", "Taylor", "1987-09-05", 3200, 50], ["Jean", "Fleaur", "1987-09-06", 3100, 50], ["Girard", "Geoni", "1987-09-08", 2800, 50], ["Nandita", "Sarchand", "1987-09-09", 4200, 50], ["Alexis", "Bull", "1987-09-10", 4100, 50], ["Julia", "Dellinger", "1987-09-11", 3400, 50], ["Anthony", "Cabrio", "1987-09-12", 3000, 50], ["Kelly", "Chung", "1987-09-13", 3800, 50], ["Jennifer", "Dilly", "1987-09-14", 3600, 50], ["Randall", "Perkins", "1987-09-16", 2500, 50], ["Sarah", "Bell", "1987-09-17", 4000, 50], ["Britney", "Everett", "1987-09-18", 3900, 50], ["Vance", "Jones", "1987-09-20", 2800, 50], ["Alana", "Walsh", "1987-09-21", 3100, 50], ["Kevin", "Feeney", "1987-09-22", 3000, 50], ["Donald", "OConnell", "1987-09-23", 2600, 50], ["Douglas", "Grant", "1987-09-24", 2600, 50], ["Alexander", "Hunold", "1987-06-20", 9000, 60], ["Bruce", "Ernst", "1987-06-21", 6000, 60], ["David", "Austin", "1987-06-22", 4800, 60], ["Valli", "Pataballa", "1987-06-23", 4800, 60], ["Diana", "Lorentz", "1987-06-24", 4200, 60], ["John", "Russell", "1987-08-01", 14000, 80], ["Karen", "Partners", "1987-08-02", 13500, 80], ["Alberto", "Errazuriz", "1987-08-03", 12000, 80], ["Gerald", "Cambrault", "1987-08-04", 11000, 80], ["Eleni", "Zlotkey", "1987-08-05", 10500, 80], ["Peter", "Tucker", "1987-08-06", 10000, 80], ["David", "Bernstein", "1987-08-07", 9500, 80], ["Peter", "Hall", "1987-08-08", 9000, 80], ["Christopher", "Olsen", "1987-08-09", 8000, 80], ["Nanette", "Cambrault", "1987-08-10", 7500, 80], ["Oliver", "Tuvault", "1987-08-11", 7000, 80], ["Janette", "King", "1987-08-12", 10000, 80], ["Patrick", "Sully", "1987-08-13", 9500, 80], ["Allan", "McEwen", "1987-08-14", 9000, 80], ["Lindsey", "Smith", "1987-08-15", 8000, 80], ["Louise", "Doran", "1987-08-16", 7500, 80], ["Sarath", "Sewall", "1987-08-17", 7000, 80], ["Clara", "Vishney", "1987-08-18", 10500, 80], ["Danielle", "Greene", "1987-08-19", 9500, 80], ["David", "Lee", "1987-08-21", 6800, 80], ["Sundar", "Ande", "1987-08-22", 6400, 80], ["Lisa", "Ozer", "1987-08-24", 11500, 80], ["Harrison", "Bloom", "1987-08-25", 10000, 80], ["Tayler", "Fox", "1987-08-26", 9600, 80], ["Elizabeth", "Bates", "1987-08-28", 7300, 80], ["Sundita", "Kumar", "1987-08-29", 6100, 80], ["Ellen", "Abel", "1987-08-30", 11000, 80], ["Alyssa", "Hutton", "1987-08-31", 8800, 80], ["Jonathon", "Taylor", "1987-09-01", 8600, 80], ["Jack", "Livingston", "1987-09-02", 8400, 80], ["Charles", "Johnson", "1987-09-04", 6200, 80], ["Steven", "King", "1987-06-17", 24000, 90], ["Neena", "Kochhar", "1987-06-18", 17000, 90], ["Lex", "De Haan", "1987-06-19", 17000, 90], ["Nancy", "Greenberg", "1987-06-25", 12000, 100], ["Daniel", "Faviet", "1987-06-26", 9000, 100], ["John", "Chen", "1987-06-27", 8200, 100], ["Luis", "Popp", "1987-06-30", 6900, 100], ["Shelley", "Higgins", "1987-09-30", 12000, 110]]}, "program_result_list": [["answer = employees[~employees['first_name'].str.contains('m', case=False, na=False)]\nanswer = answer[['first_name', 'last_name', 'hire_date', 'salary', 'department_id']].sort_values(by='department_id')", false], ["answer = employees[employees['first_name'].str.contains('M', regex=False) == False][['first_name', 'last_name', 'hire_date', 'salary', 'department_id']].sort_values(by='department_id')", false], ["t1 = employees[employees['first_name'].str.contains('M', regex=False) == False]\nanswer = t1[['first_name', 'last_name', 'hire_date', 'salary', 'department_id']].sort_values('department_id')", false], ["t1 = employees[employees['first_name'].str.contains('M') == False]\nanswer = t1[['first_name', 'last_name', 'hire_date', 'salary', 'department_id']].sort_values(by='department_id')", false], ["answer = employees[~employees['first_name'].str.contains('M')].sort_values('department_id')[['first_name', 'last_name', 'hire_date', 'salary', 'department_id']]", false], ["t1 = employees[employees['first_name'].str.contains('M', case=False) == False]\nanswer = t1[['first_name', 'last_name', 'hire_date', 'salary', 'department_id']].sort_values(by='department_id')", false], ["t1 = employees[employees['first_name'].str.contains('M') == False]\nanswer = t1[['first_name', 'last_name', 'hire_date', 'salary', 'department_id']].sort_values(by='department_id')", false], ["t1 = employees[employees['first_name'].str.contains(\"M\") == False]\nanswer = t1[['first_name', 'last_name', 'hire_date', 'salary', 'department_id']].sort_values('department_id')", false], ["answer = employees[~employees['first_name'].str.contains('M')].sort_values(by='department_id')[['first_name', 'last_name', 'hire_date', 'salary', 'department_id']]", false], ["t1 = employees[employees['first_name'].str.contains('m', case=False) == False]\nanswer = t1[['first_name', 'last_name', 'hire_date', 'salary', 'department_id']].sort_values('department_id')", false], ["t1 = employees[employees['first_name'].str.contains('m') == False]\nanswer = t1[['first_name', 'last_name', 'hire_date', 'salary', 'department_id']].sort_values('department_id')", false], ["answer = employees[employees['first_name'].str.contains('M') == False][['first_name', 'last_name', 'hire_date', 'salary', 'department_id']].sort_values(by='department_id')", false], ["t1 = employees[employees['first_name'].str.contains('M', regex=False) == False]\nanswer = t1[['first_name', 'last_name', 'hire_date', 'salary', 'department_id']].sort_values('department_id')", false], ["t1 = employees[employees['first_name'].str.contains('m') == False]\nanswer = t1.sort_values('department_id', ascending=True)[['first_name', 'last_name', 'hire_date', 'salary', 'department_id']]", false], ["answer = employees[~employees['first_name'].str.contains('M')][['first_name', 'last_name', 'hire_date', 'salary', 'department_id']].sort_values(by='department_id')", false], ["t1 = employees[employees['first_name'].str.contains('m', regex=False, case=False) == False]\nanswer = t1[['first_name', 'last_name', 'hire_date', 'salary', 'department_id']].sort_values(by=['department_id'])", false], ["t1 = employees[employees['first_name'].str.contains('[mM]') == False]\nanswer = t1.sort_values('department_id')[['first_name', 'last_name', 'hire_date', 'salary', 'department_id']]", false], ["answer = employees[employees['first_name'].str.contains('M', case=False) == False][['first_name', 'last_name', 'hire_date', 'salary', 'department_id']].sort_values(by='department_id')", false], ["t1 = employees[employees['first_name'].str.contains('m', case=False) == False]\nanswer = t1[['first_name', 'last_name', 'hire_date', 'salary', 'department_id']].sort_values(by='department_id')", false], ["t1 = employees[employees['first_name'].str.contains('M', na=False) == False]\nanswer = t1[['first_name', 'last_name', 'hire_date', 'salary', 'department_id']].sort_values('department_id')", false]]}
{"example": {"db_id": "voter_2", "query": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\"", "query_toks": ["SELECT", "DISTINCT", "T1.Advisor", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "T2.Treasurer_Vote", "WHERE", "T2.Election_Cycle", "=", "``", "Spring", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "advisor", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "treasurer_vote", "where", "t2", ".", "election_cycle", "=", "value"], "question": "Find the distinct Advisor of students who have treasurer votes in the spring election cycle.", "question_toks": ["Find", "the", "distinct", "Advisor", "of", "students", "who", "have", "treasurer", "votes", "in", "the", "spring", "election", "cycle", "."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 15, false], null]]}, "select": [true, [[0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"Spring\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Student": ["StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code"], "Voting_record": ["StuID", "Registration_Date", "Election_Cycle", "President_Vote", "Vice_President_Vote", "Secretary_Vote", "Treasurer_Vote", "Class_President_Vote", "Class_Senator_Vote"]}, "answer": [[5718], [7134]]}, "program_result_list": [["t1 = pd.merge(Student, Voting_record, left_on='stuid', right_on='treasurer_vote')\nt2 = t1[t1['election_cycle'] == 'spring']\nanswer = t2['advisor'].unique()", false], ["t1 = pd.merge(Student, Voting_record, on='stuid')\nt2 = t1[t1['election_cycle'] == 'spring']\nanswer = t2['advisor'].unique()", false], ["t1 = pd.merge(Student, Voting_record, left_on='stuid', right_on='treasurer_vote')\nt2 = t1[t1['election_cycle'] == 'spring']\nanswer = t2['advisor'].unique()", false], ["t1 = pd.merge(Student, Voting_record, on='stuid')\nt2 = t1[t1['election_cycle'] == 'spring']\nanswer = t2['advisor'].unique()", false], ["t1 = pd.merge(Student, Voting_record, left_on='stuid', right_on='treasurer_vote')\nt2 = t1[t1['election_cycle'] == 'spring']\nanswer = t2['advisor'].unique()", false], ["t1 = pd.merge(Student, Voting_record, left_on='stuid', right_on='treasurer_vote')\nt2 = t1[t1['election_cycle'] == 'spring']\nanswer = t2['advisor'].unique()", false], ["t1 = pd.merge(Student, Voting_record, left_on='stuid', right_on='stuid')\nt2 = t1[t1['election_cycle'] == 'spring']\nanswer = t2['advisor'].unique()", false], ["t1 = pd.merge(Student, Voting_record, left_on='stuid', right_on='stuid')\nt2 = t1[t1['election_cycle'] == 'spring']\nanswer = t2['advisor'].unique()", false], ["t1 = pd.merge(Student, Voting_record, left_on='stuid', right_on='stuid')\nt2 = t1[t1['election_cycle']== 'spring']\nanswer = t2['advisor'].unique()", false], ["t1 = pd.merge(Student, Voting_record, left_on='stuid', right_on='treasurer_vote')\nt2 = t1[t1['election_cycle'] == 'spring']\nanswer = t2['advisor'].unique()", false], ["t1 = pd.merge(Student, Voting_record, left_on='stuid', right_on='treasurer_vote')\nt2 = t1[t1['election_cycle'] == 'spring']\nanswer = t2['advisor'].unique()", false], ["t1 = pd.merge(Student, Voting_record, left_on='stuid', right_on='stuid')\nt2 = t1[t1['election_cycle'] == 'spring']\nanswer = t2['advisor'].unique()", false], ["t1 = pd.merge(Student, Voting_record, left_on='stuid', right_on='treasurer_vote')\nt2 = t1[t1['election_cycle'] == 'spring']\nanswer = t2['advisor'].unique()", false], ["t1 = pd.merge(Student, Voting_record, left_on='stuid', right_on='treasurer_vote')\nt2 = t1[t1['election_cycle'] == 'spring']\nanswer = t2['advisor'].unique()", false], ["t1 = pd.merge(Student, Voting_record, left_on='stuid', right_on='treasurer_vote')\nt2 = t1[t1['election_cycle'] == 'spring']\nanswer = t2['advisor'].unique()", false], ["t1 = pd.merge(Student, Voting_record, left_on='stuid', right_on='treasurer_vote')\nt2 = t1[t1['election_cycle'] == 'spring']\nanswer = t2['advisor'].unique()", false], ["t1 = pd.merge(Student, Voting_record, left_on='stuid', right_on='treasurer_vote')\nt2 = t1[t1['election_cycle'] == 'spring']\nanswer = t2['advisor'].unique()", false], ["t1 = pd.merge(Student, Voting_record, left_on='stuid', right_on='stuid')\nt2 = t1[t1['election_cycle'] == 'spring']\nanswer = t2['advisor'].unique()", false], ["t1 = pd.merge(Student, Voting_record, left_on='stuid', right_on='treasurer_vote')\nt2 = t1[t1['election_cycle'] == 'spring']\nanswer = t2['advisor'].unique()", false], ["t1 = pd.merge(Student, Voting_record, on='stuid')\nt2 = t1[t1['election_cycle'] == 'spring']\nanswer = t2['advisor'].unique()", false]]}
{"example": {"db_id": "college_2", "query": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'", "query_toks": ["SELECT", "i_id", "FROM", "advisor", "AS", "T1", "JOIN", "student", "AS", "T2", "ON", "T1.s_id", "=", "T2.id", "WHERE", "T2.dept_name", "=", "'History", "'"], "query_toks_no_value": ["select", "i_id", "from", "advisor", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "s_id", "=", "t2", ".", "id", "where", "t2", ".", "dept_name", "=", "value"], "question": "What is the id of the instructor who advises of all students from History department?", "question_toks": ["What", "is", "the", "id", "of", "the", "instructor", "who", "advises", "of", "all", "students", "from", "History", "department", "?"], "sql": {"from": {"table_units": [["table_unit", 8], ["table_unit", 6]], "conds": [[false, 2, [0, [0, 37, false], null], [0, 27, false], null]]}, "select": [false, [[0, [0, [0, 38, false], null]]]], "where": [[false, 2, [0, [0, 29, false], null], "\"History\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"classroom": ["building", "room_number", "capacity"], "department": ["dept_name", "building", "budget"], "course": ["course_id", "title", "dept_name", "credits"], "instructor": ["ID", "name", "dept_name", "salary"], "section": ["course_id", "sec_id", "semester", "year", "building", "room_number", "time_slot_id"], "teaches": ["ID", "course_id", "sec_id", "semester", "year"], "student": ["ID", "name", "dept_name", "tot_cred"], "takes": ["ID", "course_id", "sec_id", "semester", "year", "grade"], "advisor": ["s_ID", "i_ID"], "time_slot": ["time_slot_id", "day", "start_hr", "start_min", "end_hr", "end_min"], "prereq": ["course_id", "prereq_id"]}, "answer": [["19368"], ["90643"], ["73623"], ["79081"], ["58558"], ["74426"], ["22591"], ["63395"], ["50885"], ["3335"], ["35579"], ["64871"], ["50330"], ["80759"], ["99052"], ["4233"], ["50885"], ["48507"], ["74426"], ["90376"], ["19368"], ["4034"], ["79653"], ["50885"], ["43779"], ["6569"], ["81991"], ["63287"], ["37687"], ["59795"], ["35579"], ["65931"], ["77346"], ["63395"], ["81991"], ["95709"], ["48507"], ["42782"], ["57180"], ["16807"], ["35579"], ["73623"], ["41930"], ["41930"], ["97302"], ["15347"], ["63287"], ["31955"], ["16807"], ["4034"], ["25946"], ["50330"], ["77346"], ["74426"], ["74426"], ["41930"], ["97302"], ["14365"], ["90643"], ["36897"], ["37687"], ["79653"], ["48570"], ["57180"], ["64871"], ["28400"], ["52647"], ["90376"], ["36897"], ["48570"], ["4233"], ["65931"], ["37687"], ["63395"], ["48570"], ["3199"], ["37687"], ["77346"], ["48507"], ["77346"], ["64871"], ["58558"], ["14365"], ["74426"], ["96895"], ["52647"], ["64871"], ["79653"], ["78699"], ["3335"], ["15347"], ["3335"], ["97302"], ["90376"], ["48507"], ["16807"], ["65931"], ["31955"], ["4233"], ["58558"], ["74426"], ["79081"], ["48507"], ["42782"], ["74426"], ["16807"], ["42782"], ["36897"], ["80759"], ["95709"], ["74420"], ["35579"], ["6569"], ["36897"], ["48507"], ["4034"], ["34175"]]}, "program_result_list": [["t1 = pd.merge(advisor, student, left_on='s_id', right_on='id')\nt2 = t1[t1['dept_name_x'] == 'History']\nanswer = t2['i_id'].unique()", false], ["t1 = pd.merge(advisor, student, left_on='s_id', right_on='id')\nt2 = t1[t1['dept_name_x'] == 'history']\nanswer = t2['i_id'].unique()", false], ["t1 = pd.merge(advisor, student, left_on='s_id', right_on='id')\nt2 = t1[t1['dept_name_x'] == 'History']\nanswer = t2['i_id'].unique()", false], ["t1 = pd.merge(advisor, student, left_on='s_id', right_on='id')\nt2 = t1[t1['dept_name'] == 'History']\nanswer = t2['i_id'].unique()", false], ["t1 = pd.merge(advisor, student, on='id')\nt2 = t1[t1['dept_name'] == 'History']\nanswer = t2['i_id']", false], ["t1 = pd.merge(advisor, student, left_on='s_id', right_on='id')\nt2 = t1[t1['dept_name'] == 'History']\nanswer = t2['i_id'].unique()", false], ["t1 = pd.merge(advisor, student, left_on='s_id', right_on='id')\nt2 = t1[t1['dept_name_y'] == 'History']\nanswer = t2['i_id'].unique()", false], ["t1 = pd.merge(advisor, student, left_on='s_id', right_on='id')\nt2 = t1[t1['dept_name'] == 'History']\nanswer = t2['i_id'].unique()", false], ["t1 = pd.merge(advisor, student, left_on='s_id', right_on='id')\nt2 = t1[t1['dept_name_x'] == 'History']\nanswer = t2['i_id'].unique()", false], ["t1 = pd.merge(advisor, student, left_on='s_id', right_on='id')\nt2 = t1[t1['dept_name_y'] == 'History']\nanswer = t2['i_id'].unique()", false], ["t1 = pd.merge(advisor, student, left_on='s_id', right_on='id')\nt2 = t1[t1['dept_name_x'] == 'history']\nanswer = t2['i_id'].unique()", false], ["t1 = pd.merge(advisor, student, left_on='s_id', right_on='id')\nt2 = t1[t1['dept_name_x'] == 'History']\nanswer = t2['i_id'].unique()", false], ["t1 = pd.merge(advisor, student, left_on='s_id', right_on='id')\nt2 = t1[t1['dept_name_x'] == 'History'].drop_duplicates(subset='i_id')\nanswer = t2['i_id']", false], ["t1 = pd.merge(advisor, student, left_on='s_id', right_on='id')\nt2 = t1[t1['dept_name_x'] == 'history']\nanswer = t2['i_id'].unique()", false], ["t1 = pd.merge(advisor, student, left_on='s_id', right_on='id')\nt2 = t1[t1['dept_name_x'] == 'history']\nanswer = t2['i_id'].unique()", false], ["t1 = pd.merge(advisor, student, left_on='s_id', right_on='id')\nt2 = t1[t1['dept_name'] == 'history']\nanswer = t2['i_id'].unique()", false], ["t1 = pd.merge(advisor, student, left_on='s_id', right_on='id')\nt2 = t1[t1['dept_name_y'] == 'History']\nanswer = t2['i_id'].unique()", false], ["t1 = pd.merge(advisor, student, left_on='s_id', right_on='id')\nt2 = t1[t1['dept_name_x'] == 'History']\nanswer = t2['i_id'].unique()", false], ["t1 = pd.merge(advisor, student, left_on='s_id', right_on='id')\nt2 = t1[t1['dept_name_x'] == 'history']\nanswer = t2['i_id'].unique()", false], ["t1= pd.merge(student[student['dept_name'] == 'History'], advisor, left_on='id', right_on='s_id')\nt2 = t1.groupby('i_id').size().rename('count')\nanswer = t2[t2 == t2.max()].to_frame().reset_index()", false]]}
{"example": {"db_id": "wrestler", "query": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC", "query_toks": ["SELECT", "T2.Name", ",", "T1.Team", "FROM", "elimination", "AS", "T1", "JOIN", "wrestler", "AS", "T2", "ON", "T1.Wrestler_ID", "=", "T2.Wrestler_ID", "ORDER", "BY", "T2.Days_held", "DESC"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t1", ".", "team", "from", "elimination", "as", "t1", "join", "wrestler", "as", "t2", "on", "t1", ".", "wrestler_id", "=", "t2", ".", "wrestler_id", "order", "by", "t2", ".", "days_held", "desc"], "question": "What are the names of wrestlers and their teams in elimination, ordered descending by days held?", "question_toks": ["What", "are", "the", "names", "of", "wrestlers", "and", "their", "teams", "in", "elimination", ",", "ordered", "descending", "by", "days", "held", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 4, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"wrestler": ["Wrestler_ID", "Name", "Reign", "Days_held", "Location", "Event"], "Elimination": ["Elimination_ID", "Wrestler_ID", "Team", "Eliminated_By", "Elimination_Move", "Time"]}, "answer": [["Gran Hamada", "Team Batista"], ["\u00daltimo Drag\u00f3n \u00a7", "Team Batista"], ["El Samurai \u00a7", "Team Orton"], ["Rey Misterio Sr.", "Team Orton"], ["Fishman", "Team Batista"], ["El Samurai", "Team Batista"]]}, "program_result_list": [["t1 = pd.merge(Elimination, wrestler, left_on='wrestler_id', right_on='wrestler_id')\nanswer = t1[['name', 'team']].sort_values('days_held', ascending=False)", false], ["t1 = pd.merge(Elimination, wrestler, left_on='wrestler_id', right_on='wrestler_id')\nt2 = t1.sort_values(by='days_held', ascending=False)\nanswer = t2[['name', 'team']]", false], ["t1 = pd.merge(Elimination, wrestler, left_on='wrestler_id', right_on='wrestler_id')\nanswer = t1[['name', 'team']].sort_values('days_held', ascending=False)", false], ["t1 = pd.merge(Elimination, wrestler, left_on='wrestler_id', right_on='wrestler_id')\nanswer = t1[['name', 'team']].sort_values(by=['days_held'], ascending=False)", false], ["t1 = pd.merge(wrestler, Elimination, left_on='wrestler_id', right_on='wrestler_id')\nt2 = t1.sort_values(by='days_held', ascending=False)\nanswer = t2[['name', 'team']]", false], ["t1 = pd.merge(Elimination, wrestler, left_on='wrestler_id', right_on='wrestler_id')\nanswer = t1[['name', 'team']].sort_values('days_held', ascending=False)", false], ["t1 = pd.merge(Elimination, wrestler, left_on='wrestler_id', right_on='wrestler_id')\nanswer = t1.sort_values(by='days_held', ascending=False)[['name', 'team']]", false], ["t1 = pd.merge(Elimination, wrestler, left_on='wrestler_id', right_on='wrestler_id')\nanswer = t1[['name', 'team']].sort_values(by='days_held', ascending=False)", false], ["t1 = pd.merge(Elimination, wrestler, left_on='wrestler_id', right_on='wrestler_id')\nanswer = t1[['name', 'team']].sort_values('days_held', ascending=False)", false], ["t1 = pd.merge(wrestler, Elimination, on='wrestler_id')\nanswer = t1[['name', 'team']].sort_values('days_held', ascending=False)", false], ["t1 = pd.merge(wrestler, Elimination, left_on='wrestler_id', right_on='wrestler_id')\nanswer = t1[['name', 'team']].sort_values('days_held', ascending=False)", false], ["t1 = pd.merge(Elimination, wrestler, left_on='wrestler_id', right_on='wrestler_id')\nanswer = t1[['name', 'team']].sort_values('days_held', ascending=False)", false], ["t1 = pd.merge(Elimination, wrestler, on='wrestler_id')\nt2 = t1[['name', 'team']]\nanswer = t2.sort_values('days_held', ascending=False)", false], ["t1 = pd.merge(Elimination, wrestler, on='wrestler_id')\nt2 = t1.sort_values(by='days_held', ascending=False)\nanswer = t2[['name', 'team']]", false], ["t1 = pd.merge(Elimination, wrestler, left_on='wrestler_id', right_on='wrestler_id')\nanswer = t1[['name', 'team']].sort_values('days_held', ascending=False)", false], ["t1 = pd.merge(Elimination, wrestler, left_on='wrestler_id', right_on='wrestler_id')\nanswer = t1[['name', 'team']].sort_values('days_held', ascending=False)", false], ["t1 = pd.merge(Elimination, wrestler, left_on='wrestler_id', right_on='wrestler_id')\nanswer = t1[['name', 'team']].sort_values(by='days_held', ascending=False)", false], ["t1 = pd.merge(Elimination, wrestler, left_on='wrestler_id', right_on='wrestler_id')\nanswer = t1[['name', 'team']].sort_values('days_held', ascending=False)", false], ["t1 = pd.merge(Elimination, wrestler, left_on='wrestler_id', right_on='wrestler_id')\nanswer = t1[['name', 'team']].sort_values('days_held', ascending=False)", false], ["t1 = pd.merge(wrestler, Elimination, left_on='wrestler_id', right_on='wrestler_id')\nanswer = t1[['name', 'team']].sort_values(by='days_held', ascending=False)", false]]}
{"example": {"db_id": "allergy_1", "query": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"", "query_toks": ["SELECT", "DISTINCT", "T1.fname", ",", "T1.city_code", "FROM", "Student", "AS", "T1", "JOIN", "Has_Allergy", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "WHERE", "T2.Allergy", "=", "``", "Milk", "''", "OR", "T2.Allergy", "=", "``", "Cat", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "fname", ",", "t1", ".", "city_code", "from", "student", "as", "t1", "join", "has_allergy", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "where", "t2", ".", "allergy", "=", "value", "or", "t2", ".", "allergy", "=", "value"], "question": "Find the different first names and cities of the students who have allergy to milk or cat.", "question_toks": ["Find", "the", "different", "first", "names", "and", "cities", "of", "the", "students", "who", "have", "allergy", "to", "milk", "or", "cat", "."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 3, false], null]]}, "select": [true, [[0, [0, [0, 7, false], null]], [0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"Milk\"", null], "or", [false, 2, [0, [0, 4, false], null], "\"Cat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Allergy_Type": ["Allergy", "AllergyType"], "Has_Allergy": ["StuID", "Allergy"], "Student": ["StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code"]}, "answer": [["Linda", "BAL"], ["Lisa", "PIT"], ["Derek", "HOU"], ["Mark", "DET"], ["David", "NYC"]]}, "program_result_list": [["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[t1['allergy'].isin(['milk', 'cat'])]\nanswer = t2.drop_duplicates(subset=['fname', 'city_code'])[['fname', 'city_code']]", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, on='stuid')\nt2 = t1[t1['allergy'].isin(['milk', 'cat'])]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[t1['allergy'].isin(['milk', 'cat'])]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nanswer = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')][['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[t1['allergy'].isin(['milk', 'cat'])]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, on='stuid')\nt2 = t1[t1['allergy'].isin(['milk', 'cat'])]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[t1['allergy'].isin(['milk', 'cat'])]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(student, has_allergy, left_on='stuid', right_on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false], ["t1 = pd.merge(Student, Has_Allergy, left_on='stuid', right_on='stuid')\nt2 = t1[(t1['allergy'] == 'milk') | (t1['allergy'] == 'cat')]\nanswer = t2[['fname', 'city_code']].drop_duplicates()", false]]}
{"example": {"db_id": "products_gen_characteristics", "query": "SELECT count(*) FROM products WHERE product_category_code  =  \"Spices\" AND typical_buying_price  >  1000", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "products", "WHERE", "product_category_code", "=", "``", "Spices", "''", "AND", "typical_buying_price", ">", "1000"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products", "where", "product_category_code", "=", "value", "and", "typical_buying_price", ">", "value"], "question": "How many products are in the 'Spices' category and have a typical price of over 1000?", "question_toks": ["How", "many", "products", "are", "in", "the", "'Spices", "'", "category", "and", "have", "a", "typical", "price", "of", "over", "1000", "?"], "sql": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 15, false], null], "\"Spices\"", null], "and", [false, 3, [0, [0, 17, false], null], 1000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Ref_Characteristic_Types": ["characteristic_type_code", "characteristic_type_description"], "Ref_Colors": ["color_code", "color_description"], "Ref_Product_Categories": ["product_category_code", "product_category_description", "unit_of_measure"], "Characteristics": ["characteristic_id", "characteristic_type_code", "characteristic_data_type", "characteristic_name", "other_characteristic_details"], "Products": ["product_id", "color_code", "product_category_code", "product_name", "typical_buying_price", "typical_selling_price", "product_description", "other_product_details"], "Product_Characteristics": ["product_id", "characteristic_id", "product_characteristic_value"]}, "answer": [[2]]}, "program_result_list": [["t1 = pd.merge(Products, Ref_Product_Categories, left_on='product_category_code', right_on='product_category_code')\nt2 = t1[t1['product_category_description'] == 'Spices']\nanswer = t2[t2['typical_buying_price'] > 1000].shape[0]", false], ["t1 = pd.merge(Products, Ref_Product_Categories, left_on='product_category_code', right_on='product_category_code')\nt2 = t1[(t1['product_category_description'] == 'Spices') & (t1['typical_buying_price'] > 1000)]\nanswer = len(t2)", false], ["t1 = pd.merge(Products, Ref_Product_Categories, left_on='product_category_code', right_on='product_category_code')\nt2 = t1[t1['product_category_description'] == 'Spices']\nanswer = t2[t2['typical_buying_price'] > 1000]['product_id'].count()", false], ["t1 = pd.merge(Products, Ref_Product_Categories, left_on='product_category_code', right_on='product_category_code')\nt2 = t1[(t1['product_category_description'] == 'Spices') & (t1['typical_buying_price'] > 1000)]\nanswer = t2.shape[0]", false], ["t1 = pd.merge(Products, Ref_Product_Categories, left_on='product_category_code', right_on='product_category_code')\nt2 = t1[t1['product_category_description'] == 'Spices']\nanswer = t2[t2['typical_buying_price'] > 1000].shape[0]", false], ["t1 = pd.merge(Products, Ref_Product_Categories, left_on='product_category_code', right_on='product_category_code')\nt2 = t1[(t1['product_category_description'] == 'Spices') & (t1['typical_buying_price'] > 1000)]\nanswer = t2.shape[0]", false], ["t1 = pd.merge(Products, Ref_Product_Categories, on='product_category_code')\nt2 = t1[(t1['product_category_description'] == 'Spices') & (t1['typical_buying_price'] > 1000)]\nanswer = len(t2)", false], ["t1 = pd.merge(Products, Ref_Product_Categories, left_on='product_category_code', right_on='product_category_code')\nt2 = t1[(t1['product_category_description'] == 'Spices') & (t1['typical_buying_price'] > 1000)]\nanswer = t2.shape[0]", false], ["t1 = pd.merge(Products, Ref_Product_Categories, left_on='product_category_code', right_on='product_category_code')\nt2 = t1[t1['product_category_description'] == 'Spices']\nt3 = t2[t2['typical_buying_price'] > 1000]\nanswer = t3.shape[0]", false], ["t1 = pd.merge(Products, Ref_Product_Categories, left_on='product_category_code', right_on='product_category_code')\nanswer = t1[(t1['product_category_code'] == 'spices') & (t1['typical_buying_price'] > 1000)].count()", false], ["t1 = Products[Products['product_category_code'] == 'Spices']\nt2 = t1[t1['typical_buying_price'] > 1000]\nanswer = t2.size", false], ["t1 = pd.merge(Products, Ref_Product_Categories, left_on='product_category_code', right_on='product_category_code')\nt2 = t1[(t1['product_category_description'] == 'Spices') & (t1['typical_buying_price'] > 1000)]\nanswer = t2.shape[0]", false], ["t1 = pd.merge(Products, Ref_Product_Categories, left_on='product_category_code', right_on='product_category_code')\nt2 = t1[(t1['product_category_description'] == 'Spices') & (t1['typical_buying_price'] > 1000)]\nanswer = t2['product_id'].count()", false], ["t1 = pd.merge(Products, Ref_Product_Categories, left_on='product_category_code', right_on='product_category_code')\nt2 = t1[(t1['product_category_code'] == 'Spices') & (t1['typical_buying_price'] > 1000)]\nanswer = t2.shape[0]", false], ["t1 = pd.merge(Products, Ref_Product_Categories, left_on='product_category_code', right_on='product_category_code')\nt2 = t1[(t1['product_category_description'] == 'Spices') & (t1['typical_buying_price'] > 1000)]\nanswer = len(t2)", false], ["t1 = pd.merge(Products, Ref_Product_Categories, left_on='product_category_code', right_on='product_category_code')\nt2 = t1[t1['product_category_description'] == 'Spices']\nanswer = len(t2[t2['typical_buying_price'] > 1000])", false], ["t1 = pd.merge(Products, Ref_Product_Categories, left_on='product_category_code', right_on='product_category_code')\nt2 = t1[t1['product_category_description'] == 'Spices']\nanswer = t2[t2['typical_buying_price'] > 1000]['product_id'].count()", false], ["t1 = pd.merge(Products, Ref_Product_Categories, left_on='product_category_code', right_on='product_category_code')\nanswer = t1[(t1['product_category_description'] == 'Spices') & (t1['typical_buying_price'] > 1000)].shape[0]", false], ["t1 = pd.merge(Products, Ref_Product_Categories, left_on='product_category_code', right_on='product_category_code')\nt2 = t1[t1['product_category_description'] == 'Spices']\nt3 = t2[t2['typical_buying_price'] > 1000]\nanswer = len(t3)", false], ["t1 = pd.merge(Products, Ref_Product_Categories, left_on='product_category_code', right_on='product_category_code')\nt2 = t1[(t1['product_category_description'] == 'Spices') & (t1['typical_buying_price'] > 1000)]\nanswer = len(t2)", false]]}
{"example": {"db_id": "insurance_and_eClaims", "query": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff", "query_toks": ["SELECT", "customer_details", "FROM", "customers", "UNION", "SELECT", "staff_details", "FROM", "staff"], "query_toks_no_value": ["select", "customer_details", "from", "customers", "union", "select", "staff_details", "from", "staff"], "question": "Find the names of all the customers and staff members.", "question_toks": ["Find", "the", "names", "of", "all", "the", "customers", "and", "staff", "members", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, "db_table_headers": {"Customers": ["Customer_ID", "Customer_Details"], "Staff": ["Staff_ID", "Staff_Details"], "Policies": ["Policy_ID", "Customer_ID", "Policy_Type_Code", "Start_Date", "End_Date"], "Claim_Headers": ["Claim_Header_ID", "Claim_Status_Code", "Claim_Type_Code", "Policy_ID", "Date_of_Claim", "Date_of_Settlement", "Amount_Claimed", "Amount_Piad"], "Claims_Documents": ["Claim_ID", "Document_Type_Code", "Created_by_Staff_ID", "Created_Date"], "Claims_Processing_Stages": ["Claim_Stage_ID", "Next_Claim_Stage_ID", "Claim_Status_Name", "Claim_Status_Description"], "Claims_Processing": ["Claim_Processing_ID", "Claim_ID", "Claim_Outcome_Code", "Claim_Stage_ID", "Staff_ID"]}, "answer": [["Alexander"], ["Allen"], ["America Jaskolski"], ["Augustine Kerluke"], ["Bo"], ["Buddy Marquardt"], ["Cathryn"], ["Clifton"], ["Dayana Robel"], ["Dr. Diana Rath"], ["Eladio"], ["Ellsworth Paucek"], ["Evans"], ["Gideon"], ["Julius"], ["Kaci"], ["Lauriane Ferry PhD"], ["Margaretta"], ["Maryse"], ["Miss Felicita Reichel"], ["Mr. Edwardo Blanda I"], ["Mr. Randal Lynch III"], ["Mrs. Hanna Willms"], ["Mrs. Lilly Graham III"], ["Mrs. Liza Heller V"], ["Roman"], ["Selena Gerhold"], ["Sydnie Friesen"], ["Vernie"], ["Zachery"]]}, "program_result_list": [["t1 = Customers['customer_details']\nt2 = Staff['staff_details']\nanswer = pd.concat([t1, t2]).unique()", false], ["answer = pd.concat([Customers.customer_details, Staff.staff_details]).unique()", false], ["t1 = Customers['customer_details']\nt2 = Staff['staff_details']\nanswer = pd.concat([t1, t2]).unique()", false], ["t1 = pd.concat([Customers['customer_details'], Staff['staff_details']]).unique()\nanswer = pd.DataFrame(t1, columns=['name'])", false], ["t1 = Customers['customer_details'].to_frame().reset_index()\nt2 = Staff['staff_details'].to_frame().reset_index()\nt3 = pd.concat([t1, t2])\nanswer = t3['staff_details']", false], ["t1 = Customers['customer_details']\nt2 = Staff['staff_details']\nanswer = pd.concat([t1, t2]).unique()", false], ["t1 = Customers['customer_details'].to_frame()\nt2 = Staff['staff_details'].to_frame()\nanswer = pd.concat([t1, t2]).drop_duplicates()", false], ["t1 = Customers['customer_details']\nt2 = Staff['staff_details']\nanswer = t1.append(t2).to_frame().reset_index()", false], ["t1 = Customers['customer_details'].to_frame().rename(columns={'customer_details':'details'})\nt2 = Staff['staff_details'].to_frame().rename(columns={'staff_details':'details'})\nanswer = pd.concat([t1, t2])", false], ["t1 = pd.concat([Customers, Staff])\nanswer = t1.rename(columns={'customer_details': 'name', 'staff_details': 'name'})[['name']]", false], ["answer = pd.concat([Customers['customer_details'], Staff['staff_details']]).unique()", false], ["t1 = Customers[['customer_details']].rename(columns={'customer_details':'name'})\nt2 = Staff[['staff_details']].rename(columns={'staff_details':'name'})\nanswer = pd.concat([t1, t2]).reset_index(drop=True)", false], ["t1 = Customers.rename(columns={'customer_details': 'name'})\nt2 = Staff.rename(columns={'staff_details': 'name'})\nanswer = pd.concat([t1, t2])", false], ["t1 = Customers['customer_details'].to_frame().rename(columns={'customer_details':'name'})\nt2 = Staff['staff_details'].to_frame().rename(columns={'staff_details':'name'})\nanswer = pd.concat([t1, t2]).reset_index(drop=True)", false], ["t1 = Customers['customer_details']\nt2 = Staff['staff_details']\nanswer = t1.append(t2)", false], ["t1 = Customers.rename(columns = {'customer_details': 'details'})\nt2 = Staff.rename(columns = {'staff_details': 'details'})\nanswer = pd.concat([t1, t2]).drop_duplicates()", false], ["t1 = Customers['customer_details']\nt2 = Staff['staff_details']\nanswer = pd.concat([t1, t2]).unique()", false], ["t1 = Customers['customer_details'].to_frame()\nt2 = Staff['staff_details'].to_frame()\nanswer = t1.append(t2)", false], ["t1 = Customers['customer_details'].to_frame()\nt2 = Staff['staff_details'].to_frame()\nt3 = pd.merge(t1, t2, on='staff_details', how='outer')\nanswer = t3['staff_details']", false], ["answer = pd.concat([Customers.drop('customer_id', axis=1), Staff.drop('staff_id', axis=1)]).rename(columns={'customer_details': 'name'})", false]]}
{"example": {"db_id": "riding_club", "query": "SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011", "query_toks": ["SELECT", "T3.Player_name", ",", "T3.gender", "FROM", "player_coach", "AS", "T1", "JOIN", "coach", "AS", "T2", "ON", "T1.Coach_ID", "=", "T2.Coach_ID", "JOIN", "player", "AS", "T3", "ON", "T1.Player_ID", "=", "T3.Player_ID", "WHERE", "T1.Starting_year", ">", "2011"], "query_toks_no_value": ["select", "t3", ".", "player_name", ",", "t3", ".", "gender", "from", "player_coach", "as", "t1", "join", "coach", "as", "t2", "on", "t1", ".", "coach_id", "=", "t2", ".", "coach_id", "join", "player", "as", "t3", "on", "t1", ".", "player_id", "=", "t3", ".", "player_id", "where", "t1", ".", "starting_year", ">", "value"], "question": "Show the names and genders of players with a coach starting after 2011.", "question_toks": ["Show", "the", "names", "and", "genders", "of", "players", "with", "a", "coach", "starting", "after", "2011", "."], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 19, false], null], [0, 13, false], null], "and", [false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 3, [0, [0, 20, false], null], 2011.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"player": ["Player_ID", "Sponsor_name", "Player_name", "Gender", "Residence", "Occupation", "Votes", "Rank"], "club": ["Club_ID", "Club_name", "Region", "Start_year"], "coach": ["Coach_ID", "Coach_name", "Gender", "Club_ID", "Rank"], "player_coach": ["Player_ID", "Coach_ID", "Starting_year"], "match_result": ["Rank", "Club_ID", "Gold", "Big_Silver", "Small_Silver", "Bronze", "Points"]}, "answer": [["Niki Ashton", "F"], ["Ron Strynadka", "M"], ["Ross Eadie", "M"]]}, "program_result_list": [["t1 = pd.merge(player_coach, coach, left_on='coach_id', right_on='coach_id')\nt2 = pd.merge(t1, player, left_on='player_id', right_on='player_id')\nt3 = t2[t2['starting_year'] > 2011]\nanswer = t3[['player_name', 'gender']]", false], ["t1 = pd.merge(player_coach, coach, on='coach_id')\nt2 = pd.merge(t1, player, on='player_id')\nt3 = t2[t2['starting_year'] > 2011]\nanswer = t3[['player_name', 'gender']]", false], ["t1 = pd.merge(player_coach, coach, on='coach_id')\nt2 = pd.merge(t1, player, on='player_id')\nt3 = t2[t2['starting_year'] > 2011]\nanswer = t3[['player_name', 'gender']]", false], ["t1 = pd.merge(player, player_coach, left_on='player_id', right_on='player_id')\nt2 = pd.merge(t1, coach, left_on='coach_id', right_on='coach_id')\nt3 = t2[t2['starting_year'] > 2011]\nanswer = t3[['player_name', 'gender']]", false], ["t1 = pd.merge(player_coach, coach, left_on='coach_id', right_on='coach_id')\nt2 = pd.merge(t1, player, left_on='player_id', right_on='player_id')\nt3 = t2[t2['starting_year'] > 2011]\nanswer = t3[['player_name', 'gender']]", false], ["t1 = pd.merge(player_coach, coach, on='coach_id')\nt2 = pd.merge(t1, player, on='player_id')\nanswer = t2[t2['starting_year'] > 2011][['player_name', 'gender']]", false], ["t1 = pd.merge(player_coach, coach, left_on='coach_id', right_on='coach_id')\nt2 = pd.merge(t1, player, left_on='player_id', right_on='player_id')\nanswer = t2[t2['starting_year'] > 2011][['player_name', 'gender']]", false], ["t1 = pd.merge(player_coach, coach, left_on='coach_id', right_on='coach_id')\nt2 = pd.merge(t1, player, left_on='player_id', right_on='player_id')\nt3 = t2[t2['starting_year'] > 2011]\nanswer = t3[['player_name', 'gender']]", false], ["t1 = pd.merge(player_coach, coach, left_on='coach_id', right_on='coach_id')\nt2 = pd.merge(t1, player, left_on='player_id', right_on='player_id')\nt3 = t2[t2['starting_year'] > 2011]\nanswer = t3[['player_name', 'gender']]", false], ["t1 = pd.merge(player_coach, coach, left_on='coach_id', right_on='coach_id')\nt2 = pd.merge(t1, player, left_on='player_id', right_on='player_id')\nanswer = t2[t2['starting_year'] > 2011][['player_name', 'gender']]", false], ["t1 = pd.merge(player_coach, coach, on='coach_id')\nt2 = pd.merge(t1, player, on='player_id')\nanswer = t2[t2['starting_year'] > 2011][['player_name', 'gender']]", false], ["t1 = pd.merge(player_coach, coach, left_on='coach_id', right_on='coach_id')\nt2 = pd.merge(t1, player, left_on='player_id', right_on='player_id')\nt3 = t2[t2['starting_year'] > 2011]\nanswer = t3[['player_name', 'gender']]", false], ["t1 = pd.merge(player_coach, coach, left_on='coach_id', right_on='coach_id')\nt2 = pd.merge(t1, player, left_on='player_id', right_on='player_id')\nt3 = t2[t2['starting_year'] > 2011]\nanswer = t3[['player_name', 'gender']]", false], ["t1 = pd.merge(player_coach, coach, left_on='coach_id', right_on='coach_id')\nt2 = pd.merge(t1, player, left_on='player_id', right_on='player_id')\nt3 = t2[t2['starting_year'] > 2011]\nanswer = t3[['player_name', 'gender']]", false], ["t1 = pd.merge(player_coach, coach, left_on='coach_id', right_on='coach_id')\nt2 = pd.merge(t1, player, left_on='player_id', right_on='player_id')\nt3 = t2[t2['starting_year'] > 2011]\nanswer = t3[['player_name', 'gender']]", false], ["t1 = pd.merge(player_coach, coach, left_on='coach_id', right_on='coach_id')\nt2 = pd.merge(t1, player, left_on='player_id', right_on='player_id')\nt3 = t2[t2['starting_year'] > 2011]\nanswer = t3[['player_name', 'gender']]", false], ["t1 = pd.merge(player_coach, coach, left_on='coach_id', right_on='coach_id')\nt2 = pd.merge(t1, player, left_on='player_id', right_on='player_id')\nt3 = t2[t2['starting_year'] > 2011]\nanswer = t3[['player_name', 'gender']]", false], ["t1 = pd.merge(player_coach, coach, left_on='coach_id', right_on='coach_id')\nt2 = pd.merge(t1, player, left_on='player_id', right_on='player_id')\nt3 = t2[t2['starting_year'] > 2011]\nanswer = t3[['player_name', 'gender']]", false], ["t1 = pd.merge(player_coach, coach, left_on='coach_id', right_on='coach_id')\nt2 = pd.merge(t1, player, left_on='player_id', right_on='player_id')\nt3 = t2[t2['starting_year'] > 2011]\nanswer = t3[['player_name', 'gender']]", false], ["t1 = pd.merge(player_coach, coach, left_on='coach_id', right_on='coach_id')\nt2 = pd.merge(t1, player, left_on='player_id', right_on='player_id')\nt3 = t2[t2['starting_year'] > 2011]\nanswer = t3[['player_name', 'gender']]", false]]}
{"example": {"db_id": "dorm_1", "query": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex", "query_toks": ["SELECT", "avg", "(", "age", ")", ",", "max", "(", "age", ")", ",", "sex", "FROM", "student", "GROUP", "BY", "sex"], "query_toks_no_value": ["select", "avg", "(", "age", ")", ",", "max", "(", "age", ")", ",", "sex", "from", "student", "group", "by", "sex"], "question": "What is the average and oldest age for each gender of student?", "question_toks": ["What", "is", "the", "average", "and", "oldest", "age", "for", "each", "gender", "of", "student", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 4, false], null]], [1, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Student": ["StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code"], "Dorm": ["dormid", "dorm_name", "student_capacity", "gender"], "Dorm_amenity": ["amenid", "amenity_name"], "Has_amenity": ["dormid", "amenid"], "Lives_in": ["stuid", "dormid", "room_number"]}, "answer": [[19.7, 26, "F"], [19.5, 27, "M"]]}, "program_result_list": [["t1 = Student.groupby('sex').agg({'age': [np.mean, np.max]})\nanswer = t1", false], ["t1 = Student.groupby('sex').agg({'age': ['mean', 'max']})\nanswer = t1.reset_index()", false], ["t1 = Student.groupby('sex').agg({'age': ['mean', 'max']})\nanswer = t1.reset_index()", false], ["t1 = Student.groupby('sex')\nanswer = t1[['age']].agg(['mean', 'max'])", false], ["t1 = Student.groupby('sex').agg({'age': ['mean', 'max']}).reset_index()\nanswer = t1[['sex', 'age', 'mean', 'max']]", false], ["t1 = Student.groupby('sex').agg({'age': ['mean', 'max']}).rename({'mean':'avg', 'max':'oldest'}, axis=1)\nanswer = t1.reset_index()", false], ["answer = Student.groupby('sex').agg({'age': ['mean', 'max']})", false], ["t1 = Student.groupby('sex')\nanswer = t1['age'].agg(['mean', 'max']).reset_index()", false], ["t1 = Student.groupby('sex').agg({'age': [np.mean, np.max]})\nanswer = t1.reset_index()", false], ["t1 = Student.groupby('sex')\nanswer = t1[['age']].agg(['mean', 'max'])", false], ["t1 = Student.groupby('sex').agg({'age': ['mean', 'max']}).reset_index()\nt2 = t1.rename(columns={'age': 'avg_age', 'age': 'oldest_age'})\nanswer = t2", false], ["t1 = Student.groupby(['sex']).agg({'age': ['mean', 'max']}).reset_index()\nanswer = t1", false], ["t1 = Student.groupby('sex').agg({'age': ['mean', 'max']})\nanswer = t1.reset_index()", false], ["t1 = Student.groupby('sex').agg({'age': ['mean', 'max']})\nanswer = t1.columns = ['avg_age', 'max_age']", false], ["t1 = Student.groupby('sex').agg({'age': [np.mean, np.max]}).reset_index()\nt1.columns = ['sex', 'average_age', 'oldest']\nanswer = t1[['sex', 'average_age', 'oldest']]", false], ["t1 = Student.groupby('sex')[['age']].agg(['mean','max']).reset_index()\nanswer = t1", false], ["answer = Student.groupby('sex').agg({'age': [np.mean, np.max]})", false], ["t1 = Student.groupby('sex').agg({'age': ['mean', 'max']})\nanswer = t1.reset_index()", false], ["t1 = Student.groupby('sex').agg({'age': [np.mean, np.max]})\nanswer = t1.reset_index()", false], ["t1 = Student.groupby('sex')[['age']].agg(['mean', 'max'])\nanswer = t1.reset_index()", false]]}
{"example": {"db_id": "customers_and_products_contacts", "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Part'", "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "customer_orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status_code", "=", "'Completed", "'", "INTERSECT", "SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "customer_orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status_code", "=", "'Part", "'"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status_code", "=", "value", "intersect", "select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status_code", "=", "value"], "question": "Show the names of customers who have both an order in completed status and an order in part status.", "question_toks": ["Show", "the", "names", "of", "customers", "who", "have", "both", "an", "order", "in", "completed", "status", "and", "an", "order", "in", "part", "status", "."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 29, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 31, false], null], "\"Completed\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 29, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 31, false], null], "\"Part\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1_number_building", "city", "zip_postcode", "state_province_county", "country"], "Products": ["product_id", "product_type_code", "product_name", "product_price"], "Customers": ["customer_id", "payment_method_code", "customer_number", "customer_name", "customer_address", "customer_phone", "customer_email"], "Contacts": ["contact_id", "customer_id", "gender", "first_name", "last_name", "contact_phone"], "Customer_Address_History": ["customer_id", "address_id", "date_from", "date_to"], "Customer_Orders": ["order_id", "customer_id", "order_date", "order_status_code"], "Order_Items": ["order_item_id", "order_id", "product_id", "order_quantity"]}, "answer": [["Cleo"], ["Lela"], ["Sterling"]]}, "program_result_list": [["t1 = pd.merge(Customers, Customer_Orders, left_on='customer_id', right_on='customer_id')\nt2 = t1[t1['order_status_code'] == 'completed']\nt3 = t1[t1['order_status_code'] == 'part']\nt4 = pd.merge(t2, t3, on='customer_name', how='inner')\nanswer = t4['customer_name'].unique()", false], ["t1 = pd.merge(Customers, Customer_Orders, on='customer_id')\nt2 = t1[t1['order_status_code'] == 'completed']\nt3 = t1[t1['order_status_code'] == 'part']\nt4 = pd.merge(t2, t3, on='customer_name')\nanswer = t4['customer_name'].unique()", false], ["t1 = pd.merge(Customers, Customer_Orders, left_on='customer_id', right_on='customer_id')\nt2 = t1[t1['order_status_code'] == 'completed']\nt3 = t1[t1['order_status_code'] == 'part']\nanswer = t2.merge(t3, on='customer_name', how='inner')['customer_name']", false], ["t1 = pd.merge(Customers, Customer_Orders, left_on='customer_id', right_on='customer_id')\nt2 = t1[t1['order_status_code'] == 'completed']\nt3 = t1[t1['order_status_code'] == 'part']\nt4 = t2.merge(t3, on='customer_name', how='inner')\nanswer = t4['customer_name'].unique()", false], ["t1 = pd.merge(Customers, Customer_Orders, left_on='customer_id', right_on='customer_id')\nt2 = t1[t1['order_status_code'] == 'completed']\nt3 = t1[t1['order_status_code'] == 'part']\nanswer = t2.merge(t3, how='inner')['customer_name'].unique()", false], ["t1 = pd.merge(Customers, Customer_Orders, on='customer_id')\nt2 = t1[t1['order_status_code'] == 'completed']\nt3 = pd.merge(Customers, Customer_Orders, on='customer_id')\nt4 = t3[t3['order_status_code'] == 'part']\nt5 = pd.merge(t2, t4, on='customer_name')\nanswer = t5['customer_name'].unique()", false], ["t1 = pd.merge(Customers, Customer_Orders, left_on='customer_id', right_on='customer_id')\nt2 = t1[t1['order_status_code'] == 'completed']\nt3 = t1[t1['order_status_code'] == 'part']\nt4 = pd.merge(t2, t3, on='customer_name', how='inner')\nanswer = t4['customer_name']", false], ["t1 = pd.merge(Customers, Customer_Orders, left_on='customer_id', right_on='customer_id')\nt2 = t1[t1['order_status_code'] == 'completed']\nt3 = t1[t1['order_status_code'] == 'part']\nanswer = t2.merge(t3, on=['customer_name'], how='inner')['customer_name'].unique()", false], ["t1 = pd.merge(Customers, Customer_Orders, left_on='customer_id', right_on='customer_id')\nt2 = t1[t1['order_status_code'] == 'completed']\nt3 = t1[t1['order_status_code'] == 'part']\nanswer = t2[t2['customer_name'].isin(t3['customer_name'])]['customer_name'].unique()", false], ["t1 = pd.merge(Customers, Customer_Orders, left_on='customer_id', right_on='customer_id')\nt2 = t1[t1['order_status_code'] == 'completed']\nt3 = t1[t1['order_status_code'] == 'part']\nt4 = t2[['customer_name']].merge(t3[['customer_name']], how='inner')\nanswer = t4['customer_name']", false], ["t1 = Customers.merge(Customer_Orders, left_on='customer_id', right_on='customer_id')\nt2 = t1[t1['order_status_code'] == 'completed']\nt3 = Customers.merge(Customer_Orders, left_on='customer_id', right_on='customer_id')\nt4 = t3[t3['order_status_code'] == 'part']\nt5 = pd.merge(t2, t4, how='inner', on='customer_name')\nanswer = t5['customer_name'].unique()", false], ["t1 = pd.merge(Customers, Customer_Orders, left_on='customer_id', right_on='customer_id')\nt2 = t1[t1['order_status_code'] == 'completed']\nt3 = pd.merge(Customers, Customer_Orders, left_on='customer_id', right_on='customer_id')\nt4 = t3[t3['order_status_code'] == 'part']\nt5 = pd.merge(t2, t4, left_on='customer_name', right_on='customer_name')\nanswer = t5['customer_name']", false], ["t1 = pd.merge(Customers, Customer_Orders, left_on='customer_id', right_on='customer_id')\nt2 = t1[t1['order_status_code'] == 'completed']\nt3 = t1[t1['order_status_code'] == 'part']\nt4 = t2.merge(t3, how='inner', on=['customer_name'])\nanswer = t4['customer_name'].unique()", false], ["t1 = pd.merge(Customers, Customer_Orders, left_on='customer_id', right_on='customer_id')\nt2 = t1[t1['order_status_code'] == 'completed']['customer_name']\nt3 = t1[t1['order_status_code'] == 'part']['customer_name']\nanswer = t2.intersection(t3)", false], ["t1 = pd.merge(Customers, Customer_Orders, left_on='customer_id', right_on='customer_id')\nt2 = t1[t1['order_status_code'] == 'completed']\nt3 = t1[t1['order_status_code'] == 'part']\nt4 = pd.merge(t2, t3, on='customer_name')\nanswer = t4['customer_name']", false], ["t1 = pd.merge(Customers, Customer_Orders, left_on='customer_id', right_on='customer_id')\nt2 = t1[t1['order_status_code'] == 'completed']\nt3 = t1[t1['order_status_code'] == 'part']\nt4 = pd.merge(t2, t3, on='customer_name', how='inner')\nanswer = t4['customer_name'].unique()", false], ["t1 = pd.merge(Customers, Customer_Orders, left_on='customer_id', right_on='customer_id')\nt2 = t1[t1['order_status_code'] == 'completed'][['customer_name']]\nt3 = pd.merge(Customers, Customer_Orders, left_on='customer_id', right_on='customer_id')\nt4 = t3[t3['order_status_code'] == 'part'][['customer_name']]\nt5 = pd.merge(t2, t4, on='customer_name', how='inner')\nanswer = t5['customer_name']", false], ["t1 = pd.merge(Customers, Customer_Orders, left_on='customer_id', right_on='customer_id')\nt2 = t1[t1['order_status_code'] == 'completed']\nt3 = t1[t1['order_status_code'] == 'part']\nanswer = t2.merge(t3, on='customer_name', how='inner')['customer_name'].drop_duplicates()", false], ["t1 = pd.merge(Customers, Customer_Orders, on='customer_id')\nt2 = t1[t1['order_status_code'] == 'completed']\nt3 = t1[t1['order_status_code'] == 'part']\nt4 = pd.merge(t2, t3, on='customer_name')\nanswer = t4['customer_name'].unique()", false], ["t1 = pd.merge(Customers, Customer_Orders, on='customer_id')\nt2 = t1[t1['order_status_code'] == 'completed']\nt3 = t1[t1['order_status_code'] == 'part']\nt4 = pd.merge(t2, t3, on='customer_name')\nanswer = t4['customer_name']", false]]}
{"example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code", "query_toks": ["SELECT", "T2.emp_fname", ",", "T3.crs_description", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t3", ".", "crs_description", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code"], "question": "What are the first names of all teachers who have taught a course and the corresponding descriptions?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "teachers", "who", "have", "taught", "a", "course", "and", "the", "corresponding", "descriptions", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 3], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 17, false], null], "and", [false, 2, [0, [0, 2, false], null], [0, 7, false], null]]}, "select": [false, [[0, [0, [0, 19, false], null]], [0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"CLASS": ["CLASS_CODE", "CRS_CODE", "CLASS_SECTION", "CLASS_TIME", "CLASS_ROOM", "PROF_NUM"], "COURSE": ["CRS_CODE", "DEPT_CODE", "CRS_DESCRIPTION", "CRS_CREDIT"], "DEPARTMENT": ["DEPT_CODE", "DEPT_NAME", "SCHOOL_CODE", "EMP_NUM", "DEPT_ADDRESS", "DEPT_EXTENSION"], "EMPLOYEE": ["EMP_NUM", "EMP_LNAME", "EMP_FNAME", "EMP_INITIAL", "EMP_JOBCODE", "EMP_HIREDATE", "EMP_DOB"], "ENROLL": ["CLASS_CODE", "STU_NUM", "ENROLL_GRADE"], "PROFESSOR": ["EMP_NUM", "DEPT_CODE", "PROF_OFFICE", "PROF_EXTENSION", "PROF_HIGH_DEGREE"], "STUDENT": ["STU_NUM", "STU_LNAME", "STU_FNAME", "STU_INIT", "STU_DOB", "STU_HRS", "STU_CLASS", "STU_GPA", "STU_TRANSFER", "DEPT_CODE", "STU_PHONE", "PROF_NUM"]}, "answer": [["Arnelle", "Accounting I"], ["Arnelle", "Accounting I"], ["Robert", "Accounting I"], ["Ismael", "Accounting II"], ["Ismael", "Accounting II"], ["Carlos", "Intro. to Microcomputing"], ["Gerald", "Intro. to Microcomputing"], ["Carlos", "Intro. to Microcomputing"], ["Peter", "Database Design and Implementation"], ["Gerald", "Intro. to Statistics"], ["Gerald", "Intro. to Statistics"], ["Peter", "Statistical Applications"], ["Peter", "Statistical Applications"]]}, "program_result_list": [["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, COURSE, left_on='crs_code', right_on='crs_code')\nanswer = t2[['emp_fname', 'crs_description']]", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, COURSE, left_on='crs_code', right_on='crs_code')\nanswer = t2[['emp_fname', 'crs_description']]", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, COURSE, left_on='crs_code', right_on='crs_code')\nanswer = t2[['emp_fname', 'crs_description']]", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, COURSE, left_on='crs_code', right_on='crs_code')\nanswer = t2[['emp_fname', 'crs_description']]", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, COURSE, left_on='crs_code', right_on='crs_code')\nanswer = t2[['emp_fname', 'crs_description']]", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, COURSE, left_on='crs_code', right_on='crs_code')\nanswer = t2[['emp_fname', 'crs_description']]", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, COURSE, left_on='crs_code', right_on='crs_code')\nanswer = t2[['emp_fname', 'crs_description']]", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, COURSE, left_on='crs_code', right_on='crs_code')\nanswer = t2[['emp_fname', 'crs_description']]", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, COURSE, left_on='crs_code', right_on='crs_code')\nanswer = t2[['emp_fname', 'crs_description']]", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, COURSE, left_on='crs_code', right_on='crs_code')\nanswer = t2[['emp_fname', 'crs_description']]", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, COURSE, left_on='crs_code', right_on='crs_code')\nanswer = t2[['emp_fname', 'crs_description']]", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, COURSE, left_on='crs_code', right_on='crs_code')\nanswer = t2[['emp_fname', 'crs_description']]", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, COURSE, left_on='crs_code', right_on='crs_code')\nanswer = t2[['emp_fname', 'crs_description']]", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, COURSE, left_on='crs_code', right_on='crs_code')\nanswer = t2[['emp_fname', 'crs_description']]", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, COURSE, left_on='crs_code', right_on='crs_code')\nanswer = t2[['emp_fname', 'crs_description']]", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, COURSE, left_on='crs_code', right_on='crs_code')\nanswer = t2[['emp_fname', 'crs_description']]", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, COURSE, left_on='crs_code', right_on='crs_code')\nanswer = t2[['emp_fname', 'crs_description']]", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, COURSE, left_on='crs_code', right_on='crs_code')\nanswer = t2[['emp_fname', 'crs_description']]", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, COURSE, left_on='crs_code', right_on='crs_code')\nanswer = t2[['emp_fname', 'crs_description']]", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, COURSE, left_on='crs_code', right_on='crs_code')\nanswer = t2[['emp_fname', 'crs_description']]", false]]}
{"example": {"db_id": "election", "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\"", "query_toks": ["SELECT", "T1.Committee", "FROM", "election", "AS", "T1", "JOIN", "party", "AS", "T2", "ON", "T1.Party", "=", "T2.Party_ID", "WHERE", "T2.Party", "=", "``", "Democratic", "''", "INTERSECT", "SELECT", "T1.Committee", "FROM", "election", "AS", "T1", "JOIN", "party", "AS", "T2", "ON", "T1.Party", "=", "T2.Party_ID", "WHERE", "T2.Party", "=", "``", "Liberal", "''"], "query_toks_no_value": ["select", "t1", ".", "committee", "from", "election", "as", "t1", "join", "party", "as", "t2", "on", "t1", ".", "party", "=", "t2", ".", "party_id", "where", "t2", ".", "party", "=", "value", "intersect", "select", "t1", ".", "committee", "from", "election", "as", "t1", "join", "party", "as", "t2", "on", "t1", ".", "party", "=", "t2", ".", "party_id", "where", "t2", ".", "party", "=", "value"], "question": "Which committees have delegates from both democratic party and liberal party?", "question_toks": ["Which", "committees", "have", "delegates", "from", "both", "democratic", "party", "and", "liberal", "party", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 17, false], null], [0, 5, false], null]]}, "select": [false, [[0, [0, [0, 19, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"Democratic\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 17, false], null], [0, 5, false], null]]}, "select": [false, [[0, [0, [0, 19, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"Liberal\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "db_table_headers": {"county": ["County_Id", "County_name", "Population", "Zip_code"], "party": ["Party_ID", "Year", "Party", "Governor", "Lieutenant_Governor", "Comptroller", "Attorney_General", "US_Senate"], "election": ["Election_ID", "Counties_Represented", "District", "Delegate", "Party", "First_Elected", "Committee"]}, "answer": [["Appropriations"]]}, "program_result_list": [["t1 = pd.merge(election, party, on='party')\nt2 = t1[t1['party'] == 'democratic']\nt3 = t1[t1['party'] == 'liberal']\nanswer = t2['committee'].intersection(t3['committee'])", false], ["t1 = pd.merge(election, party, left_on='party', right_on='party_id')\nt2 = t1[t1['party'] == 'democratic']\nt3 = pd.merge(election, party, left_on='party', right_on='party_id')\nt4 = t3[t3['party'] == 'liberal']\nanswer = pd.merge(t2, t4, on='committee')['committee'].unique()", false], ["t1 = pd.merge(election, party, left_on='party', right_on='party_id')\nt2 = t1[t1['party'] == 'democratic']\nt3 = pd.merge(election, party, left_on='party', right_on='party_id')\nt4 = t3[t3['party'] == 'liberal']\nunion = pd.merge(t2, t4, on='committee', how='inner')\nanswer = union['committee'].unique()", false], ["t1 = pd.merge(election, party, left_on='party', right_on='party_id')\nt2 = t1[t1['party'] == 'Democratic']['committee'].unique()\nt3 = t1[t1['party'] == 'Liberal']['committee'].unique()\nanswer = np.intersect1d(t2, t3)", false], ["t1 = pd.merge(election, party, left_on='party', right_on='party_id')\nt2 = t1[t1['party'] == 'democratic']\nt3 = t1[t1['party'] == 'liberal']\nt4 = t2.merge(t3, how='inner', on='committee')\nanswer = t4['committee'].unique()", false], ["t1 = pd.merge(election, party, left_on='party', right_on='party_id')\nt2 = t1[t1['party'] == 'democratic']\nt3 = t1[t1['party'] == 'liberal']\nt4 = set(t2['committee']) & set(t3['committee'])\nanswer = pd.Series(list(t4)).to_frame().rename(columns={0: 'committee'})", false], ["t1 = pd.merge(election, party, left_on='party', right_on='party_id')\nt2 = t1[t1['party'] == 'democratic']\nt3 = t2['committee'].unique()\nt4 = pd.merge(election, party, left_on='party', right_on='party_id')\nt5 = t4[t4['party'] == 'liberal']\nt6 = t5['committee'].unique()\nanswer = list(set(t3) & set(t6))", false], ["t1 = pd.merge(election, party, left_on='party', right_on='party_id')\nt2 = t1[t1['party'] == 'democratic']\nt3 = t2[['committee']]\nt4 = pd.merge(election, party, left_on='party', right_on='party_id')\nt5 = t4[t4['party'] == 'liberal']\nt6 = t5[['committee']]\nanswer = t3.merge(t6, how='inner')['committee'].unique()", false], ["t1 = pd.merge(election, party, left_on='party', right_on='party_id')\nt2 = t1[t1['party'] == 'Democratic']['committee']\nt3 = pd.merge(election, party, left_on='party', right_on='party_id')\nt4 = t3[t3['party'] == 'Liberal']['committee']\nanswer = t2.intersection(t4)", false], ["t1 = pd.merge(election, party, left_on='party', right_on='party_id')\nt2 = t1[t1['party'] == 'democratic']\nt3 = t1[t1['party'] == 'liberal']\nt4 = t2.merge(t3, on='committee', how='inner')\nanswer = t4['committee'].unique()", false], ["t1 = pd.merge(election, party, left_on='party', right_on='party_id')\nt2 = t1[t1['party'] == 'democratic']\nt3 = pd.merge(election, party, left_on='party', right_on='party_id')\nt4 = t3[t3['party'] == 'liberal']\nt5 = pd.merge(t2, t4, on='committee')\nanswer = t5['committee'].unique()", false], ["t1 = pd.merge(election, party, left_on='party', right_on='party_id')\nt2 = t1[t1['party'] == 'Democratic']\nt3 = t2[['committee']]\nt4 = pd.merge(election, party, left_on='party', right_on='party_id')\nt5 = t4[t4['party'] == 'Liberal']\nt6 = t5[['committee']]\nt7 = pd.merge(t3, t6, on='committee', how='inner')\nanswer = t7['committee'].unique()", false], ["t1 = pd.merge(election, party, left_on='party', right_on='party_id')\nt2 = t1[t1['party'] == 'Democratic']['committee'].to_frame()\nt3 = pd.merge(election, party, left_on='party', right_on='party_id')\nt4 = t3[t3['party'] == 'Liberal']['committee'].to_frame()\nanswer = pd.merge(t2, t4, on='committee')", false], ["t1 = pd.merge(election, party, left_on='party', right_on='party_id')\nt2 = t1[t1['party'] == 'democratic']\nt3 = pd.merge(election, party, left_on='party', right_on='party_id')\nt4 = t3[t3['party'] == 'liberal']\nt5 = t2[['committee']].merge(t4[['committee']], how='inner')\nanswer = t5['committee'].unique()", false], ["t1 = pd.merge(election, party, left_on='party', right_on='party_id')\nt2 = t1[t1['party'] == 'Democratic']\nt3 = t2[['committee']]\nt4 = pd.merge(election, party, left_on='party', right_on='party_id')\nt5 = t4[t4['party'] == 'Liberal']\nt6 = t5[['committee']]\nanswer = t3.merge(t6, how=\"inner\")", false], ["t1 = pd.merge(election, party, left_on='party', right_on='party_id')\nt2 = t1[t1['party'] == 'Democratic']\nt3 = t1[t1['party'] == 'Liberal']\nt4 = t2['committee'].unique()\nt5 = t3['committee'].unique()\nanswer = np.intersect1d(t4, t5)", false], ["t1 = pd.merge(election, party, left_on='party', right_on='party_id')\nt2 = t1[t1['party'] == 'democratic']\nt3 = pd.merge(election, party, left_on='party', right_on='party_id')\nt4 = t3[t3['party'] == 'liberal']\nt5 = pd.merge(t2, t4)\nanswer = t5['committee'].unique()", false], ["t1 = pd.merge(election, party, left_on='party', right_on='party_id')\nt2 = t1[t1['party'] == 'Democratic']\nt3 = pd.merge(election, party, left_on='party', right_on='party_id')\nt4 = t3[t3['party'] == 'Liberal']\nt5 = t2[['committee']].merge(t4[['committee']], on='committee', how='inner')\nanswer = t5['committee']", false], ["t1 = pd.merge(election, party, left_on='party', right_on='party_id')\nt2 = t1[t1['party'] == 'democratic']\nt3 = t1[t1['party'] == 'liberal']\nanswer = t2.merge(t3, on='committee')['committee'].unique()", false], ["t1 = pd.merge(election, party, left_on='party', right_on='party_id')\nt2 = t1[t1['party'] == 'democratic']\nt3 = pd.merge(election, party, left_on='party', right_on='party_id')\nt4 = t3[t3['party'] == 'liberal']\nanswer = t2[t2['committee'].isin(t4['committee'])]['committee'].unique()", false]]}
{"example": {"db_id": "party_people", "query": "SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id", "query_toks": ["SELECT", "T1.member_name", ",", "T2.party_name", "FROM", "Member", "AS", "T1", "JOIN", "party", "AS", "T2", "ON", "T1.party_id", "=", "T2.party_id"], "query_toks_no_value": ["select", "t1", ".", "member_name", ",", "t2", ".", "party_name", "from", "member", "as", "t1", "join", "party", "as", "t2", "on", "t1", ".", "party_id", "=", "t2", ".", "party_id"], "question": "List member names and their party names.", "question_toks": ["List", "member", "names", "and", "their", "party", "names", "."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 7, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"region": ["Region_ID", "Region_name", "Date", "Label", "Format", "Catalogue"], "party": ["Party_ID", "Minister", "Took_office", "Left_office", "Region_ID", "Party_name"], "member": ["Member_ID", "Member_Name", "Party_ID", "In_office"], "party_events": ["Event_ID", "Event_Name", "Party_ID", "Member_in_charge_ID"]}, "answer": [["Hon Tony Abbott", "3"], ["Hon Dick Adams", "Progress Party"], ["Anthony Albanese", "Progress Party"], ["Hon John Anderson", "Convention Peoples Party"], ["Peter Andren", "3"], ["Hon Kevin Andrews", "3"], ["Hon Fran Bailey", "3"], ["Hon Bruce Baird", "3"], ["Mark Baker", "3"], ["Hon Bob Baldwin", "3"], ["Phil Barresi", "3"], ["Kerry Bartlett", "Convention Peoples Party"], ["Hon Kim Beazley", "Progress Party"], ["Hon Arch Bevis", "Progress Party"], ["Hon Bruce Billson", "3"]]}, "program_result_list": [["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nanswer = t1[['member_name', 'party_name']]", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nanswer = t1[['member_name', 'party_name']]", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nanswer = t1[['member_name', 'party_name']]", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nanswer = t1[['member_name', 'party_name']]", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nanswer = t1[['member_name', 'party_name']]", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nanswer = t1[['member_name', 'party_name']]", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nanswer = t1[['member_name', 'party_name']]", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nanswer = t1[['member_name', 'party_name']]", false], ["t1 = pd.merge(member, party, on='party_id')\nanswer = t1[['member_name', 'party_name']]", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nanswer = t1[['member_name', 'party_name']]", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nanswer = t1[['member_name', 'party_name']]", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nanswer = t1[['member_name', 'party_name']]", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nanswer = t1[['member_name', 'party_name']]", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nanswer = t1[['member_name', 'party_name']]", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nanswer = t1[['member_name', 'party_name']]", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nanswer = t1[['member_name', 'party_name']]", false], ["t1 = pd.merge(member, party, on='party_id')\nanswer = t1[['member_name', 'party_name']]", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nanswer = t1[['member_name', 'party_name']]", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nanswer = t1[['member_name', 'party_name']]", false], ["t1 = pd.merge(member, party, left_on='party_id', right_on='party_id')\nanswer = t1[['member_name', 'party_name']]", false]]}
{"example": {"db_id": "phone_1", "query": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"", "query_toks": ["SELECT", "DISTINCT", "T2.Hardware_Model_name", "FROM", "screen_mode", "AS", "T1", "JOIN", "phone", "AS", "T2", "ON", "T1.Graphics_mode", "=", "T2.screen_mode", "WHERE", "T1.Type", "=", "``", "Graphics", "''", "OR", "t2.Company_name", "=", "``", "Nokia", "Corporation", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "hardware_model_name", "from", "screen_mode", "as", "t1", "join", "phone", "as", "t2", "on", "t1", ".", "graphics_mode", "=", "t2", ".", "screen_mode", "where", "t1", ".", "type", "=", "value", "or", "t2", ".", "company_name", "=", "value"], "question": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"", "question_toks": ["List", "the", "hardware", "model", "name", "for", "the", "phones", "that", "were", "produced", "by", "``", "Nokia", "Corporation", "''", "or", "whose", "screen", "mode", "type", "is", "``", "Graphics", ".", "''"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 21, false], null]]}, "select": [true, [[0, [0, [0, 16, false], null]]]], "where": [[false, 2, [0, [0, 14, false], null], "\"Graphics\"", null], "or", [false, 2, [0, [0, 15, false], null], "\"Nokia Corporation\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"chip_model": ["Model_name", "Launch_year", "RAM_MiB", "ROM_MiB", "Slots", "WiFi", "Bluetooth"], "screen_mode": ["Graphics_mode", "Char_cells", "Pixels", "Hardware_colours", "used_kb", "map", "Type"], "phone": ["Company_name", "Hardware_Model_name", "Accreditation_type", "Accreditation_level", "Date", "chip_model", "screen_mode"]}, "answer": [["GT-I9100"], ["GT-I9300"], ["Lumia 920, Lumia 820, Lumia 620"], ["Nokia 700"], ["XPERIA T, XPERIA J"]]}, "program_result_list": [["t1 = pd.merge(screen_mode, phone, left_on='graphics_mode', right_on='screen_mode')\nanswer = t1[(t1['type'] == 'graphics') | (t1['company_name'] == 'Nokia Corporation')]['hardware_model_name'].unique()", false], ["t1 = pd.merge(screen_mode, phone, left_on='graphics_mode', right_on='screen_mode')\nt2 = t1[(t1['type'] == 'Graphics') | (t1['company_name'] == 'Nokia Corporation')]\nanswer = t2['hardware_model_name'].unique()", false], ["t1 = pd.merge(phone, screen_mode, on='screen_mode')\nt2 = t1[(t1['type'] == 'Graphics') | (t1['company_name'] == 'Nokia Corporation')]\nanswer = t2['hardware_model_name'].unique()", false], ["t1 = pd.merge(screen_mode, phone, left_on='graphics_mode', right_on='screen_mode')\nt2 = t1[(t1['type'] == 'Graphics') | (t1['company_name'] == 'Nokia Corporation')]\nanswer = t2['hardware_model_name'].unique()", false], ["t1 = pd.merge(screen_mode, phone, left_on='graphics_mode', right_on='screen_mode')\nt2 = t1[(t1['type'] == 'Graphics') | (t1['company_name'] == 'Nokia Corporation')]\nanswer = t2['hardware_model_name'].unique()", false], ["t1 = pd.merge(screen_mode, phone, on='screen_mode')\nt2 = t1[(t1['type'] == 'Graphics') | (t1['company_name'] == 'Nokia Corporation')]\nanswer = t2['hardware_model_name'].unique()", false], ["t1 = pd.merge(screen_mode, phone, left_on='graphics_mode', right_on='screen_mode')\nt2 = t1[(t1['type'] == 'Graphics') | (t1['company_name'] == 'Nokia Corporation')]\nanswer = t2['hardware_model_name'].unique()", false], ["t1 = pd.merge(screen_mode, phone, left_on='graphics_mode', right_on='screen_mode')\nt2 = t1[(t1['type'] == 'graphics') | (t1['company_name'] == 'Nokia Corporation')]\nanswer = t2['hardware_model_name'].unique()", false], ["t1 = pd.merge(screen_mode, phone, left_on='graphics_mode', right_on='screen_mode')\nt2 = t1[(t1['type'] == 'Graphics') | (t1['company_name'] == 'Nokia Corporation')]\nanswer = t2['hardware_model_name'].unique()", false], ["t1 = phone[phone['company_name'] == 'Nokia Corporation']\nt2 = pd.merge(screen_mode, phone, how='inner', left_on='graphics_mode', right_on='screen_mode')\nt3 = t2[t2['type'] == 'Graphics']\nanswer = t1['hardware_model_name'].append(t3['hardware_model_name']).unique()", false], ["t1 = pd.merge(screen_mode, phone, on='graphics_mode')\nt2 = t1[(t1['type'] == 'Graphics') | (t1['company_name'] == 'Nokia Corporation')]\nanswer = t2['hardware_model_name'].unique()", false], ["t1 = pd.merge(screen_mode, phone, left_on='graphics_mode', right_on='screen_mode')\nt2 = t1[(t1['type'] == 'Graphics') | (t1['company_name'] == 'Nokia Corporation')]\nanswer = t2['hardware_model_name'].unique()", false], ["t1 = pd.merge(screen_mode, phone, left_on='graphics_mode', right_on='screen_mode')\nt2 = t1[(t1['type'] == 'graphics') | (t1['company_name'] == 'Nokia Corporation')]\nanswer = t2['hardware_model_name'].unique()", false], ["t1 = pd.merge(screen_mode, phone, left_on='graphics_mode', right_on='screen_mode', how='left')\nt2 = t1[(t1['type'] == 'Graphics') | (t1['company_name'] == 'Nokia Corporation')].drop_duplicates()\nanswer = t2['hardware_model_name']", false], ["t1 = pd.merge(screen_mode, phone, left_on='graphics_mode', right_on='screen_mode')\nt2 = t1[(t1['type'] == 'Graphics') | (t1['company_name'] == 'Nokia Corporation')]\nanswer = t2['hardware_model_name'].unique()", false], ["t1 = pd.merge(screen_mode, phone, left_on='graphics_mode', right_on='screen_mode')\nt2 = t1[(t1['type'] == 'Graphics') | (t1['company_name'] == 'Nokia Corporation')]\nanswer = t2['hardware_model_name'].unique()", false], ["t1 = pd.merge(screen_mode, phone, left_on='graphics_mode', right_on='screen_mode')\nt2 = t1[(t1['type'] == 'Graphics') | (t1['company_name'] == 'Nokia Corporation')]\nanswer = t2['hardware_model_name'].unique()", false], ["t1 = pd.merge(screen_mode, phone, left_on='graphics_mode', right_on='screen_mode')\nt2 = t1[(t1['type'] == 'Graphics') | (t1['company_name'] == 'Nokia Corporation')]\nanswer = t2[['hardware_model_name']].drop_duplicates()", false], ["t1 = pd.merge(screen_mode, phone, left_on='graphics_mode', right_on='screen_mode')\nt2 = t1[(t1['type'] == 'Graphics') | (t1['company_name'] == 'Nokia Corporation')]\nanswer = t2['hardware_model_name'].unique()", false], ["t1 = pd.merge(screen_mode, phone, left_on='graphics_mode', right_on='screen_mode')\nt2 = t1[(t1['type'] == 'Graphics') | (t1['company_name'] == 'Nokia Corporation')]\nanswer = t2['hardware_model_name'].unique()", false]]}
{"example": {"db_id": "baseball_1", "query": "SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998", "query_toks": ["SELECT", "name_first", ",", "name_last", "FROM", "player", "AS", "T1", "JOIN", "all_star", "AS", "T2", "ON", "T1.player_id", "=", "T2.player_id", "WHERE", "YEAR", "=", "1998"], "query_toks_no_value": ["select", "name_first", ",", "name_last", "from", "player", "as", "t1", "join", "all_star", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "player_id", "where", "year", "=", "value"], "question": "What are first and last names of players participating in all star game in 1998?", "question_toks": ["What", "are", "first", "and", "last", "names", "of", "players", "participating", "in", "all", "star", "game", "in", "1998", "?"], "sql": {"from": {"table_units": [["table_unit", 16], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 182, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 195, false], null]], [0, [0, [0, 196, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], 1998.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"all_star": ["player_id", "year", "game_num", "game_id", "team_id", "league_id", "gp", "starting_pos"], "appearances": ["year", "team_id", "league_id", "player_id", "g_all", "gs", "g_batting", "g_defense", "g_p", "g_c", "g_1b", "g_2b", "g_3b", "g_ss", "g_lf", "g_cf", "g_rf", "g_of", "g_dh", "g_ph", "g_pr"], "manager_award": ["player_id", "award_id", "year", "league_id", "tie", "notes"], "player_award": ["player_id", "award_id", "year", "league_id", "tie", "notes"], "manager_award_vote": ["award_id", "year", "league_id", "player_id", "points_won", "points_max", "votes_first"], "player_award_vote": ["award_id", "year", "league_id", "player_id", "points_won", "points_max", "votes_first"], "batting": ["player_id", "year", "stint", "team_id", "league_id", "g", "ab", "r", "h", "double", "triple", "hr", "rbi", "sb", "cs", "bb", "so", "ibb", "hbp", "sh", "sf", "g_idp"], "batting_postseason": ["year", "round", "player_id", "team_id", "league_id", "g", "ab", "r", "h", "double", "triple", "hr", "rbi", "sb", "cs", "bb", "so", "ibb", "hbp", "sh", "sf", "g_idp"], "player_college": ["player_id", "college_id", "year"], "fielding": ["player_id", "year", "stint", "team_id", "league_id", "pos", "g", "gs", "inn_outs", "po", "a", "e", "dp", "pb", "wp", "sb", "cs", "zr"], "fielding_outfield": ["player_id", "year", "stint", "glf", "gcf", "grf"], "fielding_postseason": ["player_id", "year", "team_id", "league_id", "round", "pos", "g", "gs", "inn_outs", "po", "a", "e", "dp", "tp", "pb", "sb", "cs"], "hall_of_fame": ["player_id", "yearid", "votedby", "ballots", "needed", "votes", "inducted", "category", "needed_note"], "home_game": ["year", "league_id", "team_id", "park_id", "span_first", "span_last", "games", "openings", "attendance"], "manager": ["player_id", "year", "team_id", "league_id", "inseason", "g", "w", "l", "rank", "plyr_mgr"], "manager_half": ["player_id", "year", "team_id", "league_id", "inseason", "half", "g", "w", "l", "rank"], "player": ["player_id", "birth_year", "birth_month", "birth_day", "birth_country", "birth_state", "birth_city", "death_year", "death_month", "death_day", "death_country", "death_state", "death_city", "name_first", "name_last", "name_given", "weight", "height", "bats", "throws", "debut", "final_game", "retro_id", "bbref_id"], "park": ["park_id", "park_name", "park_alias", "city", "state", "country"], "pitching": ["player_id", "year", "stint", "team_id", "league_id", "w", "l", "g", "gs", "cg", "sho", "sv", "ipouts", "h", "er", "hr", "bb", "so", "baopp", "era", "ibb", "wp", "hbp", "bk", "bfp", "gf", "r", "sh", "sf", "g_idp"], "pitching_postseason": ["player_id", "year", "round", "team_id", "league_id", "w", "l", "g", "gs", "cg", "sho", "sv", "ipouts", "h", "er", "hr", "bb", "so", "baopp", "era", "ibb", "wp", "hbp", "bk", "bfp", "gf", "r", "sh", "sf", "g_idp"], "salary": ["year", "team_id", "league_id", "player_id", "salary"], "college": ["college_id", "name_full", "city", "state", "country"], "postseason": ["year", "round", "team_id_winner", "league_id_winner", "team_id_loser", "league_id_loser", "wins", "losses", "ties"], "team": ["year", "league_id", "team_id", "franchise_id", "div_id", "rank", "g", "ghome", "w", "l", "div_win", "wc_win", "lg_win", "ws_win", "r", "ab", "h", "double", "triple", "hr", "bb", "so", "sb", "cs", "hbp", "sf", "ra", "er", "era", "cg", "sho", "sv", "ipouts", "ha", "hra", "bba", "soa", "e", "dp", "fp", "name", "park", "attendance", "bpf", "ppf", "team_id_br", "team_id_lahman45", "team_id_retro"], "team_franchise": ["franchise_id", "franchise_name", "active", "na_assoc"], "team_half": ["year", "league_id", "team_id", "half", "div_id", "div_win", "rank", "g", "w", "l"]}, "answer": [["David", "Wells"], ["Ivan", "Rodriguez"], ["Jim", "Thome"], ["Roberto", "Alomar"], ["Cal", "Ripken"], ["Alex", "Rodriguez"], ["Kenny", "Lofton"], ["Ken", "Griffey"], ["Juan", "Gonzalez"], ["Sandy", "Alomar"], ["Rolando", "Arrojo"], ["Scott", "Brosius"], ["Roger", "Clemens"], ["Bartolo", "Colon"], ["Ray", "Durham"], ["Damion", "Easley"], ["Darin", "Erstad"], ["Tom", "Gordon"], ["Ben", "Grieve"], ["Derek", "Jeter"], ["Pedro", "Martinez"], ["Paul", "O'Neill"], ["Dean", "Palmer"], ["Rafael", "Palmeiro"], ["Troy", "Percival"], ["Brad", "Radke"], ["Manny", "Ramirez"], ["Aaron", "Sele"], ["Mo", "Vaughn"], ["Omar", "Vizquel"], ["John", "Wetteland"], ["Bernie", "Williams"], ["Greg", "Maddux"], ["Mike", "Piazza"], ["Mark", "McGwire"], ["Craig", "Biggio"], ["Chipper", "Jones"], ["Walt", "Weiss"], ["Barry", "Bonds"], ["Larry", "Walker"], ["Tony", "Gwynn"], ["Moises", "Alou"], ["Andy", "Ashby"], ["Dante", "Bichette"], ["Bret", "Boone"], ["Kevin", "Brown"], ["Vinny", "Castilla"], ["Andres", "Galarraga"], ["Tom", "Glavine"], ["Trevor", "Hoffman"], ["Jason", "Kendall"], ["Javy", "Lopez"], ["Robb", "Nen"], ["Rick", "Reed"], ["Edgar", "Renteria"], ["Curt", "Schilling"], ["Jeff", "Shaw"], ["Gary", "Sheffield"], ["Sammy", "Sosa"], ["Ugueth", "Urbina"], ["Greg", "Vaughn"], ["Fernando", "Vina"], ["Devon", "White"]]}, "program_result_list": [["t1 = pd.merge(player, all_star, left_on='player_id', right_on='player_id')\nt2 = t1[t1['year'] == 1998]\nanswer = t2[['name_first', 'name_last']]", false], ["t1 = pd.merge(player, all_star, left_on='player_id', right_on='player_id')\nt2 = t1[t1['year'] == 1998]\nanswer = t2[['name_first', 'name_last']]", false], ["t1 = pd.merge(player, all_star, on='player_id')\nt2 = t1[t1['year'] == 1998]\nanswer = t2[['name_first', 'name_last']]", false], ["t1 = pd.merge(player, all_star, left_on='player_id', right_on='player_id')\nt2 = t1[t1['year'] == 1998]\nanswer = t2[['name_first', 'name_last']]", false], ["t1 = pd.merge(player, all_star, left_on='player_id', right_on='player_id')\nt2 = t1[t1['year'] == 1998]\nanswer = t2[['name_first', 'name_last']]", false], ["t1 = pd.merge(player, all_star, left_on='player_id', right_on='player_id')\nt2 = t1[t1['year'] == 1998]\nanswer = t2[['name_first', 'name_last']]", false], ["t1 = pd.merge(player, all_star, on='player_id')\nt2 = t1[t1['year'] == 1998]\nanswer = t2[['name_first', 'name_last']]", false], ["t1 = pd.merge(player, all_star, left_on='player_id', right_on='player_id')\nanswer = t1[t1['year'] == 1998][['name_first', 'name_last']]", false], ["t1 = pd.merge(player, all_star, on='player_id')\nt2 = t1[t1['year'] == 1998]\nanswer = t2[['name_first', 'name_last']]", false], ["t1 = pd.merge(player, all_star, left_on='player_id', right_on='player_id')\nt2 = t1[t1['year'] == 1998]\nanswer = t2[['name_first', 'name_last']]", false], ["t1 = pd.merge(player, all_star, on='player_id')\nt2 = t1[t1['year'] == 1998]\nanswer = t2[['name_first', 'name_last']]", false], ["t1 = pd.merge(player, all_star, on='player_id')\nt2 = t1[t1['year'] == 1998]\nanswer = t2[['name_first', 'name_last']]", false], ["t1 = pd.merge(player, all_star, left_on='player_id', right_on='player_id')\nt2 = t1[t1['year'] == 1998]\nanswer = t2[['name_first', 'name_last']]", false], ["t1 = pd.merge(player, all_star, left_on='player_id', right_on='player_id')\nt2 = t1[t1['year'] == 1998]\nanswer = t2[['name_first', 'name_last']]", false], ["t1 = pd.merge(player, all_star, left_on='player_id', right_on='player_id')\nt2 = t1[t1['year'] == 1998]\nanswer = t2[['name_first', 'name_last']]", false], ["t1 = pd.merge(player, all_star, left_on='player_id', right_on='player_id')\nanswer = t1[t1['year'] == 1998][['name_first', 'name_last']]", false], ["t1 = pd.merge(player, all_star, left_on='player_id', right_on='player_id')\nt2 = t1[t1['year'] == 1998]\nanswer = t2[['name_first', 'name_last']]", false], ["t1 = pd.merge(player, all_star, left_on='player_id', right_on='player_id')\nt2 = t1[t1['year'] == 1998]\nanswer = t2[['name_first', 'name_last']]", false], ["t1 = pd.merge(player, all_star, left_on='player_id', right_on='player_id')\nt2 = t1[t1['year'] == 1998]\nanswer = t2[['name_first', 'name_last']]", false], ["t1 = pd.merge(player, all_star, on='player_id')\nt2 = t1[t1['year'] == 1998]\nanswer = t2[['name_first', 'name_last']]", false]]}
{"example": {"db_id": "network_2", "query": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job", "query_toks": ["SELECT", "avg", "(", "age", ")", ",", "job", "FROM", "Person", "WHERE", "gender", "=", "'male", "'", "GROUP", "BY", "job"], "query_toks_no_value": ["select", "avg", "(", "age", ")", ",", "job", "from", "person", "where", "gender", "=", "value", "group", "by", "job"], "question": "What is average age of male for different job title?", "question_toks": ["What", "is", "average", "age", "of", "male", "for", "different", "job", "title", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 2, false], null]], [0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"male\"", null]], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Person": ["name", "age", "city", "gender", "job"], "PersonFriend": ["name", "friend", "year"]}, "answer": [[45.0, "doctor"], [35.0, "engineer"]]}, "program_result_list": [["t1 = Person[Person['gender'] == 'male'].groupby('job')\nanswer = t1['age'].mean().to_frame().reset_index()", false], ["t1 = Person[Person['gender'] == 'male']\nanswer = t1.groupby('job')['age'].mean().to_frame().reset_index()", false], ["t1 = Person[Person['gender'] == 'male']\nt2 = t1.groupby('job')['age'].mean().rename('avg(age)').to_frame()\nanswer = t2.reset_index()", false], ["t1 = Person[Person['gender'] == 'male']\nt2 = t1.groupby('job')['age'].mean().rename('avg_age').to_frame()\nanswer = t2", false], ["t1 = Person[Person['gender'] == 'male']\nt2 = t1.groupby('job').mean().reset_index()\nanswer = t2[['job', 'age']]", false], ["t1 = Person[Person['gender'] == 'male']\nt2 = t1.groupby('job')['age'].mean().to_frame().reset_index()\nanswer = t2", false], ["t1 = Person[Person['gender'] == 'male']\nt2 = t1.groupby(['job']).agg({'age': 'mean'})\nanswer = t2", false], ["t1 = Person[Person['gender'] == 'male'].groupby('job').agg({'age': 'mean'})\nanswer = t1.reset_index()", false], ["answer = Person[Person['gender'] == 'male'].groupby('job').agg({'age': 'mean'})", false], ["t1 = Person[Person['gender'] == 'male']\nt2 = t1.groupby('job').mean()\nanswer = t2[['age']]", false], ["t1 = Person[Person['gender'] == 'male']\nt2 = t1.groupby('job')['age'].mean().rename('avg_age')\nanswer = t2.to_frame().reset_index()", false], ["t1 = Person[Person['gender'] == 'male']\nt2 = t1.groupby('job').agg({'age': 'mean'}).reset_index()\nanswer = t2", false], ["t1 = Person[Person['gender'] == 'male']\nt2 = t1.groupby('job').agg({'age': 'mean'}).rename(columns={'age': 'avg_age'})\nanswer = t2.reset_index()", false], ["answer = Person[Person['gender'] == 'male'].groupby('job')['age'].mean().to_frame().reset_index()", false], ["t1 = Person[Person['gender'] == 'male']\nt2 = t1.groupby('job').agg({'age': 'mean'}).rename(columns={'age': 'avg_age'})\nanswer = t2", false], ["t1 = Person[Person['gender'] == 'male']\nt2 = t1.groupby('job')['age'].mean().rename('avg(age)').to_frame().reset_index()\nanswer = t2", false], ["t1 = Person[Person['gender'] == 'Male']\nt2 = t1.groupby('job')['age'].mean()\nanswer = t2", false], ["answer = Person[Person['gender'] == 'male'].groupby('job')['age'].mean().to_frame().reset_index()", false], ["t1 = Person[Person['gender'] == 'male']\nt2 = t1.groupby('job').mean()\nanswer = t2.reset_index().rename(columns={'age': 'avg_age'})", false], ["t1 = Person[Person['gender']=='male']\nt2 = t1.groupby('job')['age'].mean().rename('avg_age')\nanswer = t2.to_frame().reset_index()", false]]}
{"example": {"db_id": "college_1", "query": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'", "query_toks": ["SELECT", "DISTINCT", "T2.emp_fname", ",", "T3.prof_high_degree", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "professor", "AS", "T3", "ON", "T2.emp_num", "=", "T3.emp_num", "JOIN", "department", "AS", "T4", "ON", "T4.dept_code", "=", "T3.dept_code", "WHERE", "T4.dept_name", "=", "'Computer", "Info", ".", "Systems", "'"], "query_toks_no_value": ["select", "distinct", "t2", ".", "emp_fname", ",", "t3", ".", "prof_high_degree", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "professor", "as", "t3", "on", "t2", ".", "emp_num", "=", "t3", ".", "emp_num", "join", "department", "as", "t4", "on", "t4", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t4", ".", "dept_name", "=", "value"], "question": "Find the first names and degree of all professors who are teaching some class in Computer Info. Systems department.", "question_toks": ["Find", "the", "first", "names", "and", "degree", "of", "all", "professors", "who", "are", "teaching", "some", "class", "in", "Computer", "Info", ".", "Systems", "department", "."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 3], ["table_unit", 5], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 17, false], null], "and", [false, 2, [0, [0, 17, false], null], [0, 27, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 28, false], null]]}, "select": [true, [[0, [0, [0, 19, false], null]], [0, [0, [0, 31, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"Computer Info. Systems\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"CLASS": ["CLASS_CODE", "CRS_CODE", "CLASS_SECTION", "CLASS_TIME", "CLASS_ROOM", "PROF_NUM"], "COURSE": ["CRS_CODE", "DEPT_CODE", "CRS_DESCRIPTION", "CRS_CREDIT"], "DEPARTMENT": ["DEPT_CODE", "DEPT_NAME", "SCHOOL_CODE", "EMP_NUM", "DEPT_ADDRESS", "DEPT_EXTENSION"], "EMPLOYEE": ["EMP_NUM", "EMP_LNAME", "EMP_FNAME", "EMP_INITIAL", "EMP_JOBCODE", "EMP_HIREDATE", "EMP_DOB"], "ENROLL": ["CLASS_CODE", "STU_NUM", "ENROLL_GRADE"], "PROFESSOR": ["EMP_NUM", "DEPT_CODE", "PROF_OFFICE", "PROF_EXTENSION", "PROF_HIGH_DEGREE"], "STUDENT": ["STU_NUM", "STU_LNAME", "STU_FNAME", "STU_INIT", "STU_DOB", "STU_HRS", "STU_CLASS", "STU_GPA", "STU_TRANSFER", "DEPT_CODE", "STU_PHONE", "PROF_NUM"]}, "answer": [["Peter", "Ph.D."], ["Carlos", "Ph.D."]]}, "program_result_list": [["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, PROFESSOR, left_on='emp_num', right_on='emp_num')\nt3 = pd.merge(t2, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt4 = t3[t3['dept_name'] == 'computer info. systems']\nanswer = t4[['emp_fname', 'prof_high_degree']].drop_duplicates()", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, PROFESSOR, left_on='emp_num', right_on='emp_num')\nt3 = pd.merge(t2, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt4 = t3[t3['dept_name'] == 'Computer Info. Systems']\nanswer = t4[['emp_fname', 'prof_high_degree']].drop_duplicates()", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, PROFESSOR, left_on='emp_num', right_on='emp_num')\nt3 = pd.merge(t2, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt4 = t3[t3['dept_name'] == 'Computer Info. Systems']\nanswer = t4.drop_duplicates(['emp_fname', 'prof_high_degree'])[['emp_fname', 'prof_high_degree']]", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, PROFESSOR, left_on='emp_num', right_on='emp_num')\nt3 = pd.merge(t2, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt4 = t3[t3['dept_name'] == 'Computer Info. Systems']\nanswer = t4[['emp_fname', 'prof_high_degree']].drop_duplicates()", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, PROFESSOR, left_on='emp_num', right_on='emp_num')\nt3 = pd.merge(t2, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt4 = t3[t3['dept_name'] == 'Computer Info. Systems']\nanswer = t4[['emp_fname', 'prof_high_degree']].drop_duplicates()", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, PROFESSOR, on='emp_num')\nt3 = pd.merge(t2, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nanswer = t3[t3['dept_name'] == 'computer info. systems'][['emp_fname', 'prof_high_degree']].drop_duplicates()", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, PROFESSOR, on='emp_num')\nt3 = pd.merge(t2, DEPARTMENT, on='dept_code')\nt4 = t3[t3['dept_name'] == 'Computer Info. Systems']\nanswer = t4[['emp_fname', 'prof_high_degree']].drop_duplicates()", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, PROFESSOR, left_on='emp_num', right_on='emp_num')\nt3 = pd.merge(t2, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt4 = t3[t3['dept_name'] == 'Computer Info. Systems']\nanswer = t4[['emp_fname', 'prof_high_degree']].drop_duplicates()", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, PROFESSOR, left_on='emp_num', right_on='emp_num')\nt3 = pd.merge(t2, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt4 = t3[t3['dept_name'] == 'computer info. systems']\nanswer = t4[['emp_fname', 'prof_high_degree']].drop_duplicates()", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, PROFESSOR, left_on='emp_num', right_on='emp_num')\nt3 = pd.merge(t2, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt4 = t3[t3['dept_name'] == 'Computer Info. Systems']\nanswer = t4[['emp_fname', 'prof_high_degree']].drop_duplicates()", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, PROFESSOR, on='emp_num')\nt3 = pd.merge(t2, DEPARTMENT, left_on='dept_code_x', right_on='dept_code')\nt4 = t3[t3['dept_name'] == 'computer info. systems']\nanswer = t4[['emp_fname', 'prof_high_degree']].drop_duplicates()", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, PROFESSOR, left_on='emp_num', right_on='emp_num')\nt3 = pd.merge(t2, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt4 = t3[t3['dept_name'] == 'computer info. systems']\nanswer = t4[['emp_fname', 'prof_high_degree']].drop_duplicates()", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, PROFESSOR, left_on='emp_num', right_on='emp_num')\nt3 = pd.merge(t2, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nanswer = t3[t3['dept_name'] == 'Computer Info. Systems'][['emp_fname', 'prof_high_degree']].drop_duplicates()", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, PROFESSOR, on='emp_num')\nt3 = pd.merge(t2, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt4 = t3[t3['dept_name'] == 'computer info. systems']\nanswer = t4[['emp_fname', 'prof_high_degree']].drop_duplicates()", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, PROFESSOR, left_on='emp_num', right_on='emp_num')\nt3 = pd.merge(t2, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt4 = t3[t3['dept_name'] == 'computer info. systems']\nanswer = t4[['emp_fname', 'prof_high_degree']].drop_duplicates()", false], ["t1 = pd.merge(CLASS, EMPLOYEE, on='emp_num')\nt2 = pd.merge(t1, PROFESSOR, on='emp_num')\nt3 = pd.merge(t2, DEPARTMENT, on='dept_code')\nanswer = t3[t3['dept_name'] == 'computer info. systems'][['emp_fname', 'prof_high_degree']].drop_duplicates()", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, PROFESSOR, left_on='emp_num', right_on='emp_num')\nt3 = pd.merge(t2, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nanswer = t3[t3['dept_name'] == 'computer info. systems']['emp_fname', 'prof_high_degree'].drop_duplicates()", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, PROFESSOR, left_on='emp_num', right_on='emp_num')\nt3 = pd.merge(t2, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt4 = t3[t3['dept_name'] == 'Computer Info. Systems']\nanswer = t4[['emp_fname', 'prof_high_degree']].drop_duplicates()", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, PROFESSOR, left_on='prof_num', right_on='emp_num')\nt3 = pd.merge(t2, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt4 = t3[t3['dept_name'] == 'computer info. systems']\nanswer = t4[['emp_fname', 'prof_high_degree']].drop_duplicates()", false], ["t1 = pd.merge(CLASS, EMPLOYEE, left_on='prof_num', right_on='emp_num')\nt2 = pd.merge(t1, PROFESSOR, left_on='emp_num', right_on='emp_num')\nt3 = pd.merge(t2, DEPARTMENT, left_on='dept_code', right_on='dept_code')\nt4 = t3[t3['dept_name'] == 'Computer Info. Systems']\nanswer = t4[['emp_fname', 'prof_high_degree']].drop_duplicates()", false]]}
{"example": {"db_id": "inn_1", "query": "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";", "query_toks": ["SELECT", "roomName", "FROM", "Rooms", "WHERE", "bedType", "=", "``", "King", "''", "OR", "bedType", "=", "``", "Queen", "''", ";"], "query_toks_no_value": ["select", "roomname", "from", "rooms", "where", "bedtype", "=", "value", "or", "bedtype", "=", "value"], "question": "What are the names of rooms that have either king or queen bed?", "question_toks": ["What", "are", "the", "names", "of", "rooms", "that", "have", "either", "king", "or", "queen", "bed", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"King\"", null], "or", [false, 2, [0, [0, 4, false], null], "\"Queen\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Rooms": ["RoomId", "roomName", "beds", "bedType", "maxOccupancy", "basePrice", "decor"], "Reservations": ["Code", "Room", "CheckIn", "CheckOut", "Rate", "LastName", "FirstName", "Adults", "Kids"]}, "answer": [["Recluse and defiance"], ["Interim but salutary"], ["Abscond or bolster"], ["Harbinger but bequest"], ["Immutable before decorum"], ["Convoke and sanguine"], ["Riddle to exculpate"], ["Frugal not apropos"]]}, "program_result_list": [["answer = Rooms[(Rooms['bedtype'] == 'king') | (Rooms['bedtype'] == 'queen')]['roomname']", false], ["answer = Rooms[(Rooms['bedtype'] == 'king') | (Rooms['bedtype'] == 'queen')]['roomname']", false], ["t1 = Rooms[(Rooms['bedtype'] == 'king') | (Rooms['bedtype'] == 'queen')]\nanswer = t1['roomname']", false], ["t1 = Rooms[Rooms['bedtype'] == 'king']\nt2 = Rooms[Rooms['bedtype'] == 'queen']\nt3 = pd.concat([t1, t2], axis=0)\nanswer = t3['roomname'].unique()", false], ["answer = Rooms[(Rooms['bedtype'] == 'king') | (Rooms['bedtype'] == 'queen')]['roomname']", false], ["t1 = Rooms[Rooms['bedtype'] == 'king']\nt2 = Rooms[Rooms['bedtype'] == 'queen']\nanswer = pd.concat([t1, t2])['roomname'].unique()", false], ["t1 = Rooms[(Rooms['bedtype'] == 'king') | (Rooms['bedtype'] == 'queen')]\nanswer = t1['roomname']", false], ["t1 = Rooms[(Rooms['bedtype'] == 'king') | (Rooms['bedtype'] == 'queen')]\nanswer = t1['roomname']", false], ["t1 = Rooms[Rooms['bedtype'].isin(['king', 'queen'])]\nanswer = t1['roomname']", false], ["t1 = Rooms[(Rooms['bedtype'] == 'king') | (Rooms['bedtype'] == 'queen')]\nanswer = t1['roomname']", false], ["t1 = Rooms[(Rooms['bedtype'] == 'king') | (Rooms['bedtype'] == 'queen')]\nanswer = t1['roomname']", false], ["t1 = Rooms[Rooms['bedtype'] == 'king']\nt2 = Rooms[Rooms['bedtype'] == 'queen']\nanswer = pd.concat([t1, t2])['roomname'].unique()", false], ["t1 = Rooms[Rooms['bedtype'] == 'king']\nt2 = Rooms[Rooms['bedtype'] == 'queen']\nanswer = pd.concat([t1, t2])['roomname'].unique()", false], ["t1 = Rooms[Rooms['bedtype'].isin(['king', 'queen'])]\nanswer = t1['roomname']", false], ["t1 = Rooms[(Rooms['bedtype'] == 'king') | (Rooms['bedtype'] == 'queen')]\nanswer = t1['roomname']", false], ["answer = Rooms[Rooms['bedtype'].isin(['king', 'queen'])]['roomname']", false], ["t1 = Rooms.query(\"bedtype == 'queen' or bedtype == 'king'\")\nanswer = t1['roomname']", false], ["t1 = Rooms[(Rooms['bedtype'] == 'king') | (Rooms['bedtype'] == 'queen')]\nanswer = t1['roomname']", false], ["t1 = Rooms[Rooms['bedtype'].isin(['king', 'queen'])]\nanswer = t1['roomname']", false], ["t1 = Rooms[(Rooms['bedtype'] == 'king') | (Rooms['bedtype'] == 'queen')]\nanswer = t1['roomname']", false]]}
{"example": {"db_id": "dorm_1", "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'", "query_toks": ["SELECT", "T3.amenity_name", "FROM", "dorm", "AS", "T1", "JOIN", "has_amenity", "AS", "T2", "ON", "T1.dormid", "=", "T2.dormid", "JOIN", "dorm_amenity", "AS", "T3", "ON", "T2.amenid", "=", "T3.amenid", "WHERE", "T1.dorm_name", "=", "'Smith", "Hall", "'"], "query_toks_no_value": ["select", "t3", ".", "amenity_name", "from", "dorm", "as", "t1", "join", "has_amenity", "as", "t2", "on", "t1", ".", "dormid", "=", "t2", ".", "dormid", "join", "dorm_amenity", "as", "t3", "on", "t2", ".", "amenid", "=", "t3", ".", "amenid", "where", "t1", ".", "dorm_name", "=", "value"], "question": "Find the name of amenities Smith Hall dorm have.", "question_toks": ["Find", "the", "name", "of", "amenities", "Smith", "Hall", "dorm", "have", "."], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 15, false], null], "and", [false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Smith Hall\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Student": ["StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code"], "Dorm": ["dormid", "dorm_name", "student_capacity", "gender"], "Dorm_amenity": ["amenid", "amenity_name"], "Has_amenity": ["dormid", "amenid"], "Lives_in": ["stuid", "dormid", "room_number"]}, "answer": [["Study Room"], ["Carpeted Rooms"], ["4 Walls"], ["Heat"], ["Roof"]]}, "program_result_list": [["t1 = pd.merge(Dorm, Has_amenity, left_on='dormid', right_on='dormid')\nt2 = pd.merge(t1, Dorm_amenity, left_on='amenid', right_on='amenid')\nt3 = t2[t2['dorm_name']=='Smith Hall']['amenity_name']\nanswer = t3", false], ["t1 = pd.merge(Dorm, Has_amenity, left_on='dormid', right_on='dormid')\nt2 = pd.merge(t1, Dorm_amenity, left_on='amenid', right_on='amenid')\nt3 = t2[t2['dorm_name'] == 'Smith Hall']\nanswer = t3['amenity_name']", false], ["t1 = pd.merge(Dorm, Has_amenity, on='dormid')\nt2 = pd.merge(t1, Dorm_amenity, on='amenid')\nt3 = t2[t2['dorm_name'] == 'Smith Hall']\nanswer = t3['amenity_name']", false], ["t1 = pd.merge(Dorm, Has_amenity, left_on='dormid', right_on='dormid')\nt2 = pd.merge(t1, Dorm_amenity, left_on='amenid', right_on='amenid')\nt3 = t2[t2['dorm_name'] == 'smith hall']\nanswer = t3['amenity_name']", false], ["t1 = pd.merge(Dorm, Has_amenity, on='dormid')\nt2 = pd.merge(t1, Dorm_amenity, on='amenid')\nt3 = t2[t2['dorm_name'] == 'Smith Hall']\nanswer = t3['amenity_name']", false], ["t1 = pd.merge(Dorm, Has_amenity, left_on='dormid', right_on='dormid')\nt2 = pd.merge(t1, Dorm_amenity, left_on='amenid', right_on='amenid')\nt3 = t2[t2['dorm_name'] == 'Smith Hall']\nanswer = t3['amenity_name']", false], ["t1 = pd.merge(Dorm, Has_amenity, on='dormid')\nt2 = pd.merge(t1, Dorm_amenity, on='amenid')\nt3 = t2[t2['dorm_name'] == 'Smith Hall']\nanswer = t3['amenity_name']", false], ["t1 = pd.merge(Dorm, Has_amenity, left_on='dormid', right_on='dormid')\nt2 = pd.merge(t1, Dorm_amenity, left_on='amenid', right_on='amenid')\nt3 = t2[t2['dorm_name'] == 'Smith Hall']\nanswer = t3['amenity_name']", false], ["t1 = pd.merge(Dorm, Has_amenity, left_on='dormid', right_on='dormid')\nt2 = pd.merge(t1, Dorm_amenity, left_on='amenid', right_on='amenid')\nt3 = t2[t2['dorm_name'] == 'Smith Hall']\nanswer = t3['amenity_name']", false], ["t1 = pd.merge(Dorm, Has_amenity, left_on='dormid', right_on='dormid')\nt2 = pd.merge(t1, Dorm_amenity, left_on='amenid', right_on='amenid')\nt3 = t2[t2['dorm_name'] == 'Smith Hall']\nanswer = t3['amenity_name']", false], ["t1 = pd.merge(Dorm, Has_amenity, left_on='dormid', right_on='dormid')\nt2 = pd.merge(t1, Dorm_amenity, left_on='amenid', right_on='amenid')\nt3 = t2[t2['dorm_name'] == 'Smith Hall']\nanswer = t3['amenity_name']", false], ["t1 = pd.merge(Dorm, Has_amenity, left_on='dormid', right_on='dormid')\nt2 = pd.merge(t1, Dorm_amenity, left_on='amenid', right_on='amenid')\nt3 = t2[t2['dorm_name'] == 'smith hall']\nanswer = t3['amenity_name']", false], ["t1 = pd.merge(Dorm, Has_amenity, left_on='dormid', right_on='dormid')\nt2 = pd.merge(t1, Dorm_amenity, left_on='amenid', right_on='amenid')\nt3 = t2[t2['dorm_name'] == 'Smith Hall']\nanswer = t3['amenity_name']", false], ["t1 = pd.merge(Dorm, Has_amenity, left_on='dormid', right_on='dormid')\nt2 = pd.merge(t1, Dorm_amenity, left_on='amenid', right_on='amenid')\nt3 = t2[t2['dorm_name'] == 'smith hall']\nanswer = t3['amenity_name']", false], ["t1 = pd.merge(Dorm, Has_amenity, left_on='dormid', right_on='dormid')\nt2 = pd.merge(t1, Dorm_amenity, left_on='amenid', right_on='amenid')\nt3 = t2[t2['dorm_name'] == 'Smith Hall']\nanswer = t3['amenity_name']", false], ["t1 = pd.merge(Dorm, Has_amenity, left_on='dormid', right_on='dormid')\nt2 = pd.merge(t1, Dorm_amenity, left_on='amenid', right_on='amenid')\nt3 = t2[t2['dorm_name'] == 'Smith Hall']\nanswer = t3['amenity_name']", false], ["t1 = pd.merge(Dorm, Has_amenity, left_on='dormid', right_on='dormid')\nt2 = pd.merge(t1, Dorm_amenity, left_on='amenid', right_on='amenid')\nt3 = t2[t2['dorm_name'] == 'smith hall']\nanswer = t3['amenity_name']", false], ["t1 = pd.merge(Dorm, Has_amenity, left_on='dormid', right_on='dormid')\nt2 = pd.merge(t1, Dorm_amenity, left_on='amenid', right_on='amenid')\nt3 = t2[t2['dorm_name'] == 'Smith Hall']\nanswer = t3['amenity_name']", false], ["t1 = pd.merge(Dorm, Has_amenity, left_on='dormid', right_on='dormid')\nt2 = pd.merge(t1, Dorm_amenity, left_on='amenid', right_on='amenid')\nt3 = t2[t2['dorm_name'] == 'Smith Hall']\nanswer = t3['amenity_name']", false], ["t1 = pd.merge(Dorm, Has_amenity, left_on='dormid', right_on='dormid')\nt2 = pd.merge(t1, Dorm_amenity, left_on='amenid', right_on='amenid')\nt3 = t2[t2['dorm_name'] == 'smith hall']\nanswer = t3['amenity_name']", false]]}
{"example": {"db_id": "college_2", "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "query_toks": ["SELECT", "course_id", "FROM", "SECTION", "WHERE", "semester", "=", "'Fall", "'", "AND", "YEAR", "=", "2009", "UNION", "SELECT", "course_id", "FROM", "SECTION", "WHERE", "semester", "=", "'Spring", "'", "AND", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "course_id", "from", "section", "where", "semester", "=", "value", "and", "year", "=", "value", "union", "select", "course_id", "from", "section", "where", "semester", "=", "value", "and", "year", "=", "value"], "question": "Find courses that ran in Fall 2009 or in Spring 2010.", "question_toks": ["Find", "courses", "that", "ran", "in", "Fall", "2009", "or", "in", "Spring", "2010", "."], "sql": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 17, false], null], "\"Fall\"", null], "and", [false, 2, [0, [0, 18, false], null], 2009.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 17, false], null], "\"Spring\"", null], "and", [false, 2, [0, [0, 18, false], null], 2010.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, "db_table_headers": {"classroom": ["building", "room_number", "capacity"], "department": ["dept_name", "building", "budget"], "course": ["course_id", "title", "dept_name", "credits"], "instructor": ["ID", "name", "dept_name", "salary"], "section": ["course_id", "sec_id", "semester", "year", "building", "room_number", "time_slot_id"], "teaches": ["ID", "course_id", "sec_id", "semester", "year"], "student": ["ID", "name", "dept_name", "tot_cred"], "takes": ["ID", "course_id", "sec_id", "semester", "year", "grade"], "advisor": ["s_ID", "i_ID"], "time_slot": ["time_slot_id", "day", "start_hr", "start_min", "end_hr", "end_min"], "prereq": ["course_id", "prereq_id"]}, "answer": [["105"], ["237"], ["242"], ["270"], ["304"], ["334"], ["443"], ["486"], ["493"], ["679"], ["692"], ["735"], ["960"]]}, "program_result_list": [["t1 = section[(section['semester'] == 'Fall') & (section['year'] == 2009)]\nt2 = section[(section['semester'] == 'Spring') & (section['year'] == 2010)]\nt3 = pd.concat([t1, t2])\nanswer = t3['course_id'].unique()", false], ["t1 = section[(section['semester'] == 'Fall') & (section['year'] == 2009)]\nt2 = section[(section['semester'] == 'Spring') & (section['year'] == 2010)]\nt3 = pd.concat([t1, t2])\nanswer = t3['course_id'].unique()", false], ["t1 = section[(section['semester'] == 'Fall') & (section['year'] == 2009)]['course_id']\nt2 = section[(section['semester'] == 'Spring') & (section['year'] == 2010)]['course_id']\nanswer = pd.concat([t1,t2]).unique()", false], ["t1 = section[(section['semester'] == 'Fall') & (section['year'] == 2009)]\nt2 = section[(section['semester'] == 'Spring') & (section['year'] == 2010)]\nt3 = t1.append(t2)\nanswer = t3['course_id'].unique()", false], ["t1 = section[(section['semester'] == 'Fall') & (section['year'] == 2009)]\nt2 = section[(section['semester'] == 'Spring') & (section['year'] == 2010)]\nt3 = pd.concat([t1, t2])\nanswer = t3['course_id']", false], ["t1 = section[(section['semester'] == 'Fall') & (section['year'] == 2009)]['course_id']\nt2 = section[(section['semester'] == 'Spring') & (section['year'] == 2010)]['course_id']\nanswer = pd.concat([t1, t2]).unique()", false], ["t1 = section[(section['semester'] == 'Fall') & (section['year'] == 2009)]\nt2 = section[(section['semester'] == 'Spring') & (section['year'] == 2010)]\nt3 = pd.concat([t1, t2])\nanswer = t3['course_id'].unique()", false], ["t1 = section[(section['semester'] == 'Fall') & (section['year'] == 2009)]\nt2 = section[(section['semester'] == 'Spring') & (section['year'] == 2010)]\nanswer = pd.concat([t1, t2])['course_id'].unique()", false], ["t1 = section[(section['semester'] == 'Fall') & (section['year'] == 2009)]\nt2 = section[(section['semester'] == 'Spring') & (section['year'] == 2010)]\nt3 = pd.concat([t1,t2]).drop_duplicates()\nanswer = t3['course_id'].unique()", false], ["t1 = section[(section['semester'] == 'Fall') & (section['year'] == 2009)]\nt2 = section[(section['semester'] == 'Spring') & (section['year'] == 2010)]\nt3 = pd.concat([t1, t2])\nanswer = t3['course_id'].unique()", false], ["t1 = section[(section['semester'] == 'Fall') & (section['year'] == 2009)]\nt2 = section[(section['semester'] == 'Spring') & (section['year'] == 2010)]\nanswer = pd.concat([t1['course_id'], t2['course_id']]).drop_duplicates().to_frame().reset_index(drop=True)", false], ["t1 = section[(section['semester'] == 'Fall') & (section['year'] == 2009)]\nt2 = section[(section['semester'] == 'Spring') & (section['year'] == 2010)]\nt3 = pd.concat([t1, t2])\nanswer = t3['course_id'].unique()", false], ["t1 = section[(section['semester'] == 'Fall') & (section['year'] == 2009)]\nt2 = section[(section['semester'] == 'Spring') & (section['year'] == 2010)]\nt3 = pd.concat([t1, t2])\nanswer = t3['course_id'].unique()", false], ["t1 = section[(section['semester'] == 'Fall') & (section['year'] == 2009)][['course_id']]\nt2 = section[(section['semester'] == 'Spring') & (section['year'] == 2010)][['course_id']]\nt3 = pd.concat([t1,t2])\nanswer = t3['course_id'].unique()", false], ["t1 = section[(section['semester'] == 'Fall') & (section['year'] == 2009)]\nt2 = section[(section['semester'] == 'Spring') & (section['year'] == 2010)]\nt3 = pd.concat([t1, t2])\nanswer = t3['course_id'].unique()", false], ["t1 = section[(section['semester'] == 'Fall') & (section['year'] == 2009)]\nt2 = section[(section['semester'] == 'Spring') & (section['year'] == 2010)]\nt3 = t1.append(t2)\nanswer = t3['course_id'].unique()", false], ["t1 = section[(section['semester'] == 'Fall') & (section['year'] == 2009)]\nt2 = section[(section['semester'] == 'Spring') & (section['year'] == 2010)]\nanswer = pd.concat([t1, t2])['course_id'].unique()", false], ["t1 = section[(section['semester'] == 'Fall') & (section['year'] == 2009)]\nt2 = section[(section['semester'] == 'Spring') & (section['year'] == 2010)]\nanswer = pd.concat([t1, t2])['course_id'].unique()", false], ["t1 = section[(section['semester'] == 'Fall') & (section['year'] == 2009)]\nt2 = section[(section['semester'] == 'Spring') & (section['year'] == 2010)]\nt3 = pd.concat([t1, t2])\nanswer = t3['course_id'].unique()", false], ["t1 = section[(section['semester'] == 'Fall') & (section['year'] == 2009)]\nt2 = section[(section['semester'] == 'Spring') & (section['year'] == 2010)]\nt3 = pd.concat([t1, t2], ignore_index=True)\nt4 = t3['course_id'].unique()\nanswer = t4", false]]}
{"example": {"db_id": "music_4", "query": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32", "query_toks": ["SELECT", "T2.Song", "FROM", "artist", "AS", "T1", "JOIN", "volume", "AS", "T2", "ON", "T1.Artist_ID", "=", "T2.Artist_ID", "WHERE", "T1.age", ">", "=", "32"], "query_toks_no_value": ["select", "t2", ".", "song", "from", "artist", "as", "t1", "join", "volume", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "artist_id", "where", "t1", ".", "age", ">", "=", "value"], "question": "What are the songs in volumes associated with the artist aged 32 or older?", "question_toks": ["What", "are", "the", "songs", "in", "volumes", "associated", "with", "the", "artist", "aged", "32", "or", "older", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 11, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [[false, 5, [0, [0, 3, false], null], 32.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"artist": ["Artist_ID", "Artist", "Age", "Famous_Title", "Famous_Release_date"], "volume": ["Volume_ID", "Volume_Issue", "Issue_Date", "Weeks_on_Top", "Song", "Artist_ID"], "music_festival": ["ID", "Music_Festival", "Date_of_ceremony", "Category", "Volume", "Result"]}, "answer": [[" The Way"], [" Everybody Have Fun Tonight "], [" Walk Like an Egyptian "], [" Touch Me (I Want Your Body) "], [" With or Without You "], [" (I Just) Died in Your Arms "], ["Looking for a New Love"], ["Head to Toe "]]}, "program_result_list": [["t1 = pd.merge(artist, volume, left_on='artist_id', right_on='artist_id')\nt2 = t1[t1['age'] >= 32]\nanswer = t2['song']", false], ["t1 = pd.merge(artist, volume, on='artist_id')\nt2 = t1[t1['age'] >= 32]\nanswer = t2['song']", false], ["t1 = pd.merge(artist, volume, left_on='artist_id', right_on='artist_id')\nt2 = t1[t1['age'] >= 32]\nanswer = t2['song']", false], ["t1 = pd.merge(artist, volume, left_on='artist_id', right_on='artist_id')\nt2 = t1[t1['age'] >= 32]\nanswer = t2['song']", false], ["t1 = pd.merge(artist, volume, left_on='artist_id', right_on='artist_id')\nt2 = t1[t1['age'] >= 32]\nanswer = t2['song']", false], ["t1 = pd.merge(artist, volume, left_on='artist_id', right_on='artist_id')\nt2 = t1[t1['age'] >= 32]\nanswer = t2['song']", false], ["t1 = pd.merge(artist, volume, on='artist_id')\nt2 = t1[t1['age'] >= 32]\nanswer = t2['song']", false], ["t1 = pd.merge(artist, volume, on='artist_id')\nt2 = t1[t1['age'] >= 32]\nanswer = t2['song']", false], ["t1 = pd.merge(artist, volume, left_on='artist_id', right_on='artist_id')\nt2 = t1[t1['age'] >= 32]\nanswer = t2['song']", false], ["t1 = pd.merge(artist, volume, left_on='artist_id', right_on='artist_id')\nt2 = t1[t1['age'] >= 32]\nanswer = t2['song']", false], ["t1 = pd.merge(artist, volume, left_on='artist_id', right_on='artist_id')\nt2 = t1[t1['age'] >= 32]\nanswer = t2['song']", false], ["t1 = pd.merge(artist, volume, left_on='artist_id', right_on='artist_id')\nt2 = t1[t1['age'] >= 32]\nanswer = t2['song']", false], ["t1 = pd.merge(artist, volume, left_on='artist_id', right_on='artist_id')\nt2 = t1[t1['age'] >= 32]\nanswer = t2['song']", false], ["t1 = pd.merge(artist, volume, on='artist_id')\nt2 = t1[t1['age'] >= 32]\nanswer = t2['song']", false], ["t1 = pd.merge(artist, volume, left_on='artist_id', right_on='artist_id')\nt2 = t1[t1['age'] >= 32]\nanswer = t2['song']", false], ["t1 = pd.merge(artist, volume, on='artist_id')\nt2 = t1[t1['age'] >= 32]\nanswer = t2['song']", false], ["t1 = pd.merge(artist, volume, left_on='artist_id', right_on='artist_id')\nt2 = t1[t1['age'] >= 32]\nanswer = t2['song']", false], ["t1 = pd.merge(artist, volume, left_on='artist_id', right_on='artist_id')\nt2 = t1[t1['age'] >= 32]\nanswer = t2['song']", false], ["t1 = pd.merge(artist, volume, left_on = 'artist_id', right_on='artist_id')\nt2 = t1[t1['age'] >= 32]\nanswer = t2['song']", false], ["t1 = pd.merge(artist, volume, left_on='artist_id', right_on='artist_id')\nt2 = t1[t1['age'] >= 32]\nanswer = t2['song']", false]]}
{"example": {"db_id": "network_2", "query": "SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", ",", "avg", "(", "T1.age", ")", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.friend", "GROUP", "BY", "T2.name", "ORDER", "BY", "avg", "(", "T1.age", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "avg", "(", "t1", ".", "age", ")", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "friend", "group", "by", "t2", ".", "name", "order", "by", "avg", "(", "t1", ".", "age", ")", "desc", "limit", "value"], "question": "Which person whose friends have the oldest average age?", "question_toks": ["Which", "person", "whose", "friends", "have", "the", "oldest", "average", "age", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 7, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [5, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": ["desc", [[0, [5, 2, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Person": ["name", "age", "city", "gender", "job"], "PersonFriend": ["name", "friend", "year"]}, "answer": [["Bob", 45.0]]}, "program_result_list": [["t1 = pd.merge(Person, PersonFriend, left_on='name', right_on='friend')\nt2 = t1.groupby('name').mean().rename(columns={'age': 'avg_age'})\nanswer = t2.sort_values('avg_age', ascending=False).head(1)", false], ["t1 = pd.merge(Person, PersonFriend, left_on='name', right_on='friend')\nt2 = t1.groupby('name')['age'].mean().rename('avg_age')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3['name']", false], ["t1 = pd.merge(Person, PersonFriend, left_on='name', right_on='friend')\nt2 = t1.groupby('name').agg({'age': np.mean}).rename(columns={'age': 'average_age'})\nt3 = t2.sort_values(by='average_age', ascending=False).head(1)\nanswer = t3.index", false], ["t1 = pd.merge(Person, PersonFriend, left_on='name', right_on='friend')\nt2 = t1.groupby('name').agg(['mean'])['age']\nanswer = t2.sort_values('mean', ascending=False).head(1)", false], ["t1 = pd.merge(Person, PersonFriend, left_on='name', right_on='friend')\nt2 = t1.groupby('name')['age'].mean().rename('average_age')\nanswer = t2.sort_values(ascending=False).head(1).to_frame().reset_index()", false], ["t1 = pd.merge(Person, PersonFriend, left_on='name', right_on='friend')\nt2 = t1.groupby(['name']).agg({'age': 'mean'})\nt3 = t2.sort_values(by=['age'], ascending=False)\nanswer = t3.head(1)", false], ["t1 = pd.merge(Person, PersonFriend, left_on='name', right_on='friend')\nt2 = t1.groupby('name').agg({'age': 'mean'}).rename(columns={'age': 'avg'})\nanswer = t2.sort_values(by='avg', ascending=False).head(1).reset_index()[['name']]", false], ["t1 = pd.merge(Person, PersonFriend, left_on='name', right_on='friend')\nt2 = t1.groupby('name').mean().rename(columns={'age': 'avg_age'})\nanswer = t2.sort_values(by='avg_age', ascending=False).head(1)", false], ["t1 = pd.merge(Person, PersonFriend, left_on='name', right_on='friend')\nt2 = t1.groupby('name')['age'].mean().rename('avg_age')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3['name']", false], ["t1 = pd.merge(Person, PersonFriend, left_on='name', right_on='friend')\nt2 = t1.groupby('name').size()\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3['name']", false], ["t1 = pd.merge(Person, PersonFriend, left_on='name', right_on='friend')\nt2 = t1.groupby('name')['age'].mean().rename('avg_age')\nt3 = t2.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t3['name']", false], ["t1 = pd.merge(Person, PersonFriend, left_on='name', right_on='friend')\nt2 = t1.groupby('name').mean()\nanswer = t2.sort_values(by='age', ascending=False).head(1)['age']", false], ["t1 = pd.merge(Person, PersonFriend, left_on='name', right_on='friend')\nt2 = t1.groupby('name').age.mean().rename('avg(t1.age)')\nanswer = t2.sort_values(ascending=False).head(1).to_frame().reset_index()", false], ["t1 = pd.merge(Person, PersonFriend, left_on='name', right_on='friend')\nt2 = t1.groupby('name').mean()\nanswer = t2[['age']].sort_values('age', ascending=False).head(1)", false], ["t1 = pd.merge(Person, PersonFriend, left_on='name', right_on='friend')\nt2 = t1.groupby('name')['age'].mean().rename('avg_age')\nanswer = t2.sort_values(ascending=False).head(1).to_frame().reset_index()", false], ["t1 = pd.merge(Person, PersonFriend, left_on='name', right_on='friend')\nt2 = t1.groupby('name').agg({'age': 'mean'}).rename(columns={'age': 'avg_age'})\nanswer = t2.sort_values('avg_age', ascending=False).head(1).reset_index()", false], ["t1 = pd.merge(Person, PersonFriend, left_on='name', right_on='friend')\nt2 = t1.groupby('name').agg({'age': np.mean}).rename(columns={'age': 'avg_age'})\nanswer = t2.sort_values(by='avg_age', ascending=False).head(1).reset_index()[['name', 'avg_age']]", false], ["t1 = pd.merge(Person, PersonFriend, on='name')\nt2 = t1.groupby('friend').agg({'age':'mean'}).rename(columns={'age':'avg_age'})\nanswer = t2.sort_values(by='avg_age', ascending=False).head(1).reset_index()['friend']", false], ["t1 = pd.merge(Person, PersonFriend, left_on='name', right_on='friend')\nt2 = t1.groupby('name').mean()\nanswer = t2['age'].sort_values(ascending=False).head(1).to_frame().reset_index()", false], ["t1 = pd.merge(Person, PersonFriend, left_on='name', right_on='friend')\nt2 = t1.groupby('name').age.mean().rename('avg_age').to_frame().reset_index()\nanswer = t2.sort_values(by='avg_age', ascending=False).iloc[[0]]", false]]}
{"example": {"db_id": "manufactory_1", "query": "SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter", "query_toks": ["SELECT", "count", "(", "DISTINCT", "T1.name", ")", ",", "T2.Headquarter", "FROM", "products", "AS", "T1", "JOIN", "manufacturers", "AS", "T2", "ON", "T1.Manufacturer", "=", "T2.code", "GROUP", "BY", "T2.Headquarter"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", ",", "t2", ".", "headquarter", "from", "products", "as", "t1", "join", "manufacturers", "as", "t2", "on", "t1", ".", "manufacturer", "=", "t2", ".", "code", "group", "by", "t2", ".", "headquarter"], "question": "Find the number of different products that are produced by companies at different headquarter cities.", "question_toks": ["Find", "the", "number", "of", "different", "products", "that", "are", "produced", "by", "companies", "at", "different", "headquarter", "cities", "."], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 7, true], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Manufacturers": ["Code", "Name", "Headquarter", "Founder", "Revenue"], "Products": ["Code", "Name", "Price", "Manufacturer"]}, "answer": [[3, "Austin"], [1, "Beijing"], [3, "Los Angeles"], [2, "Paris"], [1, "Taiwan"], [1, "Tokyo"]]}, "program_result_list": [["t1 = pd.merge(Products, Manufacturers, left_on='manufacturer', right_on='code')\nt2 = t1[['name', 'headquarter']].drop_duplicates().groupby('headquarter')['name'].count().rename('count').to_frame().reset_index()\nanswer = t2", false], ["t1 = pd.merge(Products, Manufacturers, left_on='manufacturer', right_on='code')\nt2 = t1.groupby('headquarter')['name'].nunique().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Products, Manufacturers, left_on='manufacturer', right_on='code')\nt2 = t1.groupby('headquarter').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Products, Manufacturers, left_on='manufacturer', right_on='code')\nanswer = t1.groupby('headquarter').agg({'name': 'nunique'}).rename(columns={'name': 'count'})", false], ["t1 = pd.merge(Products, Manufacturers, left_on='manufacturer', right_on='code')\nt2 = t1.groupby('headquarter')['name_x'].nunique().rename('count').to_frame().reset_index()\nanswer = t2['count']", false], ["t1 = pd.merge(Products, Manufacturers, left_on='manufacturer', right_on='code')\nt2 = t1.groupby('headquarter')['name'].nunique()\nanswer = t2.to_frame().rename(columns={'name': 'count'})", false], ["t1 = pd.merge(Products, Manufacturers, left_on='manufacturer', right_on='code')\nt2 = t1.groupby('headquarter').nunique()\nanswer = t2['name']", false], ["t1 = pd.merge(Manufacturers, Products, left_on='code', right_on='manufacturer')\nt2 = t1.groupby('headquarter').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Products, Manufacturers, left_on='manufacturer', right_on='code')\nt2 = t1.groupby('headquarter').agg({'name': 'nunique'})\nanswer = t2", false], ["t1 = pd.merge(Products, Manufacturers, left_on='manufacturer', right_on='code')\nt2 = t1.groupby('headquarter')['name'].nunique()\nanswer = t2.to_frame().reset_index()\nanswer.columns = ['headquarter', 'count']", false], ["t1 = pd.merge(Products, Manufacturers, left_on='manufacturer', right_on='code')\nt2 = t1.groupby('headquarter').agg({'name': pd.Series.nunique}).reset_index()\nanswer = t2", false], ["t1 = pd.merge(Products, Manufacturers, left_on='manufacturer', right_on='code')\nt2 = t1.groupby('headquarter')['name'].nunique().to_frame().reset_index()\nanswer = t2['headquarter'].size", false], ["t1 = pd.merge(Manufacturers, Products, left_on='code', right_on='manufacturer')\nt2 = t1.groupby('headquarter')['name'].nunique().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Products, Manufacturers, left_on='manufacturer', right_on='code')\nt2 = t1.groupby('headquarter').agg({'name': lambda x: len(x.unique())})\nanswer = t2.rename(columns={'name': 'count'})", false], ["t1 = pd.merge(Products, Manufacturers, left_on='manufacturer', right_on='code')\nt2 = t1.groupby('headquarter')['name'].nunique()\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Products, Manufacturers, left_on='manufacturer', right_on='code')\nt2 = t1.groupby(['headquarter'])['name'].nunique()\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Products, Manufacturers, left_on='manufacturer', right_on='code')\nt2 = t1.groupby('headquarter').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(Products, Manufacturers, on='code')\nt2 = t1.groupby('headquarter').agg({'name': pd.Series.nunique}).rename(columns={'name': 'count'})\nanswer = t2", false], ["t1 = pd.merge(Products, Manufacturers, left_on='manufacturer', right_on='code')\nt2 = t1.groupby('headquarter').size().rename('count').to_frame().reset_index()\nanswer = t2['count']", false], ["t1 = pd.merge(Products, Manufacturers, left_on='manufacturer', right_on='code')\nt2 = t1.groupby(['headquarter'])['name_x'].nunique().rename('count').to_frame().reset_index()\nanswer = t2['count']", false]]}
{"example": {"db_id": "aircraft", "query": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft", "query_toks": ["SELECT", "T2.Location", ",", "T1.Aircraft", "FROM", "aircraft", "AS", "T1", "JOIN", "MATCH", "AS", "T2", "ON", "T1.Aircraft_ID", "=", "T2.Winning_Aircraft"], "query_toks_no_value": ["select", "t2", ".", "location", ",", "t1", ".", "aircraft", "from", "aircraft", "as", "t1", "join", "match", "as", "t2", "on", "t1", ".", "aircraft_id", "=", "t2", ".", "winning_aircraft"], "question": "Please list the location and the winning aircraft name.", "question_toks": ["Please", "list", "the", "location", "and", "the", "winning", "aircraft", "name", "."], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"pilot": ["Pilot_Id", "Name", "Age"], "aircraft": ["Aircraft_ID", "Aircraft", "Description", "Max_Gross_Weight", "Total_disk_area", "Max_disk_Loading"], "match": ["Round", "Location", "Country", "Date", "Fastest_Qualifying", "Winning_Pilot", "Winning_Aircraft"], "airport": ["Airport_ID", "Airport_Name", "Total_Passengers", "%_Change_2007", "International_Passengers", "Domestic_Passengers", "Transit_Passengers", "Aircraft_Movements", "Freight_Metric_Tonnes"], "airport_aircraft": ["ID", "Airport_ID", "Aircraft_ID"]}, "answer": [["Mina' Zayid , Abu Dhabi", "Robinson R-22"], ["Swan River , Perth", "Robinson R-22"], ["Flamengo Beach , Rio de Janeiro", "Bell 206B3 JetRanger"], ["Windsor , Ontario", "Mil Mi-26"], ["New York City", "CH-47D Chinook"], ["EuroSpeedway Lausitz", "Mil Mi-26"], ["River Danube , Budapest", "CH-53E Super Stallion"]]}, "program_result_list": [["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(match, aircraft, left_on='winning_aircraft', right_on='aircraft_id')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false], ["t1 = pd.merge(aircraft, match, left_on='aircraft_id', right_on='winning_aircraft')\nanswer = t1[['location', 'aircraft']]", false]]}
{"example": {"db_id": "wine_1", "query": "SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation", "query_toks": ["SELECT", "avg", "(", "Price", ")", ",", "avg", "(", "Score", ")", ",", "Appelation", "FROM", "WINE", "GROUP", "BY", "Appelation"], "query_toks_no_value": ["select", "avg", "(", "price", ")", ",", "avg", "(", "score", ")", ",", "appelation", "from", "wine", "group", "by", "appelation"], "question": "What are the average price and score of wines grouped by appelation?", "question_toks": ["What", "are", "the", "average", "price", "and", "score", "of", "wines", "grouped", "by", "appelation", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 17, false], null]], [5, [0, [0, 18, false], null]], [0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [[0, 13, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"grapes": ["ID", "Grape", "Color"], "appellations": ["No", "Appelation", "County", "State", "Area", "isAVA"], "wine": ["No", "Grape", "Winery", "Appelation", "State", "Name", "Year", "Price", "Score", "Cases", "Drink"]}, "answer": [[29.142857142857142, 88.14285714285714, "Alexander Valley"], [31.5, 90.0, "Amador County"], [18.0, 87.0, "Amador-Mendocino-Sonoma Counties"], [53.333333333333336, 92.33333333333333, "Anderson Valley"], [31.0, 92.0, "Arroyo Grande Valley"], [125.0, 88.0, "Atlas Peak"], [46.5, 91.0, "Bennett Valley"], [20.0, 84.0, "Calaveras County"], [39.48275862068966, 87.82758620689656, "California"], [36.166666666666664, 90.0, "Carneros"], [13.0, 87.0, "Central Coast"], [52.5, 92.0, "Chalk Hill"], [25.0, 92.0, "Chalone"], [27.8, 87.2, "Contra Costa County"], [27.653846153846153, 89.3076923076923, "Dry Creek Valley"], [29.5, 89.0, "Edna Valley"], [25.0, 78.0, "Fiddletown"], [40.0, 91.0, "Green Valley of Russian River Valley"], [20.0, 87.0, "Guenoc Valley"], [21.0, 88.0, "Happy Canyon of Santa Barbara"], [29.0, 93.0, "Howell Mountain"], [37.5, 89.5, "Knights Valley"], [26.0, 87.0, "Lake County"], [40.0, 89.0, "Livermore Valley"], [21.5, 87.5, "Lodi"], [15.333333333333334, 86.33333333333333, "Mendocino County"], [22.5, 89.0, "Monterey County"], [38.333333333333336, 90.66666666666667, "Mount Harlan"], [53.333333333333336, 90.66666666666667, "Mount Vedeer"], [59.135416666666664, 90.47916666666667, "Napa Valley"], [18.0, 86.0, "Napa-Sonoma counties"], [12.0, 85.0, "North Coast"], [95.0, 90.5, "Oakville"], [32.285714285714285, 88.42857142857143, "Paso Robles"], [49.0, 90.5, "Red Hills Lake County"], [38.0, 90.0, "Rockpile"], [49.60377358490566, 91.79245283018868, "Russian River Valley"], [45.714285714285715, 89.42857142857143, "Rutherford"], [31.5, 89.5, "San Luis Obispo County"], [28.0, 89.41666666666667, "Santa Barbara County"], [40.0, 93.0, "Santa Cruz Mountains"], [46.285714285714285, 91.23809523809524, "Santa Lucia Highlands"], [41.5, 91.25, "Santa Maria Valley"], [29.333333333333332, 88.73333333333333, "Santa Ynez Valley"], [25.0, 86.0, "Shenandoah Valley"], [10.0, 82.0, "Sierra Foothills"], [35.0, 89.0, "Solano County"], [49.02564102564103, 90.82051282051282, "Sonoma Coast"], [43.48148148148148, 90.4074074074074, "Sonoma County"], [42.68421052631579, 89.78947368421052, "Sonoma Valley"], [15.0, 86.0, "Sonoma-Lake Counties"], [70.66666666666667, 89.33333333333333, "Spring Mountain District"], [77.5, 91.5, "St. Helena"], [60.35294117647059, 90.88235294117646, "Sta. Rita Hills"], [84.5, 92.25, "Stags Leap District"], [25.0, 91.0, "Yolo County"], [90.0, 90.0, "Yountville"]]}, "program_result_list": [["t1 = wine.groupby('appelation')\nt2 = t1[['price', 'score']].mean().rename(columns = {'price': 'avg_price', 'score': 'avg_score'})\nanswer = t2", false], ["t1 = wine.groupby('appelation').mean()\nanswer = t1[['price', 'score']]", false], ["t1 = wine.groupby('appelation').mean()[['price', 'score']].rename(columns={'price': 'avg_price', 'score': 'avg_score'})\nanswer = t1.reset_index()", false], ["t1 = wine.groupby('appelation')[['price', 'score']].mean()\nanswer = t1.reset_index()", false], ["t1 = wine.groupby('appelation').agg({'price': 'mean', 'score': 'mean'}).rename(columns={'price': 'avg_price', 'score': 'avg_score'})\nanswer = t1.reset_index()", false], ["t1 = wine.groupby('appelation').agg({'price': 'mean', 'score': 'mean'}).rename(columns={'price': 'avg_price', 'score': 'avg_score'})\nanswer = t1.reset_index()", false], ["t1 = wine.groupby('appelation').agg({'price': 'mean', 'score': 'mean'}).rename(columns={'price': 'avg_price', 'score': 'avg_score'})\nanswer = t1.reset_index()", false], ["t1 = wine.groupby('appelation').mean()\nanswer = t1[['price', 'score']]", false], ["t1 = wine.groupby('appelation').agg({'price': 'mean', 'score': 'mean'}).reset_index()\nt1.rename(columns={'price': 'avg(price)', 'score': 'avg(score)'}, inplace=True)\nanswer = t1", false], ["answer = wine.groupby('appelation').agg({'price': 'mean', 'score': 'mean'}).reset_index()", false], ["t1 = wine.groupby('appelation', as_index=False).agg({'price': 'mean', 'score': 'mean'})\nanswer = t1[['appelation', 'price', 'score']]", false], ["t1 = wine.groupby('appelation')\nanswer = t1[['price', 'score']].mean()", false], ["t1 = wine.groupby('appelation')\nanswer = t1.agg({'price': np.mean, 'score': np.mean}).reset_index()", false], ["answer = wine.groupby('appelation').agg({'price': 'mean', 'score': 'mean'})", false], ["t1 = wine.groupby('appelation').agg({'price': np.mean, 'score': np.mean}).rename(columns={'price': 'avg_price', 'score': 'avg_score'})\nanswer = t1[['avg_price', 'avg_score']]", false], ["t1 = wine.groupby('appelation')\nanswer = t1['price', 'score'].mean()", false], ["t1 = wine.groupby('appelation')['price', 'score'].mean().rename(columns={'price': 'avg_price', 'score': 'avg_score'})\nanswer = t1.reset_index()", false], ["t1 = wine.groupby('appelation').agg({'price': np.mean, 'score': np.mean})\nanswer = t1.reset_index()", false], ["t1 = wine.groupby('appelation')\nanswer = t1[['price', 'score']].mean().reset_index()", false], ["t1 = wine.groupby('appelation').agg({'price': 'mean', 'score': 'mean'})\nanswer = t1.reset_index()", false]]}
{"example": {"db_id": "college_1", "query": "SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.school_code", "FROM", "department", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.school_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "school_code", "from", "department", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "school_code"], "question": "What is the number of professors for different school?", "question_toks": ["What", "is", "the", "number", "of", "professors", "for", "different", "school", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 28, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [[0, 13, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"CLASS": ["CLASS_CODE", "CRS_CODE", "CLASS_SECTION", "CLASS_TIME", "CLASS_ROOM", "PROF_NUM"], "COURSE": ["CRS_CODE", "DEPT_CODE", "CRS_DESCRIPTION", "CRS_CREDIT"], "DEPARTMENT": ["DEPT_CODE", "DEPT_NAME", "SCHOOL_CODE", "EMP_NUM", "DEPT_ADDRESS", "DEPT_EXTENSION"], "EMPLOYEE": ["EMP_NUM", "EMP_LNAME", "EMP_FNAME", "EMP_INITIAL", "EMP_JOBCODE", "EMP_HIREDATE", "EMP_DOB"], "ENROLL": ["CLASS_CODE", "STU_NUM", "ENROLL_GRADE"], "PROFESSOR": ["EMP_NUM", "DEPT_CODE", "PROF_OFFICE", "PROF_EXTENSION", "PROF_HIGH_DEGREE"], "STUDENT": ["STU_NUM", "STU_LNAME", "STU_FNAME", "STU_INIT", "STU_DOB", "STU_HRS", "STU_CLASS", "STU_GPA", "STU_TRANSFER", "DEPT_CODE", "STU_PHONE", "PROF_NUM"]}, "answer": [[12, "A&SCI"], [10, "BUS"]]}, "program_result_list": [["t1 = pd.merge(DEPARTMENT, PROFESSOR, left_on='dept_code', right_on='dept_code')\nt2 = t1.groupby('school_code').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(DEPARTMENT, PROFESSOR, left_on='dept_code', right_on='dept_code')\nt2 = t1.groupby('school_code').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(DEPARTMENT, PROFESSOR, on='dept_code')\nanswer = t1.groupby('school_code').size().rename('count').to_frame().reset_index()", false], ["t1 = pd.merge(DEPARTMENT, PROFESSOR, left_on='dept_code', right_on='dept_code')\nanswer = t1.groupby('school_code').size().rename('count')", false], ["t1 = pd.merge(DEPARTMENT, PROFESSOR, on='dept_code')\nanswer = t1.groupby('school_code').size().rename('count')", false], ["t1 = pd.merge(DEPARTMENT, PROFESSOR, left_on='dept_code', right_on='dept_code')\nt2 = t1.groupby('school_code').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(DEPARTMENT, PROFESSOR, left_on='dept_code', right_on='dept_code')\nt2 = t1.groupby('school_code').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(DEPARTMENT, PROFESSOR, left_on='dept_code', right_on='dept_code')\nanswer = t1.groupby('school_code').size().rename('count').to_frame().reset_index()", false], ["t1 = pd.merge(DEPARTMENT, PROFESSOR, left_on='dept_code', right_on='dept_code')\nt2 = t1.groupby('school_code').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(DEPARTMENT, PROFESSOR, on='dept_code')\nt2 = t1.groupby('school_code').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(DEPARTMENT, PROFESSOR, left_on='dept_code', right_on='dept_code')\nt2 = t1.groupby('school_code').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(DEPARTMENT, PROFESSOR, left_on='dept_code', right_on='dept_code')\nt2 = t1.groupby('school_code').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(DEPARTMENT, PROFESSOR, left_on='dept_code', right_on='dept_code')\nt2 = t1.groupby('school_code').size().rename('count').to_frame().reset_index()\nanswer = t2", false], ["t1 = pd.merge(DEPARTMENT, PROFESSOR, left_on='dept_code', right_on='dept_code')\nt2 = t1.groupby('school_code').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(DEPARTMENT, PROFESSOR, left_on='dept_code', right_on='dept_code')\nanswer = t1.groupby('school_code').size().rename('count').to_frame().reset_index()", false], ["t1 = pd.merge(DEPARTMENT, PROFESSOR, left_on='dept_code', right_on='dept_code')\nt2 = t1.groupby('school_code').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(DEPARTMENT, PROFESSOR, left_on='dept_code', right_on='dept_code')\nt2 = t1.groupby('school_code').size().rename('count')\nanswer = t2.to_frame().reset_index()", false], ["t1 = pd.merge(DEPARTMENT, PROFESSOR, left_on='dept_code', right_on='dept_code')\nt2 = t1.groupby('school_code').size().rename('count').to_frame().reset_index()\nanswer = t2", false], ["t1 = pd.merge(DEPARTMENT, PROFESSOR, left_on='dept_code', right_on='dept_code')\nt2 = t1.groupby('school_code').size().rename('count').to_frame().reset_index()\nanswer = t2", false], ["t1 = pd.merge(DEPARTMENT, PROFESSOR, left_on='dept_code', right_on='dept_code')\nt2 = t1.groupby('school_code').size().rename('count')\nanswer = t2.to_frame().reset_index()", false]]}
{"example": {"db_id": "activity_1", "query": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'", "query_toks": ["SELECT", "T1.stuid", "FROM", "participates_in", "AS", "T1", "JOIN", "activity", "AS", "T2", "ON", "T2.actid", "=", "T2.actid", "WHERE", "T2.activity_name", "=", "'Canoeing", "'", "INTERSECT", "SELECT", "T1.stuid", "FROM", "participates_in", "AS", "T1", "JOIN", "activity", "AS", "T2", "ON", "T2.actid", "=", "T2.actid", "WHERE", "T2.activity_name", "=", "'Kayaking", "'"], "query_toks_no_value": ["select", "t1", ".", "stuid", "from", "participates_in", "as", "t1", "join", "activity", "as", "t2", "on", "t2", ".", "actid", "=", "t2", ".", "actid", "where", "t2", ".", "activity_name", "=", "value", "intersect", "select", "t1", ".", "stuid", "from", "participates_in", "as", "t1", "join", "activity", "as", "t2", "on", "t2", ".", "actid", "=", "t2", ".", "actid", "where", "t2", ".", "activity_name", "=", "value"], "question": "Which students participate in both Canoeing and Kayaking as their activities? Tell me their student ids.", "question_toks": ["Which", "students", "participate", "in", "both", "Canoeing", "and", "Kayaking", "as", "their", "activities", "?", "Tell", "me", "their", "student", "ids", "."], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Canoeing\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Kayaking\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "db_table_headers": {"Activity": ["actid", "activity_name"], "Participates_in": ["stuid", "actid"], "Faculty_Participates_in": ["FacID", "actid"], "Student": ["StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code"], "Faculty": ["FacID", "Lname", "Fname", "Rank", "Sex", "Phone", "Room", "Building"]}, "answer": [[1001], [1002], [1003], [1004], [1005], [1006], [1007], [1008], [1009], [1010], [1011], [1012], [1014], [1015], [1016], [1017], [1018], [1019], [1020], [1021], [1022], [1023], [1024], [1025], [1028], [1029], [1030], [1033], [1034], [1035]]}, "program_result_list": [["t1 = pd.merge(Participates_in, Activity, left_on='actid', right_on='actid')\nt2 = t1[t1['activity_name'] == 'Canoeing'][['stuid']]\nt3 = t1[t1['activity_name'] == 'Kayaking'][['stuid']]\nt4 = pd.merge(t2, t3, on='stuid', how='inner')\nanswer = t4['stuid']", false], ["t1 = pd.merge(Participates_in, Activity, left_on='actid', right_on='actid')\nt2 = t1[t1['activity_name'] == 'Canoeing']\nt3 = pd.merge(Participates_in, Activity, left_on='actid', right_on='actid')\nt4 = t3[t3['activity_name'] == 'Kayaking']\nt5 = pd.merge(t2, t4, on='stuid', how='inner')\nanswer = t5['stuid']", false], ["t1 = pd.merge(Participates_in, Activity, left_on='actid', right_on='actid')\nt2 = t1[t1['activity_name'] == 'Canoeing']\nt3 = pd.merge(Participates_in, Activity, left_on='actid', right_on='actid')\nt4 = t3[t3['activity_name'] == 'Kayaking']\nt5 = pd.merge(t2, t4, on='stuid', how='inner')\nanswer = t5['stuid']", false], ["t1 = pd.merge(Participates_in, Activity, left_on='actid', right_on='actid')\nt2 = t1[t1['activity_name'] == 'Canoeing']\nt3 = t1[t1['activity_name'] == 'Kayaking']\nanswer = t2[t2['stuid'].isin(t3['stuid'])]['stuid'].unique()", false], ["t1 = pd.merge(Participates_in, Activity, left_on='actid', right_on='actid')\nt2 = t1[t1['activity_name'] == 'Canoeing']\nt3 = pd.merge(Participates_in, Activity, left_on='actid', right_on='actid')\nt4 = t3[t3['activity_name'] == 'Kayaking']\nanswer = t2[t2['stuid'].isin(t4['stuid'])]['stuid']", false], ["t1 = pd.merge(Participates_in, Activity, left_on='actid', right_on='actid')\nt2 = t1[t1['activity_name'] == 'Canoeing']\nt3 = t1[t1['activity_name'] == 'Kayaking']\nanswer = t2[t2['stuid'].isin(t3['stuid'])]['stuid'].unique()", false], ["t1 = pd.merge(Participates_in, Activity, left_on='actid', right_on='actid')\nt2 = t1[t1['activity_name'] == 'Canoeing']\nt3 = pd.merge(Participates_in, Activity, left_on='actid', right_on='actid')\nt4 = t3[t3['activity_name'] == 'Kayaking']\nanswer = t2[t2['stuid'].isin(t4['stuid'])]['stuid']", false], ["t1 = pd.merge(Activity, Participates_in, left_on='actid', right_on='actid')\nt2 = t1[t1['activity_name'] == 'Canoeing']['stuid'].to_frame()\nt3 = pd.merge(Activity, Participates_in, left_on='actid', right_on='actid')\nt4 = t3[t3['activity_name'] == 'Kayaking']['stuid'].to_frame()\nt5 = pd.merge(t2, t4, on='stuid', how='inner')\nanswer = t5['stuid'].to_frame()", false], ["t1 = pd.merge(Activity, Participates_in, left_on='actid', right_on='actid')\nt2 = t1[t1['activity_name'] == 'Canoeing']\nt3 = pd.merge(Activity, Participates_in, left_on='actid', right_on='actid')\nt4 = t3[t3['activity_name'] == 'Kayaking']\nt5 = pd.merge(t2, t4, how='inner', on='stuid')\nanswer = t5['stuid_x'].unique()", false], ["t1 = pd.merge(Participates_in, Activity, left_on='actid', right_on='actid')\nt2 = t1[t1['activity_name'] == 'Canoeing']\nt3 = t1[t1['activity_name'] == 'Kayaking']\nt4 = pd.merge(t2, t3, on='stuid', how='inner')\nanswer = t4['stuid']", false], ["t1 = pd.merge(Participates_in, Activity, left_on='actid',right_on='actid')\nt2 = t1[t1['activity_name'] == 'Canoeing']\nt3 = pd.merge(Participates_in, Activity, left_on='actid',right_on='actid')\nt4 = t3[t3['activity_name'] == 'Kayaking']\nt5 = pd.merge(t2, t4, on='stuid', how='inner')\nanswer = t5['stuid_x']", false], ["t1 = pd.merge(Participates_in, Activity, on='actid')\nt2 = t1[t1['activity_name'] == 'Canoeing']\nt3 = pd.merge(Participates_in, Activity, on='actid')\nt4 = t3[t3['activity_name'] == 'Kayaking']\nanswer = t2[t2['stuid'].isin(t4['stuid'])]['stuid']", false], ["t1 = pd.merge(Activity, Participates_in, left_on='actid', right_on='actid')\nt2 = t1[t1['activity_name'] == 'Canoeing']\nt3 = pd.merge(Activity, Participates_in, left_on='actid', right_on='actid')\nt4 = t3[t3['activity_name'] == 'Kayaking']\nanswer = pd.merge(t2, t4, on='stuid')['stuid'].unique()", false], ["t1 = pd.merge(Participates_in, Activity, left_on='actid', right_on='actid')\nt2 = t1[t1['activity_name'] == 'Canoeing']\nt3 = pd.merge(Participates_in, Activity, left_on='actid', right_on='actid')\nt4 = t3[t3['activity_name'] == 'Kayaking']\nt5 = t2[t2['stuid'].isin(t4['stuid'])]\nanswer = t5['stuid']", false], ["t1 = pd.merge(Participates_in, Activity, left_on='actid', right_on='actid')\nt2 = t1[t1['activity_name'] == 'Canoeing']\nt3 = pd.merge(Participates_in, Activity, left_on='actid', right_on='actid')\nt4 = t3[t3['activity_name'] == 'Kayaking']\nt5 = pd.merge(t2, t4, on='stuid')\nanswer = t5['stuid']", false], ["t1 = pd.merge(Participates_in, Activity, left_on='actid', right_on='actid')\nt2 = t1[t1['activity_name'] == 'Canoeing']\nt3 = pd.merge(Participates_in, Activity, left_on='actid', right_on='actid')\nt4 = t3[t3['activity_name'] == 'Kayaking']\nt5 = pd.merge(t2, t4, left_on='stuid', right_on='stuid')\nanswer = t5['stuid_x'].unique()", false], ["t1 = pd.merge(Participates_in, Activity, left_on='actid', right_on='actid')\nt2 = t1[t1['activity_name'] == 'Canoeing']\nt3 = t1[t1['activity_name'] == 'Kayaking']\nt4 = pd.merge(t2, t3, how='inner', left_on='stuid', right_on='stuid')\nanswer = t4['stuid_x']", false], ["t1 = pd.merge(Activity, Participates_in, left_on='actid', right_on='actid')\nt2 = t1[t1['activity_name'] == 'Canoeing']\nt3 = pd.merge(Activity, Participates_in, left_on='actid', right_on='actid')\nt4 = t3[t3['activity_name'] == 'Kayaking']\nt5 = pd.merge(t2, t4, on='stuid')\nanswer = t5['stuid'].unique()", false], ["t1 = pd.merge(Participates_in, Activity, left_on='actid', right_on='actid')\nt2 = t1[t1['activity_name'] == 'Canoeing']\nt3 = pd.merge(Participates_in, Activity, left_on='actid', right_on='actid')\nt4 = t3[t3['activity_name'] == 'Kayaking']\nanswer = t2[t2.stuid.isin(t4.stuid)].stuid.unique()", false], ["t1 = pd.merge(Participates_in, Activity, left_on='actid', right_on='actid')\nt2 = t1[t1['activity_name'] == 'Canoeing']\nt3 = pd.merge(Participates_in, Activity, left_on='actid', right_on='actid')\nt4 = t3[t3['activity_name'] == 'Kayaking']\nanswer = t2['stuid'][t2['stuid'].isin(t4['stuid'])].unique()", false]]}
{"example": {"db_id": "music_1", "query": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7", "query_toks": ["SELECT", "DISTINCT", "artist_name", "FROM", "artist", "WHERE", "country", "=", "``", "Bangladesh", "''", "EXCEPT", "SELECT", "DISTINCT", "artist_name", "FROM", "song", "WHERE", "rating", ">", "7"], "query_toks_no_value": ["select", "distinct", "artist_name", "from", "artist", "where", "country", "=", "value", "except", "select", "distinct", "artist_name", "from", "song", "where", "rating", ">", "value"], "question": "What are the names of the different artists from Bangladesh who never received a rating higher than a 7?", "question_toks": ["What", "are", "the", "names", "of", "the", "different", "artists", "from", "Bangladesh", "who", "never", "received", "a", "rating", "higher", "than", "a", "7", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [true, [[0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Bangladesh\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [true, [[0, [0, [0, 14, false], null]]]], "where": [[false, 3, [0, [0, 18, false], null], 7.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "db_table_headers": {"genre": ["g_name", "rating", "most_popular_in"], "artist": ["artist_name", "country", "gender", "preferred_genre"], "files": ["f_id", "artist_name", "file_size", "duration", "formats"], "song": ["song_name", "artist_name", "country", "f_id", "genre_is", "rating", "languages", "releasedate", "resolution"]}, "answer": [["Farida"], ["Prity"]]}, "program_result_list": [["t1 = artist[artist['country'] == 'Bangladesh']\nt2 = song[song['rating'] > 7]\nanswer = t1[~t1['artist_name'].isin(t2['artist_name'])]", false], ["t1 = artist[artist['country'] == 'Bangladesh'].rename(columns={'artist_name': 'artist_name_1'})\nt2 = song[song['rating'] > 7].rename(columns={'artist_name': 'artist_name_2'})\nt3 = pd.merge(t1, t2, left_on='artist_name_1', right_on='artist_name_2', how='left')\nt4 = t3[t3['artist_name_2'].isnull()][['artist_name_1']]\nanswer = t4['artist_name_1'].unique()", false], ["t1 = artist[artist['country'] == 'Bangladesh']['artist_name'].unique()\nt2 = song[song['rating'] > 7]['artist_name'].unique()\nanswer = np.setdiff1d(t1, t2)", false], ["t1 = artist[artist['country'] == 'Bangladesh']\nt2 = song[song['rating'] > 7]\nanswer = t1[~t1['artist_name'].isin(t2['artist_name'])]['artist_name'].unique()", false], ["t1 = artist[artist['country'] == 'Bangladesh'].drop_duplicates(['artist_name'])\nt2 = song[song['rating'] > 7].drop_duplicates(['artist_name'])\nanswer = pd.concat([t1, t2, t2]).drop_duplicates(keep=False)['artist_name']", false], ["t1 = artist[artist['country'] == 'Bangladesh']\nt2 = song[song['rating'] > 7]\nt3 = pd.merge(t1, t2, left_on='artist_name', right_on='artist_name', how='outer', indicator=True)\nt4 = t3[t3['_merge'] == 'left_only']\nanswer = t4['artist_name']", false], ["t1 = artist[artist['country'] == 'Bangladesh']\nt2 = song[song['rating'] > 7]\nt3 = pd.merge(t1, t2, on='artist_name', how='outer', indicator=True)\nanswer = t3[t3['_merge'] == 'left_only']['artist_name'].unique()", false], ["t1 = artist[artist['country'] == 'Bangladesh']\nt2 = song[song['rating'] > 7]\nanswer = t1[~t1.isin(t2)].dropna()['artist_name']", false], ["t1 = artist[artist['country'] == 'Bangladesh']\nt2 = song[song['rating'] > 7]\nanswer = t1[~t1['artist_name'].isin(t2['artist_name'])]['artist_name'].unique()", false], ["t1 = artist[artist['country'] == 'Bangladesh']['artist_name'].unique()\nt2 = song[song['rating'] > 7]['artist_name'].unique()\nanswer = pd.DataFrame(set(t1) - set(t2), columns=['artist_name'])", false], ["t1 = artist[artist['country'] == 'Bangladesh']\nt2 = song[song['rating'] > 7]\nt3 = t1.merge(t2, on='artist_name', how='outer')\nt4 = t3[t3['artist_name_x'].isna()]\nanswer = t4['artist_name_y'].unique()", false], ["t1 = artist[artist['country'] == 'bangladesh']\nt2 = song[song['rating'] > 7]\nanswer = t1.merge(t2, on='artist_name', how='left', indicator=True).query(\"_merge == 'left_only'\")['artist_name']", false], ["t1 = artist[artist['country'] == 'Bangladesh']['artist_name'].unique()\nt2 = song[song['rating'] > 7]['artist_name'].unique()\nanswer = np.setdiff1d(t1, t2)", false], ["t1 = artist[artist['country'] == 'bangladesh']\nt2 = song[song['rating'] > 7]\nanswer = t1[~t1['artist_name'].isin(t2['artist_name'])]['artist_name'].unique()", false], ["t1 = artist[artist['country'] == 'Bangladesh']\nt2 = song[song['rating'] > 7]\nanswer = t1[~t1['artist_name'].isin(t2['artist_name'])]['artist_name'].unique()", false], ["t1 = artist[artist['country'] == 'Bangladesh']['artist_name'].unique()\nt2 = song[song['rating'] > 7]['artist_name'].unique()\nanswer = np.setdiff1d(t1, t2)", false], ["t1 = artist[artist['country'] == 'Bangladesh']\nt2 = song[song['rating'] > 7]\nanswer = t1.merge(t2, on='artist_name', how='left', indicator=True).query('_merge == \"left_only\"')['artist_name']", false], ["t1 = artist[artist['country'] == 'Bangladesh'].drop_duplicates()\nt2 = song[song['rating'] > 7].drop_duplicates()\nanswer = t1[~t1.isin(t2)].dropna()", false], ["t1 = artist[artist['country'] == 'Bangladesh']['artist_name'].unique()\nt2 = song[song['rating'] > 7]['artist_name'].unique()\nt3 = t1[~t1.isin(t2)]\nanswer = t3", false], ["t1 = artist[artist['country'] == 'Bangladesh']['artist_name'].unique()\nt2 = song[song['rating'] > 7]['artist_name'].unique()\nanswer = np.setdiff1d(t1, t2)", false]]}
{"example": {"db_id": "department_store", "query": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)", "query_toks": ["SELECT", "avg", "(", "total_amount_purchased", ")", ",", "avg", "(", "total_value_purchased", ")", "FROM", "Product_Suppliers", "WHERE", "supplier_id", "=", "(", "SELECT", "supplier_id", "FROM", "Product_Suppliers", "GROUP", "BY", "supplier_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "avg", "(", "total_amount_purchased", ")", ",", "avg", "(", "total_value_purchased", ")", "from", "product_suppliers", "where", "supplier_id", "=", "(", "select", "supplier_id", "from", "product_suppliers", "group", "by", "supplier_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "Return the average total amount purchased and total value purchased for the supplier who supplies the greatest number of products.", "question_toks": ["Return", "the", "average", "total", "amount", "purchased", "and", "total", "value", "purchased", "for", "the", "supplier", "who", "supplies", "the", "greatest", "number", "of", "products", "."], "sql": {"from": {"table_units": [["table_unit", 12]], "conds": []}, "select": [false, [[5, [0, [0, 50, false], null]], [5, [0, [0, 51, false], null]]]], "where": [[false, 2, [0, [0, 47, false], null], {"from": {"table_units": [["table_unit", 12]], "conds": []}, "select": [false, [[0, [0, [0, 47, false], null]]]], "where": [], "groupBy": [[0, 47, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "address_details"], "Staff": ["staff_id", "staff_gender", "staff_name"], "Suppliers": ["supplier_id", "supplier_name", "supplier_phone"], "Department_Store_Chain": ["dept_store_chain_id", "dept_store_chain_name"], "Customers": ["customer_id", "payment_method_code", "customer_code", "customer_name", "customer_address", "customer_phone", "customer_email"], "Products": ["product_id", "product_type_code", "product_name", "product_price"], "Supplier_Addresses": ["supplier_id", "address_id", "date_from", "date_to"], "Customer_Addresses": ["customer_id", "address_id", "date_from", "date_to"], "Customer_Orders": ["order_id", "customer_id", "order_status_code", "order_date"], "Department_Stores": ["dept_store_id", "dept_store_chain_id", "store_name", "store_address", "store_phone", "store_email"], "Departments": ["department_id", "dept_store_id", "department_name"], "Order_Items": ["order_item_id", "order_id", "product_id"], "Product_Suppliers": ["product_id", "supplier_id", "date_supplied_from", "date_supplied_to", "total_amount_purchased", "total_value_purchased"], "Staff_Department_Assignments": ["staff_id", "department_id", "date_assigned_from", "job_title_code", "date_assigned_to"]}, "answer": [[37602.4675, 56499.6425]]}, "program_result_list": [["t1 = Product_Suppliers.groupby('supplier_id').size().rename('count').sort_values(ascending=False).head(1).to_frame().reset_index()\nt2 = pd.merge(Product_Suppliers, t1, on='supplier_id')\nanswer = t2[['total_amount_purchased', 'total_value_purchased']].mean()", false], ["t1 = Product_Suppliers.groupby('supplier_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = pd.merge(Product_Suppliers, t2, on='supplier_id')\nanswer = t3[['total_amount_purchased', 'total_value_purchased']].mean()", false], ["t1 = Product_Suppliers.groupby('supplier_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = Product_Suppliers[Product_Suppliers['supplier_id'] == t2['supplier_id'].values[0]]\nanswer = t3[['total_amount_purchased', 'total_value_purchased']].mean().to_frame().T", false], ["t1 = Product_Suppliers.groupby('supplier_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = pd.merge(Product_Suppliers, t2, on='supplier_id')\nanswer = t3[['total_amount_purchased', 'total_value_purchased']].mean()", false], ["t1 = Product_Suppliers.groupby('supplier_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).reset_index()\nt3 = t2['supplier_id']\nt4 = Product_Suppliers[Product_Suppliers['supplier_id'].isin(t3)]\nanswer = t4[['total_amount_purchased', 'total_value_purchased']].mean()", false], ["t1 = Product_Suppliers.groupby('supplier_id').size().rename('count').to_frame().reset_index()\nt2 = t1.sort_values('count', ascending=False).head(1).to_frame().reset_index()\nt3 = pd.merge(Product_Suppliers, t2, left_on='supplier_id', right_on='supplier_id')\nanswer = t3[['total_amount_purchased', 'total_value_purchased']].mean()", false], ["t1 = Product_Suppliers.groupby('supplier_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = Product_Suppliers[Product_Suppliers['supplier_id'] == t2.iloc[0, 0]]\nanswer = t3[['total_amount_purchased', 'total_value_purchased']].mean()", false], ["t1 = Product_Suppliers.groupby('supplier_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = pd.merge(Product_Suppliers, t2, on='supplier_id')\nanswer = t3[['avg(total_amount_purchased)', 'avg(total_value_purchased)']].head(1)", false], ["t1 = Product_Suppliers.groupby('supplier_id').size().rename('count').sort_values(ascending=False).head(1).to_frame().reset_index()\nt2 = Product_Suppliers[Product_Suppliers['supplier_id'] == t1['supplier_id'].iloc[0]]\nanswer = t2[['total_amount_purchased', 'total_value_purchased']].agg(['mean'])", false], ["t1 = Product_Suppliers.groupby('supplier_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = Product_Suppliers[Product_Suppliers['supplier_id'] == t2['supplier_id'].iloc[0]]\nt4 = t3.agg({'total_amount_purchased': 'mean', 'total_value_purchased': 'mean'}).to_frame().reset_index()\nanswer = t4.iloc[0]", false], ["t1 = Product_Suppliers.groupby('supplier_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = pd.merge(t2, Product_Suppliers, on='supplier_id')\nanswer = t3[['total_amount_purchased', 'total_value_purchased']].mean()", false], ["t1 = Product_Suppliers.groupby('supplier_id').size()\nt2 = t1.sort_values(ascending=False).head(1)\nt3 = Product_Suppliers[Product_Suppliers['supplier_id'] == t2.index[0]]\nanswer = pd.DataFrame({'total_amount_purchased': [t3['total_amount_purchased'].mean()], 'total_value_purchased': [t3['total_value_purchased'].mean()]})", false], ["t1 = Product_Suppliers.groupby('supplier_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = pd.merge(Product_Suppliers, t2, on='supplier_id')\nanswer = t3[['total_amount_purchased', 'total_value_purchased']].mean()", false], ["t1 = Product_Suppliers.groupby('supplier_id').size().to_frame().reset_index().sort_values(by=0, ascending=False).head(1)\nt2 = Product_Suppliers[Product_Suppliers['supplier_id'] == t1['supplier_id'].values[0]]\nanswer = t2[['total_amount_purchased', 'total_value_purchased']].mean()", false], ["t1 = Product_Suppliers.groupby('supplier_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = pd.merge(Product_Suppliers, t2, on='supplier_id')\nanswer = t3[['total_amount_purchased', 'total_value_purchased']].mean().to_frame().reset_index()\nanswer.columns = ['total_amount_purchased', 'total_value_purchased']", false], ["t1 = Product_Suppliers.groupby('supplier_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = pd.merge(Product_Suppliers, t2, left_on='supplier_id', right_on='supplier_id')\nanswer = t3[['avg(total_amount_purchased)', 'avg(total_value_purchased)']].mean()\n \n# Question: Return the average total amount purchased and total value purchased for the supplier who supplies the greatest number of products.\n# SQL: select avg(total_amount_purchased) ,  avg(total_value_purchased) from product_suppliers where supplier_id  =  (select supplier_id from product_suppliers group by supplier_id order by count(*) desc limit 1)\nt1 = Product_Suppliers.groupby('supplier_id').size().rename('count')\nt2 = t1.sort_values(ascending=", false], ["t1 = Product_Suppliers.groupby(['supplier_id']).size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = Product_Suppliers[Product_Suppliers['supplier_id'] == t2['supplier_id'].values[0]]\nanswer = t3[['total_amount_purchased', 'total_value_purchased']].mean()", false], ["t1 = Product_Suppliers.groupby('supplier_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = pd.merge(Product_Suppliers, t2, on='supplier_id')\nanswer = t3[['total_amount_purchased', 'total_value_purchased']].mean().to_frame().reset_index()\nanswer.columns = ['avg_total_amount', 'avg_total_value']", false], ["t1 = Product_Suppliers.groupby('supplier_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = pd.merge(Product_Suppliers, t2, on='supplier_id')\nanswer = t3[['total_amount_purchased', 'total_value_purchased']].mean()", false], ["t1 = Product_Suppliers.groupby('supplier_id').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nt3 = pd.merge(t2, Product_Suppliers, on='supplier_id')\nanswer = t3[['total_amount_purchased', 'total_value_purchased']].mean().to_frame().reset_index().rename(columns={'index': 'metric'})", false]]}
{"example": {"db_id": "gas_company", "query": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'", "query_toks": ["SELECT", "headquarters", "FROM", "company", "EXCEPT", "SELECT", "headquarters", "FROM", "company", "WHERE", "main_industry", "=", "'Banking", "'"], "query_toks_no_value": ["select", "headquarters", "from", "company", "except", "select", "headquarters", "from", "company", "where", "main_industry", "=", "value"], "question": "Show all headquarters without a company in banking industry.", "question_toks": ["Show", "all", "headquarters", "without", "a", "company", "in", "banking", "industry", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Banking\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "db_table_headers": {"company": ["Company_ID", "Rank", "Company", "Headquarters", "Main_Industry", "Sales_billion", "Profits_billion", "Assets_billion", "Market_Value"], "gas_station": ["Station_ID", "Open_Year", "Location", "Manager_Name", "Vice_Manager_Name", "Representative_Name"], "station_company": ["Station_ID", "Company_ID", "Rank_of_the_Year"]}, "answer": [["Brazil"], ["Netherlands"]]}, "program_result_list": [["t1 = company[company['main_industry'] == 'banking']\nt2 = company[company['main_industry'] != 'banking']\nanswer = t2['headquarters'].unique()", false], ["t1 = company[company['main_industry'] == 'banking']\nanswer = company[~company['headquarters'].isin(t1['headquarters'])]['headquarters']", false], ["t1 = company[company['main_industry'] == 'Banking']\nt2 = company.drop_duplicates('headquarters')\nt3 = t2[~t2['headquarters'].isin(t1['headquarters'])]\nanswer = t3['headquarters']", false], ["t1 = company[company['main_industry'] == 'banking'][['headquarters']]\nt2 = company[['headquarters']]\nanswer = t2[~t2.isin(t1)].dropna()", false], ["t1 = company[company['main_industry'] == 'banking']['headquarters']\nt2 = company['headquarters']\nanswer = t2[~t2.isin(t1)].drop_duplicates()", false], ["t1 = company[company['main_industry'] == 'banking']['headquarters']\nt2 = company['headquarters']\nanswer = t2[~t2.isin(t1)]", false], ["t1 = company[company['main_industry'] == 'banking']\nanswer = company[~company['headquarters'].isin(t1['headquarters'])]['headquarters'].unique()", false], ["t1 = company[company['main_industry'] == 'banking']['headquarters']\nanswer = company[~company['headquarters'].isin(t1)]['headquarters']", false], ["t1 = company[company['main_industry'] == 'banking']\nt2 = company[company['main_industry'] != 'banking']\nt3 = t1['headquarters'].unique()\nanswer = t2['headquarters'].unique()", false], ["t1 = company[company['main_industry'] == 'banking']['headquarters'].rename('headquarters')\nt2 = company[company['main_industry'] != 'banking']['headquarters'].rename('headquarters')\nt3 = t2[~t2.isin(t1)]\nanswer = t3.drop_duplicates()", false], ["t1 = company[company['main_industry'] == 'banking']['headquarters']\nt2 = company['headquarters']\nanswer = t2[~t2.isin(t1)]", false], ["t1 = company.copy()\nt1 = t1[t1['main_industry'] != 'banking']\nt2 = company.copy()\nt2 = t2[t2['main_industry'] != 'banking']\nanswer = t2.merge(t1, on='headquarters', how='left', indicator=True).query('_merge == \"left_only\"')['headquarters']", false], ["t1 = company[company['main_industry'] == 'banking']['headquarters'].to_frame().reset_index(drop=True)\nt2 = company[['headquarters']].reset_index(drop=True)\nanswer = t2.loc[t2.index.difference(t1.index)]", false], ["t1 = company[company['main_industry'] == 'banking']\nt2 = company.drop(t1.index)\nanswer = t2['headquarters']", false], ["t1 = company[company['main_industry'] == 'banking']\nt2 = company[['headquarters']].drop_duplicates()\nanswer = pd.merge(t1, t2, how='outer', indicator=True).query('_merge == \"left_only\"')['headquarters']", false], ["t1 = company[company['main_industry'] == 'banking']['headquarters'].unique()\nt2 = company[~company['headquarters'].isin(t1)]['headquarters'].unique()\nanswer = t2", false], ["t1 = company[company['main_industry'] == 'banking']\nt2 = company.drop_duplicates('headquarters')\nanswer = t2[~t2['headquarters'].isin(t1['headquarters'])]", false], ["t1 = company[company['main_industry'] == 'banking']\nt2 = company.drop_duplicates('headquarters')\nanswer = pd.concat([t2, t1], ignore_index=True).drop_duplicates(subset='headquarters', keep=False)['headquarters']", false], ["t1 = company[company['main_industry'] == 'banking']\nt2 = company[~(company['headquarters'].isin(t1['headquarters']))]\nanswer = t2['headquarters']", false], ["t1 = company[company['main_industry'] == 'banking']\nt2 = company.loc[~company['headquarters'].isin(t1['headquarters']), 'headquarters'].unique()\nanswer = t2", false]]}
{"example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "course_id", "IN", "(", "SELECT", "T1.course_id", "FROM", "prereq", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.prereq_id", "=", "T2.course_id", "WHERE", "T2.title", "=", "'Differential", "Geometry", "'", ")"], "query_toks_no_value": ["select", "title", "from", "course", "where", "course_id", "in", "(", "select", "t1", ".", "course_id", "from", "prereq", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "prereq_id", "=", "t2", ".", "course_id", "where", "t2", ".", "title", "=", "value", ")"], "question": "Find the title of course whose prerequisite is course Differential Geometry.", "question_toks": ["Find", "the", "title", "of", "course", "whose", "prerequisite", "is", "course", "Differential", "Geometry", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [[false, 8, [0, [0, 7, false], null], {"from": {"table_units": [["table_unit", 10], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 46, false], null], [0, 7, false], null]]}, "select": [false, [[0, [0, [0, 45, false], null]]]], "where": [[false, 2, [0, [0, 8, false], null], "\"Differential Geometry\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"classroom": ["building", "room_number", "capacity"], "department": ["dept_name", "building", "budget"], "course": ["course_id", "title", "dept_name", "credits"], "instructor": ["ID", "name", "dept_name", "salary"], "section": ["course_id", "sec_id", "semester", "year", "building", "room_number", "time_slot_id"], "teaches": ["ID", "course_id", "sec_id", "semester", "year"], "student": ["ID", "name", "dept_name", "tot_cred"], "takes": ["ID", "course_id", "sec_id", "semester", "year", "grade"], "advisor": ["s_ID", "i_ID"], "time_slot": ["time_slot_id", "day", "start_hr", "start_min", "end_hr", "end_min"], "prereq": ["course_id", "prereq_id"]}, "answer": [["Cost Accounting"], ["Systems Software"], ["Environmental Law"], ["International Practicum"], ["Existentialism"]]}, "program_result_list": [["t1 = pd.merge(prereq, course, left_on='prereq_id', right_on='course_id')\nt2 = t1[t1['title_y'] == 'Differential Geometry']\nt3 = pd.merge(t2, course, left_on='course_id_x', right_on='course_id')\nanswer = t3['title_x']", false], ["t1 = pd.merge(prereq, course, left_on='prereq_id', right_on='course_id')\nt2 = t1[t1['title_y'] == 'Differential Geometry']\nt3 = pd.merge(course, t2, left_on='course_id', right_on='course_id_y')\nanswer = t3['title_x']", false], ["t1 = pd.merge(prereq, course, left_on='prereq_id', right_on='course_id')\nt2 = t1[t1['title_y'] == 'Differential Geometry']\nt3 = pd.merge(course, t2, left_on='course_id', right_on='course_id_x')\nanswer = t3['title_x']", false], ["t1 = pd.merge(prereq, course, left_on='prereq_id', right_on='course_id')\nanswer = course[course['course_id'].isin(t1['course_id'])]['title']", false], ["t1 = pd.merge(prereq, course, left_on='prereq_id', right_on='course_id')\nt2 = t1[t1['title_y'] == 'Differential Geometry']\nt3 = pd.merge(course, t2, left_on='course_id', right_on='course_id_x')\nanswer = t3['title_x']", false], ["t1 = pd.merge(prereq, course, left_on='prereq_id', right_on='course_id')\nt2 = t1[t1['title_y'] == 'Differential Geometry']\nt3 = pd.merge(t2, course, left_on='course_id_x', right_on='course_id')\nanswer = t3['title_x']", false], ["t1 = pd.merge(prereq, course, left_on='prereq_id', right_on='course_id')\nt2 = t1[t1['title_y'] == 'Differential Geometry']\nt3 = pd.merge(t2, course, left_on='course_id_x', right_on='course_id')\nanswer = t3['title_x']", false], ["t1 = pd.merge(prereq, course, left_on='prereq_id', right_on='course_id')\nt2 = t1[t1['title_x'] == 'Differential Geometry']\nt3 = pd.merge(t2, course, left_on='course_id_x', right_on='course_id')\nanswer = t3['title_y']", false], ["t1 = pd.merge(prereq, course, left_on='prereq_id', right_on='course_id')\nt2 = t1[t1['title_y'] == 'Differential Geometry']\nanswer = course[course['course_id'].isin(t2['course_id_x'])]", false], ["t1 = pd.merge(prereq, course, on='prereq_id')\nanswer = t1[t1['title_y'] == 'Differential Geometry']['title_x']", false], ["t1 = pd.merge(prereq, course, left_on='prereq_id', right_on='course_id')\nt2 = t1[t1['title_x'] == 'Differential Geometry']\nt3 = pd.merge(t2, course, left_on='course_id_y', right_on='course_id')\nanswer = t3['title_y']", false], ["t1 = pd.merge(prereq, course, left_on='prereq_id', right_on='course_id')\nt2 = t1[t1['title_y'] == 'Differential Geometry']\nt3 = pd.merge(t2, course, left_on='course_id_x', right_on='course_id')\nanswer = t3['title_x']", false], ["t1 = pd.merge(prereq, course, left_on='prereq_id', right_on='course_id')\nt2 = t1[t1['title_y'] == 'Differential Geometry'][['course_id_x', 'title_x']]\nanswer = t2['title_x']", false], ["t1 = pd.merge(prereq, course, left_on='prereq_id', right_on='course_id')\nt2 = t1[t1['title_x'] == 'Differential Geometry']\nt3 = pd.merge(t2, course, left_on='course_id', right_on='course_id')\nanswer = t3['title_y']", false], ["t1 = pd.merge(prereq, course, left_on='prereq_id', right_on='course_id')\nt2 = t1[t1['title_y'] == 'Differential Geometry']\nt3 = pd.merge(t2, course, left_on='course_id_x', right_on='course_id')\nanswer = t3['title_x']", false], ["t1 = pd.merge(prereq, course, left_on='prereq_id', right_on='course_id')\nt2 = t1[t1['title_y'] == 'Differential Geometry']\nt3 = pd.merge(course, t2, left_on='course_id', right_on='course_id_x')\nanswer = t3['title_x']", false], ["t1 = pd.merge(prereq, course, left_on='prereq_id', right_on='course_id')\nanswer = t1[t1['title_y'] == 'Differential Geometry']['title_x']", false], ["t1 = pd.merge(prereq, course, left_on='prereq_id', right_on='course_id')\nt2 = t1[t1['title_y'] == 'Differential Geometry']\nt3 = pd.merge(t2, course, left_on='course_id_x', right_on='course_id')\nanswer = t3['title_x']", false], ["t1 = pd.merge(prereq, course, left_on='prereq_id', right_on='course_id')\nt2 = t1[t1['title_y'] == 'Differential Geometry']\nanswer = course[course['course_id'].isin(t2['course_id_x'])]['title']", false], ["t1 = pd.merge(prereq, course, left_on='prereq_id', right_on='course_id')\nt2 = t1[t1['title_y'] == 'Differential Geometry']\nt3 = pd.merge(t2, course, left_on='course_id_x', right_on='course_id')\nanswer = t3['title_x']", false]]}
{"example": {"db_id": "bike_1", "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100", "query_toks": ["SELECT", "zip_code", "FROM", "weather", "GROUP", "BY", "zip_code", "HAVING", "avg", "(", "mean_humidity", ")", "<", "70", "INTERSECT", "SELECT", "zip_code", "FROM", "trip", "GROUP", "BY", "zip_code", "HAVING", "count", "(", "*", ")", ">", "=", "100"], "query_toks_no_value": ["select", "zip_code", "from", "weather", "group", "by", "zip_code", "having", "avg", "(", "mean_humidity", ")", "<", "value", "intersect", "select", "zip_code", "from", "trip", "group", "by", "zip_code", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?", "question_toks": ["What", "are", "the", "zip", "codes", "that", "have", "an", "average", "mean", "humidity", "below", "70", "and", "had", "at", "least", "100", "trips", "come", "through", "there", "?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 46, false], null]]]], "where": [], "groupBy": [[0, 46, false]], "having": [[false, 4, [0, [5, 31, false], null], 70.0, null]], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 22, false], null]]]], "where": [], "groupBy": [[0, 22, false]], "having": [[false, 5, [0, [3, 0, false], null], 100.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "db_table_headers": {"station": ["id", "name", "lat", "long", "dock_count", "city", "installation_date"], "status": ["station_id", "bikes_available", "docks_available", "time"], "trip": ["id", "duration", "start_date", "start_station_name", "start_station_id", "end_date", "end_station_name", "end_station_id", "bike_id", "subscription_type", "zip_code"], "weather": ["date", "max_temperature_f", "mean_temperature_f", "min_temperature_f", "max_dew_point_f", "mean_dew_point_f", "min_dew_point_f", "max_humidity", "mean_humidity", "min_humidity", "max_sea_level_pressure_inches", "mean_sea_level_pressure_inches", "min_sea_level_pressure_inches", "max_visibility_miles", "mean_visibility_miles", "min_visibility_miles", "max_wind_Speed_mph", "mean_wind_speed_mph", "max_gust_speed_mph", "precipitation_inches", "cloud_cover", "events", "wind_dir_degrees", "zip_code"]}, "answer": [[94107]]}, "program_result_list": [["t1 = weather.groupby('zip_code')['mean_humidity'].mean().rename('avg')\nt2 = t1[t1 < 70].to_frame().reset_index()\nt3 = trip.groupby('zip_code').size().rename('count')\nt4 = t3[t3 >= 100].to_frame().reset_index()\nt5 = pd.merge(t2, t4, on='zip_code', how='inner')\nanswer = t5['zip_code']", false], ["t1 = weather.groupby('zip_code').mean()['mean_humidity']\nt2 = t1[t1 < 70].to_frame().reset_index()\nt3 = trip.groupby('zip_code').size().rename('count')\nt4 = t3[t3 >= 100].to_frame().reset_index()\nt5 = pd.merge(t2, t4, on='zip_code')\nanswer = t5['zip_code']", false], ["t1 = weather.groupby('zip_code').mean()['mean_humidity'].rename('mean_humidity')\nt2 = t1[t1 < 70].index.to_list()\nt3 = trip.groupby('zip_code').size().rename('count')\nt4 = t3[t3 >= 100].index.to_list()\nt5 = set(t2).intersection(set(t4))\nanswer = pd.Series(t5)", false], ["t1 = weather.groupby('zip_code').mean()\nt2 = t1[t1['mean_humidity'] < 70].reset_index()\nt3 = trip.groupby('zip_code').size().rename('count')\nt4 = t3[t3 >= 100].to_frame().reset_index()\nt5 = pd.merge(t2, t4, on='zip_code', how='inner')\nanswer = t5['zip_code']", false], ["t1 = weather.groupby('zip_code').mean()\nt2 = t1[t1['mean_humidity'] < 70].reset_index()\nt3 = trip.groupby('zip_code').size().rename('count')\nt4 = t3[t3 >= 100].to_frame().reset_index()\nanswer = pd.merge(t2, t4, on='zip_code', how='inner')['zip_code']", false], ["t1 = weather.groupby('zip_code').mean()\nt2 = t1[t1['mean_humidity'] < 70]\nt3 = trip.groupby('zip_code').size().rename('count')\nt4 = t3[t3 >= 100]\nanswer = pd.merge(t2, t4, left_index=True, right_index=True)", false], ["t1 = weather.groupby('zip_code').agg({'mean_humidity': 'mean'}).rename(columns={'mean_humidity': 'avg_mean_humidity'})\nt1 = t1[t1['avg_mean_humidity'] < 70].reset_index()\nt2 = trip.groupby('zip_code').size().rename('count').to_frame().reset_index()\nt2 = t2[t2['count'] >= 100].reset_index()\nt3 = pd.merge(t1, t2, on='zip_code')\nanswer = t3['zip_code']", false], ["t1 = weather.groupby('zip_code').mean()['mean_humidity'].rename('mean_humidity').to_frame()\nt2 = t1[t1['mean_humidity'] < 70].to_frame().reset_index()\nt3 = trip.groupby('zip_code').size().rename('count').to_frame()\nt4 = t3[t3['count'] >= 100].to_frame().reset_index()\nt5 = pd.merge(t2, t4, on='zip_code')\nanswer = t5['zip_code']", false], ["t1 = weather.groupby('zip_code').mean()['mean_humidity'].to_frame().reset_index()\nt1 = t1[t1['mean_humidity'] < 70]['zip_code'].unique().tolist()\nt2 = trip.groupby('zip_code').size().rename('count').to_frame().reset_index()\nt2 = t2[t2['count'] >= 100]['zip_code'].unique().tolist()\nanswer = list(set(t1) & set(t2))", false], ["t1 = weather.groupby('zip_code').agg({'mean_humidity': 'mean'}).rename(columns={'mean_humidity': 'mean'})\nt2 = t1[t1['mean'] < 70].reset_index()\nt3 = trip.groupby('zip_code').size().rename('count')\nt4 = t3[t3 >= 100].to_frame().reset_index()\nt5 = pd.merge(t2, t4, on='zip_code')\nanswer = t5['zip_code'].unique()", false], ["t1 = weather.groupby('zip_code').agg({'mean_humidity': 'mean'})\nt2 = t1[t1['mean_humidity'] < 70]\nt3 = trip.groupby('zip_code').size().rename('count')\nt4 = t3[t3 >= 100]\nanswer = t2.join(t4, on='zip_code').reset_index()['zip_code']", false], ["t1 = weather.groupby('zip_code').mean().reset_index()\nt2 = t1[t1['mean_humidity'] < 70]\nt3 = trip.groupby('zip_code').size().rename('count').to_frame().reset_index()\nt4 = t3[t3['count'] >= 100]\nanswer = pd.merge(t2, t4, on='zip_code', how='inner')['zip_code']", false], ["t1 = weather.groupby('zip_code').mean()\nt1 = t1[t1['mean_humidity'] < 70]\nt2 = trip.groupby('zip_code').size().rename('count')\nt2 = t2[t2 >= 100]\nanswer = t1.merge(t2, on='zip_code', how='inner')", false], ["t1 = weather.groupby('zip_code').mean()['mean_humidity'].to_frame().reset_index()\nt2 = trip.groupby('zip_code').size().rename('count').to_frame().reset_index()\nt3 = t1[t1['mean_humidity'] < 70]['zip_code']\nt4 = t2[t2['count'] >= 100]['zip_code']\nanswer = pd.merge(t3, t4, on='zip_code')", false], ["t1 = weather.groupby('zip_code').mean()['mean_humidity'].to_frame()\nt2 = t1[t1['mean_humidity'] < 70].reset_index()\nt3 = trip.groupby('zip_code').size().rename('count').to_frame()\nt4 = t3[t3['count'] >= 100].reset_index()\nt5 = pd.merge(t2, t4, on='zip_code')\nanswer = t5['zip_code']", false], ["t1 = weather.groupby('zip_code').agg({'mean_humidity': 'mean'}).rename(columns={'mean_humidity': 'avg_mean_humidity'})\nt2 = t1[t1['avg_mean_humidity'] < 70]\nt3 = trip.groupby('zip_code').size().rename('count')\nt4 = t3[t3 >= 100]\nt5 = pd.merge(t2, t4, on='zip_code')\nanswer = t5.index", false], ["t1 = weather.groupby('zip_code').mean()\nt2 = t1[t1['mean_humidity'] < 70].reset_index()\nt3 = trip.groupby('zip_code').size().rename('count')\nt4 = t3[t3 >= 100].to_frame().reset_index()\nt5 = pd.merge(t2, t4, on='zip_code')\nanswer = t5['zip_code']", false], ["t1 = weather.groupby('zip_code').mean()\nt2 = t1[t1['mean_humidity'] < 70].reset_index()\nt3 = trip.groupby('zip_code').size().rename('count')\nt4 = t3[t3 >= 100].to_frame().reset_index()\nt5 = pd.merge(t2, t4, on='zip_code')\nanswer = t5['zip_code']", false], ["t1 = weather.groupby('zip_code').mean()\nt2 = t1[t1['mean_humidity'] < 70].reset_index()\nt3 = trip.groupby('zip_code').size().rename('count')\nt4 = t3[t3 >= 100].to_frame().reset_index()\nt5 = pd.merge(t2, t4, on='zip_code')\nanswer = t5['zip_code']", false], ["t1 = weather.groupby('zip_code').mean().reset_index()\nt2 = t1[t1['mean_humidity'] < 70]['zip_code']\nt3 = trip.groupby('zip_code').size().rename('count').reset_index()\nt4 = t3[t3['count'] >= 100]['zip_code']\nanswer = t2.intersection(t4)", false]]}
{"example": {"db_id": "apartment_rentals", "query": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\"", "query_toks": ["SELECT", "T1.booking_start_date", ",", "T1.booking_start_date", "FROM", "Apartment_Bookings", "AS", "T1", "JOIN", "Guests", "AS", "T2", "ON", "T1.guest_id", "=", "T2.guest_id", "WHERE", "T2.gender_code", "=", "``", "Female", "''"], "query_toks_no_value": ["select", "t1", ".", "booking_start_date", ",", "t1", ".", "booking_start_date", "from", "apartment_bookings", "as", "t1", "join", "guests", "as", "t2", "on", "t1", ".", "guest_id", "=", "t2", ".", "guest_id", "where", "t2", ".", "gender_code", "=", "value"], "question": "What are the start date and end date of the apartment bookings made by female guests (gender code \"Female\")?", "question_toks": ["What", "are", "the", "start", "date", "and", "end", "date", "of", "the", "apartment", "bookings", "made", "by", "female", "guests", "(", "gender", "code", "``", "Female", "''", ")", "?"], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 24, false], null], [0, 17, false], null]]}, "select": [false, [[0, [0, [0, 26, false], null]], [0, [0, [0, 26, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], "\"Female\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Apartment_Buildings": ["building_id", "building_short_name", "building_full_name", "building_description", "building_address", "building_manager", "building_phone"], "Apartments": ["apt_id", "building_id", "apt_type_code", "apt_number", "bathroom_count", "bedroom_count", "room_count"], "Apartment_Facilities": ["apt_id", "facility_code"], "Guests": ["guest_id", "gender_code", "guest_first_name", "guest_last_name", "date_of_birth"], "Apartment_Bookings": ["apt_booking_id", "apt_id", "guest_id", "booking_status_code", "booking_start_date", "booking_end_date"], "View_Unit_Status": ["apt_id", "apt_booking_id", "status_date", "available_yn"]}, "answer": [["2016-04-01 06:28:08", "2016-04-01 06:28:08"], ["2017-03-13 16:20:14", "2017-03-13 16:20:14"], ["2016-08-04 10:33:00", "2016-08-04 10:33:00"], ["2016-05-24 20:09:38", "2016-05-24 20:09:38"], ["2016-11-26 05:04:31", "2016-11-26 05:04:31"], ["2017-05-13 18:17:20", "2017-05-13 18:17:20"], ["2016-06-07 05:05:18", "2016-06-07 05:05:18"], ["2016-09-28 05:00:50", "2016-09-28 05:00:50"], ["2017-07-03 14:15:56", "2017-07-03 14:15:56"]]}, "program_result_list": [["t1 = pd.merge(Apartment_Bookings, Guests, left_on='guest_id', right_on='guest_id')\nt2 = t1[t1['gender_code'] == 'Female']\nanswer = t2[['booking_start_date', 'booking_start_date']]", false], ["t1 = pd.merge(Apartment_Bookings, Guests, left_on='guest_id', right_on='guest_id')\nt2 = t1[t1['gender_code'] == 'Female']\nanswer = t2[['booking_start_date', 'booking_end_date']]", false], ["t1 = pd.merge(Apartment_Bookings, Guests, left_on='guest_id', right_on='guest_id')\nt2 = t1[t1['gender_code'] == 'Female']\nanswer = t2[['booking_start_date', 'booking_start_date']]", false], ["t1 = pd.merge(Apartment_Bookings, Guests, left_on='guest_id', right_on='guest_id')\nt2 = t1[t1['gender_code'] == 'Female']\nanswer = t2[['booking_start_date', 'booking_end_date']]", false], ["t1 = pd.merge(Apartment_Bookings, Guests, left_on='guest_id', right_on='guest_id')\nanswer = t1[t1['gender_code'] == 'Female'][['booking_start_date', 'booking_end_date']]", false], ["t1 = pd.merge(Apartment_Bookings, Guests, left_on='guest_id', right_on='guest_id')\nt2 = t1[t1['gender_code'] == 'Female']\nanswer = t2[['booking_start_date', 'booking_end_date']]", false], ["t1 = pd.merge(Apartment_Bookings, Guests, left_on='guest_id', right_on='guest_id')\nt2 = t1[t1['gender_code'] == 'Female']\nanswer = t2[['booking_start_date', 'booking_end_date']]", false], ["t1 = pd.merge(Apartment_Bookings, Guests, left_on='guest_id', right_on='guest_id')\nt2 = t1[t1['gender_code'] == 'Female']\nanswer = t2[['booking_start_date', 'booking_end_date']]", false], ["t1 = pd.merge(Apartment_Bookings, Guests, left_on='guest_id', right_on='guest_id')\nanswer = t1[t1['gender_code'] == 'Female'][['booking_start_date', 'booking_end_date']]", false], ["t1 = pd.merge(Apartment_Bookings, Guests, left_on='guest_id', right_on='guest_id')\nt2 = t1[t1['gender_code'] == 'Female']\nanswer = t2[['booking_start_date', 'booking_end_date']]", false], ["t1 = pd.merge(Apartment_Bookings, Guests, on='guest_id')\nt2 = t1[t1['gender_code'] == \"Female\"]\nanswer = t2[['booking_start_date', 'booking_end_date']]", false], ["t1 = pd.merge(Apartment_Bookings, Guests, left_on='guest_id', right_on='guest_id')\nt2 = t1[t1['gender_code'] == 'Female']\nanswer = t2[['booking_start_date', 'booking_end_date']]", false], ["t1 = pd.merge(Apartment_Bookings, Guests, left_on='guest_id', right_on='guest_id')\nt2 = t1[t1['gender_code'] == 'Female']\nanswer = t2[['booking_start_date', 'booking_end_date']]", false], ["t1 = pd.merge(Apartment_Bookings, Guests, on='guest_id')\nanswer = t1[t1['gender_code'] == 'Female'][['booking_start_date', 'booking_end_date']]", false], ["t1 = pd.merge(Apartment_Bookings, Guests, left_on='guest_id', right_on='guest_id')\nanswer = t1[t1['gender_code'] == 'Female'][['booking_start_date', 'booking_end_date']]", false], ["t1 = pd.merge(Apartment_Bookings, Guests, left_on='guest_id', right_on='guest_id')\nt2 = t1[t1['gender_code'] == 'Female']\nanswer = t2[['booking_start_date', 'booking_end_date']]", false], ["t1 = pd.merge(Apartment_Bookings, Guests, left_on='guest_id', right_on='guest_id')\nt2 = t1[t1['gender_code'] == 'Female']\nanswer = t2[['booking_start_date', 'booking_end_date']]", false], ["t1 = pd.merge(Apartment_Bookings, Guests, on='guest_id')\nt2 = t1[t1['gender_code'] == 'Female']\nanswer = t2[['booking_start_date', 'booking_end_date']]", false], ["t1 = pd.merge(Apartment_Bookings, Guests, left_on='guest_id', right_on='guest_id')\nt2 = t1[t1['gender_code'] == 'Female']\nanswer = t2[['booking_start_date', 'booking_end_date']]", false], ["t1 = pd.merge(Apartment_Bookings, Guests, left_on='guest_id', right_on='guest_id')\nt2 = t1[t1['gender_code'] == 'Female']\nanswer = t2[['booking_start_date', 'booking_end_date']]", false]]}