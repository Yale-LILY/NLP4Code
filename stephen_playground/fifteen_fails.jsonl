{"example": {"db_id": "csu_1", "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")", "query_toks": ["SELECT", "T1.campus", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", "=", "2002", "AND", "faculty", ">", "(", "SELECT", "max", "(", "faculty", ")", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", "=", "2002", "AND", "T1.county", "=", "``", "Orange", "''", ")"], "query_toks_no_value": ["select", "t1", ".", "campus", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", "=", "value", "and", "faculty", ">", "(", "select", "max", "(", "faculty", ")", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", "=", "value", "and", "t1", ".", "county", "=", "value", ")"], "question": "Find the names of the campus which has more faculties in 2002 than every campus in Orange county.", "question_toks": ["Find", "the", "names", "of", "the", "campus", "which", "has", "more", "faculties", "in", "2002", "than", "every", "campus", "in", "Orange", "county", "."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 21, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], 2002.0, null], "and", [false, 3, [0, [0, 23, false], null], {"from": {"table_units": [["table_unit", 0], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 21, false], null]]}, "select": [false, [[1, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], 2002.0, null], "and", [false, 2, [0, [0, 4, false], null], "\"Orange\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Campuses": ["Id", "Campus", "Location", "County", "Year"], "csu_fees": ["Campus", "Year", "CampusFee"], "degrees": ["Year", "Campus", "Degrees"], "discipline_enrollments": ["Campus", "Discipline", "Year", "Undergraduate", "Graduate"], "enrollments": ["Campus", "Year", "TotalEnrollment_AY", "FTE_AY"], "faculty": ["Campus", "Year", "Faculty"]}, "answer": [["Long Beach State University"], ["San Diego State University"]]}, "program_result_list": [["t1 = pd.merge(Campuses, faculty, on='id')\nt2 = t1[t1['year'] == 2002]\nt3 = t2[t2['county'] == 'Orange']\nt4 = t2.groupby('campus').agg({'faculty': 'max'}).rename(columns={'faculty': 'max_faculty'})\nt5 = pd.merge(t4, t2, on=['campus', 'max_faculty'])\nanswer = t5[t5['faculty'] > t5['max_faculty']]['campus']", false], ["t1 = pd.merge(Campuses, faculty, left_on='id', right_on='campus')\nt2 = t1[t1['year'] == 2002]\nanswer = t2[t2['faculty'] > t2[t2['county'] == 'orange']['faculty'].max()]['campus']", false], ["t1 = pd.merge(Campuses, faculty, left_on='id', right_on='campus')\nt2 = t1[(t1['year_x'] == 2002) & (t1['county'] == 'Orange')]['faculty'].max()\nt3 = t1.loc[t1['faculty'] > t2]\nanswer = t3['campus_x']", false], ["t1 = pd.merge(Campuses, faculty, left_on='id', right_on='campus')\nt2 = t1[t1['year'] == 2002]\nt3 = t2[t2['county'] == 'Orange']\nt4 = t2[t2['faculty'] > t3['faculty'].max()]\nanswer = t4['campus']", false], ["t1 = pd.merge(Campuses, faculty, on='id')\nt2 = t1[t1['year'] == 2002]\nt3 = t2[t2['county'] == 'Orange'].groupby('campus').agg({'faculty': np.max})\nt4 = t2[t2['faculty'] > t3['faculty'].max()]\nanswer = t4['campus']", false], ["t1 = pd.merge(Campuses, faculty, left_on='id', right_on='campus')\nt2 = t1[t1['year'] == 2002]\nt3 = t2[t2['county'] == 'Orange']\nt4 = t2[t2['faculty'] > t3['faculty'].max()]\nanswer = t4['campus']", false], ["t1 = pd.merge(Campuses, faculty, left_on='id', right_on='campus')\nt2 = t1[t1['year'] == 2002]\nt3 = t2[t2['county'] == 'Orange']\nt4 = t3['faculty'].max()\nt5 = t1[t1['faculty'] > t4]\nanswer = t5['campus'].unique()", false], ["t1 = pd.merge(Campuses, faculty, left_on='id', right_on='campus')\nt2 = t1[t1['year'] == 2002]\nt3 = t2[t2['county'] == 'Orange']\nanswer = t1[t1['faculty'] > t3['faculty'].max()]['campus'].unique()", false], ["t1 = pd.merge(Campuses, faculty, left_on='id', right_on='campus')\nt2 = t1[t1['year'] == 2002]\nt3 = t2[t2['county'] == 'Orange']\nt4 = t2[t2['faculty'] > t3['faculty'].max()]\nanswer = t4['campus']", false], ["t1 = pd.merge(Campuses, faculty, on='id')\nt2 = t1[t1['year'] == 2002]\nt3 = t2[t2['county'] == 'Orange']\nt4 = t2[t2['faculty'] > t3['faculty'].max()]\nanswer = t4['campus'].unique()", false], ["t1 = pd.merge(Campuses, faculty, left_on='id', right_on='campus', how='left')\nt2 = t1[t1['year'] == 2002]\nt3 = t1[(t1['year'] == 2002) & (t1['county'] == 'Orange')]\nt4 = t2[t2['faculty'] > t3['faculty'].max()]\nanswer = t4['campus']", false], ["t1 = pd.merge(Campuses, faculty, on='id')\nt2 = t1[t1['year'] == 2002]\nt3 = t2[t2['county'] == 'Orange']\nt4 = t2[t2['faculty'] > t3['faculty'].max()]\nanswer = t4['campus']", false], ["t1 = pd.merge(Campuses, faculty, left_on='id', right_on='campus')\nt2 = t1[(t1['year_x'] == 2002) & (t1['county'] == 'Orange')]\nt3 = t1[(t1['year_x'] == 2002) & (t1['faculty'] > t2['faculty'].max())]\nanswer = t3['campus_x']", false], ["t1 = pd.merge(Campuses, faculty, left_on='id', right_on='campus')\nt2 = t1[t1['year'] == 2002]\nt3 = t2[t2['county'] == 'orange']\nt4 = t2[t2['faculty'] > t3['faculty'].max()]\nanswer = t4['campus']", false], ["t1 = pd.merge(Campuses, faculty, left_on='id', right_on='campus')\nt2 = t1[t1['year'] == 2002]\nt3 = t2[t2['county'] == 'orange']\nt4 = t3['faculty'].max()\nt5 = t2[t2['faculty'] > t4]\nanswer = t5['campus']", false], ["t1 = pd.merge(Campuses, faculty, left_on='id', right_on='campus')\nt2 = t1[(t1['year'] == 2002) & (t1['county'] == 'Orange')]\nt3 = t2.groupby('campus').max()\nt4 = t1.groupby('campus').max()\nanswer = t4[t4['faculty'] > t3['faculty'].max()].reset_index()['campus']", false], ["t1 = pd.merge(Campuses, faculty, left_on='id', right_on='campus')\nt2 = t1[(t1['year'] == 2002) & (t1['county'] == 'Orange')]\nt3 = t2.max()['faculty']\nt4 = t1[(t1['year'] == 2002) & (t1['faculty'] > t3)]\nanswer = t4['campus'].unique()", false], ["t1 = pd.merge(Campuses, faculty, left_on='id', right_on='campus')\nt2 = t1[t1['year'] == 2002]\nt3 = t2[t2['county'] == 'orange']\nt4 = t2[t2['faculty'] > t3['faculty'].max()]\nanswer = t4['campus']", false], ["t1 = pd.merge(Campuses, faculty, on='id')\nt2 = t1[t1['year'] == 2002]\nt3 = t2[t2['county'] == 'Orange']\nt4 = t2[t2['faculty'] > t3['faculty'].max()]\nanswer = t4['campus']", false], ["t1 = pd.merge(Campuses, faculty, on='campus')\nt2 = t1[t1['year'] == 2002]\nt3 = t2[t2['county'] == 'Orange']\nmax_faculty_in_orange = t3['faculty'].max()\nt4 = t2[t2['faculty'] > max_faculty_in_orange]\nanswer = t4['campus']", false]]}
{"example": {"db_id": "products_gen_characteristics", "query": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id", "query_toks": ["SELECT", "characteristic_name", ",", "other_characteristic_details", ",", "characteristic_data_type", "FROM", "CHARACTERISTICS", "EXCEPT", "SELECT", "t1.characteristic_name", ",", "t1.other_characteristic_details", ",", "t1.characteristic_data_type", "FROM", "CHARACTERISTICS", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.characteristic_id", "=", "t2.characteristic_id"], "query_toks_no_value": ["select", "characteristic_name", ",", "other_characteristic_details", ",", "characteristic_data_type", "from", "characteristics", "except", "select", "t1", ".", "characteristic_name", ",", "t1", ".", "other_characteristic_details", ",", "t1", ".", "characteristic_data_type", "from", "characteristics", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "characteristic_id", "=", "t2", ".", "characteristic_id"], "question": "What are the names, details and data types of the characteristics which are never used by any product?", "question_toks": ["What", "are", "the", "names", ",", "details", "and", "data", "types", "of", "the", "characteristics", "which", "are", "never", "used", "by", "any", "product", "?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]], [0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 3], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 22, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]], [0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "db_table_headers": {"Ref_Characteristic_Types": ["characteristic_type_code", "characteristic_type_description"], "Ref_Colors": ["color_code", "color_description"], "Ref_Product_Categories": ["product_category_code", "product_category_description", "unit_of_measure"], "Characteristics": ["characteristic_id", "characteristic_type_code", "characteristic_data_type", "characteristic_name", "other_characteristic_details"], "Products": ["product_id", "color_code", "product_category_code", "product_name", "typical_buying_price", "typical_selling_price", "product_description", "other_product_details"], "Product_Characteristics": ["product_id", "characteristic_id", "product_characteristic_value"]}, "answer": [["cool", null, "dolores"], ["cool", null, "et"], ["cool", null, "quam"], ["hot", null, "impedit"], ["slow", null, "numquam"], ["slow", null, "placeat"]]}, "program_result_list": [["t1 = pd.merge(Characteristics, Product_Characteristics, left_on='characteristic_id', right_on='characteristic_id')\nanswer = Characteristics[~Characteristics['characteristic_id'].isin(t1['characteristic_id'])][['characteristic_name', 'other_characteristic_details', 'characteristic_data_type']]", false], ["t1 = Characteristics[~Characteristics['characteristic_id'].isin(Product_Characteristics['characteristic_id'])]\nanswer = t1[['characteristic_name', 'other_characteristic_details', 'characteristic_data_type']]", false], ["t1 = pd.merge(Characteristics, Product_Characteristics, on='characteristic_id', how='outer', indicator=True)\nt2 = t1[t1['_merge'] == 'left_only']\nanswer = t2[['characteristic_name', 'other_characteristic_details', 'characteristic_data_type']]", false], ["t1 = pd.merge(Characteristics, Product_Characteristics, left_on='characteristic_id', right_on='characteristic_id')\nt2 = Characteristics.merge(t1, how='left', indicator=True)\nanswer = t2[t2['_merge'] == 'left_only']", false], ["t1 = pd.merge(Characteristics, Product_Characteristics, left_on='characteristic_id', right_on='characteristic_id', how='outer')\nanswer = Characteristics[~Characteristics.characteristic_id.isin(t1.characteristic_id)]", false], ["t1 = pd.merge(Characteristics, Product_Characteristics, left_on='characteristic_id', right_on='characteristic_id')\nanswer = Characteristics[~Characteristics['characteristic_id'].isin(t1['characteristic_id'])][['characteristic_name', 'other_characteristic_details', 'characteristic_data_type']]", false], ["t1 = pd.merge(Characteristics, Product_Characteristics, left_on='characteristic_id', right_on='characteristic_id', how='outer')\nt2 = Characteristics.copy()\nt2.drop(t2.index, inplace=True)\nt3 = t1.append(t2)\nanswer = t3.drop_duplicates(keep=False)", false], ["t1 = pd.merge(Characteristics, Product_Characteristics, on='characteristic_id', how='left', indicator=True)\nt2 = t1[t1['_merge'] == 'left_only'].drop('_merge', axis=1)\nanswer = t2[['characteristic_name', 'other_characteristic_details', 'characteristic_data_type']]", false], ["t1 = pd.merge(Characteristics, Product_Characteristics, left_on='characteristic_id', right_on='characteristic_id')\nt2 = Characteristics.merge(t1, indicator=True, how='outer').query('_merge == \"left_only\"').drop('_merge', 1)\nanswer = t2[['characteristic_name', 'other_characteristic_details', 'characteristic_data_type']]", false], ["t1 = pd.merge(Characteristics, Product_Characteristics, left_on='characteristic_id', right_on='characteristic_id', how='outer', indicator=True)\nt2 = t1[t1['_merge'] == 'left_only']\nanswer = t2[['characteristic_name', 'other_characteristic_details', 'characteristic_data_type']]", false], ["t1 = pd.merge(Characteristics, Product_Characteristics, left_on='characteristic_id', right_on='characteristic_id')\nanswer = Characteristics[~Characteristics['characteristic_id'].isin(t1['characteristic_id'])][['characteristic_name', 'other_characteristic_details', 'characteristic_data_type']]", false], ["t1 = pd.merge(Characteristics, Product_Characteristics, left_on='characteristic_id', right_on='characteristic_id')\nanswer = Characteristics[~Characteristics['characteristic_id'].isin(t1['characteristic_id'])]", false], ["t1 = pd.merge(Characteristics, Product_Characteristics, on='characteristic_id', how='outer', indicator=True)\nt2 = t1[t1['_merge'] == 'left_only']\nanswer = t2[['characteristic_name', 'other_characteristic_details', 'characteristic_data_type']]", false], ["t1 = Characteristics.merge(Product_Characteristics, left_on='characteristic_id', right_on='characteristic_id', how='outer', indicator=True)\nt2 = t1[t1['_merge'] == 'left_only']\nanswer = t2[['characteristic_name', 'other_characteristic_details', 'characteristic_data_type']]", false], ["t1 = pd.merge(Characteristics, Product_Characteristics, left_on='characteristic_id', right_on='characteristic_id', how='outer')\nt2 = t1[t1['product_characteristic_value'].isnull()]\nanswer = t2[['characteristic_name', 'other_characteristic_details', 'characteristic_data_type']]", false], ["t1 = pd.merge(Characteristics, Product_Characteristics, left_on='characteristic_id', right_on='characteristic_id', how='outer')\nt2 = Characteristics.drop(t1.index)\nanswer = t2[['characteristic_name', 'other_characteristic_details', 'characteristic_data_type']]", false], ["t1 = pd.merge(Characteristics, Product_Characteristics, left_on='characteristic_id', right_on='characteristic_id')\nt2 = Characteristics.drop(Characteristics.index[t1.index])\nanswer = t2[['characteristic_name', 'other_characteristic_details', 'characteristic_data_type']]", false], ["t1 = pd.merge(Products, Product_Characteristics, left_on='product_id', right_on='product_id')\nt2 = pd.merge(t1, Characteristics, left_on='characteristic_id', right_on='characteristic_id')\nt3 = Characteristics.loc[~Characteristics.index.isin(t2.index)]\nanswer = t3[['characteristic_name', 'other_characteristic_details', 'characteristic_data_type']]", false], ["t1 = pd.merge(Characteristics, Product_Characteristics, on='characteristic_id')\nt2 = Characteristics[~Characteristics['characteristic_id'].isin(t1['characteristic_id'])]\nanswer = t2[['characteristic_name', 'other_characteristic_details', 'characteristic_data_type']]", false], ["t1 = pd.merge(Characteristics, Product_Characteristics, how='outer', left_on='characteristic_id', right_on='characteristic_id')\nanswer = t1[t1['characteristic_name'].isnull()][['characteristic_name', 'other_characteristic_details', 'characteristic_data_type']]", false]]}
{"example": {"db_id": "college_2", "query": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1", "query_toks": ["SELECT", "avg", "(", "T1.salary", ")", ",", "count", "(", "*", ")", "FROM", "instructor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_name", "=", "T2.dept_name", "ORDER", "BY", "T2.budget", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "salary", ")", ",", "count", "(", "*", ")", "from", "instructor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_name", "=", "t2", ".", "dept_name", "order", "by", "t2", ".", "budget", "desc", "limit", "value"], "question": "How many instructors are in the department with the highest budget, and what is their average salary?", "question_toks": ["How", "many", "instructors", "are", "in", "the", "department", "with", "the", "highest", "budget", ",", "and", "what", "is", "their", "average", "salary", "?"], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 4, false], null]]}, "select": [false, [[5, [0, [0, 14, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 6, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"classroom": ["building", "room_number", "capacity"], "department": ["dept_name", "building", "budget"], "course": ["course_id", "title", "dept_name", "credits"], "instructor": ["ID", "name", "dept_name", "salary"], "section": ["course_id", "sec_id", "semester", "year", "building", "room_number", "time_slot_id"], "teaches": ["ID", "course_id", "sec_id", "semester", "year"], "student": ["ID", "name", "dept_name", "tot_cred"], "takes": ["ID", "course_id", "sec_id", "semester", "year", "grade"], "advisor": ["s_ID", "i_ID"], "time_slot": ["time_slot_id", "day", "start_hr", "start_min", "end_hr", "end_min"], "prereq": ["course_id", "prereq_id"]}, "answer": [[77600.18819999999, 50]]}, "program_result_list": [["t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1.groupby('dept_name').agg(['mean', 'count'])\nt2.columns = t2.columns.droplevel(0)\nt3 = t2.sort_values('budget', ascending=False).head(1)\nt3.reset_index(inplace=True)\nanswer = [t3.iloc[0]['mean'], t3.iloc[0]['count']]", false], ["t1 = pd.merge(department, instructor, on='dept_name')\nt2 = t1.sort_values('budget', ascending=False).head(1)\nt3 = t2.groupby(['dept_name'])['salary'].agg(['average', 'count']).rename(columns={'average': 'avg(t1.salary)', 'count': 'count(*)'})\nanswer = t3.reset_index()", false], ["t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1.sort_values(by='budget', ascending=False).head(1)\nanswer = [t2['salary'].mean(), t2.shape[0]]", false], ["t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1.sort_values('budget', ascending=False).head(1)\nanswer = [t2['salary'].mean(), t2['salary'].size]", false], ["t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1.sort_values(by='budget', ascending=False).head(1)\nanswer = [t2['salary'].mean(), t2['salary'].size]", false], ["t1 = pd.merge(department, instructor, left_on='dept_name', right_on='dept_name')\nt2 = t1.sort_values(by='budget', ascending=False).head(1)\nt3 = t2.groupby('dept_name').mean().reset_index()\nt4 = t3[['dept_name', 'salary']]\nanswer = t4.rename(columns={'salary':'avg(t1.salary)'})", false], ["t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1.groupby('dept_name').agg({'salary': [np.mean, len]})\nt3 = t2.sort_values(by=('salary', 'budget'), ascending=False)\nt4 = t3.head(1)\nanswer = [t4[('salary', 'mean')].values[0], t4[('salary', 'len')].values[0]]", false], ["t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1.sort_values('budget', ascending=False).head(1)\nt3 = t2.groupby(['dept_name']).agg({'salary':['mean', 'count']})\nanswer = t3['salary']", false], ["t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1.sort_values('budget', ascending=False).head(1)\nanswer = [t2['salary'].mean(), t2['salary'].size]", false], ["t1 = pd.merge(instructor, department, on='dept_name')\nt2 = t1.sort_values('budget', ascending=False).head(1)\nt3 = t2.groupby(['dept_name', 'budget'])['salary'].agg(['mean', 'count']).reset_index()\nanswer = t3[['mean', 'count']]", false], ["t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1.groupby('dept_name').agg({'salary': 'mean', 'budget': 'max'})\nt3 = t2.sort_values('budget', ascending=False).head(1)\nanswer = t3[['salary', 'budget']]", false], ["t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1.groupby(['dept_name', 'budget']).agg({'salary':['mean', 'count']}).reset_index()\nt3 = t2.sort_values(by=('budget', 'budget'), ascending=False).reset_index(drop=True)\nanswer = t3.iloc[0, [1, 2]]", false], ["t1 = pd.merge(department, instructor, left_on='dept_name', right_on='dept_name')\nt2 = t1.groupby('dept_name').agg({'budget':'max', 'salary':'mean', 'name':'count'})\nt3 = t2.sort_values(by=['budget'], ascending=False).head(1).reset_index()\nanswer = t3[['salary', 'name']]", false], ["t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1.sort_values(by='budget', ascending=False).head(1)\nanswer = pd.Series([t2['salary'].mean(), t2['salary'].count()])", false], ["t1 = pd.merge(instructor, department, on='dept_name')\nt2 = t1.sort_values('budget', ascending=False).head(1)\nanswer = [t2['salary'].mean(), len(t2)]", false], ["t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1.sort_values('budget', ascending=False).head(1)\nanswer = t2.agg({'salary': ['mean', 'count']})", false], ["t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1.sort_values(by='budget', ascending=False).head(1)\nanswer = (t2['salary'].mean(), t2['salary'].count())", false], ["t1 = pd.merge(instructor, department, on='dept_name')\nt2 = t1.groupby(['dept_name', 'budget']).agg({'salary': ['mean', 'count']}).reset_index()\nt3 = t2.sort_values(['budget', 'dept_name'], ascending=False)\nanswer = t3.iloc[0, 2:]", false], ["t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1.groupby('dept_name')['salary'].agg([np.mean, np.size])\nt3 = t2.sort_values('budget', ascending=False).head(1).reset_index()\nanswer = t3[['mean', 'size']]", false], ["t1 = pd.merge(instructor, department, left_on='dept_name', right_on='dept_name')\nt2 = t1.groupby('budget').agg({'salary': ['mean', 'count']}).sort_values(('budget', 'mean'), ascending=False).head(1)\nanswer = [t2.iloc[0]['salary']['mean'], t2.iloc[0]['salary']['count']]", false]]}
{"example": {"db_id": "cre_Theme_park", "query": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3", "query_toks": ["SELECT", "other_hotel_details", ",", "star_rating_code", "FROM", "HOTELS", "ORDER", "BY", "price_range", "ASC", "LIMIT", "3"], "query_toks_no_value": ["select", "other_hotel_details", ",", "star_rating_code", "from", "hotels", "order", "by", "price_range", "asc", "limit", "value"], "question": "What are the details and star ratings of the three hotels with the lowest price ranges?", "question_toks": ["What", "are", "the", "details", "and", "star", "ratings", "of", "the", "three", "hotels", "with", "the", "lowest", "price", "ranges", "?"], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 17, false], null]], [0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 16, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Ref_Hotel_Star_Ratings": ["star_rating_code", "star_rating_description"], "Locations": ["Location_ID", "Location_Name", "Address", "Other_Details"], "Ref_Attraction_Types": ["Attraction_Type_Code", "Attraction_Type_Description"], "Visitors": ["Tourist_ID", "Tourist_Details"], "Features": ["Feature_ID", "Feature_Details"], "Hotels": ["hotel_id", "star_rating_code", "pets_allowed_yn", "price_range", "other_hotel_details"], "Tourist_Attractions": ["Tourist_Attraction_ID", "Attraction_Type_Code", "Location_ID", "How_to_Get_There", "Name", "Description", "Opening_Hours", "Other_Details"], "Street_Markets": ["Market_ID", "Market_Details"], "Shops": ["Shop_ID", "Shop_Details"], "Museums": ["Museum_ID", "Museum_Details"], "Royal_Family": ["Royal_Family_ID", "Royal_Family_Details"], "Theme_Parks": ["Theme_Park_ID", "Theme_Park_Details"], "Visits": ["Visit_ID", "Tourist_Attraction_ID", "Tourist_ID", "Visit_Date", "Visit_Details"], "Photos": ["Photo_ID", "Tourist_Attraction_ID", "Name", "Description", "Filename", "Other_Details"], "Staff": ["Staff_ID", "Tourist_Attraction_ID", "Name", "Other_Details"], "Tourist_Attraction_Features": ["Tourist_Attraction_ID", "Feature_ID"]}, "answer": [[null, "2"], [null, "5"], [null, "1"]]}, "program_result_list": [["t1 = Hotels.sort_values('price_range')\nanswer = t1.head(3)[['other_hotel_details', 'star_rating_code']]", false], ["t1 = Hotels.sort_values(by='price_range').head(3)\nt2 = pd.merge(t1, Ref_Hotel_Star_Ratings, left_on='star_rating_code', right_on='star_rating_code')\nanswer = t2[['other_hotel_details', 'star_rating_code']]", false], ["t1 = Hotels.sort_values('price_range').head(3)\nanswer = t1[['other_hotel_details', 'star_rating_code']]", false], ["t1 = Hotels.sort_values('price_range').head(3)\nanswer = t1[['other_hotel_details', 'star_rating_code']]", false], ["t1 = Hotels.sort_values('price_range').head(3)\nanswer = t1[['other_hotel_details', 'star_rating_code']]", false], ["t1 = Hotels.sort_values(by='price_range', ascending=True).head(3).reset_index(drop=True)\nanswer = t1[['other_hotel_details', 'star_rating_code']]", false], ["t1 = Hotels.sort_values('price_range', ascending=True).head(3)\nanswer = t1[['other_hotel_details', 'star_rating_code']]", false], ["t1 = Hotels.sort_values('price_range').head(3).reset_index(drop=True)\nanswer = t1[['other_hotel_details', 'star_rating_code']]", false], ["t1 = Hotels.sort_values(by='price_range').head(3)\nanswer = t1[['other_hotel_details', 'star_rating_code']]", false], ["t1 = Hotels.sort_values('price_range')\nanswer = t1[['other_hotel_details', 'star_rating_code']].head(n=3)", false], ["answer = Hotels[['other_hotel_details', 'star_rating_code']].sort_values(by='price_range').head(3)", false], ["answer = Hotels.sort_values(by='price_range')[:3][['other_hotel_details', 'star_rating_code']]", false], ["t1 = Hotels.sort_values(by='price_range').head(3)\nt2 = pd.merge(t1, Ref_Hotel_Star_Ratings, left_on='star_rating_code', right_on='star_rating_code')\nanswer = t2[['other_hotel_details', 'star_rating_description']]", false], ["t1 = Hotels.sort_values('price_range').head(3)\nanswer = t1[['other_hotel_details', 'star_rating_code']]", false], ["t1 = Hotels.sort_values(['price_range'])\nt2 = t1[['other_hotel_details', 'star_rating_code']]\nanswer = t2.head(3)", false], ["t1 = Hotels.sort_values(by='price_range').head(3)\nanswer = t1[['other_hotel_details', 'star_rating_code']]", false], ["t1 = Hotels.sort_values(by='price_range', ascending=True).head(3)\nanswer = t1[['other_hotel_details', 'star_rating_code']]", false], ["t1 = Hotels.sort_values('price_range').head(3)\nanswer = t1[['other_hotel_details', 'star_rating_code']]", false], ["t1 = Hotels.sort_values(by='price_range').head(3)\nt2 = pd.merge(t1, Ref_Hotel_Star_Ratings, left_on='star_rating_code', right_on='star_rating_code')\nanswer = t2[['other_hotel_details', 'star_rating_code']]", false], ["t1 = Hotels.sort_values('price_range').head(3)\nanswer = t1[['other_hotel_details', 'star_rating_code']]", false]]}
{"example": {"db_id": "bike_1", "query": "SELECT date FROM weather WHERE max_temperature_f  >  85", "query_toks": ["SELECT", "date", "FROM", "weather", "WHERE", "max_temperature_f", ">", "85"], "query_toks_no_value": ["select", "date", "from", "weather", "where", "max_temperature_f", ">", "value"], "question": "Give me the dates when the max temperature was higher than 85.", "question_toks": ["Give", "me", "the", "dates", "when", "the", "max", "temperature", "was", "higher", "than", "85", "."], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]]]], "where": [[false, 3, [0, [0, 24, false], null], 85.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"station": ["id", "name", "lat", "long", "dock_count", "city", "installation_date"], "status": ["station_id", "bikes_available", "docks_available", "time"], "trip": ["id", "duration", "start_date", "start_station_name", "start_station_id", "end_date", "end_station_name", "end_station_id", "bike_id", "subscription_type", "zip_code"], "weather": ["date", "max_temperature_f", "mean_temperature_f", "min_temperature_f", "max_dew_point_f", "mean_dew_point_f", "min_dew_point_f", "max_humidity", "mean_humidity", "min_humidity", "max_sea_level_pressure_inches", "mean_sea_level_pressure_inches", "min_sea_level_pressure_inches", "max_visibility_miles", "mean_visibility_miles", "min_visibility_miles", "max_wind_Speed_mph", "mean_wind_speed_mph", "max_gust_speed_mph", "precipitation_inches", "cloud_cover", "events", "wind_dir_degrees", "zip_code"]}, "answer": [["9/7/2013"], ["8/30/2013"], ["9/6/2013"], ["9/7/2013"], ["9/9/2013"], ["9/19/2013"], ["9/6/2013"], ["9/7/2013"], ["8/30/2013"], ["9/6/2013"], ["9/7/2013"], ["9/19/2013"], ["8/30/2013"], ["9/6/2013"], ["9/7/2013"], ["9/8/2013"], ["9/9/2013"], ["9/19/2013"], ["4/30/2014"], ["5/13/2014"], ["5/14/2014"], ["6/8/2014"], ["7/25/2014"], ["4/29/2014"], ["4/30/2014"], ["5/1/2014"], ["5/12/2014"], ["5/13/2014"], ["5/14/2014"], ["5/15/2014"], ["6/8/2014"], ["6/9/2014"], ["6/18/2014"], ["6/29/2014"], ["6/30/2014"], ["7/24/2014"], ["7/25/2014"], ["4/29/2014"], ["4/30/2014"], ["5/1/2014"], ["5/12/2014"], ["5/13/2014"], ["5/14/2014"], ["5/15/2014"], ["6/8/2014"], ["6/12/2014"], ["6/18/2014"], ["6/30/2014"], ["7/24/2014"], ["7/25/2014"], ["4/29/2014"], ["4/30/2014"], ["5/1/2014"], ["5/12/2014"], ["5/13/2014"], ["5/14/2014"], ["5/15/2014"], ["6/8/2014"], ["6/14/2014"], ["6/18/2014"], ["6/30/2014"], ["7/25/2014"], ["4/8/2014"], ["4/29/2014"], ["4/30/2014"], ["5/1/2014"], ["5/12/2014"], ["5/13/2014"], ["5/14/2014"], ["5/15/2014"], ["6/8/2014"], ["6/9/2014"], ["6/14/2014"], ["6/18/2014"], ["6/29/2014"], ["6/30/2014"], ["7/14/2014"], ["7/25/2014"], ["7/26/2014"], ["7/27/2014"], ["8/30/2014"], ["10/2/2014"], ["10/3/2014"], ["10/4/2014"], ["10/5/2014"], ["10/12/2014"], ["6/8/2015"], ["7/19/2015"], ["7/28/2015"], ["8/15/2015"], ["8/16/2015"], ["8/28/2015"], ["9/1/2014"], ["10/2/2014"], ["10/3/2014"], ["10/4/2014"], ["10/5/2014"], ["10/12/2014"], ["4/30/2015"], ["6/8/2015"], ["6/30/2015"], ["7/19/2015"], ["7/20/2015"], ["7/27/2015"], ["7/28/2015"], ["8/15/2015"], ["8/16/2015"], ["8/17/2015"], ["8/27/2015"], ["8/28/2015"], ["9/1/2014"], ["10/1/2014"], ["10/2/2014"], ["10/3/2014"], ["10/4/2014"], ["10/5/2014"], ["10/12/2014"], ["10/18/2014"], ["1/27/2015"], ["2/27/2015"], ["4/27/2015"], ["4/30/2015"], ["6/8/2015"], ["6/30/2015"], ["7/27/2015"], ["7/28/2015"], ["8/8/2015"], ["8/13/2015"], ["8/15/2015"], ["8/27/2015"], ["9/10/2014"], ["10/1/2014"], ["10/2/2014"], ["10/3/2014"], ["10/4/2014"], ["10/5/2014"], ["10/12/2014"], ["4/30/2015"], ["5/1/2015"], ["5/2/2015"], ["5/3/2015"], ["6/8/2015"], ["6/25/2015"], ["6/30/2015"], ["7/19/2015"], ["7/20/2015"], ["7/28/2015"], ["8/15/2015"], ["8/16/2015"], ["8/27/2015"], ["8/28/2015"], ["9/1/2014"], ["9/10/2014"], ["9/11/2014"], ["10/2/2014"], ["10/3/2014"], ["10/4/2014"], ["10/5/2014"], ["10/6/2014"], ["10/12/2014"], ["10/13/2014"], ["3/14/2015"], ["4/30/2015"], ["6/8/2015"], ["6/12/2015"], ["6/25/2015"], ["6/30/2015"], ["7/1/2015"], ["7/19/2015"], ["7/20/2015"], ["7/27/2015"], ["7/28/2015"], ["7/29/2015"], ["8/15/2015"], ["8/16/2015"], ["8/17/2015"], ["8/26/2015"], ["8/27/2015"], ["8/28/2015"]]}, "program_result_list": [["answer = weather[weather['max_temperature_f'] > 85]['date']", false], ["answer = weather[weather['max_temperature_f'] > 85]['date']", false], ["t1 = weather[weather['max_temperature_f'] > 85]\nanswer = t1['date']", false], ["answer = weather[weather['max_temperature_f'] > 85]['date']", false], ["answer = weather[weather['max_temperature_f'] > 85]['date']", false], ["answer = weather[weather['max_temperature_f'] > 85]['date']", false], ["answer = weather[weather['max_temperature_f'] > 85]['date']", false], ["answer = weather[weather['max_temperature_f'] > 85]['date']", false], ["t1 = weather.loc[weather['max_temperature_f'] > 85]\nanswer = t1['date']", false], ["answer = weather[weather['max_temperature_f'] > 85]['date']", false], ["answer = weather[weather['max_temperature_f'] > 85]['date']", false], ["t1 = weather[weather['max_temperature_f'] > 85]\nanswer = t1['date']", false], ["answer = weather[weather['max_temperature_f'] > 85]['date']", false], ["answer = weather[weather['max_temperature_f'] > 85]['date']", false], ["answer = weather[weather['max_temperature_f'] > 85]['date']", false], ["answer = weather[weather['max_temperature_f'] > 85]['date']", false], ["t1 = weather[weather['max_temperature_f'] > 85]\nanswer = t1['date']", false], ["t1 = weather[weather['max_temperature_f'] > 85]\nanswer = t1['date']", false], ["answer = weather[weather['max_temperature_f'] > 85]['date']", false], ["answer = weather[weather['max_temperature_f'] > 85]['date']", false]]}
{"example": {"db_id": "behavior_monitoring", "query": "SELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "T1.teacher_id", ",", "T2.first_name", "FROM", "Assessment_Notes", "AS", "T1", "JOIN", "Teachers", "AS", "T2", "ON", "T1.teacher_id", "=", "T2.teacher_id", "GROUP", "BY", "T1.teacher_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t1", ".", "teacher_id", ",", "t2", ".", "first_name", "from", "assessment_notes", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "teacher_id", "=", "t2", ".", "teacher_id", "group", "by", "t1", ".", "teacher_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the ids and first names of the 3 teachers that have the most number of assessment notes?", "question_toks": ["Find", "the", "ids", "and", "first", "names", "of", "the", "3", "teachers", "that", "have", "the", "most", "number", "of", "assessment", "notes", "?"], "sql": {"from": {"table_units": [["table_unit", 6], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 37, false], null], [0, 26, false], null]]}, "select": [false, [[0, [0, [0, 37, false], null]], [0, [0, [0, 28, false], null]]]], "where": [], "groupBy": [[0, 37, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Ref_Address_Types": ["address_type_code", "address_type_description"], "Ref_Detention_Type": ["detention_type_code", "detention_type_description"], "Ref_Incident_Type": ["incident_type_code", "incident_type_description"], "Addresses": ["address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details"], "Students": ["student_id", "address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "date_first_rental", "date_left_university", "other_student_details"], "Teachers": ["teacher_id", "address_id", "first_name", "middle_name", "last_name", "gender", "cell_mobile_number", "email_address", "other_details"], "Assessment_Notes": ["notes_id", "student_id", "teacher_id", "date_of_notes", "text_of_notes", "other_details"], "Behavior_Incident": ["incident_id", "incident_type_code", "student_id", "date_incident_start", "date_incident_end", "incident_summary", "recommendations", "other_details"], "Detention": ["detention_id", "detention_type_code", "teacher_id", "datetime_detention_start", "datetime_detention_end", "detention_summary", "other_details"], "Student_Addresses": ["student_id", "address_id", "date_address_from", "date_address_to", "monthly_rental", "other_details"], "Students_in_Detention": ["student_id", "detention_id", "incident_id"]}, "answer": [[3, "Trystan"], [15, "Hobart"], [14, "Evelyn"]]}, "program_result_list": [["t1 = pd.merge(Assessment_Notes, Teachers, left_on='teacher_id', right_on='teacher_id')\nt2 = t1.groupby(['teacher_id', 'first_name']).size().rename('count')\nt3 = t2.sort_values(ascending=False).head(3).to_frame().reset_index()\nanswer = t3[['teacher_id', 'first_name']]", false], ["t1 = pd.merge(Assessment_Notes, Teachers, left_on='teacher_id', right_on='teacher_id')\nt2 = t1.groupby('teacher_id').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(3).to_frame().reset_index()\nt4 = pd.merge(t3, Teachers, left_on='teacher_id', right_on='teacher_id')\nanswer = t4[['teacher_id', 'first_name']]", false], ["t1 = pd.merge(Assessment_Notes, Teachers, on='teacher_id')\nt2 = t1.groupby(['teacher_id', 'first_name']).size().rename('count')\nanswer = t2.sort_values(ascending=False).head(3).to_frame().reset_index()", false], ["t1 = pd.merge(Assessment_Notes, Teachers, on='teacher_id')\nt2 = t1.groupby('teacher_id').size().rename('count').sort_values(ascending=False).head(3).to_frame().reset_index()\nt3 = pd.merge(t2, Teachers, on='teacher_id')\nanswer = t3[['teacher_id', 'first_name']]", false], ["t1 = pd.merge(Assessment_Notes, Teachers, left_on='teacher_id', right_on='teacher_id')\nt2 = t1.groupby('teacher_id', as_index=False).size().rename('count').sort_values(ascending=False).head(3).to_frame().reset_index()\nt3 = pd.merge(t2, Teachers, left_on='teacher_id', right_on='teacher_id')\nanswer = t3[['teacher_id', 'first_name']]", false], ["t1 = pd.merge(Assessment_Notes, Teachers, left_on='teacher_id', right_on='teacher_id')\nt2 = t1.groupby(['teacher_id', 'first_name']).size().rename('count').to_frame().reset_index()\nt3 = t2.sort_values(by='count', ascending=False).head(3)\nanswer = t3[['teacher_id', 'first_name']]", false], ["t1 = pd.merge(Assessment_Notes, Teachers, left_on='teacher_id', right_on='teacher_id')\nt2 = t1.groupby('teacher_id').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(3).to_frame().reset_index()\nt4 = pd.merge(t3, Teachers, on='teacher_id')\nanswer = t4[['teacher_id', 'first_name']]", false], ["t1 = pd.merge(Assessment_Notes, Teachers, left_on='teacher_id', right_on='teacher_id')\nt2 = t1.groupby('teacher_id').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(3).to_frame().reset_index()\nt4 = pd.merge(t3, Teachers, left_on='teacher_id', right_on='teacher_id')\nanswer = t4[['teacher_id', 'first_name']]", false], ["t1 = pd.merge(Assessment_Notes, Teachers, left_on='teacher_id', right_on='teacher_id')\nt2 = t1.groupby('teacher_id').size().rename('count').sort_values(ascending=False).to_frame().reset_index()\nanswer = t2.head(3)", false], ["t1 = pd.merge(Assessment_Notes, Teachers, left_on='teacher_id', right_on='teacher_id')\nt2 = t1.groupby(['teacher_id', 'first_name']).size().rename('count')\nanswer = t2.sort_values(ascending=False).head(3).to_frame().reset_index()", false], ["t1 = pd.merge(Assessment_Notes, Teachers, left_on='teacher_id', right_on='teacher_id')\nt2 = t1.groupby(['teacher_id', 'first_name']).size().rename('count')\nanswer = t2.sort_values(ascending=False).head(3).to_frame().reset_index()", false], ["t1 = pd.merge(Assessment_Notes, Teachers, on='teacher_id')\nt2 = t1.groupby('teacher_id').size().rename('count').to_frame().reset_index()\nt3 = t2.sort_values('count', ascending=False).head(3).to_frame().reset_index()\nt4 = pd.merge(t3, Teachers, on='teacher_id')\nanswer = t4[['teacher_id', 'first_name']]", false], ["t1 = pd.merge(Assessment_Notes, Teachers, on='teacher_id')\nt2 = t1.groupby(['teacher_id', 'first_name']).size().to_frame().reset_index()\nt3 = t2.sort_values(by=0, ascending=False).head(3)\nanswer = t3[['teacher_id', 'first_name']]", false], ["t1 = pd.merge(Assessment_Notes, Teachers, left_on='teacher_id', right_on='teacher_id')\nt2 = t1.groupby(['teacher_id', 'first_name']).size().rename('count')\nanswer = t2.sort_values(ascending=False).head(3).to_frame().reset_index()", false], ["t1 = pd.merge(Assessment_Notes, Teachers, left_on='teacher_id', right_on='teacher_id')\nt2 = t1.groupby('teacher_id').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(3).to_frame().reset_index()\nt4 = pd.merge(t3, Teachers, left_on='teacher_id', right_on='teacher_id')\nanswer = t4[['teacher_id', 'first_name']]", false], ["t1 = pd.merge(Assessment_Notes, Teachers, on='teacher_id')\nt2 = t1.groupby('teacher_id').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(3).to_frame().reset_index()\nt4 = pd.merge(t3, Teachers, on='teacher_id')\nanswer = t4[['teacher_id', 'first_name']]", false], ["t1 = pd.merge(Assessment_Notes, Teachers, left_on='teacher_id', right_on='teacher_id')\nt2 = t1.groupby(['teacher_id', 'first_name']).size().rename('count')\nanswer = t2.sort_values(ascending=False).head(3).to_frame().reset_index()", false], ["t1 = pd.merge(Assessment_Notes, Teachers, on='teacher_id')\nanswer = t1.groupby('teacher_id').size().rename('count').sort_values(ascending=False).head(3).to_frame().reset_index()", false], ["t1 = pd.merge(Assessment_Notes, Teachers, left_on='teacher_id', right_on='teacher_id')\nt2 = t1.groupby('teacher_id').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(3).to_frame().reset_index()\nt4 = pd.merge(t3, Teachers, left_on='teacher_id', right_on='teacher_id')\nanswer = t4[['teacher_id', 'first_name']]", false], ["t1 = pd.merge(Assessment_Notes, Teachers, left_on='teacher_id', right_on='teacher_id')\nt2 = t1.groupby('teacher_id').size().rename('count')\nt3 = t2.sort_values(ascending=False).head(3).to_frame().reset_index()\nt4 = pd.merge(t3, Teachers, left_on='teacher_id', right_on='teacher_id')\nanswer = t4[['teacher_id', 'first_name']]", false]]}
{"example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID", "query_toks": ["SELECT", "T1.Store_Phone", ",", "T1.Store_Email_Address", "FROM", "Drama_Workshop_Groups", "AS", "T1", "JOIN", "Services", "AS", "T2", "ON", "T1.Workshop_Group_ID", "=", "T2.Workshop_Group_ID"], "query_toks_no_value": ["select", "t1", ".", "store_phone", ",", "t1", ".", "store_email_address", "from", "drama_workshop_groups", "as", "t1", "join", "services", "as", "t2", "on", "t1", ".", "workshop_group_id", "=", "t2", ".", "workshop_group_id"], "question": "Give me all the phone numbers and email addresses of the workshop groups where services are performed.", "question_toks": ["Give", "me", "all", "the", "phone", "numbers", "and", "email", "addresses", "of", "the", "workshop", "groups", "where", "services", "are", "performed", "."], "sql": {"from": {"table_units": [["table_unit", 6], ["table_unit", 15]], "conds": [[false, 2, [0, [0, 27, false], null], [0, 86, false], null]]}, "select": [false, [[0, [0, [0, 32, false], null]], [0, [0, [0, 33, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Ref_Payment_Methods": ["payment_method_code", "payment_method_description"], "Ref_Service_Types": ["Service_Type_Code", "Parent_Service_Type_Code", "Service_Type_Description"], "Addresses": ["Address_ID", "Line_1", "Line_2", "City_Town", "State_County", "Other_Details"], "Products": ["Product_ID", "Product_Name", "Product_Price", "Product_Description", "Other_Product_Service_Details"], "Marketing_Regions": ["Marketing_Region_Code", "Marketing_Region_Name", "Marketing_Region_Descriptrion", "Other_Details"], "Clients": ["Client_ID", "Address_ID", "Customer_Email_Address", "Customer_Name", "Customer_Phone", "Other_Details"], "Drama_Workshop_Groups": ["Workshop_Group_ID", "Address_ID", "Currency_Code", "Marketing_Region_Code", "Store_Name", "Store_Phone", "Store_Email_Address", "Other_Details"], "Performers": ["Performer_ID", "Address_ID", "Customer_Name", "Customer_Phone", "Customer_Email_Address", "Other_Details"], "Customers": ["Customer_ID", "Address_ID", "Customer_Name", "Customer_Phone", "Customer_Email_Address", "Other_Details"], "Stores": ["Store_ID", "Address_ID", "Marketing_Region_Code", "Store_Name", "Store_Phone", "Store_Email_Address", "Other_Details"], "Bookings": ["Booking_ID", "Customer_ID", "Workshop_Group_ID", "Status_Code", "Store_ID", "Order_Date", "Planned_Delivery_Date", "Actual_Delivery_Date", "Other_Order_Details"], "Performers_in_Bookings": ["Order_ID", "Performer_ID"], "Customer_Orders": ["Order_ID", "Customer_ID", "Store_ID", "Order_Date", "Planned_Delivery_Date", "Actual_Delivery_Date", "Other_Order_Details"], "Order_Items": ["Order_Item_ID", "Order_ID", "Product_ID", "Order_Quantity", "Other_Item_Details"], "Invoices": ["Invoice_ID", "Order_ID", "payment_method_code", "Product_ID", "Order_Quantity", "Other_Item_Details", "Order_Item_ID"], "Services": ["Service_ID", "Service_Type_Code", "Workshop_Group_ID", "Product_Description", "Product_Name", "Product_Price", "Other_Product_Service_Details"], "Bookings_Services": ["Order_ID", "Product_ID"], "Invoice_Items": ["Invoice_Item_ID", "Invoice_ID", "Order_ID", "Order_Item_ID", "Product_ID", "Order_Quantity", "Other_Item_Details"]}, "answer": [["(422)705-5633", "roosevelt61@example.com"], ["1-351-773-1587x95545", "bednar.michael@example.org"], ["499-032-2149", "katherine.kling@example.org"], ["+60(6)8081312118", "arturo.orn@example.org"], ["1-811-875-3222", "waino.king@example.com"], ["(904)958-9909x0087", "harry.nicolas@example.org"], ["1-351-773-1587x95545", "bednar.michael@example.org"], ["+60(6)8081312118", "arturo.orn@example.org"], ["492-463-5967", "quigley.queen@example.org"], ["(411)133-9128", "watsica.hettie@example.com"], ["1-811-875-3222", "waino.king@example.com"], ["(256)743-0310", "kole.torp@example.org"], ["(636)443-4067", "uhuels@example.net"], ["492-463-5967", "quigley.queen@example.org"], ["1-764-337-3453", "hansen.krista@example.net"]]}, "program_result_list": [["t1 = pd.merge(Drama_Workshop_Groups, Services, left_on='workshop_group_id', right_on='workshop_group_id')\nanswer = t1[['store_phone', 'store_email_address']]", false], ["t1 = pd.merge(Drama_Workshop_Groups, Services, on='workshop_group_id')\nanswer = t1[['store_phone', 'store_email_address']]", false], ["t1 = pd.merge(Drama_Workshop_Groups, Services, left_on='workshop_group_id', right_on='workshop_group_id')\nanswer = t1[['store_phone', 'store_email_address']]", false], ["t1 = pd.merge(Drama_Workshop_Groups, Services, on='workshop_group_id')\nanswer = t1[['store_phone', 'store_email_address']]", false], ["t1 = pd.merge(Drama_Workshop_Groups, Services, left_on='workshop_group_id', right_on='workshop_group_id')\nanswer = t1[['store_phone', 'store_email_address']]", false], ["t1 = pd.merge(Drama_Workshop_Groups, Services, on='workshop_group_id')\nanswer = t1[['store_phone', 'store_email_address']]", false], ["t1 = pd.merge(Drama_Workshop_Groups, Services, on='workshop_group_id')\nanswer = t1[['store_phone', 'store_email_address']]", false], ["t1 = pd.merge(Drama_Workshop_Groups, Services, on='workshop_group_id')\nanswer = t1[['store_phone', 'store_email_address']]", false], ["t1 = pd.merge(Drama_Workshop_Groups, Services, on='workshop_group_id')\nanswer = t1[['store_phone', 'store_email_address']]", false], ["t1 = pd.merge(Drama_Workshop_Groups, Services, left_on='workshop_group_id', right_on='workshop_group_id')\nanswer = t1[['store_phone', 'store_email_address']]", false], ["t1 = pd.merge(Drama_Workshop_Groups, Services, on='workshop_group_id')\nanswer = t1[['store_phone', 'store_email_address']]", false], ["t1 = pd.merge(Drama_Workshop_Groups, Services, on='workshop_group_id')\nanswer = t1[['store_phone', 'store_email_address']]", false], ["t1 = pd.merge(Drama_Workshop_Groups, Services, left_on='workshop_group_id', right_on='workshop_group_id')\nanswer = t1[['store_phone', 'store_email_address']]", false], ["t1 = pd.merge(Drama_Workshop_Groups, Services, left_on='workshop_group_id', right_on='workshop_group_id')\nanswer = t1[['store_phone', 'store_email_address']]", false], ["t1 = pd.merge(Drama_Workshop_Groups, Services, left_on='workshop_group_id', right_on='workshop_group_id')\nanswer = t1[['store_phone', 'store_email_address']]", false], ["t1 = pd.merge(Drama_Workshop_Groups, Services, left_on='workshop_group_id', right_on='workshop_group_id')\nanswer = t1[['store_phone', 'store_email_address']]", false], ["t1 = pd.merge(Drama_Workshop_Groups, Services, left_on='workshop_group_id', right_on='workshop_group_id')\nanswer = t1[['store_phone', 'store_email_address']]", false], ["t1 = pd.merge(Drama_Workshop_Groups, Services, on='workshop_group_id')\nanswer = t1[['store_phone', 'store_email_address']]", false], ["t1 = pd.merge(Drama_Workshop_Groups, Services, on='workshop_group_id')\nanswer = t1[['store_phone', 'store_email_address']]", false], ["t1 = pd.merge(Drama_Workshop_Groups, Services, left_on='workshop_group_id', right_on='workshop_group_id')\nanswer = t1[['store_phone', 'store_email_address']]", false]]}
{"example": {"db_id": "gas_company", "query": "SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry", "query_toks": ["SELECT", "main_industry", ",", "sum", "(", "market_value", ")", "FROM", "company", "GROUP", "BY", "main_industry"], "query_toks_no_value": ["select", "main_industry", ",", "sum", "(", "market_value", ")", "from", "company", "group", "by", "main_industry"], "question": "What are the main indstries and total market value for each industry?", "question_toks": ["What", "are", "the", "main", "indstries", "and", "total", "market", "value", "for", "each", "industry", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]], [4, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"company": ["Company_ID", "Rank", "Company", "Headquarters", "Main_Industry", "Sales_billion", "Profits_billion", "Assets_billion", "Market_Value"], "gas_station": ["Station_ID", "Open_Year", "Location", "Manager_Name", "Vice_Manager_Name", "Representative_Name"], "station_company": ["Station_ID", "Company_ID", "Rank_of_the_Year"]}, "answer": [["Banking", 580.4000000000001], ["Conglomerate", 415.9], ["Oil and gas", 1257.1000000000001]]}, "program_result_list": [["t1 = company.groupby('main_industry').size().rename('count')\nt2 = t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t2['main_industry'][0]", false], ["t1 = company.groupby('main_industry').sum()\nanswer = t1['market_value'].to_frame().reset_index()", false], ["t1 = company.groupby('main_industry').sum()\nanswer = t1[['market_value']]", false], ["t1 = company.groupby('main_industry').size().rename('sum')\nt2 = t1.to_frame().reset_index()\nanswer = t2[['main_industry', 'sum']]", false], ["t1 = company.groupby('main_industry').sum()\nanswer = t1['market_value'].to_frame().reset_index()", false], ["t1 = company.groupby('main_industry').sum()\nanswer = t1[['market_value']]", false], ["t1 = company.groupby('main_industry')['market_value'].sum().rename('sum_market_value').to_frame().reset_index()\nanswer = t1[['main_industry', 'sum_market_value']]", false], ["t1 = company.groupby('main_industry').sum()['market_value']\nanswer = t1.to_frame().rename(columns={'market_value': 'total_market_value'})", false], ["t1 = company.groupby('main_industry')['market_value'].sum().to_frame()\nanswer = t1.reset_index()", false], ["t1 = company.groupby('main_industry')['market_value'].sum()\nanswer = t1.to_frame().reset_index()", false], ["t1 = company.groupby('main_industry').sum()\nt2 = t1[['market_value']]\nanswer = t2.reset_index()", false], ["t1 = company.groupby('main_industry')[['market_value']].sum()\nanswer = t1.reset_index()", false], ["answer = company.groupby('main_industry')['market_value'].sum().to_frame().reset_index()", false], ["t1 = company.groupby('main_industry')['market_value'].sum().rename('sum')\nanswer = t1.to_frame().reset_index()", false], ["t1 = company.groupby('main_industry').sum().reset_index()\nanswer = t1[['main_industry', 'market_value']]", false], ["t1 = company.groupby('main_industry').sum()\nt2 = t1[['market_value']]\nanswer = t2.reset_index()", false], ["t1 = company.groupby('main_industry').size().rename('count')\nt2= t1.sort_values(ascending=False).head(1).to_frame().reset_index()\nanswer = t2['creation']", false], ["t1 = company.groupby('main_industry').sum()\nanswer = t1[['market_value']]", false], ["answer = company.groupby('main_industry')['market_value'].sum().to_frame().reset_index()", false], ["t1 = company.groupby('main_industry').sum()\nanswer = t1[['market_value']]", false]]}
{"example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000", "query_toks": ["SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "WHERE", "T3.cost", ">", "5000"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "where", "t3", ".", "cost", ">", "value"], "question": "Find the physicians who are trained in a procedure that costs more than 5000.", "question_toks": ["Find", "the", "physicians", "who", "are", "trained", "in", "a", "procedure", "that", "costs", "more", "than", "5000", "."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 4], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 14, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 15, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], 5000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Physician": ["EmployeeID", "Name", "Position", "SSN"], "Department": ["DepartmentID", "Name", "Head"], "Affiliated_With": ["Physician", "Department", "PrimaryAffiliation"], "Procedures": ["Code", "Name", "Cost"], "Trained_In": ["Physician", "Treatment", "CertificationDate", "CertificationExpires"], "Patient": ["SSN", "Name", "Address", "Phone", "InsuranceID", "PCP"], "Nurse": ["EmployeeID", "Name", "Position", "Registered", "SSN"], "Appointment": ["AppointmentID", "Patient", "PrepNurse", "Physician", "Start", "End", "ExaminationRoom"], "Medication": ["Code", "Name", "Brand", "Description"], "Prescribes": ["Physician", "Patient", "Medication", "Date", "Appointment", "Dose"], "Block": ["BlockFloor", "BlockCode"], "Room": ["RoomNumber", "RoomType", "BlockFloor", "BlockCode", "Unavailable"], "On_Call": ["Nurse", "BlockFloor", "BlockCode", "OnCallStart", "OnCallEnd"], "Stay": ["StayID", "Patient", "Room", "StayStart", "StayEnd"], "Undergoes": ["Patient", "Procedures", "Stay", "DateUndergoes", "Physician", "AssistingNurse"]}, "answer": [["Christopher Turk"], ["Todd Quinlan"], ["John Wen"], ["John Wen"]]}, "program_result_list": [["t1 = pd.merge(Physician, Trained_In, on='employeeid')\nt2 = pd.merge(t1, Procedures, left_on='treatment', right_on='code')\nanswer = t2[t2['cost'] > 5000]['name']", false], ["t1 = pd.merge(Physician, Trained_In, left_on='employeeid', right_on='physician')\nt2 = pd.merge(t1, Procedures, left_on='treatment', right_on='code')\nt3 = t2[t2['cost'] > 5000]\nanswer = t3['name']", false], ["t1 = pd.merge(Physician, Trained_In, left_on='employeeid', right_on='physician')\nt2 = pd.merge(t1, Procedures, left_on='treatment', right_on='code')\nanswer = t2[t2['cost'] > 5000]['name']", false], ["t1 = pd.merge(Physician, Trained_In, left_on='employeeid', right_on='physician')\nt2 = pd.merge(t1, Procedures, left_on='treatment', right_on='code')\nt3 = t2[t2['cost'] > 5000]\nanswer = t3['name'].unique()", false], ["t1 = pd.merge(Physician, Trained_In, left_on='employeeid', right_on='physician')\nt2 = pd.merge(t1, Procedures, left_on='treatment', right_on='code')\nt3 = t2[t2['cost'] > 5000]\nanswer = t3['name']", false], ["t1 = pd.merge(Physician, Trained_In, left_on='employeeid', right_on='physician')\nt2 = pd.merge(t1, Procedures, left_on='treatment', right_on='code')\nt3 = t2[t2['cost'] > 5000]\nanswer = t3['name']", false], ["t1 = pd.merge(Physician, Trained_In, left_on='employeeid', right_on='physician')\nt2 = pd.merge(t1, Procedures, left_on='treatment', right_on='code')\nt3 = t2[t2['cost'] > 5000]\nanswer = t3['name'].unique()", false], ["t1 = pd.merge(Physician, Trained_In, left_on='employeeid', right_on='physician')\nt2 = pd.merge(t1, Procedures, left_on='treatment', right_on='code')\nt3 = t2[t2['cost'] > 5000]\nanswer = t3['name']", false], ["t1 = pd.merge(Physician, Trained_In, left_on='employeeid', right_on='physician')\nt2 = pd.merge(t1, Procedures, left_on='treatment', right_on='code')\nt3 = t2[t2['cost'] > 5000]\nanswer = t3['name']", false], ["t1 = pd.merge(Physician, Trained_In, left_on='employeeid', right_on='physician')\nt2 = pd.merge(t1, Procedures, left_on='treatment', right_on='code')\nanswer = t2[t2['cost'] > 5000]['name']", false], ["t1 = pd.merge(Physician, Trained_In, on='employeeid')\nt2 = pd.merge(t1, Procedures, left_on='treatment', right_on='code')\nanswer = t2[t2['cost'] > 5000]['name']", false], ["t1 = pd.merge(Physician, Trained_In, left_on='employeeid', right_on='physician')\nt2 = pd.merge(t1, Procedures, left_on='treatment', right_on='code')\nt3 = t2[t2['cost'] > 5000]\nanswer = t3['name'].unique()", false], ["t1 = pd.merge(Physician, Trained_In, on='employeeid')\nt2 = pd.merge(t1, Procedures, left_on='treatment', right_on='code')\nt3 = t2[t2['cost'] > 5000]\nanswer = t3['name']", false], ["t1 = pd.merge(Physician, Trained_In, left_on='employeeid', right_on='physician')\nt2 = pd.merge(t1, Procedures, left_on='treatment', right_on='code')\nanswer = t2[t2['cost'] > 5000]['name']", false], ["t1 = pd.merge(Physician, Trained_In, left_on='employeeid', right_on='physician')\nt2 = pd.merge(t1, Procedures, left_on='treatment', right_on='code')\nt3 = t2[t2['cost'] > 5000]\nanswer = t3['name']", false], ["t1 = pd.merge(Physician, Trained_In, left_on='employeeid', right_on='physician')\nt2 = pd.merge(t1, Procedures, left_on='treatment', right_on='code')\nt3 = t2[t2['cost'] > 5000]\nanswer = t3['name'].unique()", false], ["t1 = pd.merge(Physician, Trained_In, left_on='employeeid', right_on='physician')\nt2 = pd.merge(t1, Procedures, left_on='treatment', right_on='code')\nt3 = t2[t2['cost'] > 5000]\nanswer = t3['name']", false], ["t1 = pd.merge(Physician, Trained_In, left_on='employeeid', right_on='physician')\nt2 = pd.merge(t1, Procedures, left_on='treatment', right_on='code')\nt3 = t2[t2['cost'] > 5000]\nanswer = t3['name']", false], ["t1 = pd.merge(Physician, Trained_In, left_on='employeeid', right_on='physician')\nt2 = pd.merge(t1, Procedures, left_on='treatment', right_on='code')\nt3 = t2[t2['cost'] > 5000]\nanswer = t3['name']", false], ["t1 = pd.merge(Physician, Trained_In, left_on='employeeid', right_on='physician')\nt2 = pd.merge(t1, Procedures, left_on='treatment', right_on='code')\nt3 = t2[t2['cost'] > 5000]\nanswer = t3['name']", false]]}
{"example": {"db_id": "student_assessment", "query": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date", "query_toks": ["SELECT", "T2.student_id", "FROM", "courses", "AS", "T1", "JOIN", "student_course_registrations", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T1.course_name", "=", "``", "statistics", "''", "ORDER", "BY", "T2.registration_date"], "query_toks_no_value": ["select", "t2", ".", "student_id", "from", "courses", "as", "t1", "join", "student_course_registrations", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t1", ".", "course_name", "=", "value", "order", "by", "t2", ".", "registration_date"], "question": "What are the ids of the students who registered course statistics by order of registration date?", "question_toks": ["What", "are", "the", "ids", "of", "the", "students", "who", "registered", "course", "statistics", "by", "order", "of", "registration", "date", "?"], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 28, false], null]]}, "select": [false, [[0, [0, [0, 27, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], "\"statistics\"", null]], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 29, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1", "line_2", "city", "zip_postcode", "state_province_county", "country"], "People": ["person_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "login_name", "password"], "Students": ["student_id", "student_details"], "Courses": ["course_id", "course_name", "course_description", "other_details"], "People_Addresses": ["person_address_id", "person_id", "address_id", "date_from", "date_to"], "Student_Course_Registrations": ["student_id", "course_id", "registration_date"], "Student_Course_Attendance": ["student_id", "course_id", "date_of_attendance"], "Candidates": ["candidate_id", "candidate_details"], "Candidate_Assessments": ["candidate_id", "qualification", "assessment_date", "asessment_outcome_code"]}, "answer": [[121], [111], [171], [141]]}, "program_result_list": [["t1 = pd.merge(Students, Student_Course_Registrations, on='student_id')\nt2 = pd.merge(t1, Courses, on='course_id')\nt3 = t2[t2['course_name'] == 'statistics']\nt4 = t3.sort_values(by='registration_date')\nanswer = t4['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Registrations, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2.sort_values('registration_date')['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Registrations, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2[['student_id']].sort_values('registration_date')", false], ["t1 = pd.merge(Courses, Student_Course_Registrations, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics'].sort_values('registration_date')\nanswer = t2['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Registrations, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2.sort_values('registration_date')['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Registrations, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2.sort_values(by='registration_date')[['student_id']]\nanswer", false], ["t1 = pd.merge(Courses, Student_Course_Registrations, on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2.sort_values(by=['registration_date'])['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Registrations, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nt3 = t2.sort_values(by='registration_date')\nanswer = t3['student_id']\n \n# Dataset student_assessment:", false], ["t1 = pd.merge(Courses, Student_Course_Registrations, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2.sort_values('registration_date')['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Registrations, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2.sort_values(by='registration_date')['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Registrations, on='course_id', how='inner')\nt2 = t1[t1['course_name'] == 'statistics']\nt3 = t2.sort_values('registration_date').reset_index(drop=True)\nanswer = t3['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Registrations, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2.sort_values('registration_date')['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Registrations, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2.sort_values('registration_date')['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Registrations, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2.sort_values('registration_date')['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Registrations, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics'].sort_values('registration_date')\nanswer = t2['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Registrations, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2.sort_values(by='registration_date')['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Registrations, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2.sort_values('registration_date')['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Registrations, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2.sort_values('registration_date')['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Registrations, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2.sort_values(by='registration_date')['student_id']", false], ["t1 = pd.merge(Courses, Student_Course_Registrations, left_on='course_id', right_on='course_id')\nt2 = t1[t1['course_name'] == 'statistics']\nanswer = t2.sort_values(by='registration_date')[['student_id']]", false]]}
{"example": {"db_id": "storm_record", "query": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "name", "FROM", "storm", "EXCEPT", "SELECT", "T1.name", "FROM", "storm", "AS", "T1", "JOIN", "affected_region", "AS", "T2", "ON", "T1.storm_id", "=", "T2.storm_id", "GROUP", "BY", "T1.storm_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "name", "from", "storm", "except", "select", "t1", ".", "name", "from", "storm", "as", "t1", "join", "affected_region", "as", "t2", "on", "t1", ".", "storm_id", "=", "t2", ".", "storm_id", "group", "by", "t1", ".", "storm_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the names of storms that did not affect two or more regions?", "question_toks": ["What", "are", "the", "names", "of", "storms", "that", "did", "not", "affect", "two", "or", "more", "regions", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 11, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "db_table_headers": {"storm": ["Storm_ID", "Name", "Dates_active", "Max_speed", "Damage_millions_USD", "Number_Deaths"], "region": ["Region_id", "Region_code", "Region_name"], "affected_region": ["Region_id", "Storm_ID", "Number_city_affected"]}, "answer": [["9 cyclones"], ["Eight"], ["Four"], ["Nine"], ["Seven"], ["Six"], ["Three"], ["Two"]]}, "program_result_list": [["t1 = pd.merge(storm, affected_region, left_on='storm_id', right_on='storm_id')\nt2 = t1.groupby(['storm_id', 'name']).size().rename('count')\nt3 = t2[t2 >= 2].to_frame().reset_index()\nt4 = storm[~storm.name.isin(t3['name'])]\nanswer = t4['name']", false], ["t1 = pd.merge(storm, affected_region, left_on='storm_id', right_on='storm_id')\nt2 = t1.groupby('storm_id').size().rename('count')\nt3 = t2[t2 >= 2].to_frame().reset_index()\nt4 = pd.merge(storm, t3, left_on='storm_id', right_on='storm_id', how='outer', indicator=True)\nanswer = t4[t4['_merge'] == 'left_only']['name']", false], ["t1 = pd.merge(storm, affected_region, left_on='storm_id', right_on='storm_id')\nt2 = t1.groupby(['storm_id', 'name']).size().rename('count')\nt3 = t2[t2 >= 2].to_frame().reset_index()\nt4 = storm[~storm['name'].isin(t3['name'])]\nanswer = t4['name']", false], ["t1 = pd.merge(affected_region, storm, left_on='storm_id', right_on='storm_id')\nt2 = t1.groupby('storm_id').size().rename('count')\nt3 = t2[t2 >= 2].index\nt4 = storm[~storm['storm_id'].isin(t3)]\nanswer = t4['name']", false], ["t1 = pd.merge(affected_region, storm, left_on='storm_id', right_on='storm_id')\nt2 = t1.groupby('storm_id').size().rename('count')\nt3 = t2[t2 >= 2].to_frame().reset_index()\nt4 = pd.merge(t3, storm, left_on='storm_id', right_on='storm_id')\nt5 = storm.merge(t4, on='name', how='outer', indicator=True)\nanswer = t5[t5['_merge'] == 'left_only']['name']", false], ["t1 = pd.merge(storm, affected_region, left_on='storm_id', right_on='storm_id')\nt2 = t1.groupby('name').size().rename('count')\nt3 = storm[~storm['name'].isin(t2[t2 >= 2].index)]\nanswer = t3['name']", false], ["t1 = pd.merge(storm, affected_region, on='storm_id')\nt2 = t1.groupby('storm_id').size().rename('count')\nt3 = t2[t2 >= 2].to_frame().reset_index()\nt4 = t3[['storm_id']]\nt5 = pd.merge(storm, t4, on='storm_id', how='left')\nt6 = t5[t5['storm_id'].isna()]\nanswer = t6['name']", false], ["t1 = pd.merge(storm, affected_region, left_on='storm_id', right_on='storm_id')\nt2 = t1.groupby('storm_id').size().rename('count')\nt3 = t2[t2 < 2].to_frame().reset_index()\nt4 = pd.merge(storm, t3, left_on='storm_id', right_on='storm_id')\nanswer = t4['name']", false], ["t1 = storm.set_index('storm_id')\nt2 = affected_region.groupby('storm_id').size().to_frame().reset_index()\nt3 = pd.merge(t2, t1, left_on='storm_id', right_index=True)\nt4 = t3[t3['0_x'] < 2]\nanswer = t4['name']", false], ["t1 = pd.merge(storm, affected_region, left_on='storm_id', right_on='storm_id')\nt2 = t1.groupby('name').size().rename('count')\nanswer = storm[~storm['name'].isin(t2[t2 >= 2].index)]", false], ["t1 = pd.merge(storm, affected_region, left_on='storm_id', right_on='storm_id')\nt2 = t1.groupby('storm_id').size()\nanswer = storm[storm['storm_id'].isin(t2[t2 > 1].index)]['name']", false], ["t1 = pd.merge(storm, affected_region, left_on='storm_id', right_on='storm_id')\nt2 = t1.groupby('storm_id').size().rename('count')\nt3 = t2[t2 < 2].to_frame().reset_index()\nt4 = pd.merge(storm, t3, left_on='storm_id', right_on='storm_id')\nanswer = t4['name']", false], ["t1 = pd.merge(storm, affected_region, on='storm_id')\nt2 = t1.groupby('storm_id').size().rename('count')\nt3 = t2[t2 >= 2].to_frame().reset_index()\nt4 = pd.merge(storm, t3, on='storm_id', how='left')\nanswer = t4[t4['count'].isnull()]['name']", false], ["t1 = pd.merge(storm, affected_region, left_on='storm_id', right_on='storm_id')\nt2 = t1.groupby('name').size().rename('count')\nanswer = storm[~storm['name'].isin(t2[t2 >= 2].index)]", false], ["t1 = pd.merge(storm, affected_region, left_on='storm_id', right_on='storm_id')\nt2 = t1.groupby(['storm_id', 'name']).size()\nt3 = t2[t2 >= 2].to_frame().reset_index()\nt4 = storm[~storm.name.isin(t3.name)]\nanswer = t4.name", false], ["t1 = pd.merge(storm, affected_region, on='storm_id')\nt2 = t1.groupby('storm_id').size().rename('count')\nt3 = t2[t2 >= 2].to_frame().reset_index()\nt4 = pd.merge(storm, t3, on='storm_id', how='outer', indicator=True)\nt5 = t4[t4['_merge'] == 'left_only']\nanswer = t5['name']", false], ["t1 = pd.merge(storm, affected_region, left_on='storm_id', right_on='storm_id')\nt2 = t1.groupby(['storm_id', 'name']).size().rename('count')\nt3 = t2[t2 >= 2].to_frame().reset_index()\nt4 = storm[~storm['name'].isin(t3['name'])]\nanswer = t4['name']", false], ["t1 = pd.merge(storm, affected_region, left_on='storm_id', right_on='storm_id')\nt2 = t1.groupby('storm_id').size().rename('count')\nt3 = t2[t2 >= 2].to_frame().reset_index()\nt4 = pd.merge(t3, storm, on='storm_id')\nanswer = t4['name']", false], ["t1 = storm.merge(affected_region, left_on='storm_id', right_on='storm_id')\nt2 = t1.groupby('storm_id').size().rename('count')\nt3 = t2[t2 < 2].to_frame().reset_index()\nt4 = pd.merge(storm, t3, on='storm_id')\nanswer = t4['name']", false], ["t1 = pd.merge(storm, affected_region, left_on='storm_id', right_on='storm_id')\nt2 = t1.groupby(['storm_id', 'name']).size().rename('count')\nt3 = t2[t2 >= 2].to_frame().reset_index()\nanswer = storm[~storm['name'].isin(t3['name'])]", false]]}
{"example": {"db_id": "customers_and_invoices", "query": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id", "query_toks": ["SELECT", "T1.invoice_date", ",", "T1.order_id", ",", "T2.order_details", "FROM", "Invoices", "AS", "T1", "JOIN", "Orders", "AS", "T2", "ON", "T1.order_id", "=", "T2.order_id"], "query_toks_no_value": ["select", "t1", ".", "invoice_date", ",", "t1", ".", "order_id", ",", "t2", ".", "order_details", "from", "invoices", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id"], "question": "What are the invoice dates, order ids, and order details for all invoices?", "question_toks": ["What", "are", "the", "invoice", "dates", ",", "order", "ids", ",", "and", "order", "details", "for", "all", "invoices", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 19, false], null]], [0, [0, [0, 18, false], null]], [0, [0, [0, 16, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Customers": ["customer_id", "customer_first_name", "customer_middle_initial", "customer_last_name", "gender", "email_address", "login_name", "login_password", "phone_number", "town_city", "state_county_province", "country"], "Orders": ["order_id", "customer_id", "date_order_placed", "order_details"], "Invoices": ["invoice_number", "order_id", "invoice_date"], "Accounts": ["account_id", "customer_id", "date_account_opened", "account_name", "other_account_details"], "Product_Categories": ["production_type_code", "product_type_description", "vat_rating"], "Products": ["product_id", "parent_product_id", "production_type_code", "unit_price", "product_name", "product_color", "product_size"], "Financial_Transactions": ["transaction_id", "account_id", "invoice_number", "transaction_type", "transaction_date", "transaction_amount", "transaction_comment", "other_transaction_details"], "Order_Items": ["order_item_id", "order_id", "product_id", "product_quantity", "other_order_item_details"], "Invoice_Line_Items": ["order_item_id", "invoice_number", "product_id", "product_title", "product_quantity", "product_price", "derived_product_cost", "derived_vat_payable", "derived_total_cost"]}, "answer": [["2018-03-01 16:40:48", 9, null], ["2018-03-20 00:21:41", 9, null], ["2018-03-05 08:47:33", 3, null], ["2018-02-28 19:01:06", 9, null], ["2018-03-07 02:04:32", 13, null], ["2018-03-16 21:57:43", 8, null], ["2018-03-13 07:27:38", 10, null], ["2018-03-19 17:06:30", 10, null], ["2018-03-16 11:01:06", 12, null], ["2018-03-01 01:44:08", 11, null], ["2018-03-23 04:59:28", 5, null], ["2018-03-15 21:24:13", 3, null], ["2018-03-03 20:44:06", 3, null], ["2018-03-19 22:38:10", 4, null], ["2018-03-15 09:38:49", 14, null]]}, "program_result_list": [["t1 = pd.merge(Invoices, Orders, on='order_id')\nanswer = t1[['invoice_date', 'order_id', 'order_details']]", false], ["t1 = pd.merge(Invoices, Orders, left_on='order_id', right_on='order_id')\nanswer = t1[['invoice_date', 'order_id', 'order_details']]", false], ["t1 = pd.merge(Invoices, Orders, on='order_id')\nanswer = t1[['invoice_date', 'order_id', 'order_details']]", false], ["t1 = pd.merge(Invoices, Orders, on='order_id')\nanswer = t1[['invoice_date', 'order_id', 'order_details']]", false], ["t1 = pd.merge(Invoices, Orders, left_on='order_id', right_on='order_id')\nanswer = t1[['invoice_date', 'order_id', 'order_details']]", false], ["t1 = pd.merge(Invoices, Orders, left_on='order_id', right_on='order_id')\nanswer = t1[['invoice_date', 'order_id', 'order_details']]", false], ["t1 = pd.merge(Invoices, Orders, left_on='order_id', right_on='order_id')\nanswer = t1[['invoice_date', 'order_id', 'order_details']]", false], ["t1 = pd.merge(Invoices, Orders, left_on='order_id', right_on='order_id')\nanswer = t1[['invoice_date', 'order_id', 'order_details']]", false], ["t1 = pd.merge(Invoices, Orders, left_on='order_id', right_on='order_id')\nanswer = t1[['invoice_date', 'order_id', 'order_details']]", false], ["t1 = pd.merge(Invoices, Orders, left_on='order_id', right_on='order_id')\nanswer = t1[['invoice_date', 'order_id', 'order_details']]", false], ["t1 = pd.merge(Invoices, Orders, left_on='order_id', right_on='order_id')\nanswer = t1[['invoice_date', 'order_id', 'order_details']]", false], ["t1 = pd.merge(Invoices, Orders, on='order_id')\nanswer = t1[['invoice_date', 'order_id', 'order_details']]", false], ["t1 = pd.merge(Invoices, Orders, left_on='order_id', right_on='order_id')\nanswer = t1[['invoice_date', 'order_id', 'order_details']]", false], ["t1 = pd.merge(Invoices, Orders, left_on='order_id', right_on='order_id')\nanswer = t1[['invoice_date', 'order_id', 'order_details']]", false], ["t1 = pd.merge(Invoices, Orders, left_on='order_id', right_on='order_id')\nanswer = t1[['invoice_date', 'order_id', 'order_details']]", false], ["t1 = pd.merge(Invoices, Orders, left_on='order_id', right_on='order_id')\nanswer = t1[['invoice_date', 'order_id', 'order_details']]", false], ["t1 = pd.merge(Invoices, Orders, on='order_id')\nanswer = t1[['invoice_date', 'order_id', 'order_details']]", false], ["t1 = pd.merge(Invoices, Orders, left_on='order_id', right_on='order_id')\nanswer = t1[['invoice_date', 'order_id', 'order_details']]", false], ["t1 = pd.merge(Invoices, Orders, on='order_id')\nanswer = t1[['invoice_date', 'order_id', 'order_details']]", false], ["t1 = pd.merge(Invoices, Orders, left_on='order_id', right_on='order_id')\nanswer = t1[['invoice_date', 'order_id', 'order_details']]", false]]}
{"example": {"db_id": "tracking_share_transactions", "query": "SELECT T1.Investor_details FROM  INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.share_count  >  100", "query_toks": ["SELECT", "T1.Investor_details", "FROM", "INVESTORS", "AS", "T1", "JOIN", "TRANSACTIONS", "AS", "T2", "ON", "T1.investor_id", "=", "T2.investor_id", "WHERE", "T2.share_count", ">", "100"], "query_toks_no_value": ["select", "t1", ".", "investor_details", "from", "investors", "as", "t1", "join", "transactions", "as", "t2", "on", "t1", ".", "investor_id", "=", "t2", ".", "investor_id", "where", "t2", ".", "share_count", ">", "value"], "question": "Show details of all investors if they make any transaction with share count greater than 100.", "question_toks": ["Show", "details", "of", "all", "investors", "if", "they", "make", "any", "transaction", "with", "share", "count", "greater", "than", "100", "."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], 100.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Investors": ["investor_id", "Investor_details"], "Lots": ["lot_id", "investor_id", "lot_details"], "Ref_Transaction_Types": ["transaction_type_code", "transaction_type_description"], "Transactions": ["transaction_id", "investor_id", "transaction_type_code", "date_of_transaction", "amount_of_transaction", "share_count", "other_details"], "Sales": ["sales_transaction_id", "sales_details"], "Purchases": ["purchase_transaction_id", "purchase_details"], "Transactions_Lots": ["transaction_id", "lot_id"]}, "answer": [["k"], ["w"], ["z"], ["w"], ["t"], ["l"], ["l"], ["k"], ["z"], ["d"], ["w"], ["d"], ["l"]]}, "program_result_list": [["t1 = pd.merge(Investors, Transactions, left_on='investor_id', right_on='investor_id')\nt2 = t1[t1['share_count'] > 100]\nanswer = t2['investor_details']", false], ["t1 = pd.merge(Investors, Transactions, on='investor_id')\nt2 = t1[t1['share_count'] > 100]\nanswer = t2['investor_details']", false], ["t1 = pd.merge(Investors, Transactions, left_on='investor_id', right_on='investor_id')\nt2 = t1[t1['share_count'] > 100]\nanswer = t2['investor_details']", false], ["t1 = pd.merge(Investors, Transactions, left_on='investor_id', right_on='investor_id')\nt2 = t1[t1['share_count'] > 100]\nanswer = t2['investor_details']", false], ["t1 = pd.merge(Investors, Transactions, left_on='investor_id', right_on='investor_id')\nt2 = t1[t1['share_count'] > 100]\nanswer = t2['investor_details']", false], ["t1 = pd.merge(Investors, Transactions, left_on='investor_id', right_on='investor_id')\nt2 = t1[t1['share_count'] > 100]\nanswer = t2['investor_details']", false], ["t1 = pd.merge(Investors, Transactions, left_on='investor_id', right_on='investor_id')\nanswer = t1[t1['share_count'] > 100][['investor_details']]", false], ["t1 = pd.merge(Investors, Transactions, left_on='investor_id', right_on='investor_id')\nt2 = t1[t1['share_count'] > 100]\nanswer = t2['investor_details']", false], ["t1 = pd.merge(Investors, Transactions, left_on='investor_id', right_on='investor_id')\nt2 = t1[t1['share_count'] > 100]\nanswer = t2['investor_details']", false], ["t1 = pd.merge(Investors, Transactions, left_on='investor_id', right_on='investor_id')\nt2 = t1[t1['share_count'] > 100]\nanswer = t2[['investor_details']]", false], ["t1 = pd.merge(Investors, Transactions, left_on='investor_id', right_on='investor_id')\nt2 = t1[t1['share_count'] > 100]\nanswer = t2['investor_details']", false], ["t1 = pd.merge(Investors, Transactions, left_on='investor_id', right_on='investor_id')\nt2 = t1[t1['share_count'] > 100]\nanswer = t2['investor_details']", false], ["t1 = pd.merge(Investors, Transactions, left_on='investor_id', right_on='investor_id')\nt2 = t1[t1['share_count'] > 100]\nanswer = t2['investor_details']", false], ["t1 = pd.merge(Investors, Transactions, left_on='investor_id', right_on='investor_id')\nt2 = t1[t1['share_count'] > 100]\nanswer = t2['investor_details']", false], ["t1 = pd.merge(Investors, Transactions, left_on='investor_id', right_on='investor_id')\nt2 = t1[t1['share_count'] > 100]\nanswer = t2['investor_details']", false], ["t1 = pd.merge(Investors, Transactions, left_on='investor_id', right_on='investor_id')\nt2 = t1[t1['share_count'] > 100]\nanswer = t2['investor_details']", false], ["t1 = pd.merge(Investors, Transactions, left_on='investor_id', right_on='investor_id')\nt2 = t1[t1['share_count'] > 100]\nanswer = t2['investor_details']", false], ["t1 = pd.merge(Investors, Transactions, left_on='investor_id', right_on='investor_id')\nt2 = t1[t1['share_count'] > 100]\nanswer = t2['investor_details']", false], ["t1 = pd.merge(Investors, Transactions, left_on='investor_id', right_on='investor_id')\nt2 = t1[t1['share_count'] > 100]\nanswer = t2['investor_details']", false], ["t1 = pd.merge(Investors, Transactions, on='investor_id')\nt2 = t1[t1['share_count'] > 100]\nanswer = t2['investor_details']", false]]}
{"example": {"db_id": "college_3", "query": "SELECT Fname FROM STUDENT ORDER BY Age DESC", "query_toks": ["SELECT", "Fname", "FROM", "STUDENT", "ORDER", "BY", "Age", "DESC"], "query_toks_no_value": ["select", "fname", "from", "student", "order", "by", "age", "desc"], "question": "What are the first names of students, ordered by age from greatest to least?", "question_toks": ["What", "are", "the", "first", "names", "of", "students", ",", "ordered", "by", "age", "from", "greatest", "to", "least", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 4, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Student": ["StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code"], "Faculty": ["FacID", "Lname", "Fname", "Rank", "Sex", "Phone", "Room", "Building"], "Department": ["DNO", "Division", "DName", "Room", "Building", "DPhone"], "Member_of": ["FacID", "DNO", "Appt_Type"], "Course": ["CID", "CName", "Credits", "Instructor", "Days", "Hours", "DNO"], "Minor_in": ["StuID", "DNO"], "Enrolled_in": ["StuID", "CID", "Grade"], "Gradeconversion": ["lettergrade", "gradepoint"]}, "answer": [["Bruce"], ["Paul"], ["Sarah"], ["David"], ["Ian"], ["Shiela"], ["Lisa"], ["Dinesh"], ["Jandy"], ["Steven"], ["Michael"], ["David"], ["Eric"], ["Sarah"], ["Eric"], ["Tracy"], ["Eric"], ["George"], ["Eric"], ["Linda"], ["Andy"], ["Lisa"], ["Charles"], ["Arthur"], ["Stacy"], ["Mark"], ["Paul"], ["William"], ["Eric"], ["Derek"], ["Mark"], ["Michael"], ["Jun"], ["Susan"]]}, "program_result_list": [["answer = Student.sort_values('age', ascending=False)['fname']", false], ["answer = Student.sort_values('age', ascending=False)['fname']", false], ["answer = Student.sort_values('age', ascending=False)['fname']", false], ["t1 = Student.sort_values(by='age', ascending=False)\nanswer = t1['fname']", false], ["answer = Student.sort_values(by='age', ascending=False)['fname']", false], ["answer = Student.sort_values('age', ascending=False)['fname']", false], ["answer = Student.sort_values('age', ascending=False)['fname']", false], ["answer = Student.sort_values(by='age', ascending=False)['fname']", false], ["t1 = Student.sort_values(by='age', ascending=False)\nanswer = t1['fname']", false], ["answer = Student.sort_values('age', ascending=False)['fname']", false], ["answer = Student.sort_values('age', ascending=False)['fname']", false], ["t1 = Student.sort_values('age', ascending=False)\nanswer = t1['fname']", false], ["t1 = Student.sort_values('age', ascending=False)\nanswer = t1['fname']", false], ["answer = Student.sort_values('age', ascending=False)['fname']", false], ["answer = Student.sort_values(by='age', ascending=False)['fname']", false], ["answer = Student.sort_values(by='age', ascending=False)['fname']", false], ["answer = Student.sort_values('age', ascending=False)['fname']", false], ["answer = Student.sort_values('age', ascending=False)['fname']", false], ["answer = Student.sort_values('age', ascending=False)['fname']", false], ["answer = Student.sort_values(by='age', ascending=False).reset_index(drop=True)['fname']", false]]}
{"example": {"db_id": "store_product", "query": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\"", "query_toks": ["SELECT", "t3.District_name", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "JOIN", "district", "AS", "t3", "ON", "t2.district_id", "=", "t3.district_id", "WHERE", "t1.Type", "=", "``", "City", "Mall", "''", "INTERSECT", "SELECT", "t3.District_name", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "JOIN", "district", "AS", "t3", "ON", "t2.district_id", "=", "t3.district_id", "WHERE", "t1.Type", "=", "``", "Village", "Store", "''"], "query_toks_no_value": ["select", "t3", ".", "district_name", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "join", "district", "as", "t3", "on", "t2", ".", "district_id", "=", "t3", ".", "district_id", "where", "t1", ".", "type", "=", "value", "intersect", "select", "t3", ".", "district_name", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "join", "district", "as", "t3", "on", "t2", ".", "district_id", "=", "t3", ".", "district_id", "where", "t1", ".", "type", "=", "value"], "question": "Find the names of districts where have both city mall and village store type stores.", "question_toks": ["Find", "the", "names", "of", "districts", "where", "have", "both", "city", "mall", "and", "village", "store", "type", "stores", "."], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 4], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 21, false], null], "and", [false, 2, [0, [0, 22, false], null], [0, 14, false], null]]}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"City Mall\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1], ["table_unit", 4], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 21, false], null], "and", [false, 2, [0, [0, 22, false], null], [0, 14, false], null]]}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Village Store\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "db_table_headers": {"product": ["product_id", "product", "dimensions", "dpi", "pages_per_minute_color", "max_page_size", "interface"], "store": ["Store_ID", "Store_Name", "Type", "Area_size", "Number_of_product_category", "Ranking"], "district": ["District_ID", "District_name", "Headquartered_City", "City_Population", "City_Area"], "store_product": ["Store_ID", "Product_ID"], "store_district": ["Store_ID", "District_ID"]}, "answer": [["Khanewal District"]]}, "program_result_list": [["t1 = pd.merge(store, store_district, left_on='store_id', right_on='store_id')\nt2 = pd.merge(t1, district, left_on='district_id', right_on='district_id')\nt3 = t2[t2['type'] == 'city mall']['district_name']\nt4 = t2[t2['type'] == 'village store']['district_name']\nanswer = t3[t3.isin(t4)].unique()", false], ["t1 = pd.merge(store, store_district, left_on='store_id', right_on='store_id')\nt2 = pd.merge(t1, district, left_on='district_id', right_on='district_id')\nt3 = t2[t2['type'] == 'city mall']['district_name']\nt4 = t2[t2['type'] == 'village store']['district_name']\nanswer = t3.intersection(t4).to_frame().reset_index(drop=True)", false], ["t1 = pd.merge(store, store_district, left_on='store_id', right_on='store_id')\nt2 = pd.merge(t1, district, left_on='district_id', right_on='district_id')\nt3 = t2[t2['type'] == 'city mall']\nt4 = t2[t2['type'] == 'village store']\nt5 = pd.concat([t3, t4], axis=0)\nt6 = t5.groupby('district_name').size().rename('count')\nanswer = t6[t6 >= 2].to_frame().reset_index()", false], ["t1= pd.merge(store,store_district, on='store_id')\nt2= pd.merge(t1,district, on='district_id')\nt3= t2[t2['type']=='city mall']\nt4= t2[t2['type']=='village store']\nanswer= pd.merge(t3,t4, on='district_name')['district_name']", false], ["t1 = pd.merge(store, store_district, on='store_id')\nt2 = pd.merge(t1, district, on='district_id')", false], ["t1 = pd.merge(store, store_district, left_on='store_id', right_on='store_id')\nt2 = pd.merge(t1, district, left_on='district_id', right_on='district_id')\nt3 = t2[t2['type'] == 'city mall']\nt4 = t2[t2['type'] == 'village store']\nanswer = t3['district_name'][t3['district_name'].isin(t4['district_name'])].unique()", false], ["t1 = pd.merge(store, store_district, left_on='store_id', right_on='store_id')\nt2 = pd.merge(t1, district, left_on='district_id', right_on='district_id')\nt3 = t2[t2['type'] == 'city mall']\nt4 = t2[t2['type'] == 'village store']\nanswer = t3['district_name'].unique()[np.in1d(t3['district_name'].unique(), t4['district_name'].unique())]", false], ["t1 = store[store['type'] == 'city mall']\nt2 = pd.merge(t1, store_district, on='store_id')\nt3 = pd.merge(t2, district, on='district_id')\nt4 = t3[['district_name']]\nt5 = store[store['type'] == 'village store']\nt6 = pd.merge(t5, store_district, on='store_id')\nt7 = pd.merge(t6, district, on='district_id')\nt8 = t7[['district_name']]\nanswer = pd.merge(t4, t8, on='district_name')", false], ["t1 = pd.merge(store, store_district, on='store_id')\nt2 = pd.merge(t1, district, left_on='district_id', right_on='district_id')\nt3 = t2[t2['type'] == 'city mall']\nt4 = t2[t2['type'] == 'village store']\nt5 = pd.merge(t3, t4, on='district_name', how='inner')\nanswer = t5['district_name'].unique()", false], ["t1 = pd.merge(store, store_district, left_on='store_id', right_on='store_id')\nt2 = pd.merge(t1, district, left_on='district_id', right_on='district_id')\nt3 = t2[t2['type'] == 'city mall']\nt4 = t2[t2['type'] == 'village store']\nanswer = pd.merge(t3, t4, on='district_name')['district_name'].unique()", false], ["t1 = pd.merge(store, store_district, on='store_id')\nt2 = pd.merge(t1, district, on='district_id')\nt3 = t2[t2['type'] == 'city mall']\nt4 = t2[t2['type'] == 'village store']\nt5 = pd.merge(t3, t4, on='district_name', how='inner')\nanswer = t5['district_name'].unique()", false], ["t1 = pd.merge(store, store_district, on='store_id')\nt2 = pd.merge(t1, district, on='district_id')\nt3 = t2[t2['type'] == 'city mall']\nt4 = t2[t2['type'] == 'village store']\nt5 = pd.merge(t3, t4, on='district_name', suffixes=('_city_mall', '_village_store'))\nanswer = t5['district_name'].unique()", false], ["t1 = pd.merge(store, store_district, left_on='store_id', right_on='store_id')\nt2 = pd.merge(t1, district, left_on='district_id', right_on='district_id')\nt3 = t2[t2['type'] == 'city mall']\nt4 = t2[t2['type'] == 'village store']\nt5 = t3['district_name'].unique()\nt6 = t4['district_name'].unique()\nanswer = np.intersect1d(t5, t6)", false], ["t1 = pd.merge(store, store_district, left_on='store_id', right_on='store_id')\nt2 = pd.merge(t1, district, left_on='district_id', right_on='district_id')\nanswer1 = t2[t2['type'] == 'city mall']['district_name']\nanswer2 = t2[t2['type'] == 'village store']['district_name']\nanswer = answer1.merge(answer2, indicator=True, how='outer').query('_merge == \"both\"').drop('_merge', axis=1)", false], ["t1 = pd.merge(store, store_district, left_on='store_id', right_on='store_id')\nt2 = pd.merge(t1, district, left_on='district_id', right_on='district_id')\nt3 = t2[t2['type'] == 'city mall']\nt4 = t2[t2['type'] == 'village store']\nanswer = t3[['district_name']].merge(t4[['district_name']], on='district_name', how='inner')", false], ["\nt1 = pd.merge(store, store_district, left_on='store_id', right_on='store_id')\nt2 = pd.merge(t1, district, left_on='district_id', right_on='district_id')\nt3 = t2[t2['type'] == 'city mall']\nt4 = t2[t2['type'] == 'village store']\nanswer = t3.merge(t4, on='district_name', how='inner')['district_name'].unique()", false], ["t1 = pd.merge(store, store_district, left_on='store_id', right_on='store_id')\nt2 = pd.merge(t1, district, left_on='district_id', right_on='district_id')\nt3 = t2[t2['type'] == 'city mall']\nt4 = t2[t2['type'] == 'village store']\nt5 = t3.merge(t4, on='district_name', how='inner')\nanswer = t5['district_name'].unique()", false], ["t1 = pd.merge(store, store_district, left_on='store_id', right_on='store_id')\nt2 = pd.merge(t1, district, left_on='district_id', right_on='district_id')\nt3 = t2[t2['type'] == 'city mall']\nt4 = t2[t2['type'] == 'village store']\nt5 = pd.merge(t3, t4, on='district_name').drop_duplicates(subset='district_name')\nanswer = t5['district_name']", false], ["t1 = pd.merge(store, store_district, left_on='store_id', right_on='store_id')\nt2 = pd.merge(t1, district, left_on='district_id', right_on='district_id')\nt3 = t2[t2['type'] == 'city mall']\nt4 = t2[t2['type'] == 'village store']\nanswer = pd.merge(t3, t4, on='district_name', how='inner')['district_name'].unique()", false], ["t1 = pd.merge(store, store_district, left_on='store_id', right_on='store_id')\nt2 = pd.merge(t1, district, left_on='district_id', right_on='district_id')\nt3 = t2[t2['type'] == 'city mall']\nt4 = t2[t2['type'] == 'village store']\nanswer = t3['district_name'].intersection(t4['district_name'])", false]]}