{"db_id": "network_1", "query": "SELECT name FROM Highschooler WHERE grade  =  10", "query_toks": ["SELECT", "name", "FROM", "Highschooler", "WHERE", "grade", "=", "10"], "query_toks_no_value": ["select", "name", "from", "highschooler", "where", "grade", "=", "value"], "question": "What are the names of all high schoolers in grade 10?", "question_toks": ["What", "are", "the", "names", "of", "all", "high", "schoolers", "in", "grade", "10", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], 10.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Highschooler": ["ID", "name", "grade"], "Friend": ["student_id", "friend_id"], "Likes": ["student_id", "liked_id"]}, "answer": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]], "results": {"generated_sql": "SELECT name FROM Highschooler WHERE grade  =  10", "generated_py": "t1 = pd.merge(Highschooler, Friend, on='ID'); t2 = pd.merge(t1, Highschooler, left_on='friend_id', right_on='ID'); answer = t2[t2['grade'] == 10]['name_y']", "sql_exec_result": "[('Haley',), ('Andrew',), ('Kris',), ('Brittany',)]", "py_exec_result": "None", "gold_answer": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]], "gold_sql": "SELECT name FROM Highschooler WHERE grade  =  10", "gold_py": null}}
{"db_id": "network_1", "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "grade", "FROM", "Highschooler", "GROUP", "BY", "grade", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "grade", "from", "highschooler", "group", "by", "grade", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which grade has the most high schoolers?", "question_toks": ["Which", "grade", "has", "the", "most", "high", "schoolers", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Highschooler": ["ID", "name", "grade"], "Friend": ["student_id", "friend_id"], "Likes": ["student_id", "liked_id"]}, "answer": [[12]], "results": {"generated_sql": "SELECT T1.grade ,  count(*) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id JOIN Highschooler AS T3 ON T2.friend_id  =  T3.ID GROUP BY T1.grade ORDER BY count(*) DESC", "generated_py": "t1 = pd.merge(Highschooler, Likes, on='ID'); t2 = pd.merge(t1, Highschooler, left_on='liked_id', right_on='ID'); t3 = t2[['name_x', 'name_y', 'grade_x']].rename(columns={'name_x':'student_name', 'name_y':'liked_name', 'grade_x':'grade'}); answer = t3.groupby('grade').size().idxmax()", "sql_exec_result": "[(10, 6), (9, 6), (11, 5), (12, 3)]", "py_exec_result": "None", "gold_answer": [[12]], "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "gold_py": null}}
{"db_id": "orchestra", "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "query_toks": ["SELECT", "Record_Company", "FROM", "orchestra", "ORDER", "BY", "Year_of_Founded", "DESC"], "query_toks_no_value": ["select", "record_company", "from", "orchestra", "order", "by", "year_of_founded", "desc"], "question": "What are the record companies of orchestras in descending order of years in which they were founded?", "question_toks": ["What", "are", "the", "record", "companies", "of", "orchestras", "in", "descending", "order", "of", "years", "in", "which", "they", "were", "founded", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 10, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"conductor": ["Conductor_ID", "Name", "Age", "Nationality", "Year_of_Work"], "orchestra": ["Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format"], "performance": ["Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share"], "show": ["Show_ID", "Performance_ID", "If_first_show", "Result", "Attendance"]}, "answer": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]], "results": {"generated_sql": "SELECT T1.record_company FROM orchestra AS T1 JOIN performance AS T2 ON T1.orchestra_id  =  T2.orchestra_id JOIN show AS T3 ON T2.performance_id  =  T3.performance_id GROUP BY T1.orchestra_id ORDER BY T1.year_of_founded DESC", "generated_py": "t1 = pd.merge(orchestra, performance, on='orchestra_id'); t2 = pd.merge(t1, show, on='performance_id'); t3 = t2[['orchestra_id', 'record_company', 'year_of_founded']].drop_duplicates(); answer = t3.groupby('record_company').size().sort_values(ascending=False)", "sql_exec_result": "[('Columbia Masterworks',), ('Philips',), ('Mercury Records',), ('Decca Records',), ('Kultur',)]", "py_exec_result": "record_company\nColumbia Masterworks    1\nDecca Records           1\nKultur                  1\nMercury Records         1\nPhilips                 1\ndtype: int64", "gold_answer": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]], "gold_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "gold_py": null}}
{"db_id": "flight_2", "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.AirportCode", "FROM", "AIRPORTS", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.AirportCode", "=", "T2.DestAirport", "OR", "T1.AirportCode", "=", "T2.SourceAirport", "GROUP", "BY", "T1.AirportCode", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "airportcode", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "airportcode", "=", "t2", ".", "destairport", "or", "t1", ".", "airportcode", "=", "t2", ".", "sourceairport", "group", "by", "t1", ".", "airportcode", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the airport code of the airport with the most flights?", "question_toks": ["What", "is", "the", "airport", "code", "of", "the", "airport", "with", "the", "most", "flights", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"airlines": ["uid", "Airline", "Abbreviation", "Country"], "airports": ["City", "AirportCode", "AirportName", "Country", "CountryAbbrev"], "flights": ["Airline", "FlightNo", "SourceAirport", "DestAirport"]}, "answer": [], "results": {"generated_sql": "SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS num_flights FROM flights GROUP BY AirportCode) AS T1 WHERE num_flights  =  (SELECT MAX(num_flights) FROM (SELECT AirportCode, COUNT(*) AS num_flights FROM flights GROUP BY AirportCode))", "generated_py": "t1 = pd.merge(flights, airports, left_on='source_airport', right_on='airport_code'); t2 = t1.groupby('airport_code').size().rename('count').reset_index(); answer = t2.sort_values('count', ascending = False).iloc[0]['airport_code']", "sql_exec_result": "None", "py_exec_result": "None", "gold_answer": [], "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "gold_py": null}}
{"db_id": "world_1", "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "country", "WHERE", "continent", "=", "``", "Asia", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "country", "where", "continent", "=", "value"], "question": "how many countries are in Asia?", "question_toks": ["how", "many", "countries", "are", "in", "Asia", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"city": ["ID", "Name", "CountryCode", "District", "Population"], "sqlite_sequence": ["name", "seq"], "country": ["Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2"], "countrylanguage": ["CountryCode", "Language", "IsOfficial", "Percentage"]}, "answer": [[51]], "results": {"generated_sql": "SELECT count(*) FROM country WHERE continent  =  'Asia'", "generated_py": "answer = country[country['Continent'] == 'Asia'].shape[0]", "sql_exec_result": "[(51,)]", "py_exec_result": "None", "gold_answer": [[51]], "gold_sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "gold_py": null}}
{"db_id": "singer", "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "query_toks": ["SELECT", "Name", "FROM", "singer", "ORDER", "BY", "Net_Worth_Millions", "ASC"], "query_toks_no_value": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "asc"], "question": "List the name of singers in ascending order of net worth.", "question_toks": ["List", "the", "name", "of", "singers", "in", "ascending", "order", "of", "net", "worth", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 4, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"singer": ["Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship"], "song": ["Song_ID", "Title", "Singer_ID", "Sales", "Highest_Position"]}, "answer": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]], "results": {"generated_sql": "SELECT T1.name FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.singer_id ORDER BY sum(T2.sales)", "generated_py": "answer = singer[['name', 'net_worth_millions']].sort_values('net_worth_millions', ascending = True)", "sql_exec_result": "[('Susanne Klatten',), ('Jacqueline Mars',), ('Gina Rinehart',), ('Iris Fontbona',), ('Christy Walton',), ('Liliane Bettencourt',)]", "py_exec_result": "                  name  net_worth_millions\n7      Abigail Johnson                12.7\n6      Susanne Klatten                14.3\n5        Gina Rinehart                17.0\n3        Iris Fontbona                17.4\n4      Jacqueline Mars                17.8\n2         Alice Walton                26.3\n1       Christy Walton                28.8\n0  Liliane Bettencourt                30.0", "gold_answer": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]], "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "gold_py": null}}
{"db_id": "concert_singer", "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "query_toks": ["SELECT", "T2.name", ",", "count", "(", "*", ")", "FROM", "concert", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.stadium_id", "GROUP", "BY", "T1.stadium_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "stadium_id", "group", "by", "t1", ".", "stadium_id"], "question": "Show the stadium name and the number of concerts in each stadium.", "question_toks": ["Show", "the", "stadium", "name", "and", "the", "number", "of", "concerts", "in", "each", "stadium", "."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 18, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"stadium": ["Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average"], "singer": ["Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male"], "concert": ["concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year"], "singer_in_concert": ["concert_ID", "Singer_ID"]}, "answer": [["Stark's Park", 1], ["Glebe Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1]], "results": {"generated_sql": "SELECT T1.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T2.name", "generated_py": "t1 = pd.merge(concert, singer_in_concert, on='concert_id'); t2 = pd.merge(t1, singer, on='singer_id'); t3 = pd.merge(t2, stadium, on='stadium_id'); answer = t3[['stadium_id', 'name', 'concert_id']].groupby('stadium_id').size().rename('count').reset_index()", "sql_exec_result": "None", "py_exec_result": "None", "gold_answer": [["Stark's Park", 1], ["Glebe Park", 1], ["Somerset Park", 2], ["Recreation Park", 1], ["Balmoor", 1]], "gold_sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "gold_py": null}}
{"db_id": "employee_hire_evaluation", "query": "SELECT name FROM employee ORDER BY age", "query_toks": ["SELECT", "name", "FROM", "employee", "ORDER", "BY", "age"], "query_toks_no_value": ["select", "name", "from", "employee", "order", "by", "age"], "question": "Sort employee names by their age in ascending order.", "question_toks": ["Sort", "employee", "names", "by", "their", "age", "in", "ascending", "order", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 3, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"employee": ["Employee_ID", "Name", "Age", "City"], "shop": ["Shop_ID", "Name", "Location", "District", "Number_products", "Manager_name"], "hiring": ["Shop_ID", "Employee_ID", "Start_from", "Is_full_time"], "evaluation": ["Employee_ID", "Year_awarded", "Bonus"]}, "answer": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]], "results": {"generated_sql": "SELECT name FROM employee ORDER BY age", "generated_py": "answer = employee[['name', 'age']].sort_values('age', ascending = True)", "sql_exec_result": "[('George Chuter',), ('Andrew Sheridan',), ('Lee Mears',), ('Tim Payne',), ('Matt Stevens',), ('Jason Hobson',), ('Steve Borthwick',), ('Louis Deacon',), ('Phil Vickery',), ('Mark Regan',)]", "py_exec_result": "              name  age\n0    George Chuter   23\n5  Andrew Sheridan   28\n1        Lee Mears   29\n4        Tim Payne   29\n6     Matt Stevens   29\n3     Jason Hobson   30\n8  Steve Borthwick   32\n9     Louis Deacon   36\n7     Phil Vickery   40\n2       Mark Regan   43", "gold_answer": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]], "gold_sql": "SELECT name FROM employee ORDER BY age", "gold_py": null}}
{"db_id": "dog_kennels", "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", ",", "T2.size_code", "FROM", "Owners", "AS", "T1", "JOIN", "Dogs", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", ",", "t2", ".", "size_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id"], "question": "What are each owner's first name, last name, and the size of their dog?", "question_toks": ["What", "are", "each", "owner", "'s", "first", "name", ",", "last", "name", ",", "and", "the", "size", "of", "their", "dog", "?"], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]], [0, [0, [0, 24, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Breeds": ["breed_code", "breed_name"], "Charges": ["charge_id", "charge_type", "charge_amount"], "Sizes": ["size_code", "size_description"], "Treatment_Types": ["treatment_type_code", "treatment_type_description"], "Owners": ["owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number"], "Dogs": ["dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed"], "Professionals": ["professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number"], "Treatments": ["treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "answer": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]], "results": {"generated_sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_description FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id", "generated_py": "t1 = pd.merge(Dogs, Owners, on='owner_id'); t2 = pd.merge(t1, Sizes, on='size_code'); answer = t2[['first_name', 'last_name', 'size_description']]", "sql_exec_result": "None", "py_exec_result": "   first_name    last_name size_description\n0      Jaclyn  Stoltenberg            Large\n1         Gay         Feil            Large\n2    Rachelle         Funk            Large\n3       Cindy      Schmitt            Large\n4      Jaclyn  Stoltenberg           Medium\n5        Nora        Haley           Medium\n6    Rachelle         Funk           Medium\n7      Emelie        Mertz           Medium\n8      Johann       Fisher           Medium\n9      Melisa      DuBuque           Medium\n10       Kade       Rippin           Medium\n11    Orlando        Price           Medium\n12     Lorenz      Nicolas           Medium\n13   Rachelle         Funk            Small\n14    Rolando     Prohaska            Small", "gold_answer": [["Jaclyn", "Stoltenberg", "LGE"], ["Gay", "Feil", "LGE"], ["Nora", "Haley", "MED"], ["Rachelle", "Funk", "LGE"], ["Emelie", "Mertz", "MED"], ["Johann", "Fisher", "MED"], ["Jaclyn", "Stoltenberg", "MED"], ["Rachelle", "Funk", "SML"], ["Melisa", "DuBuque", "MED"], ["Kade", "Rippin", "MED"], ["Cindy", "Schmitt", "LGE"], ["Orlando", "Price", "MED"], ["Rolando", "Prohaska", "SML"], ["Rachelle", "Funk", "MED"], ["Lorenz", "Nicolas", "MED"]], "gold_sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "gold_py": null}}
{"db_id": "network_1", "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "WHERE", "T2.name", "=", "``", "Kyle", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "where", "t2", ".", "name", "=", "value"], "question": "How many friends does the high school student Kyle have?", "question_toks": ["How", "many", "friends", "does", "the", "high", "school", "student", "Kyle", "have", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Kyle\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Highschooler": ["ID", "name", "grade"], "Friend": ["student_id", "friend_id"], "Likes": ["student_id", "liked_id"]}, "answer": [[1]], "results": {"generated_sql": "SELECT count(*) FROM friend WHERE student_id  =  'Kyle'", "generated_py": "t1 = pd.merge(Friend, Highschooler, left_on='student_id', right_on='ID'); t2 = pd.merge(t1, Highschooler, left_on='friend_id', right_on='ID'); answer = t2[t2['name_x'] == 'Kyle'].shape[0]", "sql_exec_result": "[(0,)]", "py_exec_result": "None", "gold_answer": [[1]], "gold_sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "gold_py": null}}
{"db_id": "tvshow", "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "Directed_by", "FROM", "cartoon", "GROUP", "BY", "Directed_by"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "directed_by", "from", "cartoon", "group", "by", "directed_by"], "question": "Find the number of cartoons directed by each of the listed directors.", "question_toks": ["Find", "the", "number", "of", "cartoons", "directed", "by", "each", "of", "the", "listed", "directors", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 21, false], null]]]], "where": [], "groupBy": [[0, 21, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"TV_Channel": ["id", "series_name", "Country", "Language", "Content", "Pixel_aspect_ratio_PAR", "Hight_definition_TV", "Pay_per_view_PPV", "Package_Option"], "TV_series": ["id", "Episode", "Air_Date", "Rating", "Share", "18_49_Rating_Share", "Viewers_m", "Weekly_Rank", "Channel"], "Cartoon": ["id", "Title", "Directed_by", "Written_by", "Original_air_date", "Production_code", "Channel"]}, "answer": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]], "results": {"generated_sql": "SELECT Directed_by ,  count(*) FROM Cartoon GROUP BY Directed_by", "generated_py": "t1 = pd.merge(Cartoon, Cartoon.groupby('Directed_by').size().rename('count'), on='Directed_by'); answer = t1[['Directed_by', 'count']]", "sql_exec_result": "[('Ben Jones', 4), ('Brandon Vietti', 4), ('Michael Chang', 4)]", "py_exec_result": "None", "gold_answer": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]], "gold_sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "gold_py": null}}
{"db_id": "car_1", "query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "query_toks": ["select", "count", "(", "*", ")", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "countryid", "=", "t2", ".", "country", "group", "by", "t1", ".", "countryid", "having", "count", "(", "*", ")", ">", "value"], "question": "How many countries has more than 2 car makers ?", "question_toks": ["How", "many", "countries", "has", "more", "than", "2", "car", "makers", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [[4], [4], [3], [5]], "results": {"generated_sql": "SELECT COUNT(*) FROM (SELECT DISTINCT Country FROM car_makers) AS T1 WHERE T1.Country  >  2", "generated_py": "t1 = pd.merge(car_makers, countries, on='country'); t2 = t1.groupby('country_id').size().rename('count').reset_index(); answer = t2[t2['count'] > 2].shape[0]", "sql_exec_result": "[(6,)]", "py_exec_result": "None", "gold_answer": [[4], [4], [3], [5]], "gold_sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "gold_py": null}}
{"db_id": "dog_kennels", "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "query_toks": ["SELECT", "role_code", ",", "street", ",", "city", ",", "state", "FROM", "professionals", "WHERE", "city", "LIKE", "'", "%", "West", "%", "'"], "query_toks_no_value": ["select", "role_code", ",", "street", ",", "city", ",", "state", "from", "professionals", "where", "city", "like", "value"], "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "question_toks": ["Which", "professionals", "live", "in", "a", "city", "containing", "the", "substring", "'West", "'", "?", "List", "his", "or", "her", "role", ",", "street", ",", "city", "and", "state", "."], "sql": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]], [0, [0, [0, 38, false], null]]]], "where": [[false, 9, [0, [0, 37, false], null], "\"%West%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Breeds": ["breed_code", "breed_name"], "Charges": ["charge_id", "charge_type", "charge_amount"], "Sizes": ["size_code", "size_description"], "Treatment_Types": ["treatment_type_code", "treatment_type_description"], "Owners": ["owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number"], "Dogs": ["dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed"], "Professionals": ["professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number"], "Treatments": ["treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "answer": [["Employee", "6915 Oberbrunner Point Suite 491\nGleasonville, LA ", "West Heidi", "Indiana"]], "results": {"generated_sql": "SELECT T1.role_code ,  T1.street ,  T1.city ,  T1.state FROM professional AS T1 JOIN address AS T2 ON T1.professional_id  =  T2.professional_id WHERE T2.city  LIKE  '%West%'", "generated_py": "t1 = pd.merge(Professionals, Dogs, on='professional_id'); t2 = pd.merge(t1, Dogs, on='dog_id'); t3 = pd.merge(t2, Dogs, on='dog_id'); t4 = pd.merge(t3, Dogs, on='dog_id'); t5 = pd.merge(t4, Dogs, on='dog_id'); t6 = pd.merge(t5, Dogs, on='dog_id'); t7 = pd.merge(t6, Dogs, on='dog_id'); t8 = pd.merge(t7, Dogs, on='dog_id'); t9 = pd.merge(t8, Dogs, on='dog_id'); t10 = pd.merge(t9, Dogs, on='dog_", "sql_exec_result": "None", "py_exec_result": "None", "gold_answer": [["Employee", "6915 Oberbrunner Point Suite 491\nGleasonville, LA ", "West Heidi", "Indiana"]], "gold_sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "gold_py": null}}
{"db_id": "flight_2", "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T2.Airline", "=", "T1.uid", "WHERE", "T1.Airline", "=", "``", "United", "Airlines", "''", "AND", "T2.SourceAirport", "=", "``", "AHD", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t2", ".", "airline", "=", "t1", ".", "uid", "where", "t1", ".", "airline", "=", "value", "and", "t2", ".", "sourceairport", "=", "value"], "question": "Return the number of United Airlines flights leaving from AHD Airport.", "question_toks": ["Return", "the", "number", "of", "United", "Airlines", "flights", "leaving", "from", "AHD", "Airport", "."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"United Airlines\"", null], "and", [false, 2, [0, [0, 12, false], null], "\"AHD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"airlines": ["uid", "Airline", "Abbreviation", "Country"], "airports": ["City", "AirportCode", "AirportName", "Country", "CountryAbbrev"], "flights": ["Airline", "FlightNo", "SourceAirport", "DestAirport"]}, "answer": [[0]], "results": {"generated_sql": "SELECT count(*) FROM flights WHERE Airline  =  'United Airlines' AND SourceAirport  =  'AHD'", "generated_py": "t1 = pd.merge(flights, airlines, on='airline'); t2 = pd.merge(t1, airports, left_on='source_airport', right_on='airport_code'); answer = t2[t2['airline'] == 'United Airlines'].shape[0]", "sql_exec_result": "[(0,)]", "py_exec_result": "None", "gold_answer": [[0]], "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "gold_py": null}}
{"db_id": "world_1", "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "query_toks": ["SELECT", "Population", ",", "Region", "FROM", "country", "WHERE", "Name", "=", "``", "Angola", "''"], "query_toks_no_value": ["select", "population", ",", "region", "from", "country", "where", "name", "=", "value"], "question": "What region does Angola belong to and what is its population?", "question_toks": ["What", "region", "does", "Angola", "belong", "to", "and", "what", "is", "its", "population", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 14, false], null]], [0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Angola\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"city": ["ID", "Name", "CountryCode", "District", "Population"], "sqlite_sequence": ["name", "seq"], "country": ["Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2"], "countrylanguage": ["CountryCode", "Language", "IsOfficial", "Percentage"]}, "answer": [[12878000, "Central Africa"]], "results": {"generated_sql": "SELECT region ,  population FROM country WHERE code  =  'ANG'", "generated_py": "t1 = pd.merge(country, city, on='code'); t2 = pd.merge(t1, countrylanguage, on='code'); t3 = t2[t2['name'] == 'Angola']; answer = t3['region'].unique()", "sql_exec_result": "[]", "py_exec_result": "None", "gold_answer": [[12878000, "Central Africa"]], "gold_sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "gold_py": null}}
{"db_id": "car_1", "query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "query_toks": ["select", "count", "(", "*", ")", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "countryid", "=", "t2", ".", "country", "group", "by", "t1", ".", "countryid", "having", "count", "(", "*", ")", ">", "value"], "question": "What is the number of countries with more than 2 car makers ?", "question_toks": ["What", "is", "the", "number", "of", "countries", "with", "more", "than", "2", "car", "makers", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [[4], [4], [3], [5]], "results": {"generated_sql": "SELECT COUNT(*) FROM (SELECT CountryId, COUNT(*) AS num_makers FROM car_makers GROUP BY CountryId HAVING num_makers  >  2)", "generated_py": "t1 = pd.merge(car_makers, countries, on='country'); t2 = t1.groupby('country_id').size().rename('count').reset_index(); t3 = t2[t2['count'] > 2]; answer = t3.shape[0]", "sql_exec_result": "None", "py_exec_result": "None", "gold_answer": [[4], [4], [3], [5]], "gold_sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "gold_py": null}}
{"db_id": "world_1", "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "query_toks": ["SELECT", "name", "FROM", "city", "WHERE", "Population", "BETWEEN", "160000", "AND", "900000"], "query_toks_no_value": ["select", "name", "from", "city", "where", "population", "between", "value", "and", "value"], "question": "What are the cities whose population is between 160000 and 900000?", "question_toks": ["What", "are", "the", "cities", "whose", "population", "is", "between", "160000", "and", "900000", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 1, [0, [0, 5, false], null], 160000.0, 900000.0]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"city": ["ID", "Name", "CountryCode", "District", "Population"], "sqlite_sequence": ["name", "seq"], "country": ["Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2"], "countrylanguage": ["CountryCode", "Language", "IsOfficial", "Percentage"]}, "answer": [["Qandahar"], ["Herat"], ["Amsterdam"], ["Rotterdam"], ["Haag"], ["Utrecht"], ["Eindhoven"], ["Tilburg"], ["Groningen"], ["Breda"], ["Tirana"], ["Oran"], ["Constantine"], ["Annaba"], ["Batna"], ["S\u00e9tif"], ["Huambo"], ["Dubai"], ["Abu Dhabi"], ["Sharja"], ["al-Ayn"], ["Lomas de Zamora"], ["Quilmes"], ["Almirante Brown"], ["La Plata"], ["Mar del Plata"], ["San Miguel de Tucum\u00e1n"], ["Lan\u00fas"], ["Merlo"], ["General San Mart\u00edn"], ["Salta"], ["Moreno"], ["Santa F\u00e9"], ["Avellaneda"], ["Tres de Febrero"], ["Mor\u00f3n"], ["Florencio Varela"], ["San Isidro"], ["Tigre"], ["Malvinas Argentinas"], ["Vicente L\u00f3pez"], ["Berazategui"], ["Corrientes"], ["San Miguel"], ["Bah\u00eda Blanca"], ["Esteban Echeverr\u00eda"], ["Resistencia"], ["Jos\u00e9 C. Paz"], ["Paran\u00e1"], ["Godoy Cruz"], ["Posadas"], ["Guaymall\u00e9n"], ["Santiago del Estero"], ["San Salvador de Jujuy"], ["Hurlingham"], ["Neuqu\u00e9n"], ["Gjumri"], ["Vanadzor"], ["Canberra"], ["Gold Coast"], ["Newcastle"], ["Central Coast"], ["Wollongong"], ["G\u00e4nc\u00e4"], ["Sumqayit"], ["Nassau"], ["Khulna"], ["Rajshahi"], ["Narayanganj"], ["Rangpur"], ["Mymensingh"], ["Barisal"], ["Tungi"], ["Antwerpen"], ["Gent"], ["Charleroi"], ["Li\u00e8ge"], ["Cotonou"], ["Porto-Novo"], ["La Paz"], ["El Alto"], ["Cochabamba"], ["Oruro"], ["Sucre"], ["Sarajevo"], ["Gaborone"], ["S\u00e3o Gon\u00e7alo"], ["Nova Igua\u00e7u"], ["S\u00e3o Lu\u00eds"], ["Macei\u00f3"], ["Duque de Caxias"], ["S\u00e3o Bernardo do Campo"], ["Teresina"], ["Natal"], ["Osasco"], ["Campo Grande"], ["Santo Andr\u00e9"], ["Jo\u00e3o Pessoa"], ["Jaboat\u00e3o dos Guararapes"], ["Contagem"], ["S\u00e3o Jos\u00e9 dos Campos"], ["Uberl\u00e2ndia"], ["Feira de Santana"], ["Ribeir\u00e3o Preto"], ["Sorocaba"], ["Niter\u00f3i"], ["Cuiab\u00e1"], ["Juiz de Fora"], ["Aracaju"], ["S\u00e3o Jo\u00e3o de Meriti"], ["Londrina"], ["Joinville"], ["Belford Roxo"], ["Santos"], ["Ananindeua"], ["Campos dos Goytacazes"], ["Mau\u00e1"], ["Carapicu\u00edba"], ["Olinda"], ["Campina Grande"], ["S\u00e3o Jos\u00e9 do Rio Preto"], ["Caxias do Sul"], ["Moji das Cruzes"], ["Diadema"], ["Aparecida de Goi\u00e2nia"], ["Piracicaba"], ["Cariacica"], ["Vila Velha"], ["Pelotas"], ["Bauru"], ["Porto Velho"], ["Serra"], ["Betim"], ["Jund\u00eda\u00ed"], ["Canoas"], ["Franca"], ["S\u00e3o Vicente"], ["Maring\u00e1"], ["Montes Claros"], ["An\u00e1polis"], ["Florian\u00f3polis"], ["Petr\u00f3polis"], ["Itaquaquecetuba"], ["Vit\u00f3ria"], ["Ponta Grossa"], ["Rio Branco"], ["Foz do Igua\u00e7u"], ["Macap\u00e1"], ["Ilh\u00e9us"], ["Vit\u00f3ria da Conquista"], ["Uberaba"], ["Paulista"], ["Limeira"], ["Blumenau"], ["Caruaru"], ["Santar\u00e9m"], ["Volta Redonda"], ["Novo Hamburgo"], ["Caucaia"], ["Santa Maria"], ["Cascavel"], ["Guaruj\u00e1"], ["Ribeir\u00e3o das Neves"], ["Governador Valadares"], ["Taubat\u00e9"], ["Imperatriz"], ["Gravata\u00ed"], ["Embu"], ["Mossor\u00f3"], ["V\u00e1rzea Grande"], ["Petrolina"], ["Barueri"], ["Viam\u00e3o"], ["Ipatinga"], ["Juazeiro"], ["Juazeiro do Norte"], ["Tabo\u00e3o da Serra"], ["S\u00e3o Jos\u00e9 dos Pinhais"], ["Mag\u00e9"], ["Suzano"], ["S\u00e3o Leopoldo"], ["Mar\u00edlia"], ["S\u00e3o Carlos"], ["Sumar\u00e9"], ["Presidente Prudente"], ["Divin\u00f3polis"], ["Sete Lagoas"], ["Rio Grande"], ["Itabuna"], ["Jequi\u00e9"], ["Arapiraca"], ["Colombo"], ["Americana"], ["Alvorada"], ["Araraquara"], ["Itabora\u00ed"], ["Santa B\u00e1rbara d\u00b4Oeste"], ["Nova Friburgo"], ["Jacare\u00ed"], ["Ara\u00e7atuba"], ["Barra Mansa"], ["Praia Grande"], ["Marab\u00e1"], ["Crici\u00fama"], ["Boa Vista"], ["Passo Fundo"], ["Dourados"], ["Santa Luzia"], ["Rio Claro"], ["Maracana\u00fa"], ["Guarapuava"], ["Glasgow"], ["Liverpool"], ["Edinburgh"], ["Sheffield"], ["Manchester"], ["Leeds"], ["Bristol"], ["Cardiff"], ["Coventry"], ["Leicester"], ["Bradford"], ["Belfast"], ["Nottingham"], ["Kingston upon Hull"], ["Plymouth"], ["Stoke-on-Trent"], ["Wolverhampton"], ["Derby"], ["Swansea"], ["Southampton"], ["Aberdeen"], ["Northampton"], ["Dudley"], ["Portsmouth"], ["Newcastle upon Tyne"], ["Sunderland"], ["Luton"], ["Swindon"], ["Southend-on-Sea"], ["Walsall"], ["Bournemouth"], ["Plovdiv"], ["Varna"], ["Burgas"], ["Ruse"], ["Ouagadougou"], ["Bobo-Dioulasso"], ["Bujumbura"], ["Puente Alto"], ["Vi\u00f1a del Mar"], ["Valpara\u00edso"], ["Talcahuano"], ["Antofagasta"], ["San Bernardo"], ["Temuco"], ["Concepci\u00f3n"], ["Rancagua"], ["Arica"], ["Talca"], ["Chill\u00e1n"], ["Iquique"], ["San Jos\u00e9"], ["Djibouti"], ["Santiago de los Caballeros"], ["Cuenca"], ["Machala"], ["Santo Domingo de los Colorados"], ["Portoviejo"], ["Ambato"], ["Manta"], ["Shubra al-Khayma"], ["Port Said"], ["Suez"], ["al-Mahallat al-Kubra"], ["Tanta"], ["al-Mansura"], ["Luxor"], ["Asyut"], ["Bahtim"], ["Zagazig"], ["al-Faiyum"], ["Ismailia"], ["Kafr al-Dawwar"], ["Assuan"], ["Damanhur"], ["al-Minya"], ["Bani Suwayf"], ["Qina"], ["Sawhaj"], ["San Salvador"], ["Asmara"], ["Valencia"], ["Sevilla"], ["Zaragoza"], ["M\u00e1laga"], ["Bilbao"], ["Las Palmas de Gran Canaria"], ["Murcia"], ["Palma de Mallorca"], ["Valladolid"], ["C\u00f3rdoba"], ["Vigo"], ["Alicante [Alacant]"], ["Gij\u00f3n"], ["L\u00b4Hospitalet de Llobregat"], ["Granada"], ["A Coru\u00f1a (La Coru\u00f1a)"], ["Vitoria-Gasteiz"], ["Santa Cruz de Tenerife"], ["Badalona"], ["Oviedo"], ["M\u00f3stoles"], ["Elche [Elx]"], ["Sabadell"], ["Santander"], ["Jerez de la Frontera"], ["Pamplona [Iru\u00f1a]"], ["Donostia-San Sebasti\u00e1n"], ["Cartagena"], ["Legan\u00e9s"], ["Fuenlabrada"], ["Almer\u00eda"], ["Terrassa"], ["Alcal\u00e1 de Henares"], ["Burgos"], ["Johannesburg"], ["Port Elizabeth"], ["Pretoria"], ["Inanda"], ["Durban"], ["Vanderbijlpark"], ["Kempton Park"], ["Alberton"], ["Pinetown"], ["Pietermaritzburg"], ["Benoni"], ["Randburg"], ["Umlazi"], ["Bloemfontein"], ["Vereeniging"], ["Wonderboom"], ["Roodepoort"], ["Boksburg"], ["Klerksdorp"], ["Soshanguve"], ["Newcastle"], ["East London"], ["Welkom"], ["Kimberley"], ["Uitenhage"], ["Chatsworth"], ["Mdantsane"], ["Krugersdorp"], ["Botshabelo"], ["Brakpan"], ["Witbank"], ["Oberholzer"], ["Germiston"], ["Springs"], ["Dire Dawa"], ["Cebu"], ["Zamboanga"], ["Pasig"], ["Valenzuela"], ["Las Pi\u00f1as"], ["Antipolo"], ["Taguig"], ["Cagayan de Oro"], ["Para\u00f1aque"], ["Makati"], ["Bacolod"], ["General Santos"], ["Marikina"], ["Dasmari\u00f1as"], ["Muntinlupa"], ["Iloilo"], ["Pasay"], ["Malabon"], ["San Jos\u00e9 del Monte"], ["Bacoor"], ["Iligan"], ["Calamba"], ["Mandaluyong"], ["Butuan"], ["Angeles"], ["Tarlac"], ["Mandaue"], ["Baguio"], ["Batangas"], ["Cainta"], ["San Pedro"], ["Navotas"], ["Cabanatuan"], ["San Fernando"], ["Lipa"], ["Lapu-Lapu"], ["San Pablo"], ["Bi\u00f1an"], ["Taytay"], ["Lucena"], ["Imus"], ["Olongapo"], ["Binangonan"], ["Santa Rosa"], ["Tagum"], ["Tacloban"], ["Malolos"], ["Mabalacat"], ["Cotabato"], ["Meycauayan"], ["Puerto Princesa"], ["Libreville"], ["Kutaisi"], ["Kumasi"], ["Ciudad de Guatemala"], ["Mixco"], ["Bissau"], ["Georgetown"], ["Port-au-Prince"], ["Carrefour"], ["Delmas"], ["Tegucigalpa"], ["San Pedro Sula"], ["Malang"], ["Bandar Lampung"], ["Bekasi"], ["Padang"], ["Surakarta"], ["Banjarmasin"], ["Pekan Baru"], ["Denpasar"], ["Yogyakarta"], ["Pontianak"], ["Samarinda"], ["Jambi"], ["Depok"], ["Cimahi"], ["Balikpapan"], ["Manado"], ["Mataram"], ["Pekalongan"], ["Tegal"], ["Bogor"], ["Ciputat"], ["Pondokgede"], ["Cirebon"], ["Kediri"], ["Ambon"], ["Jember"], ["Cilacap"], ["Cimanggis"], ["Pematang Siantar"], ["Purwokerto"], ["Ciomas"], ["Tasikmalaya"], ["Madiun"], ["Srinagar"], ["Agra"], ["Coimbatore"], ["Thane (Thana)"], ["Allahabad"], ["Meerut"], ["Vishakhapatnam"], ["Jabalpur"], ["Amritsar"], ["Faridabad"], ["Vijayawada"], ["Gwalior"], ["Jodhpur"], ["Nashik (Nasik)"], ["Hubli-Dharwad"], ["Solapur (Sholapur)"], ["Ranchi"], ["Bareilly"], ["Guwahati (Gauhati)"], ["Shambajinagar (Aurangabad)"], ["Cochin (Kochi)"], ["Rajkot"], ["Kota"], ["Thiruvananthapuram (Trivandrum"], ["Pimpri-Chinchwad"], ["Jalandhar (Jullundur)"], ["Gorakhpur"], ["Chandigarh"], ["Mysore"], ["Aligarh"], ["Guntur"], ["Jamshedpur"], ["Ghaziabad"], ["Warangal"], ["Raipur"], ["Moradabad"], ["Durgapur"], ["Amravati"], ["Calicut (Kozhikode)"], ["Bikaner"], ["Bhubaneswar"], ["Kolhapur"], ["Kataka (Cuttack)"], ["Ajmer"], ["Bhavnagar"], ["Tiruchirapalli"], ["Bhilai"], ["Bhiwandi"], ["Saharanpur"], ["Ulhasnagar"], ["Salem"], ["Ujjain"], ["Malegaon"], ["Jamnagar"], ["Bokaro Steel City"], ["Akola"], ["Belgaum"], ["Rajahmundry"], ["Nellore"], ["Udaipur"], ["New Bombay"], ["Bhatpara"], ["Gulbarga"], ["New Delhi"], ["Jhansi"], ["Gaya"], ["Kakinada"], ["Dhule (Dhulia)"], ["Panihati"], ["Nanded (Nander)"], ["Mangalore"], ["Dehra Dun"], ["Kamarhati"], ["Davangere"], ["Asansol"], ["Bhagalpur"], ["Bellary"], ["Barddhaman (Burdwan)"], ["Rampur"], ["Jalgaon"], ["Muzaffarpur"], ["Nizamabad"], ["Muzaffarnagar"], ["Patiala"], ["Shahjahanpur"], ["Kurnool"], ["Tiruppur (Tirupper)"], ["Rohtak"], ["South Dum Dum"], ["Mathura"], ["Chandrapur"], ["Barahanagar (Baranagar)"], ["Darbhanga"], ["Siliguri (Shiliguri)"], ["Raurkela"], ["Ambattur"], ["Panipat"], ["Firozabad"], ["Ichalkaranji"], ["Jammu"], ["Ramagundam"], ["Eluru"], ["Brahmapur"], ["Alwar"], ["Pondicherry"], ["Thanjavur"], ["Bihar Sharif"], ["Tuticorin"], ["Imphal"], ["Latur"], ["Sagar"], ["Farrukhabad-cum-Fatehgarh"], ["Sangli"], ["Parbhani"], ["Nagar Coil"], ["Bijapur"], ["Kukatpalle"], ["Bally"], ["Bhilwara"], ["Ratlam"], ["Avadi"], ["Dindigul"], ["Ahmadnagar"], ["Bilaspur"], ["Shimoga"], ["Kharagpur"], ["Mira Bhayandar"], ["Vellore"], ["Jalna"], ["Burnpur"], ["Anantapur"], ["Allappuzha (Alleppey)"], ["Tirupati"], ["Karnal"], ["Burhanpur"], ["Hisar (Hissar)"], ["Tiruvottiyur"], ["Mirzapur-cum-Vindhyachal"], ["Secunderabad"], ["Nadiad"], ["Dewas"], ["Murwara (Katni)"], ["Ganganagar"], ["Vizianagaram"], ["Mosul"], ["Irbil"], ["Kirkuk"], ["Basra"], ["al-Sulaymaniya"], ["al-Najaf"], ["Karbala"], ["al-Hilla"], ["al-Nasiriya"], ["al-Amara"], ["al-Diwaniya"], ["al-Ramadi"], ["al-Kut"], ["Ahvaz"], ["Qom"], ["Kermanshah"], ["Urmia"], ["Zahedan"], ["Rasht"], ["Hamadan"], ["Kerman"], ["Arak"], ["Ardebil"], ["Yazd"], ["Qazvin"], ["Zanjan"], ["Sanandaj"], ["Bandar-e-Abbas"], ["Khorramabad"], ["Eslamshahr"], ["Borujerd"], ["Abadan"], ["Dezful"], ["Kashan"], ["Sari"], ["Gorgan"], ["Najafabad"], ["Sabzevar"], ["Khomeynishahr"], ["Dublin"], ["Jerusalem"], ["Tel Aviv-Jaffa"], ["Haifa"], ["Rishon Le Ziyyon"], ["Beerseba"], ["Holon"], ["Palermo"], ["Genova"], ["Bologna"], ["Firenze"], ["Catania"], ["Bari"], ["Venezia"], ["Messina"], ["Verona"], ["Trieste"], ["Padova"], ["Taranto"], ["Brescia"], ["Reggio di Calabria"], ["Modena"], ["Prato"], ["Parma"], ["Cagliari"], ["Livorno"], ["Graz"], ["Linz"], ["Chiba"], ["Sakai"], ["Kumamoto"], ["Okayama"], ["Sagamihara"], ["Hamamatsu"], ["Kagoshima"], ["Funabashi"], ["Higashiosaka"], ["Hachioji"], ["Niigata"], ["Amagasaki"], ["Himeji"], ["Shizuoka"], ["Urawa"], ["Matsuyama"], ["Matsudo"], ["Kanazawa"], ["Kawaguchi"], ["Ichikawa"], ["Omiya"], ["Utsunomiya"], ["Oita"], ["Nagasaki"], ["Yokosuka"], ["Kurashiki"], ["Gifu"], ["Hirakata"], ["Nishinomiya"], ["Toyonaka"], ["Wakayama"], ["Fukuyama"], ["Fujisawa"], ["Asahikawa"], ["Machida"], ["Nara"], ["Takatsuki"], ["Iwaki"], ["Nagano"], ["Toyohashi"], ["Toyota"], ["Suita"], ["Takamatsu"], ["Koriyama"], ["Okazaki"], ["Kawagoe"], ["Tokorozawa"], ["Toyama"], ["Kochi"], ["Kashiwa"], ["Akita"], ["Miyazaki"], ["Koshigaya"], ["Naha"], ["Aomori"], ["Hakodate"], ["Akashi"], ["Yokkaichi"], ["Fukushima"], ["Morioka"], ["Maebashi"], ["Kasugai"], ["Otsu"], ["Ichihara"], ["Yao"], ["Ichinomiya"], ["Tokushima"], ["Kakogawa"], ["Ibaraki"], ["Neyagawa"], ["Shimonoseki"], ["Yamagata"], ["Fukui"], ["Hiratsuka"], ["Mito"], ["Sasebo"], ["Hachinohe"], ["Takasaki"], ["Shimizu"], ["Kurume"], ["Fuji"], ["Soka"], ["Fuchu"], ["Chigasaki"], ["Atsugi"], ["Numazu"], ["Ageo"], ["Yamato"], ["Matsumoto"], ["Kure"], ["Takarazuka"], ["Kasukabe"], ["Chofu"], ["Odawara"], ["Kofu"], ["Kushiro"], ["Kishiwada"], ["Hitachi"], ["Nagaoka"], ["Itami"], ["Uji"], ["Suzuka"], ["Hirosaki"], ["Ube"], ["Kodaira"], ["Takaoka"], ["Obihiro"], ["Tomakomai"], ["Saga"], ["Sakura"], ["Kamakura"], ["Mitaka"], ["Izumi"], ["Hino"], ["Hadano"], ["Ashikaga"], ["Tsu"], ["Sayama"], ["Yachiyo"], ["Tsukuba"], ["Sanaa"], ["Aden"], ["Taizz"], ["Hodeida"], ["al-Zarqa"], ["Irbid"], ["Novi Sad"], ["Ni\u0161"], ["Phnom Penh"], ["Garoua"], ["Calgary"], ["Toronto"], ["North York"], ["Winnipeg"], ["Edmonton"], ["Mississauga"], ["Scarborough"], ["Vancouver"], ["Etobicoke"], ["London"], ["Hamilton"], ["Ottawa"], ["Laval"], ["Surrey"], ["Brampton"], ["Windsor"], ["Saskatoon"], ["Kitchener"], ["Markham"], ["Regina"], ["Burnaby"], ["Qu\u00e9bec"], ["Qaraghandy"], ["Shymkent"], ["Taraz"], ["Astana"], ["\u00d6skemen"], ["Pavlodar"], ["Semey"], ["Aqt\u00f6be"], ["Qostanay"], ["Petropavl"], ["Oral"], ["Temirtau"], ["Mombasa"], ["Kisumu"], ["Nakuru"], ["Bangui"], ["Handan"], ["Wuxi"], ["Xuzhou"], ["Datong"], ["Yichun"], ["Benxi"], ["Luoyang"], ["Suzhou"], ["Xining"], ["Huainan"], ["Jixi"], ["Daqing"], ["Fuxin"], ["Amoy [Xiamen]"], ["Liuzhou"], ["Shantou"], ["Jinzhou"], ["Mudanjiang"], ["Yinchuan"], ["Changzhou"], ["Zhangjiakou"], ["Dandong"], ["Hegang"], ["Kaifeng"], ["Jiamusi"], ["Liaoyang"], ["Hengyang"], ["Baoding"], ["Hunjiang"], ["Xinxiang"], ["Huangshi"], ["Haikou"], ["Yantai"], ["Bengbu"], ["Xiangtan"], ["Weifang"], ["Wuhu"], ["Pingxiang"], ["Yingkou"], ["Anyang"], ["Panzhihua"], ["Pingdingshan"], ["Xiangfan"], ["Zhuzhou"], ["Jiaozuo"], ["Wenzhou"], ["Zhangjiang"], ["Zigong"], ["Shuangyashan"], ["Zaozhuang"], ["Yakeshi"], ["Yichang"], ["Zhenjiang"], ["Huaibei"], ["Qinhuangdao"], ["Guilin"], ["Liupanshui"], ["Panjin"], ["Yangquan"], ["Jinxi"], ["Liaoyuan"], ["Lianyungang"], ["Xianyang"], ["Tai\u00b4an"], ["Chifeng"], ["Shaoguan"], ["Nantong"], ["Leshan"], ["Baoji"], ["Linyi"], ["Tonghua"], ["Siping"], ["Changzhi"], ["Tengzhou"], ["Chaozhou"], ["Yangzhou"], ["Dongwan"], ["Ma\u00b4anshan"], ["Foshan"], ["Yueyang"], ["Xingtai"], ["Changde"], ["Shihezi"], ["Yancheng"], ["Jiujiang"], ["Dongying"], ["Shashi"], ["Xintai"], ["Jingdezhen"], ["Tongchuan"], ["Zhongshan"], ["Shiyan"], ["Tieli"], ["Jining"], ["Wuhai"], ["Mianyang"], ["Luzhou"], ["Zunyi"], ["Shizuishan"], ["Neijiang"], ["Tongliao"], ["Tieling"], ["Wafangdian"], ["Anqing"], ["Shaoyang"], ["Laiwu"], ["Chengde"], ["Tianshui"], ["Nanyang"], ["Cangzhou"], ["Yibin"], ["Huaiyin"], ["Dunhua"], ["Yanji"], ["Jiangmen"], ["Tongling"], ["Suihua"], ["Gongziling"], ["Xiantao"], ["Chaoyang"], ["Ganzhou"], ["Huzhou"], ["Baicheng"], ["Shangzi"], ["Yangjiang"], ["Qitaihe"], ["Gejiu"], ["Jiangyin"], ["Hebi"], ["Jiaxing"], ["Wuzhou"], ["Meihekou"], ["Xuchang"], ["Liaocheng"], ["Haicheng"], ["Qianjiang"], ["Baiyin"], ["Bei\u00b4an"], ["Yixing"], ["Laizhou"], ["Qaramay"], ["Acheng"], ["Dezhou"], ["Nanping"], ["Zhaoqing"], ["Beipiao"], ["Fengcheng"], ["Fuyu"], ["Xinyang"], ["Dongtai"], ["Yuci"], ["Honghu"], ["Ezhou"], ["Heze"], ["Daxian"], ["Linfen"], ["Tianmen"], ["Yiyang"], ["Quanzhou"], ["Rizhao"], ["Deyang"], ["Guangyuan"], ["Changshu"], ["Zhangzhou"], ["Hailar"], ["Nanchong"], ["Jiutai"], ["Zhaodong"], ["Shaoxing"], ["Fuyang"], ["Maoming"], ["Qujing"], ["Ghulja"], ["Jiaohe"], ["Puyang"], ["Huadian"], ["Jiangyou"], ["Qashqar"], ["Anshun"], ["Fuling"], ["Xinyu"], ["Hanzhong"], ["Danyang"], ["Chenzhou"], ["Xiaogan"], ["Shangqiu"], ["Zhuhai"], ["Qingyuan"], ["Aqsu"], ["Jining"], ["Xiaoshan"], ["Zaoyang"], ["Xinghua"], ["Hami"], ["Huizhou"], ["Jinmen"], ["Sanming"], ["Bishkek"], ["Osh"], ["Cartagena"], ["C\u00facuta"], ["Bucaramanga"], ["Ibagu\u00e9"], ["Pereira"], ["Santa Marta"], ["Manizales"], ["Bello"], ["Pasto"], ["Neiva"], ["Soledad"], ["Armenia"], ["Villavicencio"], ["Soacha"], ["Valledupar"], ["Monter\u00eda"], ["Itag\u00fc\u00ed"], ["Palmira"], ["Buenaventura"], ["Floridablanca"], ["Sincelejo"], ["Popay\u00e1n"], ["Barrancabermeja"], ["Pointe-Noire"], ["Lubumbashi"], ["Mbuji-Mayi"], ["Kolwezi"], ["Kisangani"], ["Kananga"], ["Likasi"], ["Bukavu"], ["Kikwit"], ["Tshikapa"], ["Matadi"], ["Mbandaka"], ["Hamhung"], ["Chongjin"], ["Nampo"], ["Sinuiju"], ["Wonsan"], ["Phyongsong"], ["Sariwon"], ["Haeju"], ["Kanggye"], ["Kimchaek"], ["Hyesan"], ["Kaesong"], ["Songnam"], ["Puchon"], ["Suwon"], ["Anyang"], ["Chonju"], ["Chongju"], ["Koyang"], ["Ansan"], ["Pohang"], ["Chang-won"], ["Masan"], ["Kwangmyong"], ["Chonan"], ["Chinju"], ["Iksan"], ["Pyongtaek"], ["Kumi"], ["Uijongbu"], ["Kyongju"], ["Kunsan"], ["Cheju"], ["Kimhae"], ["Sunchon"], ["Mokpo"], ["Yong-in"], ["Wonju"], ["Kunpo"], ["Chunchon"], ["Namyangju"], ["Kangnung"], ["Chungju"], ["Andong"], ["Yosu"], ["Kyongsan"], ["Paju"], ["Yangsan"], ["Athenai"], ["Thessaloniki"], ["Pireus"], ["Zagreb"], ["Split"], ["Rijeka"], ["Santiago de Cuba"], ["Camag\u00fcey"], ["Holgu\u00edn"], ["Santa Clara"], ["Guant\u00e1namo"], ["Nicosia"], ["Vientiane"], ["Riga"], ["Maseru"], ["Tripoli"], ["Monrovia"], ["Bengasi"], ["Vilnius"], ["Kaunas"], ["Klaipeda"], ["El-Aai\u00fan"], ["Macao"], ["Antananarivo"], ["Skopje"], ["Blantyre"], ["Lilongwe"], ["Ipoh"], ["Johor Baharu"], ["Petaling Jaya"], ["Kelang"], ["Kuala Terengganu"], ["Pinang"], ["Kota Bharu"], ["Kuantan"], ["Taiping"], ["Seremban"], ["Bamako"], ["Rabat"], ["Marrakech"], ["F\u00e8s"], ["Tanger"], ["Sal\u00e9"], ["Mekn\u00e8s"], ["Oujda"], ["K\u00e9nitra"], ["T\u00e9touan"], ["Safi"], ["Nouakchott"], ["Naucalpan de Ju\u00e1rez"], ["Mexicali"], ["Culiac\u00e1n"], ["Acapulco de Ju\u00e1rez"], ["Tlalnepantla de Baz"], ["M\u00e9rida"], ["Chihuahua"], ["San Luis Potos\u00ed"], ["Guadalupe"], ["Toluca"], ["Aguascalientes"], ["Quer\u00e9taro"], ["Morelia"], ["Hermosillo"], ["Saltillo"], ["Torre\u00f3n"], ["Centro (Villahermosa)"], ["San Nicol\u00e1s de los Garza"], ["Durango"], ["Chimalhuac\u00e1n"], ["Tlaquepaque"], ["Atizap\u00e1n de Zaragoza"], ["Veracruz"], ["Cuautitl\u00e1n Izcalli"], ["Irapuato"], ["Tuxtla Guti\u00e9rrez"], ["Tultitl\u00e1n"], ["Reynosa"], ["Benito Ju\u00e1rez"], ["Matamoros"], ["Xalapa"], ["Celaya"], ["Mazatl\u00e1n"], ["Ensenada"], ["Ahome"], ["Cajeme"], ["Cuernavaca"], ["Tonal\u00e1"], ["Valle de Chalco Solidaridad"], ["Nuevo Laredo"], ["Tepic"], ["Tampico"], ["Ixtapaluca"], ["Apodaca"], ["Guasave"], ["G\u00f3mez Palacio"], ["Tapachula"], ["Nicol\u00e1s Romero"], ["Coatzacoalcos"], ["Uruapan"], ["Victoria"], ["Oaxaca de Ju\u00e1rez"], ["Coacalco de Berrioz\u00e1bal"], ["Pachuca de Soto"], ["General Escobedo"], ["Salamanca"], ["Santa Catarina"], ["Tehuac\u00e1n"], ["Chalco"], ["C\u00e1rdenas"], ["Campeche"], ["La Paz"], ["Oth\u00f3n P. Blanco (Chetumal)"], ["Texcoco"], ["La Paz"], ["Metepec"], ["Monclova"], ["Huixquilucan"], ["Chilpancingo de los Bravo"], ["Puerto Vallarta"], ["Fresnillo"], ["Ciudad Madero"], ["Soledad de Graciano S\u00e1nchez"], ["San Juan del R\u00edo"], ["San Felipe del Progreso"], ["C\u00f3rdoba"], ["Tec\u00e1mac"], ["Ocosingo"], ["Carmen"], ["L\u00e1zaro C\u00e1rdenas"], ["Jiutepec"], ["Papantla"], ["Comalcalco"], ["Zamora"], ["Chisinau"], ["Tiraspol"], ["Ulan Bator"], ["Matola"], ["Beira"], ["Nampula"], ["Chimoio"], ["Mandalay"], ["Moulmein (Mawlamyine)"], ["Pegu (Bago)"], ["Bassein (Pathein)"], ["Windhoek"], ["Kathmandu"], ["Niamey"], ["Ogbomosho"], ["Kano"], ["Oshogbo"], ["Ilorin"], ["Abeokuta"], ["Port Harcourt"], ["Zaria"], ["Ilesha"], ["Onitsha"], ["Iwo"], ["Ado-Ekiti"], ["Abuja"], ["Kaduna"], ["Mushin"], ["Maiduguri"], ["Enugu"], ["Ede"], ["Aba"], ["Ife"], ["Ila"], ["Oyo"], ["Ikerre"], ["Benin City"], ["Iseyin"], ["Katsina"], ["Jos"], ["Sokoto"], ["Ilobu"], ["Offa"], ["Ikorodu"], ["Ilawe-Ekiti"], ["Owo"], ["Ikirun"], ["Shaki"], ["Calabar"], ["Ondo"], ["Akure"], ["Oslo"], ["Bergen"], ["Bouak\u00e9"], ["Quetta"], ["Islamabad"], ["Sargodha"], ["Sialkot"], ["Bahawalpur"], ["Sukkur"], ["Jhang"], ["Sheikhupura"], ["Larkana"], ["Gujrat"], ["Mardan"], ["Kasur"], ["Rahim Yar Khan"], ["Sahiwal"], ["Okara"], ["Wah"], ["Dera Ghazi Khan"], ["Mirpur Khas"], ["Nawabshah"], ["Mingora"], ["Chiniot"], ["Ciudad de Panam\u00e1"], ["San Miguelito"], ["Port Moresby"], ["Asunci\u00f3n"], ["Arequipa"], ["Trujillo"], ["Chiclayo"], ["Callao"], ["Iquitos"], ["Chimbote"], ["Huancayo"], ["Piura"], ["Cusco"], ["Pucallpa"], ["Tacna"], ["Ica"], ["Lisboa"], ["Porto"], ["San Juan"], ["Bayam\u00f3n"], ["Ponce"], ["Carolina"], ["L\u00f3dz"], ["Krak\u00f3w"], ["Wroclaw"], ["Poznan"], ["Gdansk"], ["Szczecin"], ["Bydgoszcz"], ["Lublin"], ["Katowice"], ["Bialystok"], ["Czestochowa"], ["Gdynia"], ["Sosnowiec"], ["Radom"], ["Kielce"], ["Gliwice"], ["Torun"], ["Bytom"], ["Zabrze"], ["Bielsko-Biala"], ["Olsztyn"], ["Rzesz\u00f3w"], ["Doha"], ["Marseille"], ["Lyon"], ["Toulouse"], ["Nice"], ["Nantes"], ["Strasbourg"], ["Montpellier"], ["Bordeaux"], ["Rennes"], ["Le Havre"], ["Reims"], ["Lille"], ["St-\u00c9tienne"], ["Toulon"], ["Iasi"], ["Constanta"], ["Cluj-Napoca"], ["Galati"], ["Timisoara"], ["Brasov"], ["Craiova"], ["Ploiesti"], ["Braila"], ["Oradea"], ["Bacau"], ["Pitesti"], ["Arad"], ["Sibiu"], ["T\u00e2rgu Mures"], ["Kigali"], ["Stockholm"], ["Gothenburg [G\u00f6teborg]"], ["Malm\u00f6"], ["Uppsala"], ["Frankfurt am Main"], ["Essen"], ["Dortmund"], ["Stuttgart"], ["D\u00fcsseldorf"], ["Bremen"], ["Duisburg"], ["Hannover"], ["Leipzig"], ["N\u00fcrnberg"], ["Dresden"], ["Bochum"], ["Wuppertal"], ["Bielefeld"], ["Mannheim"], ["Bonn"], ["Gelsenkirchen"], ["Karlsruhe"], ["Wiesbaden"], ["M\u00fcnster"], ["M\u00f6nchengladbach"], ["Chemnitz"], ["Augsburg"], ["Halle/Saale"], ["Braunschweig"], ["Aachen"], ["Krefeld"], ["Magdeburg"], ["Kiel"], ["Oberhausen"], ["L\u00fcbeck"], ["Hagen"], ["Rostock"], ["Freiburg im Breisgau"], ["Erfurt"], ["Kassel"], ["Saarbr\u00fccken"], ["Mainz"], ["Hamm"], ["Herne"], ["M\u00fclheim an der Ruhr"], ["Solingen"], ["Osnabr\u00fcck"], ["Ludwigshafen am Rhein"], ["Leverkusen"], ["Ndola"], ["Kitwe"], ["Medina"], ["al-Dammam"], ["al-Taif"], ["Tabuk"], ["Burayda"], ["al-Hufuf"], ["al-Mubarraz"], ["Khamis Mushayt"], ["Hail"], ["Pikine"], ["Dakar"], ["Thi\u00e8s"], ["Kaolack"], ["Ziguinchor"], ["Freetown"], ["Bratislava"], ["Ko\u0161ice"], ["Ljubljana"], ["Colombo"], ["Dehiwala"], ["Moratuwa"], ["Sharq al-Nil"], ["Port Sudan"], ["Kassala"], ["Obeid"], ["Nyala"], ["Wad Madani"], ["al-Qadarif"], ["Kusti"], ["Helsinki [Helsingfors]"], ["Espoo"], ["Tampere"], ["Vantaa"], ["Turku [\u00c5bo]"], ["Z\u00fcrich"], ["Geneve"], ["Basel"], ["Hims"], ["Hama"], ["Latakia"], ["Dushanbe"], ["Khujand"], ["Tainan"], ["Panchiao"], ["Chungho"], ["Keelung (Chilung)"], ["Sanchung"], ["Hsinchuang"], ["Hsinchu"], ["Chungli"], ["Fengshan"], ["Taoyuan"], ["Chiayi"], ["Hsintien"], ["Changhwa"], ["Yungho"], ["Tucheng"], ["Pingtung"], ["Yungkang"], ["Pingchen"], ["Tali"], ["Taiping"], ["Pate"], ["Fengyuan"], ["Luchou"], ["Dodoma"], ["Mwanza"], ["K\u00f8benhavn"], ["\u00c5rhus"], ["Odense"], ["Aalborg"], ["Nonthaburi"], ["Nakhon Ratchasima"], ["Chiang Mai"], ["Lom\u00e9"], ["N\u00b4Djam\u00e9na"], ["Brno"], ["Ostrava"], ["Plzen"], ["Tunis"], ["Sfax"], ["Ariana"], ["Ettadhamen"], ["Gaziantep"], ["Konya"], ["Mersin (I\u00e7el)"], ["Antalya"], ["Diyarbakir"], ["Kayseri"], ["Eskisehir"], ["Sanliurfa"], ["Samsun"], ["Malatya"], ["Gebze"], ["Denizli"], ["Sivas"], ["Erzurum"], ["Tarsus"], ["Kahramanmaras"], ["El\u00e2zig"], ["Van"], ["Sultanbeyli"], ["Izmit (Kocaeli)"], ["Manisa"], ["Batman"], ["Balikesir"], ["Sakarya (Adapazari)"], ["Ashgabat"], ["Ch\u00e4rjew"], ["Kampala"], ["Zaporizzja"], ["Lviv"], ["Kryvyi Rig"], ["Mykolajiv"], ["Mariupol"], ["Lugansk"], ["Vinnytsja"], ["Makijivka"], ["Herson"], ["Sevastopol"], ["Simferopol"], ["Pultava [Poltava]"], ["T\u0161ernigiv"], ["T\u0161erkasy"], ["Gorlivka"], ["Zytomyr"], ["Sumy"], ["Dniprodzerzynsk"], ["Kirovograd"], ["Hmelnytskyi"], ["T\u0161ernivtsi"], ["Rivne"], ["Krement\u0161uk"], ["Ivano-Frankivsk"], ["Ternopil"], ["Lutsk"], ["Bila Tserkva"], ["Kramatorsk"], ["Melitopol"], ["Kert\u0161"], ["Debrecen"], ["Miskolc"], ["Auckland"], ["Christchurch"], ["Manukau"], ["North Shore"], ["Waitakere"], ["Wellington"], ["Namangan"], ["Samarkand"], ["Andijon"], ["Buhoro"], ["Karsi"], ["Nukus"], ["K\u00fckon"], ["Fargona"], ["Gomel"], ["Mogiljov"], ["Vitebsk"], ["Grodno"], ["Brest"], ["Bobruisk"], ["Baranovit\u0161i"], ["Barquisimeto"], ["Valencia"], ["Ciudad Guayana"], ["Petare"], ["Maracay"], ["Barcelona"], ["Matur\u00edn"], ["San Crist\u00f3bal"], ["Ciudad Bol\u00edvar"], ["Cuman\u00e1"], ["M\u00e9rida"], ["Cabimas"], ["Barinas"], ["Turmero"], ["Baruta"], ["Puerto Cabello"], ["Santa Ana de Coro"], ["Los Teques"], ["Punto Fijo"], ["Guarenas"], ["Krasnojarsk"], ["Saratov"], ["Toljatti"], ["Uljanovsk"], ["Izevsk"], ["Krasnodar"], ["Jaroslavl"], ["Habarovsk"], ["Vladivostok"], ["Irkutsk"], ["Barnaul"], ["Novokuznetsk"], ["Penza"], ["Rjazan"], ["Orenburg"], ["Lipetsk"], ["Nabereznyje T\u0161elny"], ["Tula"], ["Tjumen"], ["Kemerovo"], ["Astrahan"], ["Tomsk"], ["Kirov"], ["Ivanovo"], ["T\u0161eboksary"], ["Brjansk"], ["Tver"], ["Kursk"], ["Magnitogorsk"], ["Kaliningrad"], ["Nizni Tagil"], ["Murmansk"], ["Ulan-Ude"], ["Kurgan"], ["Arkangeli"], ["Sot\u0161i"], ["Smolensk"], ["Orjol"], ["Stavropol"], ["Belgorod"], ["Kaluga"], ["Vladimir"], ["Mahat\u0161kala"], ["T\u0161erepovets"], ["Saransk"], ["Tambov"], ["Vladikavkaz"], ["T\u0161ita"], ["Vologda"], ["Veliki Novgorod"], ["Komsomolsk-na-Amure"], ["Kostroma"], ["Volzski"], ["Taganrog"], ["Petroskoi"], ["Bratsk"], ["Dzerzinsk"], ["Surgut"], ["Orsk"], ["Sterlitamak"], ["Angarsk"], ["Jo\u0161kar-Ola"], ["Rybinsk"], ["Prokopjevsk"], ["Niznevartovsk"], ["Nalt\u0161ik"], ["Syktyvkar"], ["Severodvinsk"], ["Bijsk"], ["Niznekamsk"], ["Blagove\u0161t\u0161ensk"], ["\u0160ahty"], ["Staryi Oskol"], ["Zelenograd"], ["Balakovo"], ["Novorossijsk"], ["Pihkova"], ["Zlatoust"], ["Jakutsk"], ["Podolsk"], ["Petropavlovsk-Kamt\u0161atski"], ["Kamensk-Uralski"], ["Engels"], ["Syzran"], ["Grozny"], ["Novot\u0161erkassk"], ["Berezniki"], ["Juzno-Sahalinsk"], ["Volgodonsk"], ["Abakan"], ["Maikop"], ["Miass"], ["Armavir"], ["Ljubertsy"], ["Rubtsovsk"], ["Haiphong"], ["Da Nang"], ["Bi\u00ean Hoa"], ["Nha Trang"], ["Hue"], ["Can Tho"], ["Cam Pha"], ["Nam Dinh"], ["Quy Nhon"], ["Tallinn"], ["San Jose"], ["Indianapolis"], ["San Francisco"], ["Jacksonville"], ["Columbus"], ["Austin"], ["Baltimore"], ["Memphis"], ["Milwaukee"], ["Boston"], ["Washington"], ["Nashville-Davidson"], ["El Paso"], ["Seattle"], ["Denver"], ["Charlotte"], ["Fort Worth"], ["Portland"], ["Oklahoma City"], ["Tucson"], ["New Orleans"], ["Las Vegas"], ["Cleveland"], ["Long Beach"], ["Albuquerque"], ["Kansas City"], ["Fresno"], ["Virginia Beach"], ["Atlanta"], ["Sacramento"], ["Oakland"], ["Mesa"], ["Tulsa"], ["Omaha"], ["Minneapolis"], ["Honolulu"], ["Miami"], ["Colorado Springs"], ["Saint Louis"], ["Wichita"], ["Santa Ana"], ["Pittsburgh"], ["Arlington"], ["Cincinnati"], ["Anaheim"], ["Toledo"], ["Tampa"], ["Buffalo"], ["Saint Paul"], ["Corpus Christi"], ["Aurora"], ["Raleigh"], ["Newark"], ["Lexington-Fayette"], ["Anchorage"], ["Louisville"], ["Riverside"], ["Saint Petersburg"], ["Bakersfield"], ["Stockton"], ["Birmingham"], ["Jersey City"], ["Norfolk"], ["Baton Rouge"], ["Hialeah"], ["Lincoln"], ["Greensboro"], ["Plano"], ["Rochester"], ["Glendale"], ["Akron"], ["Garland"], ["Madison"], ["Fort Wayne"], ["Fremont"], ["Scottsdale"], ["Montgomery"], ["Shreveport"], ["Augusta-Richmond County"], ["Lubbock"], ["Chesapeake"], ["Mobile"], ["Des Moines"], ["Grand Rapids"], ["Richmond"], ["Yonkers"], ["Spokane"], ["Glendale"], ["Tacoma"], ["Irving"], ["Huntington Beach"], ["Modesto"], ["Durham"], ["Columbus"], ["Orlando"], ["Boise City"], ["Winston-Salem"], ["San Bernardino"], ["Jackson"], ["Little Rock"], ["Salt Lake City"], ["Reno"], ["Newport News"], ["Chandler"], ["Laredo"], ["Henderson"], ["Arlington"], ["Knoxville"], ["Amarillo"], ["Providence"], ["Chula Vista"], ["Worcester"], ["Oxnard"], ["Dayton"], ["Garden Grove"], ["Oceanside"], ["Bulawayo"], ["Chitungwiza"], ["Mount Darwin"], ["Gaza"]], "results": {"generated_sql": "SELECT T1.name ,  T1.population FROM city AS T1 WHERE T1.population  >  160000 AND T1.population  <  900000", "generated_py": "t1 = pd.merge(city, sqlite_sequence, on='name'); t2 = pd.merge(t1, country, on='countrycode'); t3 = pd.merge(t2, countrylanguage, on='countrycode'); t4 = t3[(t3['population'] > 160000) & (t3['population'] < 900000)]; answer = t4[['name', 'population']]", "sql_exec_result": "[('Qandahar', 237500), ('Herat', 186800), ('Amsterdam', 731200), ('Rotterdam', 593321), ('Haag', 440900), ('Utrecht', 234323), ('Eindhoven', 201843), ('Tilburg', 193238), ('Groningen', 172701), ('Breda', 160398), ('Tirana', 270000), ('Oran', 609823), ('Constantine', 443727), ('Annaba', 222518), ('Batna', 183377), ('S\u00e9tif', 179055), ('Huambo', 163100), ('Dubai', 669181), ('Abu Dhabi', 398695), ('Sharja', 320095), ('al-Ayn', 225970), ('Lomas de Zamora', 622013), ('Quilmes', 559249), ('Almirante Brown', 538918), ('La Plata', 521936), ('Mar del Plata', 512880), ('San Miguel de Tucum\u00e1n', 470809), ('Lan\u00fas', 469735), ('Merlo', 463846), ('General San Mart\u00edn', 422542), ('Salta', 367550), ('Moreno', 356993), ('Santa F\u00e9', 353063), ('Avellaneda', 353046), ('Tres de Febrero', 352311), ('Mor\u00f3n', 349246), ('Florencio Varela', 315432), ('San Isidro', 306341), ('Tigre', 296226), ('Malvinas Argentinas', 290335), ('Vicente L\u00f3pez', 288341), ('Berazategui', 276916), ('Corrientes', 258103), ('San Miguel', 248700), ('Bah\u00eda Blanca', 239810), ('Esteban Echeverr\u00eda', 235760), ('Resistencia', 229212), ('Jos\u00e9 C. Paz', 221754), ('Paran\u00e1', 207041), ('Godoy Cruz', 206998), ('Posadas', 201273), ('Guaymall\u00e9n', 200595), ('Santiago del Estero', 189947), ('San Salvador de Jujuy', 178748), ('Hurlingham', 170028), ('Neuqu\u00e9n', 167296), ('Gjumri', 211700), ('Vanadzor', 172700), ('Canberra', 322723), ('Gold Coast', 311932), ('Newcastle', 270324), ('Central Coast', 227657), ('Wollongong', 219761), ('G\u00e4nc\u00e4', 299300), ('Sumqayit', 283000), ('Nassau', 172000), ('Khulna', 663340), ('Rajshahi', 294056), ('Narayanganj', 202134), ('Rangpur', 191398), ('Mymensingh', 188713), ('Barisal', 170232), ('Tungi', 168702), ('Antwerpen', 446525), ('Gent', 224180), ('Charleroi', 200827), ('Li\u00e8ge', 185639), ('Cotonou', 536827), ('Porto-Novo', 194000), ('La Paz', 758141), ('El Alto', 534466), ('Cochabamba', 482800), ('Oruro', 223553), ('Sucre', 178426), ('Sarajevo', 360000), ('Gaborone', 213017), ('S\u00e3o Gon\u00e7alo', 869254), ('Nova Igua\u00e7u', 862225), ('S\u00e3o Lu\u00eds', 837588), ('Macei\u00f3', 786288), ('Duque de Caxias', 746758), ('S\u00e3o Bernardo do Campo', 723132), ('Teresina', 691942), ('Natal', 688955), ('Osasco', 659604), ('Campo Grande', 649593), ('Santo Andr\u00e9', 630073), ('Jo\u00e3o Pessoa', 584029), ('Jaboat\u00e3o dos Guararapes', 558680), ('Contagem', 520801), ('S\u00e3o Jos\u00e9 dos Campos', 515553), ('Uberl\u00e2ndia', 487222), ('Feira de Santana', 479992), ('Ribeir\u00e3o Preto', 473276), ('Sorocaba', 466823), ('Niter\u00f3i', 459884), ('Cuiab\u00e1', 453813), ('Juiz de Fora', 450288), ('Aracaju', 445555), ('S\u00e3o Jo\u00e3o de Meriti', 440052), ('Londrina', 432257), ('Joinville', 428011), ('Belford Roxo', 425194), ('Santos', 408748), ('Ananindeua', 400940), ('Campos dos Goytacazes', 398418), ('Mau\u00e1', 375055), ('Carapicu\u00edba', 357552), ('Olinda', 354732), ('Campina Grande', 352497), ('S\u00e3o Jos\u00e9 do Rio Preto', 351944), ('Caxias do Sul', 349581), ('Moji das Cruzes', 339194), ('Diadema', 335078), ('Aparecida de Goi\u00e2nia', 324662), ('Piracicaba', 319104), ('Cariacica', 319033), ('Vila Velha', 318758), ('Pelotas', 315415), ('Bauru', 313670), ('Porto Velho', 309750), ('Serra', 302666), ('Betim', 302108), ('Jund\u00eda\u00ed', 296127), ('Canoas', 294125), ('Franca', 290139), ('S\u00e3o Vicente', 286848), ('Maring\u00e1', 286461), ('Montes Claros', 286058), ('An\u00e1polis', 282197), ('Florian\u00f3polis', 281928), ('Petr\u00f3polis', 279183), ('Itaquaquecetuba', 270874), ('Vit\u00f3ria', 270626), ('Ponta Grossa', 268013), ('Rio Branco', 259537), ('Foz do Igua\u00e7u', 259425), ('Macap\u00e1', 256033), ('Ilh\u00e9us', 254970), ('Vit\u00f3ria da Conquista', 253587), ('Uberaba', 249225), ('Paulista', 248473), ('Limeira', 245497), ('Blumenau', 244379), ('Caruaru', 244247), ('Santar\u00e9m', 241771), ('Volta Redonda', 240315), ('Novo Hamburgo', 239940), ('Caucaia', 238738), ('Santa Maria', 238473), ('Cascavel', 237510), ('Guaruj\u00e1', 237206), ('Ribeir\u00e3o das Neves', 232685), ('Governador Valadares', 231724), ('Taubat\u00e9', 229130), ('Imperatriz', 224564), ('Gravata\u00ed', 223011), ('Embu', 222223), ('Mossor\u00f3', 214901), ('V\u00e1rzea Grande', 214435), ('Petrolina', 210540), ('Barueri', 208426), ('Viam\u00e3o', 207557), ('Ipatinga', 206338), ('Juazeiro', 201073), ('Juazeiro do Norte', 199636), ('Tabo\u00e3o da Serra', 197550), ('S\u00e3o Jos\u00e9 dos Pinhais', 196884), ('Mag\u00e9', 196147), ('Suzano', 195434), ('S\u00e3o Leopoldo', 189258), ('Mar\u00edlia', 188691), ('S\u00e3o Carlos', 187122), ('Sumar\u00e9', 186205), ('Presidente Prudente', 185340), ('Divin\u00f3polis', 185047), ('Sete Lagoas', 182984), ('Rio Grande', 182222), ('Itabuna', 182148), ('Jequi\u00e9', 179128), ('Arapiraca', 178988), ('Colombo', 177764), ('Americana', 177409), ('Alvorada', 175574), ('Araraquara', 174381), ('Itabora\u00ed', 173977), ('Santa B\u00e1rbara d\u00b4Oeste', 171657), ('Nova Friburgo', 170697), ('Jacare\u00ed', 170356), ('Ara\u00e7atuba', 169303), ('Barra Mansa', 168953), ('Praia Grande', 168434), ('Marab\u00e1', 167795), ('Crici\u00fama', 167661), ('Boa Vista', 167185), ('Passo Fundo', 166343), ('Dourados', 164716), ('Santa Luzia', 164704), ('Rio Claro', 163551), ('Maracana\u00fa', 162022), ('Guarapuava', 160510), ('Glasgow', 619680), ('Liverpool', 461000), ('Edinburgh', 450180), ('Sheffield', 431607), ('Manchester', 430000), ('Leeds', 424194), ('Bristol', 402000), ('Cardiff', 321000), ('Coventry', 304000), ('Leicester', 294000), ('Bradford', 289376), ('Belfast', 287500), ('Nottingham', 287000), ('Kingston upon Hull', 262000), ('Plymouth', 253000), ('Stoke-on-Trent', 252000), ('Wolverhampton', 242000), ('Derby', 236000), ('Swansea', 230000), ('Southampton', 216000), ('Aberdeen', 213070), ('Northampton', 196000), ('Dudley', 192171), ('Portsmouth', 190000), ('Newcastle upon Tyne', 189150), ('Sunderland', 183310), ('Luton', 183000), ('Swindon', 180000), ('Southend-on-Sea', 176000), ('Walsall', 174739), ('Bournemouth', 162000), ('Plovdiv', 342584), ('Varna', 299801), ('Burgas', 195255), ('Ruse', 166467), ('Ouagadougou', 824000), ('Bobo-Dioulasso', 300000), ('Bujumbura', 300000), ('Puente Alto', 386236), ('Vi\u00f1a del Mar', 312493), ('Valpara\u00edso', 293800), ('Talcahuano', 277752), ('Antofagasta', 251429), ('San Bernardo', 241910), ('Temuco', 233041), ('Concepci\u00f3n', 217664), ('Rancagua', 212977), ('Arica', 189036), ('Talca', 187557), ('Chill\u00e1n', 178182), ('Iquique', 177892), ('San Jos\u00e9', 339131), ('Djibouti', 383000), ('Santiago de los Caballeros', 365463), ('Cuenca', 270353), ('Machala', 210368), ('Santo Domingo de los Colorados', 202111), ('Portoviejo', 176413), ('Ambato', 169612), ('Manta', 164739), ('Shubra al-Khayma', 870716), ('Port Said', 469533), ('Suez', 417610), ('al-Mahallat al-Kubra', 395402), ('Tanta', 371010), ('al-Mansura', 369621), ('Luxor', 360503), ('Asyut', 343498), ('Bahtim', 275807), ('Zagazig', 267351), ('al-Faiyum', 260964), ('Ismailia', 254477), ('Kafr al-Dawwar', 231978), ('Assuan', 219017), ('Damanhur', 212203), ('al-Minya', 201360), ('Bani Suwayf', 172032), ('Qina', 171275), ('Sawhaj', 170125), ('San Salvador', 415346), ('Asmara', 431000), ('Valencia', 739412), ('Sevilla', 701927), ('Zaragoza', 603367), ('M\u00e1laga', 530553), ('Bilbao', 357589), ('Las Palmas de Gran Canaria', 354757), ('Murcia', 353504), ('Palma de Mallorca', 326993), ('Valladolid', 319998), ('C\u00f3rdoba', 311708), ('Vigo', 283670), ('Alicante [Alacant]', 272432), ('Gij\u00f3n', 267980), ('L\u00b4Hospitalet de Llobregat', 247986), ('Granada', 244767), ('A Coru\u00f1a (La Coru\u00f1a)', 243402), ('Vitoria-Gasteiz', 217154), ('Santa Cruz de Tenerife', 213050), ('Badalona', 209635), ('Oviedo', 200453), ('M\u00f3stoles', 195351), ('Elche [Elx]', 193174), ('Sabadell', 184859), ('Santander', 184165), ('Jerez de la Frontera', 182660), ('Pamplona [Iru\u00f1a]', 180483), ('Donostia-San Sebasti\u00e1n', 179208), ('Cartagena', 177709), ('Legan\u00e9s', 173163), ('Fuenlabrada', 171173), ('Almer\u00eda', 169027), ('Terrassa', 168695), ('Alcal\u00e1 de Henares', 164463), ('Burgos', 162802), ('Johannesburg', 756653), ('Port Elizabeth', 752319), ('Pretoria', 658630), ('Inanda', 634065), ('Durban', 566120), ('Vanderbijlpark', 468931), ('Kempton Park', 442633), ('Alberton', 410102), ('Pinetown', 378810), ('Pietermaritzburg', 370190), ('Benoni', 365467), ('Randburg', 341288), ('Umlazi', 339233), ('Bloemfontein', 334341), ('Vereeniging', 328535), ('Wonderboom', 283289), ('Roodepoort', 279340), ('Boksburg', 262648), ('Klerksdorp', 261911), ('Soshanguve', 242727), ('Newcastle', 222993), ('East London', 221047), ('Welkom', 203296), ('Kimberley', 197254), ('Uitenhage', 192120), ('Chatsworth', 189885), ('Mdantsane', 182639), ('Krugersdorp', 181503), ('Botshabelo', 177971), ('Brakpan', 171363), ('Witbank', 167183), ('Oberholzer', 164367), ('Germiston', 164252), ('Springs', 162072), ('Dire Dawa', 164851), ('Cebu', 718821), ('Zamboanga', 601794), ('Pasig', 505058), ('Valenzuela', 485433), ('Las Pi\u00f1as', 472780), ('Antipolo', 470866), ('Taguig', 467375), ('Cagayan de Oro', 461877), ('Para\u00f1aque', 449811), ('Makati', 444867), ('Bacolod', 429076), ('General Santos', 411822), ('Marikina', 391170), ('Dasmari\u00f1as', 379520), ('Muntinlupa', 379310), ('Iloilo', 365820), ('Pasay', 354908), ('Malabon', 338855), ('San Jos\u00e9 del Monte', 315807), ('Bacoor', 305699), ('Iligan', 285061), ('Calamba', 281146), ('Mandaluyong', 278474), ('Butuan', 267279), ('Angeles', 263971), ('Tarlac', 262481), ('Mandaue', 259728), ('Baguio', 252386), ('Batangas', 247588), ('Cainta', 242511), ('San Pedro', 231403), ('Navotas', 230403), ('Cabanatuan', 222859), ('San Fernando', 221857), ('Lipa', 218447), ('Lapu-Lapu', 217019), ('San Pablo', 207927), ('Bi\u00f1an', 201186), ('Taytay', 198183), ('Lucena', 196075), ('Imus', 195482), ('Olongapo', 194260), ('Binangonan', 187691), ('Santa Rosa', 185633), ('Tagum', 179531), ('Tacloban', 178639), ('Malolos', 175291), ('Mabalacat', 171045), ('Cotabato', 163849), ('Meycauayan', 163037), ('Puerto Princesa', 161912), ('Libreville', 419000), ('Kutaisi', 240900), ('Kumasi', 385192), ('Ciudad de Guatemala', 823301), ('Mixco', 209791), ('Bissau', 241000), ('Georgetown', 254000), ('Port-au-Prince', 884472), ('Carrefour', 290204), ('Delmas', 240429), ('Tegucigalpa', 813900), ('San Pedro Sula', 383900), ('Malang', 716862), ('Bandar Lampung', 680332), ('Bekasi', 644300), ('Padang', 534474), ('Surakarta', 518600), ('Banjarmasin', 482931), ('Pekan Baru', 438638), ('Denpasar', 435000), ('Yogyakarta', 418944), ('Pontianak', 409632), ('Samarinda', 399175), ('Jambi', 385201), ('Depok', 365200), ('Cimahi', 344600), ('Balikpapan', 338752), ('Manado', 332288), ('Mataram', 306600), ('Pekalongan', 301504), ('Tegal', 289744), ('Bogor', 285114), ('Ciputat', 270800), ('Pondokgede', 263200), ('Cirebon', 254406), ('Kediri', 253760), ('Ambon', 249312), ('Jember', 218500), ('Cilacap', 206900), ('Cimanggis', 205100), ('Pematang Siantar', 203056), ('Purwokerto', 202500), ('Ciomas', 187400), ('Tasikmalaya', 179800), ('Madiun', 171532), ('Srinagar', 892506), ('Agra', 891790), ('Coimbatore', 816321), ('Thane (Thana)', 803389), ('Allahabad', 792858), ('Meerut', 753778), ('Vishakhapatnam', 752037), ('Jabalpur', 741927), ('Amritsar', 708835), ('Faridabad', 703592), ('Vijayawada', 701827), ('Gwalior', 690765), ('Jodhpur', 666279), ('Nashik (Nasik)', 656925), ('Hubli-Dharwad', 648298), ('Solapur (Sholapur)', 604215), ('Ranchi', 599306), ('Bareilly', 587211), ('Guwahati (Gauhati)', 584342), ('Shambajinagar (Aurangabad)', 573272), ('Cochin (Kochi)', 564589), ('Rajkot', 559407), ('Kota', 537371), ('Thiruvananthapuram (Trivandrum', 524006), ('Pimpri-Chinchwad', 517083), ('Jalandhar (Jullundur)', 509510), ('Gorakhpur', 505566), ('Chandigarh', 504094), ('Mysore', 480692), ('Aligarh', 480520), ('Guntur', 471051), ('Jamshedpur', 460577), ('Ghaziabad', 454156), ('Warangal', 447657), ('Raipur', 438639), ('Moradabad', 429214), ('Durgapur', 425836), ('Amravati', 421576), ('Calicut (Kozhikode)', 419831), ('Bikaner', 416289), ('Bhubaneswar', 411542), ('Kolhapur', 406370), ('Kataka (Cuttack)', 403418), ('Ajmer', 402700), ('Bhavnagar', 402338), ('Tiruchirapalli', 387223), ('Bhilai', 386159), ('Bhiwandi', 379070), ('Saharanpur', 374945), ('Ulhasnagar', 369077), ('Salem', 366712), ('Ujjain', 362266), ('Malegaon', 342595), ('Jamnagar', 341637), ('Bokaro Steel City', 333683), ('Akola', 328034), ('Belgaum', 326399), ('Rajahmundry', 324851), ('Nellore', 316606), ('Udaipur', 308571), ('New Bombay', 307297), ('Bhatpara', 304952), ('Gulbarga', 304099), ('New Delhi', 301297), ('Jhansi', 300850), ('Gaya', 291675), ('Kakinada', 279980), ('Dhule (Dhulia)', 278317), ('Panihati', 275990), ('Nanded (Nander)', 275083), ('Mangalore', 273304), ('Dehra Dun', 270159), ('Kamarhati', 266889), ('Davangere', 266082), ('Asansol', 262188), ('Bhagalpur', 253225), ('Bellary', 245391), ('Barddhaman (Burdwan)', 245079), ('Rampur', 243742), ('Jalgaon', 242193), ('Muzaffarpur', 241107), ('Nizamabad', 241034), ('Muzaffarnagar', 240609), ('Patiala', 238368), ('Shahjahanpur', 237713), ('Kurnool', 236800), ('Tiruppur (Tirupper)', 235661), ('Rohtak', 233400), ('South Dum Dum', 232811), ('Mathura', 226691), ('Chandrapur', 226105), ('Barahanagar (Baranagar)', 224821), ('Darbhanga', 218391), ('Siliguri (Shiliguri)', 216950), ('Raurkela', 215489), ('Ambattur', 215424), ('Panipat', 215218), ('Firozabad', 215128), ('Ichalkaranji', 214950), ('Jammu', 214737), ('Ramagundam', 214384), ('Eluru', 212866), ('Brahmapur', 210418), ('Alwar', 205086), ('Pondicherry', 203065), ('Thanjavur', 202013), ('Bihar Sharif', 201323), ('Tuticorin', 199854), ('Imphal', 198535), ('Latur', 197408), ('Sagar', 195346), ('Farrukhabad-cum-Fatehgarh', 194567), ('Sangli', 193197), ('Parbhani', 190255), ('Nagar Coil', 190084), ('Bijapur', 186939), ('Kukatpalle', 185378), ('Bally', 184474), ('Bhilwara', 183965), ('Ratlam', 183375), ('Avadi', 183215), ('Dindigul', 182477), ('Ahmadnagar', 181339), ('Bilaspur', 179833), ('Shimoga', 179258), ('Kharagpur', 177989), ('Mira Bhayandar', 175372), ('Vellore', 175061), ('Jalna', 174985), ('Burnpur', 174933), ('Anantapur', 174924), ('Allappuzha (Alleppey)', 174666), ('Tirupati', 174369), ('Karnal', 173751), ('Burhanpur', 172710), ('Hisar (Hissar)', 172677), ('Tiruvottiyur', 172562), ('Mirzapur-cum-Vindhyachal', 169336), ('Secunderabad', 167461), ('Nadiad', 167051), ('Dewas', 164364), ('Murwara (Katni)', 163431), ('Ganganagar', 161482), ('Vizianagaram', 160359), ('Mosul', 879000), ('Irbil', 485968), ('Kirkuk', 418624), ('Basra', 406296), ('al-Sulaymaniya', 364096), ('al-Najaf', 309010), ('Karbala', 296705), ('al-Hilla', 268834), ('al-Nasiriya', 265937), ('al-Amara', 208797), ('al-Diwaniya', 196519), ('al-Ramadi', 192556), ('al-Kut', 183183), ('Ahvaz', 804980), ('Qom', 777677), ('Kermanshah', 692986), ('Urmia', 435200), ('Zahedan', 419518), ('Rasht', 417748), ('Hamadan', 401281), ('Kerman', 384991), ('Arak', 380755), ('Ardebil', 340386), ('Yazd', 326776), ('Qazvin', 291117), ('Zanjan', 286295), ('Sanandaj', 277808), ('Bandar-e-Abbas', 273578), ('Khorramabad', 272815), ('Eslamshahr', 265450), ('Borujerd', 217804), ('Abadan', 206073), ('Dezful', 202639), ('Kashan', 201372), ('Sari', 195882), ('Gorgan', 188710), ('Najafabad', 178498), ('Sabzevar', 170738), ('Khomeynishahr', 165888), ('Dublin', 481854), ('Jerusalem', 633700), ('Tel Aviv-Jaffa', 348100), ('Haifa', 265700), ('Rishon Le Ziyyon', 188200), ('Beerseba', 163700), ('Holon', 163100), ('Palermo', 683794), ('Genova', 636104), ('Bologna', 381161), ('Firenze', 376662), ('Catania', 337862), ('Bari', 331848), ('Venezia', 277305), ('Messina', 259156), ('Verona', 255268), ('Trieste', 216459), ('Padova', 211391), ('Taranto', 208214), ('Brescia', 191317), ('Reggio di Calabria', 179617), ('Modena', 176022), ('Prato', 172473), ('Parma', 168717), ('Cagliari', 165926), ('Livorno', 161673), ('Graz', 240967), ('Linz', 188022), ('Chiba', 863930), ('Sakai', 797735), ('Kumamoto', 656734), ('Okayama', 624269), ('Sagamihara', 586300), ('Hamamatsu', 568796), ('Kagoshima', 549977), ('Funabashi', 545299), ('Higashiosaka', 517785), ('Hachioji', 513451), ('Niigata', 497464), ('Amagasaki', 481434), ('Himeji', 475167), ('Shizuoka', 473854), ('Urawa', 469675), ('Matsuyama', 466133), ('Matsudo', 461126), ('Kanazawa', 455386), ('Kawaguchi', 452155), ('Ichikawa', 441893), ('Omiya', 441649), ('Utsunomiya', 440353), ('Oita', 433401), ('Nagasaki', 432759), ('Yokosuka', 430200), ('Kurashiki', 425103), ('Gifu', 408007), ('Hirakata', 403151), ('Nishinomiya', 397618), ('Toyonaka', 396689), ('Wakayama', 391233), ('Fukuyama', 376921), ('Fujisawa', 372840), ('Asahikawa', 364813), ('Machida', 364197), ('Nara', 362812), ('Takatsuki', 361747), ('Iwaki', 361737), ('Nagano', 361391), ('Toyohashi', 360066), ('Toyota', 346090), ('Suita', 345750), ('Takamatsu', 332471), ('Koriyama', 330335), ('Okazaki', 328711), ('Kawagoe', 327211), ('Tokorozawa', 325809), ('Toyama', 325790), ('Kochi', 324710), ('Kashiwa', 320296), ('Akita', 314440), ('Miyazaki', 303784), ('Koshigaya', 301446), ('Naha', 299851), ('Aomori', 295969), ('Hakodate', 294788), ('Akashi', 292253), ('Yokkaichi', 288173), ('Fukushima', 287525), ('Morioka', 287353), ('Maebashi', 284473), ('Kasugai', 282348), ('Otsu', 282070), ('Ichihara', 279280), ('Yao', 276421), ('Ichinomiya', 270828), ('Tokushima', 269649), ('Kakogawa', 266281), ('Ibaraki', 261020), ('Neyagawa', 257315), ('Shimonoseki', 257263), ('Yamagata', 255617), ('Fukui', 254818), ('Hiratsuka', 254207), ('Mito', 246559), ('Sasebo', 244240), ('Hachinohe', 242979), ('Takasaki', 239124), ('Shimizu', 239123), ('Kurume', 235611), ('Fuji', 231527), ('Soka', 222768), ('Fuchu', 220576), ('Chigasaki', 216015), ('Atsugi', 212407), ('Numazu', 211382), ('Ageo', 209442), ('Yamato', 208234), ('Matsumoto', 206801), ('Kure', 206504), ('Takarazuka', 205993), ('Kasukabe', 201838), ('Chofu', 201585), ('Odawara', 200171), ('Kofu', 199753), ('Kushiro', 197608), ('Kishiwada', 197276), ('Hitachi', 196622), ('Nagaoka', 192407), ('Itami', 190886), ('Uji', 188735), ('Suzuka', 184061), ('Hirosaki', 177522), ('Ube', 175206), ('Kodaira', 174984), ('Takaoka', 174380), ('Obihiro', 173685), ('Tomakomai', 171958), ('Saga', 170034), ('Sakura', 168072), ('Kamakura', 167661), ('Mitaka', 167268), ('Izumi', 166979), ('Hino', 166770), ('Hadano', 166512), ('Ashikaga', 165243), ('Tsu', 164543), ('Sayama', 162472), ('Yachiyo', 161222), ('Tsukuba', 160768), ('Sanaa', 503600), ('Aden', 398300), ('Taizz', 317600), ('Hodeida', 298500), ('al-Zarqa', 389815), ('Irbid', 231511), ('Novi Sad', 179626), ('Ni\u0161', 175391), ('Phnom Penh', 570155), ('Garoua', 177000), ('Calgary', 768082), ('Toronto', 688275), ('North York', 622632), ('Winnipeg', 618477), ('Edmonton', 616306), ('Mississauga', 608072), ('Scarborough', 594501), ('Vancouver', 514008), ('Etobicoke', 348845), ('London', 339917), ('Hamilton', 335614), ('Ottawa', 335277), ('Laval', 330393), ('Surrey', 304477), ('Brampton', 296711), ('Windsor', 207588), ('Saskatoon', 193647), ('Kitchener', 189959), ('Markham', 189098), ('Regina', 180400), ('Burnaby', 179209), ('Qu\u00e9bec', 167264), ('Qaraghandy', 436900), ('Shymkent', 360100), ('Taraz', 330100), ('Astana', 311200), ('\u00d6skemen', 311000), ('Pavlodar', 300500), ('Semey', 269600), ('Aqt\u00f6be', 253100), ('Qostanay', 221400), ('Petropavl', 203500), ('Oral', 195500), ('Temirtau', 170500), ('Mombasa', 461753), ('Kisumu', 192733), ('Nakuru', 163927), ('Bangui', 524000), ('Handan', 840000), ('Wuxi', 830000), ('Xuzhou', 810000), ('Datong', 800000), ('Yichun', 800000), ('Benxi', 770000), ('Luoyang', 760000), ('Suzhou', 710000), ('Xining', 700200), ('Huainan', 700000), ('Jixi', 683885), ('Daqing', 660000), ('Fuxin', 640000), ('Amoy [Xiamen]', 627500), ('Liuzhou', 610000), ('Shantou', 580000), ('Jinzhou', 570000), ('Mudanjiang', 570000), ('Yinchuan', 544500), ('Changzhou', 530000), ('Zhangjiakou', 530000), ('Dandong', 520000), ('Hegang', 520000), ('Kaifeng', 510000), ('Jiamusi', 493409), ('Liaoyang', 492559), ('Hengyang', 487148), ('Baoding', 483155), ('Hunjiang', 482043), ('Xinxiang', 473762), ('Huangshi', 457601), ('Haikou', 454300), ('Yantai', 452127), ('Bengbu', 449245), ('Xiangtan', 441968), ('Weifang', 428522), ('Wuhu', 425740), ('Pingxiang', 425579), ('Yingkou', 421589), ('Anyang', 420332), ('Panzhihua', 415466), ('Pingdingshan', 410775), ('Xiangfan', 410407), ('Zhuzhou', 409924), ('Jiaozuo', 409100), ('Wenzhou', 401871), ('Zhangjiang', 400997), ('Zigong', 393184), ('Shuangyashan', 386081), ('Zaozhuang', 380846), ('Yakeshi', 377869), ('Yichang', 371601), ('Zhenjiang', 368316), ('Huaibei', 366549), ('Qinhuangdao', 364972), ('Guilin', 364130), ('Liupanshui', 363954), ('Panjin', 362773), ('Yangquan', 362268), ('Jinxi', 357052), ('Liaoyuan', 354141), ('Lianyungang', 354139), ('Xianyang', 352125), ('Tai\u00b4an', 350696), ('Chifeng', 350077), ('Shaoguan', 350043), ('Nantong', 343341), ('Leshan', 341128), ('Baoji', 337765), ('Linyi', 324720), ('Tonghua', 324600), ('Siping', 317223), ('Changzhi', 317144), ('Tengzhou', 315083), ('Chaozhou', 313469), ('Yangzhou', 312892), ('Dongwan', 308669), ('Ma\u00b4anshan', 305421), ('Foshan', 303160), ('Yueyang', 302800), ('Xingtai', 302789), ('Changde', 301276), ('Shihezi', 299676), ('Yancheng', 296831), ('Jiujiang', 291187), ('Dongying', 281728), ('Shashi', 281352), ('Xintai', 281248), ('Jingdezhen', 281183), ('Tongchuan', 280657), ('Zhongshan', 278829), ('Shiyan', 273786), ('Tieli', 265683), ('Jining', 265248), ('Wuhai', 264081), ('Mianyang', 262947), ('Luzhou', 262892), ('Zunyi', 261862), ('Shizuishan', 257862), ('Neijiang', 256012), ('Tongliao', 255129), ('Tieling', 254842), ('Wafangdian', 251733), ('Anqing', 250718), ('Shaoyang', 247227), ('Laiwu', 246833), ('Chengde', 246799), ('Tianshui', 244974), ('Nanyang', 243303), ('Cangzhou', 242708), ('Yibin', 241019), ('Huaiyin', 239675), ('Dunhua', 235100), ('Yanji', 230892), ('Jiangmen', 230587), ('Tongling', 228017), ('Suihua', 227881), ('Gongziling', 226569), ('Xiantao', 222884), ('Chaoyang', 222394), ('Ganzhou', 220129), ('Huzhou', 218071), ('Baicheng', 217987), ('Shangzi', 215373), ('Yangjiang', 215196), ('Qitaihe', 214957), ('Gejiu', 214294), ('Jiangyin', 213659), ('Hebi', 212976), ('Jiaxing', 211526), ('Wuzhou', 210452), ('Meihekou', 209038), ('Xuchang', 208815), ('Liaocheng', 207844), ('Haicheng', 205560), ('Qianjiang', 205504), ('Baiyin', 204970), ('Bei\u00b4an', 204899), ('Yixing', 200824), ('Laizhou', 198664), ('Qaramay', 197602), ('Acheng', 197595), ('Dezhou', 195485), ('Nanping', 195064), ('Zhaoqing', 194784), ('Beipiao', 194301), ('Fengcheng', 193784), ('Fuyu', 192981), ('Xinyang', 192509), ('Dongtai', 192247), ('Yuci', 191356), ('Honghu', 190772), ('Ezhou', 190123), ('Heze', 189293), ('Daxian', 188101), ('Linfen', 187309), ('Tianmen', 186332), ('Yiyang', 185818), ('Quanzhou', 185154), ('Rizhao', 185048), ('Deyang', 182488), ('Guangyuan', 182241), ('Changshu', 181805), ('Zhangzhou', 181424), ('Hailar', 180650), ('Nanchong', 180273), ('Jiutai', 180130), ('Zhaodong', 179976), ('Shaoxing', 179818), ('Fuyang', 179572), ('Maoming', 178683), ('Qujing', 178669), ('Ghulja', 177193), ('Jiaohe', 176367), ('Puyang', 175988), ('Huadian', 175873), ('Jiangyou', 175753), ('Qashqar', 174570), ('Anshun', 174142), ('Fuling', 173878), ('Xinyu', 173524), ('Hanzhong', 169930), ('Danyang', 169603), ('Chenzhou', 169400), ('Xiaogan', 166280), ('Shangqiu', 164880), ('Zhuhai', 164747), ('Qingyuan', 164641), ('Aqsu', 164092), ('Jining', 163552), ('Xiaoshan', 162930), ('Zaoyang', 162198), ('Xinghua', 161910), ('Hami', 161315), ('Huizhou', 161023), ('Jinmen', 160794), ('Sanming', 160691), ('Bishkek', 589400), ('Osh', 222700), ('Cartagena', 805757), ('C\u00facuta', 606932), ('Bucaramanga', 515555), ('Ibagu\u00e9', 393664), ('Pereira', 381725), ('Santa Marta', 359147), ('Manizales', 337580), ('Bello', 333470), ('Pasto', 332396), ('Neiva', 300052), ('Soledad', 295058), ('Armenia', 288977), ('Villavicencio', 273140), ('Soacha', 272058), ('Valledupar', 263247), ('Monter\u00eda', 248245), ('Itag\u00fc\u00ed', 228985), ('Palmira', 226509), ('Buenaventura', 224336), ('Floridablanca', 221913), ('Sincelejo', 220704), ('Popay\u00e1n', 200719), ('Barrancabermeja', 178020), ('Pointe-Noire', 500000), ('Lubumbashi', 851381), ('Mbuji-Mayi', 806475), ('Kolwezi', 417810), ('Kisangani', 417517), ('Kananga', 393030), ('Likasi', 299118), ('Bukavu', 201569), ('Kikwit', 182142), ('Tshikapa', 180860), ('Matadi', 172730), ('Mbandaka', 169841), ('Hamhung', 709730), ('Chongjin', 582480), ('Nampo', 566200), ('Sinuiju', 326011), ('Wonsan', 300148), ('Phyongsong', 272934), ('Sariwon', 254146), ('Haeju', 229172), ('Kanggye', 223410), ('Kimchaek', 179000), ('Hyesan', 178020), ('Kaesong', 171500), ('Songnam', 869094), ('Puchon', 779412), ('Suwon', 755550), ('Anyang', 591106), ('Chonju', 563153), ('Chongju', 531376), ('Koyang', 518282), ('Ansan', 510314), ('Pohang', 508899), ('Chang-won', 481694), ('Masan', 441242), ('Kwangmyong', 350914), ('Chonan', 330259), ('Chinju', 329886), ('Iksan', 322685), ('Pyongtaek', 312927), ('Kumi', 311431), ('Uijongbu', 276111), ('Kyongju', 272968), ('Kunsan', 266569), ('Cheju', 258511), ('Kimhae', 256370), ('Sunchon', 249263), ('Mokpo', 247452), ('Yong-in', 242643), ('Wonju', 237460), ('Kunpo', 235233), ('Chunchon', 234528), ('Namyangju', 229060), ('Kangnung', 220403), ('Chungju', 205206), ('Andong', 188443), ('Yosu', 183596), ('Kyongsan', 173746), ('Paju', 163379), ('Yangsan', 163351), ('Athenai', 772072), ('Thessaloniki', 383967), ('Pireus', 182671), ('Zagreb', 706770), ('Split', 189388), ('Rijeka', 167964), ('Santiago de Cuba', 433180), ('Camag\u00fcey', 298726), ('Holgu\u00edn', 249492), ('Santa Clara', 207350), ('Guant\u00e1namo', 205078), ('Nicosia', 195000), ('Vientiane', 531800), ('Riga', 764328), ('Maseru', 297000), ('Tripoli', 240000), ('Monrovia', 850000), ('Bengasi', 804000), ('Vilnius', 577969), ('Kaunas', 412639), ('Klaipeda', 202451), ('El-Aai\u00fan', 169000), ('Macao', 437500), ('Antananarivo', 675669), ('Skopje', 444299), ('Blantyre', 478155), ('Lilongwe', 435964), ('Ipoh', 382853), ('Johor Baharu', 328436), ('Petaling Jaya', 254350), ('Kelang', 243355), ('Kuala Terengganu', 228119), ('Pinang', 219603), ('Kota Bharu', 219582), ('Kuantan', 199484), ('Taiping', 183261), ('Seremban', 182869), ('Bamako', 809552), ('Rabat', 623457), ('Marrakech', 621914), ('F\u00e8s', 541162), ('Tanger', 521735), ('Sal\u00e9', 504420), ('Mekn\u00e8s', 460000), ('Oujda', 365382), ('K\u00e9nitra', 292600), ('T\u00e9touan', 277516), ('Safi', 262300), ('Nouakchott', 667300), ('Naucalpan de Ju\u00e1rez', 857511), ('Mexicali', 764902), ('Culiac\u00e1n', 744859), ('Acapulco de Ju\u00e1rez', 721011), ('Tlalnepantla de Baz', 720755), ('M\u00e9rida', 703324), ('Chihuahua', 670208), ('San Luis Potos\u00ed', 669353), ('Guadalupe', 668780), ('Toluca', 665617), ('Aguascalientes', 643360), ('Quer\u00e9taro', 639839), ('Morelia', 619958), ('Hermosillo', 608697), ('Saltillo', 577352), ('Torre\u00f3n', 529093), ('Centro (Villahermosa)', 519873), ('San Nicol\u00e1s de los Garza', 495540), ('Durango', 490524), ('Chimalhuac\u00e1n', 490245), ('Tlaquepaque', 475472), ('Atizap\u00e1n de Zaragoza', 467262), ('Veracruz', 457119), ('Cuautitl\u00e1n Izcalli', 452976), ('Irapuato', 440039), ('Tuxtla Guti\u00e9rrez', 433544), ('Tultitl\u00e1n', 432411), ('Reynosa', 419776), ('Benito Ju\u00e1rez', 419276), ('Matamoros', 416428), ('Xalapa', 390058), ('Celaya', 382140), ('Mazatl\u00e1n', 380265), ('Ensenada', 369573), ('Ahome', 358663), ('Cajeme', 355679), ('Cuernavaca', 337966), ('Tonal\u00e1', 336109), ('Valle de Chalco Solidaridad', 323113), ('Nuevo Laredo', 310277), ('Tepic', 305025), ('Tampico', 294789), ('Ixtapaluca', 293160), ('Apodaca', 282941), ('Guasave', 277201), ('G\u00f3mez Palacio', 272806), ('Tapachula', 271141), ('Nicol\u00e1s Romero', 269393), ('Coatzacoalcos', 267037), ('Uruapan', 265211), ('Victoria', 262686), ('Oaxaca de Ju\u00e1rez', 256848), ('Coacalco de Berrioz\u00e1bal', 252270), ('Pachuca de Soto', 244688), ('General Escobedo', 232961), ('Salamanca', 226864), ('Santa Catarina', 226573), ('Tehuac\u00e1n', 225943), ('Chalco', 222201), ('C\u00e1rdenas', 216903), ('Campeche', 216735), ('La Paz', 213045), ('Oth\u00f3n P. Blanco (Chetumal)', 208014), ('Texcoco', 203681), ('La Paz', 196708), ('Metepec', 194265), ('Monclova', 193657), ('Huixquilucan', 193156), ('Chilpancingo de los Bravo', 192509), ('Puerto Vallarta', 183741), ('Fresnillo', 182744), ('Ciudad Madero', 182012), ('Soledad de Graciano S\u00e1nchez', 179956), ('San Juan del R\u00edo', 179300), ('San Felipe del Progreso', 177330), ('C\u00f3rdoba', 176952), ('Tec\u00e1mac', 172410), ('Ocosingo', 171495), ('Carmen', 171367), ('L\u00e1zaro C\u00e1rdenas', 170878), ('Jiutepec', 170428), ('Papantla', 170123), ('Comalcalco', 164640), ('Zamora', 161191), ('Chisinau', 719900), ('Tiraspol', 194300), ('Ulan Bator', 773700), ('Matola', 424662), ('Beira', 397368), ('Nampula', 303346), ('Chimoio', 171056), ('Mandalay', 885300), ('Moulmein (Mawlamyine)', 307900), ('Pegu (Bago)', 190900), ('Bassein (Pathein)', 183900), ('Windhoek', 169000), ('Kathmandu', 591835), ('Niamey', 420000), ('Ogbomosho', 730000), ('Kano', 674100), ('Oshogbo', 476800), ('Ilorin', 475800), ('Abeokuta', 427400), ('Port Harcourt', 410000), ('Zaria', 379200), ('Ilesha', 378400), ('Onitsha', 371900), ('Iwo', 362000), ('Ado-Ekiti', 359400), ('Abuja', 350100), ('Kaduna', 342200), ('Mushin', 333200), ('Maiduguri', 320000), ('Enugu', 316100), ('Ede', 307100), ('Aba', 298900), ('Ife', 296800), ('Ila', 264000), ('Oyo', 256400), ('Ikerre', 244600), ('Benin City', 229400), ('Iseyin', 217300), ('Katsina', 206500), ('Jos', 206300), ('Sokoto', 204900), ('Ilobu', 199000), ('Offa', 197200), ('Ikorodu', 184900), ('Ilawe-Ekiti', 184500), ('Owo', 183500), ('Ikirun', 181400), ('Shaki', 174500), ('Calabar', 174400), ('Ondo', 173600), ('Akure', 162300), ('Oslo', 508726), ('Bergen', 230948), ('Bouak\u00e9', 329850), ('Quetta', 560307), ('Islamabad', 524500), ('Sargodha', 455360), ('Sialkot', 417597), ('Bahawalpur', 403408), ('Sukkur', 329176), ('Jhang', 292214), ('Sheikhupura', 271875), ('Larkana', 270366), ('Gujrat', 250121), ('Mardan', 244511), ('Kasur', 241649), ('Rahim Yar Khan', 228479), ('Sahiwal', 207388), ('Okara', 200901), ('Wah', 198400), ('Dera Ghazi Khan', 188100), ('Mirpur Khas', 184500), ('Nawabshah', 183100), ('Mingora', 174500), ('Chiniot', 169300), ('Ciudad de Panam\u00e1', 471373), ('San Miguelito', 315382), ('Port Moresby', 247000), ('Asunci\u00f3n', 557776), ('Arequipa', 762000), ('Trujillo', 652000), ('Chiclayo', 517000), ('Callao', 424294), ('Iquitos', 367000), ('Chimbote', 336000), ('Huancayo', 327000), ('Piura', 325000), ('Cusco', 291000), ('Pucallpa', 220866), ('Tacna', 215683), ('Ica', 194820), ('Lisboa', 563210), ('Porto', 273060), ('San Juan', 434374), ('Bayam\u00f3n', 224044), ('Ponce', 186475), ('Carolina', 186076), ('L\u00f3dz', 800110), ('Krak\u00f3w', 738150), ('Wroclaw', 636765), ('Poznan', 576899), ('Gdansk', 458988), ('Szczecin', 416988), ('Bydgoszcz', 386855), ('Lublin', 356251), ('Katowice', 345934), ('Bialystok', 283937), ('Czestochowa', 257812), ('Gdynia', 253521), ('Sosnowiec', 244102), ('Radom', 232262), ('Kielce', 212383), ('Gliwice', 212164), ('Torun', 206158), ('Bytom', 205560), ('Zabrze', 200177), ('Bielsko-Biala', 180307), ('Olsztyn', 170904), ('Rzesz\u00f3w', 162049), ('Doha', 355000), ('Marseille', 798430), ('Lyon', 445452), ('Toulouse', 390350), ('Nice', 342738), ('Nantes', 270251), ('Strasbourg', 264115), ('Montpellier', 225392), ('Bordeaux', 215363), ('Rennes', 206229), ('Le Havre', 190905), ('Reims', 187206), ('Lille', 184657), ('St-\u00c9tienne', 180210), ('Toulon', 160639), ('Iasi', 348070), ('Constanta', 342264), ('Cluj-Napoca', 332498), ('Galati', 330276), ('Timisoara', 324304), ('Brasov', 314225), ('Craiova', 313530), ('Ploiesti', 251348), ('Braila', 233756), ('Oradea', 222239), ('Bacau', 209235), ('Pitesti', 187170), ('Arad', 184408), ('Sibiu', 169611), ('T\u00e2rgu Mures', 165153), ('Kigali', 286000), ('Stockholm', 750348), ('Gothenburg [G\u00f6teborg]', 466990), ('Malm\u00f6', 259579), ('Uppsala', 189569), ('Frankfurt am Main', 643821), ('Essen', 599515), ('Dortmund', 590213), ('Stuttgart', 582443), ('D\u00fcsseldorf', 568855), ('Bremen', 540330), ('Duisburg', 519793), ('Hannover', 514718), ('Leipzig', 489532), ('N\u00fcrnberg', 486628), ('Dresden', 476668), ('Bochum', 392830), ('Wuppertal', 368993), ('Bielefeld', 321125), ('Mannheim', 307730), ('Bonn', 301048), ('Gelsenkirchen', 281979), ('Karlsruhe', 277204), ('Wiesbaden', 268716), ('M\u00fcnster', 264670), ('M\u00f6nchengladbach', 263697), ('Chemnitz', 263222), ('Augsburg', 254867), ('Halle/Saale', 254360), ('Braunschweig', 246322), ('Aachen', 243825), ('Krefeld', 241769), ('Magdeburg', 235073), ('Kiel', 233795), ('Oberhausen', 222349), ('L\u00fcbeck', 213326), ('Hagen', 205201), ('Rostock', 203279), ('Freiburg im Breisgau', 202455), ('Erfurt', 201267), ('Kassel', 196211), ('Saarbr\u00fccken', 183836), ('Mainz', 183134), ('Hamm', 181804), ('Herne', 175661), ('M\u00fclheim an der Ruhr', 173895), ('Solingen', 165583), ('Osnabr\u00fcck', 164539), ('Ludwigshafen am Rhein', 163771), ('Leverkusen', 160841), ('Ndola', 329200), ('Kitwe', 288600), ('Medina', 608300), ('al-Dammam', 482300), ('al-Taif', 416100), ('Tabuk', 292600), ('Burayda', 248600), ('al-Hufuf', 225800), ('al-Mubarraz', 219100), ('Khamis Mushayt', 217900), ('Hail', 176800), ('Pikine', 855287), ('Dakar', 785071), ('Thi\u00e8s', 248000), ('Kaolack', 199000), ('Ziguinchor', 192000), ('Freetown', 850000), ('Bratislava', 448292), ('Ko\u0161ice', 241874), ('Ljubljana', 270986), ('Colombo', 645000), ('Dehiwala', 203000), ('Moratuwa', 190000), ('Sharq al-Nil', 700887), ('Port Sudan', 308195), ('Kassala', 234622), ('Obeid', 229425), ('Nyala', 227183), ('Wad Madani', 211362), ('al-Qadarif', 191164), ('Kusti', 173599), ('Helsinki [Helsingfors]', 555474), ('Espoo', 213271), ('Tampere', 195468), ('Vantaa', 178471), ('Turku [\u00c5bo]', 172561), ('Z\u00fcrich', 336800), ('Geneve', 173500), ('Basel', 166700), ('Hims', 507404), ('Hama', 343361), ('Latakia', 264563), ('Dushanbe', 524000), ('Khujand', 161500), ('Tainan', 728060), ('Panchiao', 523850), ('Chungho', 392176), ('Keelung (Chilung)', 385201), ('Sanchung', 380084), ('Hsinchuang', 365048), ('Hsinchu', 361958), ('Chungli', 318649), ('Fengshan', 318562), ('Taoyuan', 316438), ('Chiayi', 265109), ('Hsintien', 263603), ('Changhwa', 227715), ('Yungho', 227700), ('Tucheng', 224897), ('Pingtung', 214727), ('Yungkang', 193005), ('Pingchen', 188344), ('Tali', 171940), ('Taiping', 165524), ('Pate', 161700), ('Fengyuan', 161032), ('Luchou', 160516), ('Dodoma', 189000), ('Mwanza', 172300), ('K\u00f8benhavn', 495699), ('\u00c5rhus', 284846), ('Odense', 183912), ('Aalborg', 161161), ('Nonthaburi', 292100), ('Nakhon Ratchasima', 181400), ('Chiang Mai', 171100), ('Lom\u00e9', 375000), ('N\u00b4Djam\u00e9na', 530965), ('Brno', 381862), ('Ostrava', 320041), ('Plzen', 166759), ('Tunis', 690600), ('Sfax', 257800), ('Ariana', 197000), ('Ettadhamen', 178600), ('Gaziantep', 789056), ('Konya', 628364), ('Mersin (I\u00e7el)', 587212), ('Antalya', 564914), ('Diyarbakir', 479884), ('Kayseri', 475657), ('Eskisehir', 470781), ('Sanliurfa', 405905), ('Samsun', 339871), ('Malatya', 330312), ('Gebze', 264170), ('Denizli', 253848), ('Sivas', 246642), ('Erzurum', 246535), ('Tarsus', 246206), ('Kahramanmaras', 245772), ('El\u00e2zig', 228815), ('Van', 219319), ('Sultanbeyli', 211068), ('Izmit (Kocaeli)', 210068), ('Manisa', 207148), ('Batman', 203793), ('Balikesir', 196382), ('Sakarya (Adapazari)', 190641), ('Ashgabat', 540600), ('Ch\u00e4rjew', 189200), ('Kampala', 890800), ('Zaporizzja', 848000), ('Lviv', 788000), ('Kryvyi Rig', 703000), ('Mykolajiv', 508000), ('Mariupol', 490000), ('Lugansk', 469000), ('Vinnytsja', 391000), ('Makijivka', 384000), ('Herson', 353000), ('Sevastopol', 348000), ('Simferopol', 339000), ('Pultava [Poltava]', 313000), ('T\u0161ernigiv', 313000), ('T\u0161erkasy', 309000), ('Gorlivka', 299000), ('Zytomyr', 297000), ('Sumy', 294000), ('Dniprodzerzynsk', 270000), ('Kirovograd', 265000), ('Hmelnytskyi', 262000), ('T\u0161ernivtsi', 259000), ('Rivne', 245000), ('Krement\u0161uk', 239000), ('Ivano-Frankivsk', 237000), ('Ternopil', 236000), ('Lutsk', 217000), ('Bila Tserkva', 215000), ('Kramatorsk', 186000), ('Melitopol', 169000), ('Kert\u0161', 162000), ('Debrecen', 203648), ('Miskolc', 172357), ('Auckland', 381800), ('Christchurch', 324200), ('Manukau', 281800), ('North Shore', 187700), ('Waitakere', 170600), ('Wellington', 166700), ('Namangan', 370500), ('Samarkand', 361800), ('Andijon', 318600), ('Buhoro', 237100), ('Karsi', 194100), ('Nukus', 194100), ('K\u00fckon', 190100), ('Fargona', 180500), ('Gomel', 475000), ('Mogiljov', 356000), ('Vitebsk', 340000), ('Grodno', 302000), ('Brest', 286000), ('Bobruisk', 221000), ('Baranovit\u0161i', 167000), ('Barquisimeto', 877239), ('Valencia', 794246), ('Ciudad Guayana', 663713), ('Petare', 488868), ('Maracay', 444443), ('Barcelona', 322267), ('Matur\u00edn', 319726), ('San Crist\u00f3bal', 319373), ('Ciudad Bol\u00edvar', 301107), ('Cuman\u00e1', 293105), ('M\u00e9rida', 224887), ('Cabimas', 221329), ('Barinas', 217831), ('Turmero', 217499), ('Baruta', 207290), ('Puerto Cabello', 187722), ('Santa Ana de Coro', 185766), ('Los Teques', 178784), ('Punto Fijo', 167215), ('Guarenas', 165889), ('Krasnojarsk', 875500), ('Saratov', 874000), ('Toljatti', 722900), ('Uljanovsk', 667400), ('Izevsk', 652800), ('Krasnodar', 639000), ('Jaroslavl', 616700), ('Habarovsk', 609400), ('Vladivostok', 606200), ('Irkutsk', 593700), ('Barnaul', 580100), ('Novokuznetsk', 561600), ('Penza', 532200), ('Rjazan', 529900), ('Orenburg', 523600), ('Lipetsk', 521000), ('Nabereznyje T\u0161elny', 514700), ('Tula', 506100), ('Tjumen', 503400), ('Kemerovo', 492700), ('Astrahan', 486100), ('Tomsk', 482100), ('Kirov', 466200), ('Ivanovo', 459200), ('T\u0161eboksary', 459200), ('Brjansk', 457400), ('Tver', 454900), ('Kursk', 443500), ('Magnitogorsk', 427900), ('Kaliningrad', 424400), ('Nizni Tagil', 390900), ('Murmansk', 376300), ('Ulan-Ude', 370400), ('Kurgan', 364700), ('Arkangeli', 361800), ('Sot\u0161i', 358600), ('Smolensk', 353400), ('Orjol', 344500), ('Stavropol', 343300), ('Belgorod', 342000), ('Kaluga', 339300), ('Vladimir', 337100), ('Mahat\u0161kala', 332800), ('T\u0161erepovets', 324400), ('Saransk', 314800), ('Tambov', 312000), ('Vladikavkaz', 310100), ('T\u0161ita', 309900), ('Vologda', 302500), ('Veliki Novgorod', 299500), ('Komsomolsk-na-Amure', 291600), ('Kostroma', 288100), ('Volzski', 286900), ('Taganrog', 284400), ('Petroskoi', 282100), ('Bratsk', 277600), ('Dzerzinsk', 277100), ('Surgut', 274900), ('Orsk', 273900), ('Sterlitamak', 265200), ('Angarsk', 264700), ('Jo\u0161kar-Ola', 249200), ('Rybinsk', 239600), ('Prokopjevsk', 237300), ('Niznevartovsk', 233900), ('Nalt\u0161ik', 233400), ('Syktyvkar', 229700), ('Severodvinsk', 229300), ('Bijsk', 225000), ('Niznekamsk', 223400), ('Blagove\u0161t\u0161ensk', 222000), ('\u0160ahty', 221800), ('Staryi Oskol', 213800), ('Zelenograd', 207100), ('Balakovo', 206000), ('Novorossijsk', 203300), ('Pihkova', 201500), ('Zlatoust', 196900), ('Jakutsk', 195400), ('Podolsk', 194300), ('Petropavlovsk-Kamt\u0161atski', 194100), ('Kamensk-Uralski', 190600), ('Engels', 189000), ('Syzran', 186900), ('Grozny', 186000), ('Novot\u0161erkassk', 184400), ('Berezniki', 181900), ('Juzno-Sahalinsk', 179200), ('Volgodonsk', 178200), ('Abakan', 169200), ('Maikop', 167300), ('Miass', 166200), ('Armavir', 164900), ('Ljubertsy', 163900), ('Rubtsovsk', 162600), ('Haiphong', 783133), ('Da Nang', 382674), ('Bi\u00ean Hoa', 282095), ('Nha Trang', 221331), ('Hue', 219149), ('Can Tho', 215587), ('Cam Pha', 209086), ('Nam Dinh', 171699), ('Quy Nhon', 163385), ('Tallinn', 403981), ('San Jose', 894943), ('Indianapolis', 791926), ('San Francisco', 776733), ('Jacksonville', 735167), ('Columbus', 711470), ('Austin', 656562), ('Baltimore', 651154), ('Memphis', 650100), ('Milwaukee', 596974), ('Boston', 589141), ('Washington', 572059), ('Nashville-Davidson', 569891), ('El Paso', 563662), ('Seattle', 563374), ('Denver', 554636), ('Charlotte', 540828), ('Fort Worth', 534694), ('Portland', 529121), ('Oklahoma City', 506132), ('Tucson', 486699), ('New Orleans', 484674), ('Las Vegas', 478434), ('Cleveland', 478403), ('Long Beach', 461522), ('Albuquerque', 448607), ('Kansas City', 441545), ('Fresno', 427652), ('Virginia Beach', 425257), ('Atlanta', 416474), ('Sacramento', 407018), ('Oakland', 399484), ('Mesa', 396375), ('Tulsa', 393049), ('Omaha', 390007), ('Minneapolis', 382618), ('Honolulu', 371657), ('Miami', 362470), ('Colorado Springs', 360890), ('Saint Louis', 348189), ('Wichita', 344284), ('Santa Ana', 337977), ('Pittsburgh', 334563), ('Arlington', 332969), ('Cincinnati', 331285), ('Anaheim', 328014), ('Toledo', 313619), ('Tampa', 303447), ('Buffalo', 292648), ('Saint Paul', 287151), ('Corpus Christi', 277454), ('Aurora', 276393), ('Raleigh', 276093), ('Newark', 273546), ('Lexington-Fayette', 260512), ('Anchorage', 260283), ('Louisville', 256231), ('Riverside', 255166), ('Saint Petersburg', 248232), ('Bakersfield', 247057), ('Stockton', 243771), ('Birmingham', 242820), ('Jersey City', 240055), ('Norfolk', 234403), ('Baton Rouge', 227818), ('Hialeah', 226419), ('Lincoln', 225581), ('Greensboro', 223891), ('Plano', 222030), ('Rochester', 219773), ('Glendale', 218812), ('Akron', 217074), ('Garland', 215768), ('Madison', 208054), ('Fort Wayne', 205727), ('Fremont', 203413), ('Scottsdale', 202705), ('Montgomery', 201568), ('Shreveport', 200145), ('Augusta-Richmond County', 199775), ('Lubbock', 199564), ('Chesapeake', 199184), ('Mobile', 198915), ('Des Moines', 198682), ('Grand Rapids', 197800), ('Richmond', 197790), ('Yonkers', 196086), ('Spokane', 195629), ('Glendale', 194973), ('Tacoma', 193556), ('Irving', 191615), ('Huntington Beach', 189594), ('Modesto', 188856), ('Durham', 187035), ('Columbus', 186291), ('Orlando', 185951), ('Boise City', 185787), ('Winston-Salem', 185776), ('San Bernardino', 185401), ('Jackson', 184256), ('Little Rock', 183133), ('Salt Lake City', 181743), ('Reno', 180480), ('Newport News', 180150), ('Chandler', 176581), ('Laredo', 176576), ('Henderson', 175381), ('Arlington', 174838), ('Knoxville', 173890), ('Amarillo', 173627), ('Providence', 173618), ('Chula Vista', 173556), ('Worcester', 172648), ('Oxnard', 170358), ('Dayton', 166179), ('Garden Grove', 165196), ('Oceanside', 161029), ('Bulawayo', 621742), ('Chitungwiza', 274912), ('Mount Darwin', 164362), ('Gaza', 353632)]", "py_exec_result": "None", "gold_answer": [["Qandahar"], ["Herat"], ["Amsterdam"], ["Rotterdam"], ["Haag"], ["Utrecht"], ["Eindhoven"], ["Tilburg"], ["Groningen"], ["Breda"], ["Tirana"], ["Oran"], ["Constantine"], ["Annaba"], ["Batna"], ["S\u00e9tif"], ["Huambo"], ["Dubai"], ["Abu Dhabi"], ["Sharja"], ["al-Ayn"], ["Lomas de Zamora"], ["Quilmes"], ["Almirante Brown"], ["La Plata"], ["Mar del Plata"], ["San Miguel de Tucum\u00e1n"], ["Lan\u00fas"], ["Merlo"], ["General San Mart\u00edn"], ["Salta"], ["Moreno"], ["Santa F\u00e9"], ["Avellaneda"], ["Tres de Febrero"], ["Mor\u00f3n"], ["Florencio Varela"], ["San Isidro"], ["Tigre"], ["Malvinas Argentinas"], ["Vicente L\u00f3pez"], ["Berazategui"], ["Corrientes"], ["San Miguel"], ["Bah\u00eda Blanca"], ["Esteban Echeverr\u00eda"], ["Resistencia"], ["Jos\u00e9 C. Paz"], ["Paran\u00e1"], ["Godoy Cruz"], ["Posadas"], ["Guaymall\u00e9n"], ["Santiago del Estero"], ["San Salvador de Jujuy"], ["Hurlingham"], ["Neuqu\u00e9n"], ["Gjumri"], ["Vanadzor"], ["Canberra"], ["Gold Coast"], ["Newcastle"], ["Central Coast"], ["Wollongong"], ["G\u00e4nc\u00e4"], ["Sumqayit"], ["Nassau"], ["Khulna"], ["Rajshahi"], ["Narayanganj"], ["Rangpur"], ["Mymensingh"], ["Barisal"], ["Tungi"], ["Antwerpen"], ["Gent"], ["Charleroi"], ["Li\u00e8ge"], ["Cotonou"], ["Porto-Novo"], ["La Paz"], ["El Alto"], ["Cochabamba"], ["Oruro"], ["Sucre"], ["Sarajevo"], ["Gaborone"], ["S\u00e3o Gon\u00e7alo"], ["Nova Igua\u00e7u"], ["S\u00e3o Lu\u00eds"], ["Macei\u00f3"], ["Duque de Caxias"], ["S\u00e3o Bernardo do Campo"], ["Teresina"], ["Natal"], ["Osasco"], ["Campo Grande"], ["Santo Andr\u00e9"], ["Jo\u00e3o Pessoa"], ["Jaboat\u00e3o dos Guararapes"], ["Contagem"], ["S\u00e3o Jos\u00e9 dos Campos"], ["Uberl\u00e2ndia"], ["Feira de Santana"], ["Ribeir\u00e3o Preto"], ["Sorocaba"], ["Niter\u00f3i"], ["Cuiab\u00e1"], ["Juiz de Fora"], ["Aracaju"], ["S\u00e3o Jo\u00e3o de Meriti"], ["Londrina"], ["Joinville"], ["Belford Roxo"], ["Santos"], ["Ananindeua"], ["Campos dos Goytacazes"], ["Mau\u00e1"], ["Carapicu\u00edba"], ["Olinda"], ["Campina Grande"], ["S\u00e3o Jos\u00e9 do Rio Preto"], ["Caxias do Sul"], ["Moji das Cruzes"], ["Diadema"], ["Aparecida de Goi\u00e2nia"], ["Piracicaba"], ["Cariacica"], ["Vila Velha"], ["Pelotas"], ["Bauru"], ["Porto Velho"], ["Serra"], ["Betim"], ["Jund\u00eda\u00ed"], ["Canoas"], ["Franca"], ["S\u00e3o Vicente"], ["Maring\u00e1"], ["Montes Claros"], ["An\u00e1polis"], ["Florian\u00f3polis"], ["Petr\u00f3polis"], ["Itaquaquecetuba"], ["Vit\u00f3ria"], ["Ponta Grossa"], ["Rio Branco"], ["Foz do Igua\u00e7u"], ["Macap\u00e1"], ["Ilh\u00e9us"], ["Vit\u00f3ria da Conquista"], ["Uberaba"], ["Paulista"], ["Limeira"], ["Blumenau"], ["Caruaru"], ["Santar\u00e9m"], ["Volta Redonda"], ["Novo Hamburgo"], ["Caucaia"], ["Santa Maria"], ["Cascavel"], ["Guaruj\u00e1"], ["Ribeir\u00e3o das Neves"], ["Governador Valadares"], ["Taubat\u00e9"], ["Imperatriz"], ["Gravata\u00ed"], ["Embu"], ["Mossor\u00f3"], ["V\u00e1rzea Grande"], ["Petrolina"], ["Barueri"], ["Viam\u00e3o"], ["Ipatinga"], ["Juazeiro"], ["Juazeiro do Norte"], ["Tabo\u00e3o da Serra"], ["S\u00e3o Jos\u00e9 dos Pinhais"], ["Mag\u00e9"], ["Suzano"], ["S\u00e3o Leopoldo"], ["Mar\u00edlia"], ["S\u00e3o Carlos"], ["Sumar\u00e9"], ["Presidente Prudente"], ["Divin\u00f3polis"], ["Sete Lagoas"], ["Rio Grande"], ["Itabuna"], ["Jequi\u00e9"], ["Arapiraca"], ["Colombo"], ["Americana"], ["Alvorada"], ["Araraquara"], ["Itabora\u00ed"], ["Santa B\u00e1rbara d\u00b4Oeste"], ["Nova Friburgo"], ["Jacare\u00ed"], ["Ara\u00e7atuba"], ["Barra Mansa"], ["Praia Grande"], ["Marab\u00e1"], ["Crici\u00fama"], ["Boa Vista"], ["Passo Fundo"], ["Dourados"], ["Santa Luzia"], ["Rio Claro"], ["Maracana\u00fa"], ["Guarapuava"], ["Glasgow"], ["Liverpool"], ["Edinburgh"], ["Sheffield"], ["Manchester"], ["Leeds"], ["Bristol"], ["Cardiff"], ["Coventry"], ["Leicester"], ["Bradford"], ["Belfast"], ["Nottingham"], ["Kingston upon Hull"], ["Plymouth"], ["Stoke-on-Trent"], ["Wolverhampton"], ["Derby"], ["Swansea"], ["Southampton"], ["Aberdeen"], ["Northampton"], ["Dudley"], ["Portsmouth"], ["Newcastle upon Tyne"], ["Sunderland"], ["Luton"], ["Swindon"], ["Southend-on-Sea"], ["Walsall"], ["Bournemouth"], ["Plovdiv"], ["Varna"], ["Burgas"], ["Ruse"], ["Ouagadougou"], ["Bobo-Dioulasso"], ["Bujumbura"], ["Puente Alto"], ["Vi\u00f1a del Mar"], ["Valpara\u00edso"], ["Talcahuano"], ["Antofagasta"], ["San Bernardo"], ["Temuco"], ["Concepci\u00f3n"], ["Rancagua"], ["Arica"], ["Talca"], ["Chill\u00e1n"], ["Iquique"], ["San Jos\u00e9"], ["Djibouti"], ["Santiago de los Caballeros"], ["Cuenca"], ["Machala"], ["Santo Domingo de los Colorados"], ["Portoviejo"], ["Ambato"], ["Manta"], ["Shubra al-Khayma"], ["Port Said"], ["Suez"], ["al-Mahallat al-Kubra"], ["Tanta"], ["al-Mansura"], ["Luxor"], ["Asyut"], ["Bahtim"], ["Zagazig"], ["al-Faiyum"], ["Ismailia"], ["Kafr al-Dawwar"], ["Assuan"], ["Damanhur"], ["al-Minya"], ["Bani Suwayf"], ["Qina"], ["Sawhaj"], ["San Salvador"], ["Asmara"], ["Valencia"], ["Sevilla"], ["Zaragoza"], ["M\u00e1laga"], ["Bilbao"], ["Las Palmas de Gran Canaria"], ["Murcia"], ["Palma de Mallorca"], ["Valladolid"], ["C\u00f3rdoba"], ["Vigo"], ["Alicante [Alacant]"], ["Gij\u00f3n"], ["L\u00b4Hospitalet de Llobregat"], ["Granada"], ["A Coru\u00f1a (La Coru\u00f1a)"], ["Vitoria-Gasteiz"], ["Santa Cruz de Tenerife"], ["Badalona"], ["Oviedo"], ["M\u00f3stoles"], ["Elche [Elx]"], ["Sabadell"], ["Santander"], ["Jerez de la Frontera"], ["Pamplona [Iru\u00f1a]"], ["Donostia-San Sebasti\u00e1n"], ["Cartagena"], ["Legan\u00e9s"], ["Fuenlabrada"], ["Almer\u00eda"], ["Terrassa"], ["Alcal\u00e1 de Henares"], ["Burgos"], ["Johannesburg"], ["Port Elizabeth"], ["Pretoria"], ["Inanda"], ["Durban"], ["Vanderbijlpark"], ["Kempton Park"], ["Alberton"], ["Pinetown"], ["Pietermaritzburg"], ["Benoni"], ["Randburg"], ["Umlazi"], ["Bloemfontein"], ["Vereeniging"], ["Wonderboom"], ["Roodepoort"], ["Boksburg"], ["Klerksdorp"], ["Soshanguve"], ["Newcastle"], ["East London"], ["Welkom"], ["Kimberley"], ["Uitenhage"], ["Chatsworth"], ["Mdantsane"], ["Krugersdorp"], ["Botshabelo"], ["Brakpan"], ["Witbank"], ["Oberholzer"], ["Germiston"], ["Springs"], ["Dire Dawa"], ["Cebu"], ["Zamboanga"], ["Pasig"], ["Valenzuela"], ["Las Pi\u00f1as"], ["Antipolo"], ["Taguig"], ["Cagayan de Oro"], ["Para\u00f1aque"], ["Makati"], ["Bacolod"], ["General Santos"], ["Marikina"], ["Dasmari\u00f1as"], ["Muntinlupa"], ["Iloilo"], ["Pasay"], ["Malabon"], ["San Jos\u00e9 del Monte"], ["Bacoor"], ["Iligan"], ["Calamba"], ["Mandaluyong"], ["Butuan"], ["Angeles"], ["Tarlac"], ["Mandaue"], ["Baguio"], ["Batangas"], ["Cainta"], ["San Pedro"], ["Navotas"], ["Cabanatuan"], ["San Fernando"], ["Lipa"], ["Lapu-Lapu"], ["San Pablo"], ["Bi\u00f1an"], ["Taytay"], ["Lucena"], ["Imus"], ["Olongapo"], ["Binangonan"], ["Santa Rosa"], ["Tagum"], ["Tacloban"], ["Malolos"], ["Mabalacat"], ["Cotabato"], ["Meycauayan"], ["Puerto Princesa"], ["Libreville"], ["Kutaisi"], ["Kumasi"], ["Ciudad de Guatemala"], ["Mixco"], ["Bissau"], ["Georgetown"], ["Port-au-Prince"], ["Carrefour"], ["Delmas"], ["Tegucigalpa"], ["San Pedro Sula"], ["Malang"], ["Bandar Lampung"], ["Bekasi"], ["Padang"], ["Surakarta"], ["Banjarmasin"], ["Pekan Baru"], ["Denpasar"], ["Yogyakarta"], ["Pontianak"], ["Samarinda"], ["Jambi"], ["Depok"], ["Cimahi"], ["Balikpapan"], ["Manado"], ["Mataram"], ["Pekalongan"], ["Tegal"], ["Bogor"], ["Ciputat"], ["Pondokgede"], ["Cirebon"], ["Kediri"], ["Ambon"], ["Jember"], ["Cilacap"], ["Cimanggis"], ["Pematang Siantar"], ["Purwokerto"], ["Ciomas"], ["Tasikmalaya"], ["Madiun"], ["Srinagar"], ["Agra"], ["Coimbatore"], ["Thane (Thana)"], ["Allahabad"], ["Meerut"], ["Vishakhapatnam"], ["Jabalpur"], ["Amritsar"], ["Faridabad"], ["Vijayawada"], ["Gwalior"], ["Jodhpur"], ["Nashik (Nasik)"], ["Hubli-Dharwad"], ["Solapur (Sholapur)"], ["Ranchi"], ["Bareilly"], ["Guwahati (Gauhati)"], ["Shambajinagar (Aurangabad)"], ["Cochin (Kochi)"], ["Rajkot"], ["Kota"], ["Thiruvananthapuram (Trivandrum"], ["Pimpri-Chinchwad"], ["Jalandhar (Jullundur)"], ["Gorakhpur"], ["Chandigarh"], ["Mysore"], ["Aligarh"], ["Guntur"], ["Jamshedpur"], ["Ghaziabad"], ["Warangal"], ["Raipur"], ["Moradabad"], ["Durgapur"], ["Amravati"], ["Calicut (Kozhikode)"], ["Bikaner"], ["Bhubaneswar"], ["Kolhapur"], ["Kataka (Cuttack)"], ["Ajmer"], ["Bhavnagar"], ["Tiruchirapalli"], ["Bhilai"], ["Bhiwandi"], ["Saharanpur"], ["Ulhasnagar"], ["Salem"], ["Ujjain"], ["Malegaon"], ["Jamnagar"], ["Bokaro Steel City"], ["Akola"], ["Belgaum"], ["Rajahmundry"], ["Nellore"], ["Udaipur"], ["New Bombay"], ["Bhatpara"], ["Gulbarga"], ["New Delhi"], ["Jhansi"], ["Gaya"], ["Kakinada"], ["Dhule (Dhulia)"], ["Panihati"], ["Nanded (Nander)"], ["Mangalore"], ["Dehra Dun"], ["Kamarhati"], ["Davangere"], ["Asansol"], ["Bhagalpur"], ["Bellary"], ["Barddhaman (Burdwan)"], ["Rampur"], ["Jalgaon"], ["Muzaffarpur"], ["Nizamabad"], ["Muzaffarnagar"], ["Patiala"], ["Shahjahanpur"], ["Kurnool"], ["Tiruppur (Tirupper)"], ["Rohtak"], ["South Dum Dum"], ["Mathura"], ["Chandrapur"], ["Barahanagar (Baranagar)"], ["Darbhanga"], ["Siliguri (Shiliguri)"], ["Raurkela"], ["Ambattur"], ["Panipat"], ["Firozabad"], ["Ichalkaranji"], ["Jammu"], ["Ramagundam"], ["Eluru"], ["Brahmapur"], ["Alwar"], ["Pondicherry"], ["Thanjavur"], ["Bihar Sharif"], ["Tuticorin"], ["Imphal"], ["Latur"], ["Sagar"], ["Farrukhabad-cum-Fatehgarh"], ["Sangli"], ["Parbhani"], ["Nagar Coil"], ["Bijapur"], ["Kukatpalle"], ["Bally"], ["Bhilwara"], ["Ratlam"], ["Avadi"], ["Dindigul"], ["Ahmadnagar"], ["Bilaspur"], ["Shimoga"], ["Kharagpur"], ["Mira Bhayandar"], ["Vellore"], ["Jalna"], ["Burnpur"], ["Anantapur"], ["Allappuzha (Alleppey)"], ["Tirupati"], ["Karnal"], ["Burhanpur"], ["Hisar (Hissar)"], ["Tiruvottiyur"], ["Mirzapur-cum-Vindhyachal"], ["Secunderabad"], ["Nadiad"], ["Dewas"], ["Murwara (Katni)"], ["Ganganagar"], ["Vizianagaram"], ["Mosul"], ["Irbil"], ["Kirkuk"], ["Basra"], ["al-Sulaymaniya"], ["al-Najaf"], ["Karbala"], ["al-Hilla"], ["al-Nasiriya"], ["al-Amara"], ["al-Diwaniya"], ["al-Ramadi"], ["al-Kut"], ["Ahvaz"], ["Qom"], ["Kermanshah"], ["Urmia"], ["Zahedan"], ["Rasht"], ["Hamadan"], ["Kerman"], ["Arak"], ["Ardebil"], ["Yazd"], ["Qazvin"], ["Zanjan"], ["Sanandaj"], ["Bandar-e-Abbas"], ["Khorramabad"], ["Eslamshahr"], ["Borujerd"], ["Abadan"], ["Dezful"], ["Kashan"], ["Sari"], ["Gorgan"], ["Najafabad"], ["Sabzevar"], ["Khomeynishahr"], ["Dublin"], ["Jerusalem"], ["Tel Aviv-Jaffa"], ["Haifa"], ["Rishon Le Ziyyon"], ["Beerseba"], ["Holon"], ["Palermo"], ["Genova"], ["Bologna"], ["Firenze"], ["Catania"], ["Bari"], ["Venezia"], ["Messina"], ["Verona"], ["Trieste"], ["Padova"], ["Taranto"], ["Brescia"], ["Reggio di Calabria"], ["Modena"], ["Prato"], ["Parma"], ["Cagliari"], ["Livorno"], ["Graz"], ["Linz"], ["Chiba"], ["Sakai"], ["Kumamoto"], ["Okayama"], ["Sagamihara"], ["Hamamatsu"], ["Kagoshima"], ["Funabashi"], ["Higashiosaka"], ["Hachioji"], ["Niigata"], ["Amagasaki"], ["Himeji"], ["Shizuoka"], ["Urawa"], ["Matsuyama"], ["Matsudo"], ["Kanazawa"], ["Kawaguchi"], ["Ichikawa"], ["Omiya"], ["Utsunomiya"], ["Oita"], ["Nagasaki"], ["Yokosuka"], ["Kurashiki"], ["Gifu"], ["Hirakata"], ["Nishinomiya"], ["Toyonaka"], ["Wakayama"], ["Fukuyama"], ["Fujisawa"], ["Asahikawa"], ["Machida"], ["Nara"], ["Takatsuki"], ["Iwaki"], ["Nagano"], ["Toyohashi"], ["Toyota"], ["Suita"], ["Takamatsu"], ["Koriyama"], ["Okazaki"], ["Kawagoe"], ["Tokorozawa"], ["Toyama"], ["Kochi"], ["Kashiwa"], ["Akita"], ["Miyazaki"], ["Koshigaya"], ["Naha"], ["Aomori"], ["Hakodate"], ["Akashi"], ["Yokkaichi"], ["Fukushima"], ["Morioka"], ["Maebashi"], ["Kasugai"], ["Otsu"], ["Ichihara"], ["Yao"], ["Ichinomiya"], ["Tokushima"], ["Kakogawa"], ["Ibaraki"], ["Neyagawa"], ["Shimonoseki"], ["Yamagata"], ["Fukui"], ["Hiratsuka"], ["Mito"], ["Sasebo"], ["Hachinohe"], ["Takasaki"], ["Shimizu"], ["Kurume"], ["Fuji"], ["Soka"], ["Fuchu"], ["Chigasaki"], ["Atsugi"], ["Numazu"], ["Ageo"], ["Yamato"], ["Matsumoto"], ["Kure"], ["Takarazuka"], ["Kasukabe"], ["Chofu"], ["Odawara"], ["Kofu"], ["Kushiro"], ["Kishiwada"], ["Hitachi"], ["Nagaoka"], ["Itami"], ["Uji"], ["Suzuka"], ["Hirosaki"], ["Ube"], ["Kodaira"], ["Takaoka"], ["Obihiro"], ["Tomakomai"], ["Saga"], ["Sakura"], ["Kamakura"], ["Mitaka"], ["Izumi"], ["Hino"], ["Hadano"], ["Ashikaga"], ["Tsu"], ["Sayama"], ["Yachiyo"], ["Tsukuba"], ["Sanaa"], ["Aden"], ["Taizz"], ["Hodeida"], ["al-Zarqa"], ["Irbid"], ["Novi Sad"], ["Ni\u0161"], ["Phnom Penh"], ["Garoua"], ["Calgary"], ["Toronto"], ["North York"], ["Winnipeg"], ["Edmonton"], ["Mississauga"], ["Scarborough"], ["Vancouver"], ["Etobicoke"], ["London"], ["Hamilton"], ["Ottawa"], ["Laval"], ["Surrey"], ["Brampton"], ["Windsor"], ["Saskatoon"], ["Kitchener"], ["Markham"], ["Regina"], ["Burnaby"], ["Qu\u00e9bec"], ["Qaraghandy"], ["Shymkent"], ["Taraz"], ["Astana"], ["\u00d6skemen"], ["Pavlodar"], ["Semey"], ["Aqt\u00f6be"], ["Qostanay"], ["Petropavl"], ["Oral"], ["Temirtau"], ["Mombasa"], ["Kisumu"], ["Nakuru"], ["Bangui"], ["Handan"], ["Wuxi"], ["Xuzhou"], ["Datong"], ["Yichun"], ["Benxi"], ["Luoyang"], ["Suzhou"], ["Xining"], ["Huainan"], ["Jixi"], ["Daqing"], ["Fuxin"], ["Amoy [Xiamen]"], ["Liuzhou"], ["Shantou"], ["Jinzhou"], ["Mudanjiang"], ["Yinchuan"], ["Changzhou"], ["Zhangjiakou"], ["Dandong"], ["Hegang"], ["Kaifeng"], ["Jiamusi"], ["Liaoyang"], ["Hengyang"], ["Baoding"], ["Hunjiang"], ["Xinxiang"], ["Huangshi"], ["Haikou"], ["Yantai"], ["Bengbu"], ["Xiangtan"], ["Weifang"], ["Wuhu"], ["Pingxiang"], ["Yingkou"], ["Anyang"], ["Panzhihua"], ["Pingdingshan"], ["Xiangfan"], ["Zhuzhou"], ["Jiaozuo"], ["Wenzhou"], ["Zhangjiang"], ["Zigong"], ["Shuangyashan"], ["Zaozhuang"], ["Yakeshi"], ["Yichang"], ["Zhenjiang"], ["Huaibei"], ["Qinhuangdao"], ["Guilin"], ["Liupanshui"], ["Panjin"], ["Yangquan"], ["Jinxi"], ["Liaoyuan"], ["Lianyungang"], ["Xianyang"], ["Tai\u00b4an"], ["Chifeng"], ["Shaoguan"], ["Nantong"], ["Leshan"], ["Baoji"], ["Linyi"], ["Tonghua"], ["Siping"], ["Changzhi"], ["Tengzhou"], ["Chaozhou"], ["Yangzhou"], ["Dongwan"], ["Ma\u00b4anshan"], ["Foshan"], ["Yueyang"], ["Xingtai"], ["Changde"], ["Shihezi"], ["Yancheng"], ["Jiujiang"], ["Dongying"], ["Shashi"], ["Xintai"], ["Jingdezhen"], ["Tongchuan"], ["Zhongshan"], ["Shiyan"], ["Tieli"], ["Jining"], ["Wuhai"], ["Mianyang"], ["Luzhou"], ["Zunyi"], ["Shizuishan"], ["Neijiang"], ["Tongliao"], ["Tieling"], ["Wafangdian"], ["Anqing"], ["Shaoyang"], ["Laiwu"], ["Chengde"], ["Tianshui"], ["Nanyang"], ["Cangzhou"], ["Yibin"], ["Huaiyin"], ["Dunhua"], ["Yanji"], ["Jiangmen"], ["Tongling"], ["Suihua"], ["Gongziling"], ["Xiantao"], ["Chaoyang"], ["Ganzhou"], ["Huzhou"], ["Baicheng"], ["Shangzi"], ["Yangjiang"], ["Qitaihe"], ["Gejiu"], ["Jiangyin"], ["Hebi"], ["Jiaxing"], ["Wuzhou"], ["Meihekou"], ["Xuchang"], ["Liaocheng"], ["Haicheng"], ["Qianjiang"], ["Baiyin"], ["Bei\u00b4an"], ["Yixing"], ["Laizhou"], ["Qaramay"], ["Acheng"], ["Dezhou"], ["Nanping"], ["Zhaoqing"], ["Beipiao"], ["Fengcheng"], ["Fuyu"], ["Xinyang"], ["Dongtai"], ["Yuci"], ["Honghu"], ["Ezhou"], ["Heze"], ["Daxian"], ["Linfen"], ["Tianmen"], ["Yiyang"], ["Quanzhou"], ["Rizhao"], ["Deyang"], ["Guangyuan"], ["Changshu"], ["Zhangzhou"], ["Hailar"], ["Nanchong"], ["Jiutai"], ["Zhaodong"], ["Shaoxing"], ["Fuyang"], ["Maoming"], ["Qujing"], ["Ghulja"], ["Jiaohe"], ["Puyang"], ["Huadian"], ["Jiangyou"], ["Qashqar"], ["Anshun"], ["Fuling"], ["Xinyu"], ["Hanzhong"], ["Danyang"], ["Chenzhou"], ["Xiaogan"], ["Shangqiu"], ["Zhuhai"], ["Qingyuan"], ["Aqsu"], ["Jining"], ["Xiaoshan"], ["Zaoyang"], ["Xinghua"], ["Hami"], ["Huizhou"], ["Jinmen"], ["Sanming"], ["Bishkek"], ["Osh"], ["Cartagena"], ["C\u00facuta"], ["Bucaramanga"], ["Ibagu\u00e9"], ["Pereira"], ["Santa Marta"], ["Manizales"], ["Bello"], ["Pasto"], ["Neiva"], ["Soledad"], ["Armenia"], ["Villavicencio"], ["Soacha"], ["Valledupar"], ["Monter\u00eda"], ["Itag\u00fc\u00ed"], ["Palmira"], ["Buenaventura"], ["Floridablanca"], ["Sincelejo"], ["Popay\u00e1n"], ["Barrancabermeja"], ["Pointe-Noire"], ["Lubumbashi"], ["Mbuji-Mayi"], ["Kolwezi"], ["Kisangani"], ["Kananga"], ["Likasi"], ["Bukavu"], ["Kikwit"], ["Tshikapa"], ["Matadi"], ["Mbandaka"], ["Hamhung"], ["Chongjin"], ["Nampo"], ["Sinuiju"], ["Wonsan"], ["Phyongsong"], ["Sariwon"], ["Haeju"], ["Kanggye"], ["Kimchaek"], ["Hyesan"], ["Kaesong"], ["Songnam"], ["Puchon"], ["Suwon"], ["Anyang"], ["Chonju"], ["Chongju"], ["Koyang"], ["Ansan"], ["Pohang"], ["Chang-won"], ["Masan"], ["Kwangmyong"], ["Chonan"], ["Chinju"], ["Iksan"], ["Pyongtaek"], ["Kumi"], ["Uijongbu"], ["Kyongju"], ["Kunsan"], ["Cheju"], ["Kimhae"], ["Sunchon"], ["Mokpo"], ["Yong-in"], ["Wonju"], ["Kunpo"], ["Chunchon"], ["Namyangju"], ["Kangnung"], ["Chungju"], ["Andong"], ["Yosu"], ["Kyongsan"], ["Paju"], ["Yangsan"], ["Athenai"], ["Thessaloniki"], ["Pireus"], ["Zagreb"], ["Split"], ["Rijeka"], ["Santiago de Cuba"], ["Camag\u00fcey"], ["Holgu\u00edn"], ["Santa Clara"], ["Guant\u00e1namo"], ["Nicosia"], ["Vientiane"], ["Riga"], ["Maseru"], ["Tripoli"], ["Monrovia"], ["Bengasi"], ["Vilnius"], ["Kaunas"], ["Klaipeda"], ["El-Aai\u00fan"], ["Macao"], ["Antananarivo"], ["Skopje"], ["Blantyre"], ["Lilongwe"], ["Ipoh"], ["Johor Baharu"], ["Petaling Jaya"], ["Kelang"], ["Kuala Terengganu"], ["Pinang"], ["Kota Bharu"], ["Kuantan"], ["Taiping"], ["Seremban"], ["Bamako"], ["Rabat"], ["Marrakech"], ["F\u00e8s"], ["Tanger"], ["Sal\u00e9"], ["Mekn\u00e8s"], ["Oujda"], ["K\u00e9nitra"], ["T\u00e9touan"], ["Safi"], ["Nouakchott"], ["Naucalpan de Ju\u00e1rez"], ["Mexicali"], ["Culiac\u00e1n"], ["Acapulco de Ju\u00e1rez"], ["Tlalnepantla de Baz"], ["M\u00e9rida"], ["Chihuahua"], ["San Luis Potos\u00ed"], ["Guadalupe"], ["Toluca"], ["Aguascalientes"], ["Quer\u00e9taro"], ["Morelia"], ["Hermosillo"], ["Saltillo"], ["Torre\u00f3n"], ["Centro (Villahermosa)"], ["San Nicol\u00e1s de los Garza"], ["Durango"], ["Chimalhuac\u00e1n"], ["Tlaquepaque"], ["Atizap\u00e1n de Zaragoza"], ["Veracruz"], ["Cuautitl\u00e1n Izcalli"], ["Irapuato"], ["Tuxtla Guti\u00e9rrez"], ["Tultitl\u00e1n"], ["Reynosa"], ["Benito Ju\u00e1rez"], ["Matamoros"], ["Xalapa"], ["Celaya"], ["Mazatl\u00e1n"], ["Ensenada"], ["Ahome"], ["Cajeme"], ["Cuernavaca"], ["Tonal\u00e1"], ["Valle de Chalco Solidaridad"], ["Nuevo Laredo"], ["Tepic"], ["Tampico"], ["Ixtapaluca"], ["Apodaca"], ["Guasave"], ["G\u00f3mez Palacio"], ["Tapachula"], ["Nicol\u00e1s Romero"], ["Coatzacoalcos"], ["Uruapan"], ["Victoria"], ["Oaxaca de Ju\u00e1rez"], ["Coacalco de Berrioz\u00e1bal"], ["Pachuca de Soto"], ["General Escobedo"], ["Salamanca"], ["Santa Catarina"], ["Tehuac\u00e1n"], ["Chalco"], ["C\u00e1rdenas"], ["Campeche"], ["La Paz"], ["Oth\u00f3n P. Blanco (Chetumal)"], ["Texcoco"], ["La Paz"], ["Metepec"], ["Monclova"], ["Huixquilucan"], ["Chilpancingo de los Bravo"], ["Puerto Vallarta"], ["Fresnillo"], ["Ciudad Madero"], ["Soledad de Graciano S\u00e1nchez"], ["San Juan del R\u00edo"], ["San Felipe del Progreso"], ["C\u00f3rdoba"], ["Tec\u00e1mac"], ["Ocosingo"], ["Carmen"], ["L\u00e1zaro C\u00e1rdenas"], ["Jiutepec"], ["Papantla"], ["Comalcalco"], ["Zamora"], ["Chisinau"], ["Tiraspol"], ["Ulan Bator"], ["Matola"], ["Beira"], ["Nampula"], ["Chimoio"], ["Mandalay"], ["Moulmein (Mawlamyine)"], ["Pegu (Bago)"], ["Bassein (Pathein)"], ["Windhoek"], ["Kathmandu"], ["Niamey"], ["Ogbomosho"], ["Kano"], ["Oshogbo"], ["Ilorin"], ["Abeokuta"], ["Port Harcourt"], ["Zaria"], ["Ilesha"], ["Onitsha"], ["Iwo"], ["Ado-Ekiti"], ["Abuja"], ["Kaduna"], ["Mushin"], ["Maiduguri"], ["Enugu"], ["Ede"], ["Aba"], ["Ife"], ["Ila"], ["Oyo"], ["Ikerre"], ["Benin City"], ["Iseyin"], ["Katsina"], ["Jos"], ["Sokoto"], ["Ilobu"], ["Offa"], ["Ikorodu"], ["Ilawe-Ekiti"], ["Owo"], ["Ikirun"], ["Shaki"], ["Calabar"], ["Ondo"], ["Akure"], ["Oslo"], ["Bergen"], ["Bouak\u00e9"], ["Quetta"], ["Islamabad"], ["Sargodha"], ["Sialkot"], ["Bahawalpur"], ["Sukkur"], ["Jhang"], ["Sheikhupura"], ["Larkana"], ["Gujrat"], ["Mardan"], ["Kasur"], ["Rahim Yar Khan"], ["Sahiwal"], ["Okara"], ["Wah"], ["Dera Ghazi Khan"], ["Mirpur Khas"], ["Nawabshah"], ["Mingora"], ["Chiniot"], ["Ciudad de Panam\u00e1"], ["San Miguelito"], ["Port Moresby"], ["Asunci\u00f3n"], ["Arequipa"], ["Trujillo"], ["Chiclayo"], ["Callao"], ["Iquitos"], ["Chimbote"], ["Huancayo"], ["Piura"], ["Cusco"], ["Pucallpa"], ["Tacna"], ["Ica"], ["Lisboa"], ["Porto"], ["San Juan"], ["Bayam\u00f3n"], ["Ponce"], ["Carolina"], ["L\u00f3dz"], ["Krak\u00f3w"], ["Wroclaw"], ["Poznan"], ["Gdansk"], ["Szczecin"], ["Bydgoszcz"], ["Lublin"], ["Katowice"], ["Bialystok"], ["Czestochowa"], ["Gdynia"], ["Sosnowiec"], ["Radom"], ["Kielce"], ["Gliwice"], ["Torun"], ["Bytom"], ["Zabrze"], ["Bielsko-Biala"], ["Olsztyn"], ["Rzesz\u00f3w"], ["Doha"], ["Marseille"], ["Lyon"], ["Toulouse"], ["Nice"], ["Nantes"], ["Strasbourg"], ["Montpellier"], ["Bordeaux"], ["Rennes"], ["Le Havre"], ["Reims"], ["Lille"], ["St-\u00c9tienne"], ["Toulon"], ["Iasi"], ["Constanta"], ["Cluj-Napoca"], ["Galati"], ["Timisoara"], ["Brasov"], ["Craiova"], ["Ploiesti"], ["Braila"], ["Oradea"], ["Bacau"], ["Pitesti"], ["Arad"], ["Sibiu"], ["T\u00e2rgu Mures"], ["Kigali"], ["Stockholm"], ["Gothenburg [G\u00f6teborg]"], ["Malm\u00f6"], ["Uppsala"], ["Frankfurt am Main"], ["Essen"], ["Dortmund"], ["Stuttgart"], ["D\u00fcsseldorf"], ["Bremen"], ["Duisburg"], ["Hannover"], ["Leipzig"], ["N\u00fcrnberg"], ["Dresden"], ["Bochum"], ["Wuppertal"], ["Bielefeld"], ["Mannheim"], ["Bonn"], ["Gelsenkirchen"], ["Karlsruhe"], ["Wiesbaden"], ["M\u00fcnster"], ["M\u00f6nchengladbach"], ["Chemnitz"], ["Augsburg"], ["Halle/Saale"], ["Braunschweig"], ["Aachen"], ["Krefeld"], ["Magdeburg"], ["Kiel"], ["Oberhausen"], ["L\u00fcbeck"], ["Hagen"], ["Rostock"], ["Freiburg im Breisgau"], ["Erfurt"], ["Kassel"], ["Saarbr\u00fccken"], ["Mainz"], ["Hamm"], ["Herne"], ["M\u00fclheim an der Ruhr"], ["Solingen"], ["Osnabr\u00fcck"], ["Ludwigshafen am Rhein"], ["Leverkusen"], ["Ndola"], ["Kitwe"], ["Medina"], ["al-Dammam"], ["al-Taif"], ["Tabuk"], ["Burayda"], ["al-Hufuf"], ["al-Mubarraz"], ["Khamis Mushayt"], ["Hail"], ["Pikine"], ["Dakar"], ["Thi\u00e8s"], ["Kaolack"], ["Ziguinchor"], ["Freetown"], ["Bratislava"], ["Ko\u0161ice"], ["Ljubljana"], ["Colombo"], ["Dehiwala"], ["Moratuwa"], ["Sharq al-Nil"], ["Port Sudan"], ["Kassala"], ["Obeid"], ["Nyala"], ["Wad Madani"], ["al-Qadarif"], ["Kusti"], ["Helsinki [Helsingfors]"], ["Espoo"], ["Tampere"], ["Vantaa"], ["Turku [\u00c5bo]"], ["Z\u00fcrich"], ["Geneve"], ["Basel"], ["Hims"], ["Hama"], ["Latakia"], ["Dushanbe"], ["Khujand"], ["Tainan"], ["Panchiao"], ["Chungho"], ["Keelung (Chilung)"], ["Sanchung"], ["Hsinchuang"], ["Hsinchu"], ["Chungli"], ["Fengshan"], ["Taoyuan"], ["Chiayi"], ["Hsintien"], ["Changhwa"], ["Yungho"], ["Tucheng"], ["Pingtung"], ["Yungkang"], ["Pingchen"], ["Tali"], ["Taiping"], ["Pate"], ["Fengyuan"], ["Luchou"], ["Dodoma"], ["Mwanza"], ["K\u00f8benhavn"], ["\u00c5rhus"], ["Odense"], ["Aalborg"], ["Nonthaburi"], ["Nakhon Ratchasima"], ["Chiang Mai"], ["Lom\u00e9"], ["N\u00b4Djam\u00e9na"], ["Brno"], ["Ostrava"], ["Plzen"], ["Tunis"], ["Sfax"], ["Ariana"], ["Ettadhamen"], ["Gaziantep"], ["Konya"], ["Mersin (I\u00e7el)"], ["Antalya"], ["Diyarbakir"], ["Kayseri"], ["Eskisehir"], ["Sanliurfa"], ["Samsun"], ["Malatya"], ["Gebze"], ["Denizli"], ["Sivas"], ["Erzurum"], ["Tarsus"], ["Kahramanmaras"], ["El\u00e2zig"], ["Van"], ["Sultanbeyli"], ["Izmit (Kocaeli)"], ["Manisa"], ["Batman"], ["Balikesir"], ["Sakarya (Adapazari)"], ["Ashgabat"], ["Ch\u00e4rjew"], ["Kampala"], ["Zaporizzja"], ["Lviv"], ["Kryvyi Rig"], ["Mykolajiv"], ["Mariupol"], ["Lugansk"], ["Vinnytsja"], ["Makijivka"], ["Herson"], ["Sevastopol"], ["Simferopol"], ["Pultava [Poltava]"], ["T\u0161ernigiv"], ["T\u0161erkasy"], ["Gorlivka"], ["Zytomyr"], ["Sumy"], ["Dniprodzerzynsk"], ["Kirovograd"], ["Hmelnytskyi"], ["T\u0161ernivtsi"], ["Rivne"], ["Krement\u0161uk"], ["Ivano-Frankivsk"], ["Ternopil"], ["Lutsk"], ["Bila Tserkva"], ["Kramatorsk"], ["Melitopol"], ["Kert\u0161"], ["Debrecen"], ["Miskolc"], ["Auckland"], ["Christchurch"], ["Manukau"], ["North Shore"], ["Waitakere"], ["Wellington"], ["Namangan"], ["Samarkand"], ["Andijon"], ["Buhoro"], ["Karsi"], ["Nukus"], ["K\u00fckon"], ["Fargona"], ["Gomel"], ["Mogiljov"], ["Vitebsk"], ["Grodno"], ["Brest"], ["Bobruisk"], ["Baranovit\u0161i"], ["Barquisimeto"], ["Valencia"], ["Ciudad Guayana"], ["Petare"], ["Maracay"], ["Barcelona"], ["Matur\u00edn"], ["San Crist\u00f3bal"], ["Ciudad Bol\u00edvar"], ["Cuman\u00e1"], ["M\u00e9rida"], ["Cabimas"], ["Barinas"], ["Turmero"], ["Baruta"], ["Puerto Cabello"], ["Santa Ana de Coro"], ["Los Teques"], ["Punto Fijo"], ["Guarenas"], ["Krasnojarsk"], ["Saratov"], ["Toljatti"], ["Uljanovsk"], ["Izevsk"], ["Krasnodar"], ["Jaroslavl"], ["Habarovsk"], ["Vladivostok"], ["Irkutsk"], ["Barnaul"], ["Novokuznetsk"], ["Penza"], ["Rjazan"], ["Orenburg"], ["Lipetsk"], ["Nabereznyje T\u0161elny"], ["Tula"], ["Tjumen"], ["Kemerovo"], ["Astrahan"], ["Tomsk"], ["Kirov"], ["Ivanovo"], ["T\u0161eboksary"], ["Brjansk"], ["Tver"], ["Kursk"], ["Magnitogorsk"], ["Kaliningrad"], ["Nizni Tagil"], ["Murmansk"], ["Ulan-Ude"], ["Kurgan"], ["Arkangeli"], ["Sot\u0161i"], ["Smolensk"], ["Orjol"], ["Stavropol"], ["Belgorod"], ["Kaluga"], ["Vladimir"], ["Mahat\u0161kala"], ["T\u0161erepovets"], ["Saransk"], ["Tambov"], ["Vladikavkaz"], ["T\u0161ita"], ["Vologda"], ["Veliki Novgorod"], ["Komsomolsk-na-Amure"], ["Kostroma"], ["Volzski"], ["Taganrog"], ["Petroskoi"], ["Bratsk"], ["Dzerzinsk"], ["Surgut"], ["Orsk"], ["Sterlitamak"], ["Angarsk"], ["Jo\u0161kar-Ola"], ["Rybinsk"], ["Prokopjevsk"], ["Niznevartovsk"], ["Nalt\u0161ik"], ["Syktyvkar"], ["Severodvinsk"], ["Bijsk"], ["Niznekamsk"], ["Blagove\u0161t\u0161ensk"], ["\u0160ahty"], ["Staryi Oskol"], ["Zelenograd"], ["Balakovo"], ["Novorossijsk"], ["Pihkova"], ["Zlatoust"], ["Jakutsk"], ["Podolsk"], ["Petropavlovsk-Kamt\u0161atski"], ["Kamensk-Uralski"], ["Engels"], ["Syzran"], ["Grozny"], ["Novot\u0161erkassk"], ["Berezniki"], ["Juzno-Sahalinsk"], ["Volgodonsk"], ["Abakan"], ["Maikop"], ["Miass"], ["Armavir"], ["Ljubertsy"], ["Rubtsovsk"], ["Haiphong"], ["Da Nang"], ["Bi\u00ean Hoa"], ["Nha Trang"], ["Hue"], ["Can Tho"], ["Cam Pha"], ["Nam Dinh"], ["Quy Nhon"], ["Tallinn"], ["San Jose"], ["Indianapolis"], ["San Francisco"], ["Jacksonville"], ["Columbus"], ["Austin"], ["Baltimore"], ["Memphis"], ["Milwaukee"], ["Boston"], ["Washington"], ["Nashville-Davidson"], ["El Paso"], ["Seattle"], ["Denver"], ["Charlotte"], ["Fort Worth"], ["Portland"], ["Oklahoma City"], ["Tucson"], ["New Orleans"], ["Las Vegas"], ["Cleveland"], ["Long Beach"], ["Albuquerque"], ["Kansas City"], ["Fresno"], ["Virginia Beach"], ["Atlanta"], ["Sacramento"], ["Oakland"], ["Mesa"], ["Tulsa"], ["Omaha"], ["Minneapolis"], ["Honolulu"], ["Miami"], ["Colorado Springs"], ["Saint Louis"], ["Wichita"], ["Santa Ana"], ["Pittsburgh"], ["Arlington"], ["Cincinnati"], ["Anaheim"], ["Toledo"], ["Tampa"], ["Buffalo"], ["Saint Paul"], ["Corpus Christi"], ["Aurora"], ["Raleigh"], ["Newark"], ["Lexington-Fayette"], ["Anchorage"], ["Louisville"], ["Riverside"], ["Saint Petersburg"], ["Bakersfield"], ["Stockton"], ["Birmingham"], ["Jersey City"], ["Norfolk"], ["Baton Rouge"], ["Hialeah"], ["Lincoln"], ["Greensboro"], ["Plano"], ["Rochester"], ["Glendale"], ["Akron"], ["Garland"], ["Madison"], ["Fort Wayne"], ["Fremont"], ["Scottsdale"], ["Montgomery"], ["Shreveport"], ["Augusta-Richmond County"], ["Lubbock"], ["Chesapeake"], ["Mobile"], ["Des Moines"], ["Grand Rapids"], ["Richmond"], ["Yonkers"], ["Spokane"], ["Glendale"], ["Tacoma"], ["Irving"], ["Huntington Beach"], ["Modesto"], ["Durham"], ["Columbus"], ["Orlando"], ["Boise City"], ["Winston-Salem"], ["San Bernardino"], ["Jackson"], ["Little Rock"], ["Salt Lake City"], ["Reno"], ["Newport News"], ["Chandler"], ["Laredo"], ["Henderson"], ["Arlington"], ["Knoxville"], ["Amarillo"], ["Providence"], ["Chula Vista"], ["Worcester"], ["Oxnard"], ["Dayton"], ["Garden Grove"], ["Oceanside"], ["Bulawayo"], ["Chitungwiza"], ["Mount Darwin"], ["Gaza"]], "gold_sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "gold_py": null}}
{"db_id": "tvshow", "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "query_toks": ["SELECT", "LANGUAGE", ",", "count", "(", "*", ")", "FROM", "TV_Channel", "GROUP", "BY", "LANGUAGE", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "What are the languages used by the least number of TV Channels and how many channels use it?", "question_toks": ["What", "are", "the", "languages", "used", "by", "the", "least", "number", "of", "TV", "Channels", "and", "how", "many", "channels", "use", "it", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"TV_Channel": ["id", "series_name", "Country", "Language", "Content", "Pixel_aspect_ratio_PAR", "Hight_definition_TV", "Pay_per_view_PPV", "Package_Option"], "TV_series": ["id", "Episode", "Air_Date", "Rating", "Share", "18_49_Rating_Share", "Viewers_m", "Weekly_Rank", "Channel"], "Cartoon": ["id", "Title", "Directed_by", "Written_by", "Original_air_date", "Production_code", "Channel"]}, "answer": [["English", 3]], "results": {"generated_sql": "SELECT T1.language ,  count(*) FROM TV_Channel AS T1 GROUP BY T1.language HAVING count(*)  =  (SELECT min(count(*) ) FROM TV_Channel AS T2 GROUP BY T2.language)", "generated_py": "t1 = TV_Channel.groupby('language').size().rename('count'); t2 = TV_Channel[['language', 'id']].drop_duplicates(); t3 = pd.merge(t2, t1, on='language'); answer = t3[t3['count'] == t3['count'].min()]", "sql_exec_result": "None", "py_exec_result": "   language   id  count\n12  English  706      3\n13  English  707      3\n14  English  709      3", "gold_answer": [["English", 3]], "gold_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "gold_py": null}}
{"db_id": "student_transcripts_tracking", "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.degree_summary_name", "FROM", "Degree_Programs", "AS", "T1", "JOIN", "Student_Enrolment", "AS", "T2", "ON", "T1.degree_program_id", "=", "T2.degree_program_id", "GROUP", "BY", "T1.degree_summary_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "degree_summary_name", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1", ".", "degree_program_id", "=", "t2", ".", "degree_program_id", "group", "by", "t1", ".", "degree_summary_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the degree summary name that has the most number of students enrolled?", "question_toks": ["What", "is", "the", "degree", "summary", "name", "that", "has", "the", "most", "number", "of", "students", "enrolled", "?"], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]]}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [], "groupBy": [[0, 20, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details"], "Courses": ["course_id", "course_name", "course_description", "other_details"], "Departments": ["department_id", "department_name", "department_description", "other_details"], "Degree_Programs": ["degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details"], "Sections": ["section_id", "course_id", "section_name", "section_description", "other_details"], "Semesters": ["semester_id", "semester_name", "semester_description", "other_details"], "Students": ["student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details"], "Student_Enrolment": ["student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details"], "Student_Enrolment_Courses": ["student_course_id", "course_id", "student_enrolment_id"], "Transcripts": ["transcript_id", "transcript_date", "other_details"], "Transcript_Contents": ["student_course_id", "transcript_id"]}, "answer": [["Bachelor"]], "results": {"generated_sql": "SELECT T1.degree_summary_name FROM degree_programs AS T1 JOIN student_enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*)  DESC LIMIT 1", "generated_py": "t1 = pd.merge(Student_Enrolment, Degree_Programs, on='degree_program_id'); t2 = pd.merge(t1, Sections, on='section_id'); t3 = pd.merge(t2, Semesters, on='semester_id'); t4 = pd.merge(t3, Courses, on='course_id'); t5 = pd.merge(t4, Transcripts, on='student_id'); t6 = pd.merge(t5, Transcript_Contents, on='student_course_id'); t7 = pd.merge(t6, t6.groupby('degree_summary_name').size().rename('count'), on='degree_summary_name'); answer = t7[t7['count'] == t7['count'].max()]['degree_", "sql_exec_result": "[('Bachelor',)]", "py_exec_result": "None", "gold_answer": [["Bachelor"]], "gold_sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "gold_py": null}}
{"db_id": "world_1", "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "query_toks": ["SELECT", "sum", "(", "SurfaceArea", ")", "FROM", "country", "WHERE", "Continent", "=", "``", "Asia", "''", "OR", "Continent", "=", "``", "Europe", "''"], "query_toks_no_value": ["select", "sum", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "value", "or", "continent", "=", "value"], "question": "Give the total surface area covered by countries in Asia or Europe.", "question_toks": ["Give", "the", "total", "surface", "area", "covered", "by", "countries", "in", "Asia", "or", "Europe", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null], "or", [false, 2, [0, [0, 10, false], null], "\"Europe\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"city": ["ID", "Name", "CountryCode", "District", "Population"], "sqlite_sequence": ["name", "seq"], "country": ["Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2"], "countrylanguage": ["CountryCode", "Language", "IsOfficial", "Percentage"]}, "answer": [[54930138.9]], "results": {"generated_sql": "SELECT sum(T1.surface_area) FROM country AS T1 JOIN country AS T2 ON T1.code  =  T2.code WHERE T2.continent  =  'Asia' OR T2.continent  =  'Europe'", "generated_py": "t1 = pd.merge(country, sqlite_sequence, left_on='Code', right_on='name'); t2 = pd.merge(t1, countrylanguage, on='CountryCode'); t3 = t2[(t2['Continent'] == 'Asia') | (t2['Continent'] == 'Europe')]; answer = t3['SurfaceArea'].sum()", "sql_exec_result": "None", "py_exec_result": "None", "gold_answer": [[54930138.9]], "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "gold_py": null}}
{"db_id": "voter_1", "query": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "votes", "WHERE", "state", "=", "'NY", "'", "OR", "state", "=", "'CA", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "votes", "where", "state", "=", "value", "or", "state", "=", "value"], "question": "What are the number of votes from state 'NY' or 'CA'?", "question_toks": ["What", "are", "the", "number", "of", "votes", "from", "state", "'NY", "'", "or", "'CA", "'", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"NY\"", null], "or", [false, 2, [0, [0, 7, false], null], "\"CA\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"AREA_CODE_STATE": ["area_code", "state"], "CONTESTANTS": ["contestant_number", "contestant_name"], "VOTES": ["vote_id", "phone_number", "state", "contestant_number", "created"]}, "answer": [[3]], "results": {"generated_sql": "SELECT count(*) FROM VOTES WHERE state  =  'NY' OR state  =  'CA'", "generated_py": "t1 = pd.merge(VOTES, AREA_CODE_STATE, on='area_code'); t2 = pd.merge(t1, CONTESTANTS, on='contestant_number'); t3 = t2[(t2['state'] == 'NY') | (t2['state'] == 'CA')]; answer = t3['vote_id'].count()", "sql_exec_result": "[(3,)]", "py_exec_result": "None", "gold_answer": [[3]], "gold_sql": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'", "gold_py": null}}
{"db_id": "orchestra", "query": "SELECT Name FROM conductor ORDER BY Age ASC", "query_toks": ["SELECT", "Name", "FROM", "conductor", "ORDER", "BY", "Age", "ASC"], "query_toks_no_value": ["select", "name", "from", "conductor", "order", "by", "age", "asc"], "question": "What are the names of conductors, ordered by age?", "question_toks": ["What", "are", "the", "names", "of", "conductors", ",", "ordered", "by", "age", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 3, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"conductor": ["Conductor_ID", "Name", "Age", "Nationality", "Year_of_Work"], "orchestra": ["Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format"], "performance": ["Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share"], "show": ["Show_ID", "Performance_ID", "If_first_show", "Result", "Attendance"]}, "answer": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]], "results": {"generated_sql": "SELECT name FROM conductor ORDER BY age", "generated_py": "t1 = pd.merge(conductor, orchestra, on='conductor_id'); t2 = pd.merge(t1, performance, on='orchestra_id'); t3 = pd.merge(t2, show, on='performance_id'); answer = t3['name'].unique()", "sql_exec_result": "[('Antal Dor\u00e1ti',), ('Igor Stravinsky',), ('Colin Davis',), ('Michael Tilson Thomas',), ('Paul Jorgensen',), ('Antal Brown',), ('Charles Dutoit',), ('Seiji Ozawa',), ('Valeri Gergiev',), ('Pierre Boulez',), ('Gerard Schwarz',), ('Robert Craft',)]", "py_exec_result": "['Antal Dor\u00e1ti' 'Igor Stravinsky' 'Colin Davis' 'Paul Jorgensen'\n 'Antal Brown']", "gold_answer": [["Antal Dor\u00e1ti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]], "gold_sql": "SELECT Name FROM conductor ORDER BY Age ASC", "gold_py": null}}
{"db_id": "course_teach", "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "query_toks": ["SELECT", "T2.Name", ",", "COUNT", "(", "*", ")", "FROM", "course_arrange", "AS", "T1", "JOIN", "teacher", "AS", "T2", "ON", "T1.Teacher_ID", "=", "T2.Teacher_ID", "GROUP", "BY", "T2.Name"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "course_arrange", "as", "t1", "join", "teacher", "as", "t2", "on", "t1", ".", "teacher_id", "=", "t2", ".", "teacher_id", "group", "by", "t2", ".", "name"], "question": "Show names of teachers and the number of courses they teach.", "question_toks": ["Show", "names", "of", "teachers", "and", "the", "number", "of", "courses", "they", "teach", "."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 4, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"course": ["Course_ID", "Staring_Date", "Course"], "teacher": ["Teacher_ID", "Name", "Age", "Hometown"], "course_arrange": ["Course_ID", "Teacher_ID", "Grade"]}, "answer": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]], "results": {"generated_sql": "SELECT T1.name ,  count(*) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id", "generated_py": "t1 = pd.merge(course_arrange, teacher, on='teacher_id'); t2 = pd.merge(t1, course, on='course_id'); answer = t2.groupby('name').size().rename('count').reset_index()", "sql_exec_result": "[('Gustaaf Deloor', 1), ('Vicente Carretero', 1), ('Kearsley Brown', 1), ('Anne Walker', 2), ('Lucy Wong', 1)]", "py_exec_result": "                name  count\n0        Anne Walker      2\n1     Gustaaf Deloor      1\n2     Kearsley Brown      1\n3          Lucy Wong      1\n4  Vicente Carretero      1", "gold_answer": [["Anne Walker", 2], ["Gustaaf Deloor", 1], ["Kearsley Brown", 1], ["Lucy Wong", 1], ["Vicente Carretero", 1]], "gold_sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "gold_py": null}}
{"db_id": "car_1", "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "query_toks": ["SELECT", "max", "(", "Accelerate", ")", ",", "Cylinders", "FROM", "CARS_DATA", "GROUP", "BY", "Cylinders", ";"], "query_toks_no_value": ["select", "max", "(", "accelerate", ")", ",", "cylinders", "from", "cars_data", "group", "by", "cylinders"], "question": "What is the maximum accelerate for different number of cylinders?", "question_toks": ["What", "is", "the", "maximum", "accelerate", "for", "different", "number", "of", "cylinders", "?"], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[1, [0, [0, 22, false], null]], [0, [0, [0, 18, false], null]]]], "where": [], "groupBy": [[0, 18, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [[13.5, 3], [24.8, 4], [20.1, 5], [21.0, 6], [22.2, 8]], "results": {"generated_sql": "SELECT Cylinders ,  MAX(Accelerate) FROM cars_data GROUP BY Cylinders", "generated_py": "t1 = pd.merge(cars_data, car_names, on='id'); t2 = pd.merge(t1, model_list, on='model'); t3 = pd.merge(t2, car_makers, on='make'); t4 = pd.merge(t3, countries, on='country'); t5 = pd.merge(t4, continents, on='contid'); answer = t5.groupby(['cylinders', 'continent']).agg({'accelerate': 'max'})", "sql_exec_result": "[(3, 13.5), (4, 24.8), (5, 20.1), (6, 21.0), (8, 22.2)]", "py_exec_result": "None", "gold_answer": [[13.5, 3], [24.8, 4], [20.1, 5], [21.0, 6], [22.2, 8]], "gold_sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "gold_py": null}}
{"db_id": "voter_1", "query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.area_code", "FROM", "area_code_state", "AS", "T1", "JOIN", "votes", "AS", "T2", "ON", "T1.state", "=", "T2.state", "GROUP", "BY", "T1.area_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "area_code", "from", "area_code_state", "as", "t1", "join", "votes", "as", "t2", "on", "t1", ".", "state", "=", "t2", ".", "state", "group", "by", "t1", ".", "area_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the area code in which the most voters voted?", "question_toks": ["What", "is", "the", "area", "code", "in", "which", "the", "most", "voters", "voted", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 2, false], null], [0, 7, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"AREA_CODE_STATE": ["area_code", "state"], "CONTESTANTS": ["contestant_number", "contestant_name"], "VOTES": ["vote_id", "phone_number", "state", "contestant_number", "created"]}, "answer": [[212]], "results": {"generated_sql": "SELECT T1.area_code FROM VOTES AS T1 JOIN AREA_CODE_STATE AS T2 ON T1.state  =  T2.state GROUP BY T1.state ORDER BY count(*)  DESC LIMIT 1", "generated_py": "t1 = pd.merge(VOTES, AREA_CODE_STATE, on='state'); t2 = t1.groupby('area_code').size().rename('count').reset_index(); answer = t2.sort_values('count', ascending = False).iloc[0]['area_code']", "sql_exec_result": "None", "py_exec_result": "631", "gold_answer": [[212]], "gold_sql": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1", "gold_py": null}}
{"db_id": "singer", "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Citizenship", "FROM", "singer", "GROUP", "BY", "Citizenship", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "citizenship", "from", "singer", "group", "by", "citizenship", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Please show the most common citizenship of singers.", "question_toks": ["Please", "show", "the", "most", "common", "citizenship", "of", "singers", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"singer": ["Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship"], "song": ["Song_ID", "Title", "Singer_ID", "Sales", "Highest_Position"]}, "answer": [["United States"]], "results": {"generated_sql": "SELECT T1.citizenship ,  count(*) FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.citizenship ORDER BY count(*) DESC LIMIT 1", "generated_py": "answer = singer['citizenship'].value_counts()", "sql_exec_result": "[('United States', 3)]", "py_exec_result": "United States    4\nFrance           1\nChile            1\nAustralia        1\nGermany          1\nName: citizenship, dtype: int64", "gold_answer": [["United States"]], "gold_sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "gold_py": null}}
{"db_id": "battle_death", "query": "SELECT name ,  tonnage FROM ship ORDER BY name DESC", "query_toks": ["SELECT", "name", ",", "tonnage", "FROM", "ship", "ORDER", "BY", "name", "DESC"], "query_toks_no_value": ["select", "name", ",", "tonnage", "from", "ship", "order", "by", "name", "desc"], "question": "List the name and tonnage ordered by in descending alphaetical order for the names.", "question_toks": ["List", "the", "name", "and", "tonnage", "ordered", "by", "in", "descending", "alphaetical", "order", "for", "the", "names", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 9, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"battle": ["id", "name", "date", "bulgarian_commander", "latin_commander", "result"], "ship": ["lost_in_battle", "id", "name", "tonnage", "ship_type", "location", "disposition_of_ship"], "death": ["caused_by_ship_id", "id", "note", "killed", "injured"]}, "answer": [["Three Brothers", "t"], ["Mary", "t"], ["Lettice", "t"], ["HMS Avon", "391"], ["HMS Atalanta", "225"], ["Bon Accord", "t"], ["Bacchus", "t"]], "results": {"generated_sql": "SELECT name ,  tonnage FROM ship ORDER BY name  DESC", "generated_py": "answer = ship[['name', 'tonnage']].sort_values('name', ascending = False)", "sql_exec_result": "[('Three Brothers', 't'), ('Mary', 't'), ('Lettice', 't'), ('HMS Avon', '391'), ('HMS Atalanta', '225'), ('Bon Accord', 't'), ('Bacchus', 't')]", "py_exec_result": "             name tonnage\n4  Three Brothers       t\n2            Mary       t\n0         Lettice       t\n3        HMS Avon     391\n6    HMS Atalanta     225\n1      Bon Accord       t\n5         Bacchus       t", "gold_answer": [["Three Brothers", "t"], ["Mary", "t"], ["Lettice", "t"], ["HMS Avon", "391"], ["HMS Atalanta", "225"], ["Bon Accord", "t"], ["Bacchus", "t"]], "gold_sql": "SELECT name ,  tonnage FROM ship ORDER BY name DESC", "gold_py": null}}
{"db_id": "flight_2", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "query_toks": ["SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "WHERE", "T2.SourceAirport", "=", "``", "AHD", "''"], "query_toks_no_value": ["select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "where", "t2", ".", "sourceairport", "=", "value"], "question": "Which airlines have a flight with source airport AHD?", "question_toks": ["Which", "airlines", "have", "a", "flight", "with", "source", "airport", "AHD", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"AHD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"airlines": ["uid", "Airline", "Abbreviation", "Country"], "airports": ["City", "AirportCode", "AirportName", "Country", "CountryAbbrev"], "flights": ["Airline", "FlightNo", "SourceAirport", "DestAirport"]}, "answer": [], "results": {"generated_sql": "SELECT Airline FROM flights WHERE SourceAirport  =  'AHD'", "generated_py": "t1 = pd.merge(flights, airports, left_on='source_airport', right_on='airport_code'); t2 = pd.merge(t1, airlines, on='airline'); answer = t2[t2['airport_name'] == 'Aeroporto Francisco S\u00e1 Carneiro']['airline'].unique()", "sql_exec_result": "[]", "py_exec_result": "None", "gold_answer": [], "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "gold_py": null}}
{"db_id": "student_transcripts_tracking", "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "query_toks": ["SELECT", "T1.course_name", ",", "T1.course_id", "FROM", "Courses", "AS", "T1", "JOIN", "Sections", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "GROUP", "BY", "T1.course_id", "HAVING", "count", "(", "*", ")", "<", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "course_name", ",", "t1", ".", "course_id", "from", "courses", "as", "t1", "join", "sections", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "group", "by", "t1", ".", "course_id", "having", "count", "(", "*", ")", "<", "=", "value"], "question": "What are the names and id of courses having at most 2 sections?", "question_toks": ["What", "are", "the", "names", "and", "id", "of", "courses", "having", "at", "most", "2", "sections", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 24, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [[false, 6, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details"], "Courses": ["course_id", "course_name", "course_description", "other_details"], "Departments": ["department_id", "department_name", "department_description", "other_details"], "Degree_Programs": ["degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details"], "Sections": ["section_id", "course_id", "section_name", "section_description", "other_details"], "Semesters": ["semester_id", "semester_name", "semester_description", "other_details"], "Students": ["student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details"], "Student_Enrolment": ["student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details"], "Student_Enrolment_Courses": ["student_course_id", "course_id", "student_enrolment_id"], "Transcripts": ["transcript_id", "transcript_date", "other_details"], "Transcript_Contents": ["student_course_id", "transcript_id"]}, "answer": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]], "results": {"generated_sql": "SELECT T1.course_id ,  T1.course_name FROM courses AS T1 JOIN sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "generated_py": "t1 = pd.merge(Courses, Sections, on='course_id'); t2 = t1.groupby('course_id').size().rename('count').reset_index(); t3 = t2[t2['count'] <= 2]; answer = t3[['course_id', 'course_name']].drop_duplicates()", "sql_exec_result": "[(1, 'ds'), (2, 'math'), (4, 'en'), (5, 'fr'), (6, 'la'), (7, 'cal'), (8, 'nlp'), (9, 'dl'), (10, 'ml'), (12, 'db'), (14, 'pl')]", "py_exec_result": "None", "gold_answer": [["ds", 1], ["math", 2], ["en", 4], ["fr", 5], ["la", 6], ["cal", 7], ["nlp", 8], ["dl", 9], ["ml", 10], ["db", 12], ["pl", 14]], "gold_sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "gold_py": null}}
{"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "query_toks": ["SELECT", "template_id", "FROM", "Templates", "EXCEPT", "SELECT", "template_id", "FROM", "Documents"], "query_toks_no_value": ["select", "template_id", "from", "templates", "except", "select", "template_id", "from", "documents"], "question": "What are the ids for templates that are not used in any documents?", "question_toks": ["What", "are", "the", "ids", "for", "templates", "that", "are", "not", "used", "in", "any", "documents", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "db_table_headers": {"Ref_Template_Types": ["Template_Type_Code", "Template_Type_Description"], "Templates": ["Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details"], "Documents": ["Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details"], "Paragraphs": ["Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "answer": [[0], [9], [15], [16], [18], [19], [23], [24]], "results": {"generated_sql": "SELECT T1.template_id FROM templates AS T1 LEFT JOIN documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_id  IS  NULL", "generated_py": "t1 = pd.merge(Templates, Documents, on='template_id'); t2 = pd.merge(t1, Paragraphs, on='document_id'); answer = t2['template_id'].unique()", "sql_exec_result": "[(0,), (9,), (15,), (16,), (18,), (19,), (23,), (24,)]", "py_exec_result": "[ 1  6  8 10 11 14 21 22 25]", "gold_answer": [[0], [9], [15], [16], [18], [19], [23], [24]], "gold_sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "gold_py": null}}
{"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "query_toks": ["SELECT", "template_id", "FROM", "Documents", "GROUP", "BY", "template_id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "template_id", "from", "documents", "group", "by", "template_id", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the template ids of any templates used in more than a single document?", "question_toks": ["What", "are", "the", "template", "ids", "of", "any", "templates", "used", "in", "more", "than", "a", "single", "document", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Ref_Template_Types": ["Template_Type_Code", "Template_Type_Description"], "Templates": ["Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details"], "Documents": ["Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details"], "Paragraphs": ["Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "answer": [[11], [14], [25]], "results": {"generated_sql": "SELECT T1.template_id FROM documents AS T1 JOIN paragraphs AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.template_id HAVING count(*)  >  1", "generated_py": "t1 = pd.merge(Documents, Templates, on='template_id'); t2 = t1.groupby('template_id').size().rename('count').reset_index(); t3 = t2[t2['count'] > 1]; answer = t3['template_id'].unique()", "sql_exec_result": "[(10,), (14,), (21,), (25,)]", "py_exec_result": "[11 14 25]", "gold_answer": [[11], [14], [25]], "gold_sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "gold_py": null}}
{"db_id": "cre_Doc_Template_Mgt", "query": "SELECT document_id ,  document_name ,  document_description FROM Documents", "query_toks": ["SELECT", "document_id", ",", "document_name", ",", "document_description", "FROM", "Documents"], "query_toks_no_value": ["select", "document_id", ",", "document_name", ",", "document_description", "from", "documents"], "question": "List document IDs, document names, and document descriptions for all documents.", "question_toks": ["List", "document", "IDs", ",", "document", "names", ",", "and", "document", "descriptions", "for", "all", "documents", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Ref_Template_Types": ["Template_Type_Code", "Template_Type_Description"], "Templates": ["Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details"], "Documents": ["Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details"], "Paragraphs": ["Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "answer": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]], "results": {"generated_sql": "SELECT Document_ID ,  Document_Name ,  Document_Description FROM Documents", "generated_py": "t1 = pd.merge(Documents, Templates, on='template_id'); t2 = pd.merge(t1, Ref_Template_Types, on='template_type_code'); answer = t2[['document_id', 'document_name', 'document_description']]", "sql_exec_result": "[(0, 'Introduction of OS', 'n'), (1, 'Understanding DB', 'y'), (3, 'Summer Show', 'u'), (76, 'Robbin CV', 'y'), (80, 'Welcome to NY', 'h'), (82, 'Data base', 'w'), (2394, 'Customer reviews', 'y'), (3830, 'Do not panic', 'k'), (33930, 'How Google people work', 'z'), (50123, 'Learning French', 'r'), (651512, 'How to write a CV', 'f'), (801801, 'How to read a book', 'w'), (3540024, 'Palm reading', 'y'), (16514113, 'A history of Arts', 'h'), (385906526, 'About Korea', 'b')]", "py_exec_result": "    document_id           document_name document_description\n0             0      Introduction of OS                    n\n1             3             Summer Show                    u\n2          2394        Customer reviews                    y\n3             1        Understanding DB                    y\n4      16514113       A history of Arts                    h\n5         33930  How Google people work                    z\n6         50123         Learning French                    r\n7            76               Robbin CV                    y\n8            82               Data base                    w\n9     385906526             About Korea                    b\n10       801801      How to read a book                    w\n11      3540024            Palm reading                    y\n12           80           Welcome to NY                    h\n13         3830            Do not panic                    k\n14       651512       How to write a CV                    f", "gold_answer": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]], "gold_sql": "SELECT document_id ,  document_name ,  document_description FROM Documents", "gold_py": null}}
{"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "query_toks": ["SELECT", "template_id", "FROM", "Templates", "WHERE", "template_type_code", "=", "``", "PP", "''", "OR", "template_type_code", "=", "``", "PPT", "''"], "query_toks_no_value": ["select", "template_id", "from", "templates", "where", "template_type_code", "=", "value", "or", "template_type_code", "=", "value"], "question": "What are the ids of templates with template type code PP or PPT?", "question_toks": ["What", "are", "the", "ids", "of", "templates", "with", "template", "type", "code", "PP", "or", "PPT", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"PP\"", null], "or", [false, 2, [0, [0, 5, false], null], "\"PPT\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Ref_Template_Types": ["Template_Type_Code", "Template_Type_Description"], "Templates": ["Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details"], "Documents": ["Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details"], "Paragraphs": ["Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "answer": [[0], [1], [6], [7], [10], [18], [22], [24], [25]], "results": {"generated_sql": "SELECT T1.template_id FROM templates AS T1 JOIN ref_template_types AS T2 ON T1.template_type_code  =  T2.template_type_code WHERE T2.template_type_code  IN  ('PP',  'PPT')", "generated_py": "t1 = pd.merge(Templates, Ref_Template_Types, on='template_type_code'); t2 = t1[t1['template_type_description'].isin(['PP', 'PPT'])]; answer = t2['template_id'].unique()", "sql_exec_result": "[(0,), (1,), (18,), (22,), (24,), (25,), (6,), (7,), (10,)]", "py_exec_result": "[]", "gold_answer": [[0], [1], [6], [7], [10], [18], [22], [24], [25]], "gold_sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "gold_py": null}}
{"db_id": "course_teach", "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "query_toks": ["SELECT", "T3.Name", ",", "T2.Course", "FROM", "course_arrange", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.Course_ID", "=", "T2.Course_ID", "JOIN", "teacher", "AS", "T3", "ON", "T1.Teacher_ID", "=", "T3.Teacher_ID", "ORDER", "BY", "T3.Name"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "course", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "join", "teacher", "as", "t3", "on", "t1", ".", "teacher_id", "=", "t3", ".", "teacher_id", "order", "by", "t3", ".", "name"], "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.", "question_toks": ["Show", "names", "of", "teachers", "and", "the", "courses", "they", "are", "arranged", "to", "teach", "in", "ascending", "alphabetical", "order", "of", "the", "teacher", "'s", "name", "."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 9, false], null], [0, 4, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 5, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"course": ["Course_ID", "Staring_Date", "Course"], "teacher": ["Teacher_ID", "Name", "Age", "Hometown"], "course_arrange": ["Course_ID", "Teacher_ID", "Grade"]}, "answer": [["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Gustaaf Deloor", "Science"], ["Kearsley Brown", "Math"], ["Lucy Wong", "Music"], ["Vicente Carretero", "Math"]], "results": {"generated_sql": "SELECT T1.name ,  T2.course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN course AS T3 ON T2.course_id  =  T3.course_id ORDER BY T1.name", "generated_py": "t1 = pd.merge(course_arrange, teacher, on='teacher_id'); t2 = pd.merge(t1, course, on='course_id'); answer = t2[['name', 'course']].sort_values('name')", "sql_exec_result": "None", "py_exec_result": "                name   course\n3        Anne Walker  History\n4        Anne Walker    Bible\n2     Gustaaf Deloor  Science\n0     Kearsley Brown     Math\n5          Lucy Wong    Music\n1  Vicente Carretero     Math", "gold_answer": [["Anne Walker", "History"], ["Anne Walker", "Bible"], ["Gustaaf Deloor", "Science"], ["Kearsley Brown", "Math"], ["Lucy Wong", "Music"], ["Vicente Carretero", "Math"]], "gold_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "gold_py": null}}
{"db_id": "tvshow", "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "query_toks": ["SELECT", "T1.series_name", "FROM", "TV_Channel", "AS", "T1", "JOIN", "Cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.Title", "=", "``", "The", "Rise", "of", "the", "Blue", "Beetle", "!", "``", ";"], "query_toks_no_value": ["select", "t1", ".", "series_name", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "title", "=", "value"], "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "question_toks": ["What", "is", "the", "series", "name", "of", "the", "TV", "Channel", "that", "shows", "the", "cartoon", "``", "The", "Rise", "of", "the", "Blue", "Beetle", "''", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"The Rise of the Blue Beetle!\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"TV_Channel": ["id", "series_name", "Country", "Language", "Content", "Pixel_aspect_ratio_PAR", "Hight_definition_TV", "Pay_per_view_PPV", "Package_Option"], "TV_series": ["id", "Episode", "Air_Date", "Rating", "Share", "18_49_Rating_Share", "Viewers_m", "Weekly_Rank", "Channel"], "Cartoon": ["id", "Title", "Directed_by", "Written_by", "Original_air_date", "Production_code", "Channel"]}, "answer": [["Sky Radio"]], "results": {"generated_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id  =  T2.channel JOIN Cartoon AS T3 ON T2.id  =  T3.id WHERE T3.title  =  'The Rise of the Blue Beetle'", "generated_py": "t1 = pd.merge(TV_series, Cartoon, on='id'); t2 = pd.merge(t1, TV_Channel, on='channel'); answer = t2[t2['title'] == 'The Rise of the Blue Beetle']['series_name']", "sql_exec_result": "[]", "py_exec_result": "None", "gold_answer": [["Sky Radio"]], "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "gold_py": null}}
{"db_id": "car_1", "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "query_toks": ["SELECT", "T2.Make", ",", "T1.Year", "FROM", "CARS_DATA", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.Id", "=", "T2.MakeId", "WHERE", "T1.Year", "=", "(", "SELECT", "min", "(", "YEAR", ")", "FROM", "CARS_DATA", ")", ";"], "query_toks_no_value": ["select", "t2", ".", "make", ",", "t1", ".", "year", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "makeid", "where", "t1", ".", "year", "=", "(", "select", "min", "(", "year", ")", "from", "cars_data", ")"], "question": "What is the maker of the carr produced in the earliest year and what year was it?", "question_toks": ["What", "is", "the", "maker", "of", "the", "carr", "produced", "in", "the", "earliest", "year", "and", "what", "year", "was", "it", "?"], "sql": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 23, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[2, [0, [0, 23, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [["chevrolet chevelle malibu", 1970], ["buick skylark 320", 1970], ["plymouth satellite", 1970], ["amc rebel sst", 1970], ["ford torino", 1970], ["ford galaxie 500", 1970], ["chevrolet impala", 1970], ["plymouth fury iii", 1970], ["pontiac catalina", 1970], ["amc ambassador dpl", 1970], ["citroen ds-21 pallas", 1970], ["chevrolet chevelle concours (sw)", 1970], ["ford torino (sw)", 1970], ["plymouth satellite (sw)", 1970], ["amc rebel sst (sw)", 1970], ["dodge challenger se", 1970], ["plymouth cuda 340", 1970], ["ford mustang boss 302", 1970], ["chevrolet monte carlo", 1970], ["buick estate wagon (sw)", 1970], ["toyota corona mark ii", 1970], ["plymouth duster", 1970], ["amc hornet", 1970], ["ford maverick", 1970], ["datsun pl510", 1970], ["volkswagen 1131 deluxe sedan", 1970], ["peugeot 504", 1970], ["audi 100 ls", 1970], ["saab 99e", 1970], ["bmw 2002", 1970], ["amc gremlin", 1970], ["ford f250", 1970], ["chevy c20", 1970], ["dodge d200", 1970], ["hi 1200d", 1970]], "results": {"generated_sql": "SELECT T1.maker ,  T1.year FROM car_names AS T1 JOIN cars_data AS T2 ON T1.makeid  =  T2.id WHERE T2.year  =  (SELECT MIN(T3.year) FROM car_names AS T3 JOIN cars_data AS T4 ON T3.makeid  =  T4.id)", "generated_py": "t1 = pd.merge(car_names, model_list, on='model'); t2 = pd.merge(t1, car_makers, on='maker'); t3 = pd.merge(t2, cars_data, on='model'); t4 = pd.merge(t3, countries, on='country'); t5 = pd.merge(t4, continents, on='continent'); answer = t5[['maker', 'year']].drop_duplicates().sort_values('year').head(1)", "sql_exec_result": "None", "py_exec_result": "None", "gold_answer": [["chevrolet chevelle malibu", 1970], ["buick skylark 320", 1970], ["plymouth satellite", 1970], ["amc rebel sst", 1970], ["ford torino", 1970], ["ford galaxie 500", 1970], ["chevrolet impala", 1970], ["plymouth fury iii", 1970], ["pontiac catalina", 1970], ["amc ambassador dpl", 1970], ["citroen ds-21 pallas", 1970], ["chevrolet chevelle concours (sw)", 1970], ["ford torino (sw)", 1970], ["plymouth satellite (sw)", 1970], ["amc rebel sst (sw)", 1970], ["dodge challenger se", 1970], ["plymouth cuda 340", 1970], ["ford mustang boss 302", 1970], ["chevrolet monte carlo", 1970], ["buick estate wagon (sw)", 1970], ["toyota corona mark ii", 1970], ["plymouth duster", 1970], ["amc hornet", 1970], ["ford maverick", 1970], ["datsun pl510", 1970], ["volkswagen 1131 deluxe sedan", 1970], ["peugeot 504", 1970], ["audi 100 ls", 1970], ["saab 99e", 1970], ["bmw 2002", 1970], ["amc gremlin", 1970], ["ford f250", 1970], ["chevy c20", 1970], ["dodge d200", 1970], ["hi 1200d", 1970]], "gold_sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "gold_py": null}}
{"db_id": "student_transcripts_tracking", "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Departments", "AS", "T1", "JOIN", "Degree_Programs", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "WHERE", "T1.department_name", "=", "'engineer", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "departments", "as", "t1", "join", "degree_programs", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "where", "t1", ".", "department_name", "=", "value"], "question": "How many degrees does the engineering department have?", "question_toks": ["How", "many", "degrees", "does", "the", "engineering", "department", "have", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 14, false], null], [0, 19, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 15, false], null], "\"engineer\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details"], "Courses": ["course_id", "course_name", "course_description", "other_details"], "Departments": ["department_id", "department_name", "department_description", "other_details"], "Degree_Programs": ["degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details"], "Sections": ["section_id", "course_id", "section_name", "section_description", "other_details"], "Semesters": ["semester_id", "semester_name", "semester_description", "other_details"], "Students": ["student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details"], "Student_Enrolment": ["student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details"], "Student_Enrolment_Courses": ["student_course_id", "course_id", "student_enrolment_id"], "Transcripts": ["transcript_id", "transcript_date", "other_details"], "Transcript_Contents": ["student_course_id", "transcript_id"]}, "answer": [[0]], "results": {"generated_sql": "SELECT count(*) FROM degree_programs WHERE department_id  =  'engineering'", "generated_py": "answer = Degree_Programs[Degree_Programs['department_id'] == 'engineering'].shape[0]", "sql_exec_result": "[(0,)]", "py_exec_result": "0", "gold_answer": [[0]], "gold_sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "gold_py": null}}
{"db_id": "car_1", "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "CARS_DATA", "WHERE", "Accelerate", ">", "(", "SELECT", "Accelerate", "FROM", "CARS_DATA", "ORDER", "BY", "Horsepower", "DESC", "LIMIT", "1", ")", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "accelerate", ">", "(", "select", "accelerate", "from", "cars_data", "order", "by", "horsepower", "desc", "limit", "value", ")"], "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?", "question_toks": ["What", "is", "the", "number", "of", "cars", "with", "a", "greater", "accelerate", "than", "the", "one", "with", "the", "most", "horsepower", "?"], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 22, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 22, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [[39]], "results": {"generated_sql": "SELECT count(*) FROM cars_data WHERE accelerate  >  (SELECT MAX(accelerate) FROM cars_data)", "generated_py": "t1 = pd.merge(cars_data, car_names, on='make_id'); t2 = pd.merge(t1, model_list, on='model'); t3 = pd.merge(t2, car_makers, on='maker'); t4 = pd.merge(t3, countries, on='country'); t5 = pd.merge(t4, continents, on='contid'); answer = t5[t5['accelerate'] > t5['horsepower']].shape[0]", "sql_exec_result": "[(0,)]", "py_exec_result": "None", "gold_answer": [[39]], "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "gold_py": null}}
{"db_id": "student_transcripts_tracking", "query": "SELECT line_1 ,  line_2 FROM addresses", "query_toks": ["SELECT", "line_1", ",", "line_2", "FROM", "addresses"], "query_toks_no_value": ["select", "line_1", ",", "line_2", "from", "addresses"], "question": "What is the first and second line for all addresses?", "question_toks": ["What", "is", "the", "first", "and", "second", "line", "for", "all", "addresses", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details"], "Courses": ["course_id", "course_name", "course_description", "other_details"], "Departments": ["department_id", "department_name", "department_description", "other_details"], "Degree_Programs": ["degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details"], "Sections": ["section_id", "course_id", "section_name", "section_description", "other_details"], "Semesters": ["semester_id", "semester_name", "semester_description", "other_details"], "Students": ["student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details"], "Student_Enrolment": ["student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details"], "Student_Enrolment_Courses": ["student_course_id", "course_id", "student_enrolment_id"], "Transcripts": ["transcript_id", "transcript_date", "other_details"], "Transcript_Contents": ["student_course_id", "transcript_id"]}, "answer": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]], "results": {"generated_sql": "SELECT T1.line_1 ,  T1.line_2 FROM addresses AS T1", "generated_py": "answer = Addresses[['line_1', 'line_2']].drop_duplicates()", "sql_exec_result": "[('2294 Grant Square Apt. 235', 'Apt. 370'), ('3999 Aufderhar Ways Suite 593', 'Apt. 388'), ('67942 Carlotta Ferry Apt. 686', 'Apt. 583'), ('0144 Lamar Plaza Apt. 346', 'Suite 703'), ('858 Peggie Bypass Suite 212', 'Apt. 335'), ('16998 Mraz Lodge', 'Apt. 689'), ('193 Marlin Brook', 'Apt. 406'), ('202 Hessel Views Apt. 468', 'Apt. 305'), ('0643 Muller Vista', 'Suite 383'), ('7081 Eda Center', 'Suite 830'), ('9283 Schulist Falls Apt. 037', 'Suite 239'), ('979 Haag Shores Suite 656', 'Apt. 468'), ('492 Wilkinson Route', 'Suite 865'), ('186 Evan Motorway Apt. 409', 'Suite 079'), ('74046 Metz Walk Apt. 113', 'Suite 674')]", "py_exec_result": "                           line_1     line_2\n0      2294 Grant Square Apt. 235   Apt. 370\n1   3999 Aufderhar Ways Suite 593   Apt. 388\n2   67942 Carlotta Ferry Apt. 686   Apt. 583\n3       0144 Lamar Plaza Apt. 346  Suite 703\n4     858 Peggie Bypass Suite 212   Apt. 335\n5                16998 Mraz Lodge   Apt. 689\n6                193 Marlin Brook   Apt. 406\n7       202 Hessel Views Apt. 468   Apt. 305\n8               0643 Muller Vista  Suite 383\n9                 7081 Eda Center  Suite 830\n10   9283 Schulist Falls Apt. 037  Suite 239\n11      979 Haag Shores Suite 656   Apt. 468\n12            492 Wilkinson Route  Suite 865\n13     186 Evan Motorway Apt. 409  Suite 079\n14       74046 Metz Walk Apt. 113  Suite 674", "gold_answer": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]], "gold_sql": "SELECT line_1 ,  line_2 FROM addresses", "gold_py": null}}
{"db_id": "dog_kennels", "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "query_toks": ["SELECT", "T1.first_name", ",", "T2.name", "FROM", "Owners", "AS", "T1", "JOIN", "Dogs", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t2", ".", "name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id"], "question": "What are each owner's first name and their dogs's name?", "question_toks": ["What", "are", "each", "owner", "'s", "first", "name", "and", "their", "dogs", "'s", "name", "?"], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 25, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Breeds": ["breed_code", "breed_name"], "Charges": ["charge_id", "charge_type", "charge_amount"], "Sizes": ["size_code", "size_description"], "Treatment_Types": ["treatment_type_code", "treatment_type_description"], "Owners": ["owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number"], "Dogs": ["dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed"], "Professionals": ["professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number"], "Treatments": ["treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "answer": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]], "results": {"generated_sql": "SELECT T1.first_name ,  T2.name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id", "generated_py": "t1 = pd.merge(Owners, Dogs, on='owner_id'); t2 = pd.merge(t1, Breeds, on='breed_code'); answer = t2[['first_name', 'name']]", "sql_exec_result": "[('Jaclyn', 'Kacey'), ('Gay', 'Hipolito'), ('Nora', 'Mavis'), ('Rachelle', 'Houston'), ('Emelie', 'Jeffrey'), ('Johann', 'Merritt'), ('Jaclyn', 'Narciso'), ('Rachelle', 'George'), ('Melisa', 'Bessie'), ('Kade', 'Troy'), ('Cindy', 'Betty'), ('Orlando', 'Holden'), ('Rolando', 'Jesus'), ('Rachelle', 'Lyric'), ('Lorenz', 'Evangeline')]", "py_exec_result": "   first_name        name\n0        Nora       Mavis\n1      Melisa      Bessie\n2      Jaclyn     Narciso\n3      Emelie     Jeffrey\n4      Lorenz  Evangeline\n5         Gay    Hipolito\n6       Cindy       Betty\n7      Jaclyn       Kacey\n8    Rachelle     Houston\n9    Rachelle      George\n10   Rachelle       Lyric\n11     Johann     Merritt\n12       Kade        Troy\n13    Rolando       Jesus\n14    Orlando      Holden", "gold_answer": [["Jaclyn", "Kacey"], ["Gay", "Hipolito"], ["Nora", "Mavis"], ["Rachelle", "Houston"], ["Emelie", "Jeffrey"], ["Johann", "Merritt"], ["Jaclyn", "Narciso"], ["Rachelle", "George"], ["Melisa", "Bessie"], ["Kade", "Troy"], ["Cindy", "Betty"], ["Orlando", "Holden"], ["Rolando", "Jesus"], ["Rachelle", "Lyric"], ["Lorenz", "Evangeline"]], "gold_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "gold_py": null}}
{"db_id": "orchestra", "query": "SELECT count(*) FROM conductor", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "conductor"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "conductor"], "question": "Count the number of conductors.", "question_toks": ["Count", "the", "number", "of", "conductors", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"conductor": ["Conductor_ID", "Name", "Age", "Nationality", "Year_of_Work"], "orchestra": ["Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format"], "performance": ["Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share"], "show": ["Show_ID", "Performance_ID", "If_first_show", "Result", "Attendance"]}, "answer": [[12]], "results": {"generated_sql": "SELECT count(*) FROM conductor", "generated_py": "answer = conductor.shape[0]", "sql_exec_result": "[(12,)]", "py_exec_result": "12", "gold_answer": [[12]], "gold_sql": "SELECT count(*) FROM conductor", "gold_py": null}}
{"db_id": "flight_2", "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.City", "FROM", "AIRPORTS", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.AirportCode", "=", "T2.SourceAirport", "GROUP", "BY", "T1.City", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "city", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "airportcode", "=", "t2", ".", "sourceairport", "group", "by", "t1", ".", "city", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which city has most number of departing flights?", "question_toks": ["Which", "city", "has", "most", "number", "of", "departing", "flights", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 12, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"airlines": ["uid", "Airline", "Abbreviation", "Country"], "airports": ["City", "AirportCode", "AirportName", "Country", "CountryAbbrev"], "flights": ["Airline", "FlightNo", "SourceAirport", "DestAirport"]}, "answer": [], "results": {"generated_sql": "SELECT City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY City ORDER BY count(*) DESC LIMIT 1", "generated_py": "t1 = pd.merge(flights, airports, left_on='source_airport', right_on='airport_code'); t2 = t1.groupby('city').size().rename('count').reset_index(); answer = t2[t2['count'] == t2['count'].max()]['city'].values[0]", "sql_exec_result": "[]", "py_exec_result": "None", "gold_answer": [], "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "gold_py": null}}
{"db_id": "employee_hire_evaluation", "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t2.name", "FROM", "hiring", "AS", "t1", "JOIN", "shop", "AS", "t2", "ON", "t1.shop_id", "=", "t2.shop_id", "GROUP", "BY", "t1.shop_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1", ".", "shop_id", "=", "t2", ".", "shop_id", "group", "by", "t1", ".", "shop_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the shop that is hiring the largest number of employees?", "question_toks": ["What", "is", "the", "name", "of", "the", "shop", "that", "is", "hiring", "the", "largest", "number", "of", "employees", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 5, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 11, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"employee": ["Employee_ID", "Name", "Age", "City"], "shop": ["Shop_ID", "Name", "Location", "District", "Number_products", "Manager_name"], "hiring": ["Shop_ID", "Employee_ID", "Start_from", "Is_full_time"], "evaluation": ["Employee_ID", "Year_awarded", "Bonus"]}, "answer": [["FC Haka"]], "results": {"generated_sql": "SELECT T1.name FROM shop AS T1 JOIN hiring AS T2 ON T1.shop_id  =  T2.shop_id JOIN employee AS T3 ON T2.employee_id  =  T3.employee_id GROUP BY T1.shop_id ORDER BY count(*)  DESC LIMIT 1", "generated_py": "t1 = pd.merge(hiring, employee, on='employee_id'); t2 = pd.merge(t1, shop, on='shop_id'); answer = t2.groupby('name').size().rename('count').sort_values(ascending = False).index[0]", "sql_exec_result": "[('FC Haka',)]", "py_exec_result": "None", "gold_answer": [["FC Haka"]], "gold_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "gold_py": null}}
{"db_id": "car_1", "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "query_toks": ["select", "min", "(", "weight", ")", "from", "cars_data", "where", "cylinders", "=", "8", "and", "year", "=", "1974"], "query_toks_no_value": ["select", "min", "(", "weight", ")", "from", "cars_data", "where", "cylinders", "=", "value", "and", "year", "=", "value"], "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "question_toks": ["What", "is", "the", "minimum", "weight", "of", "the", "car", "with", "8", "cylinders", "produced", "in", "1974", "?"], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[2, [0, [0, 21, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 8.0, null], "and", [false, 2, [0, [0, 23, false], null], 1974.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [[4141]], "results": {"generated_sql": "SELECT MIN(weight) FROM cars_data WHERE cylinders  =  8 AND year  =  1974", "generated_py": "t1 = pd.merge(model_list, car_names, on='model'); t2 = pd.merge(t1, cars_data, on='model'); t3 = t2[(t2['cylinders'] == 8) & (t2['year'] == 1974)]; answer = t3['weight'].min()", "sql_exec_result": "[(4141,)]", "py_exec_result": "None", "gold_answer": [[4141]], "gold_sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "gold_py": null}}
{"db_id": "world_1", "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "query_toks": ["SELECT", "Name", "FROM", "country", "WHERE", "continent", "=", "``", "Europe", "''", "AND", "Population", "=", "``", "80000", "''"], "query_toks_no_value": ["select", "name", "from", "country", "where", "continent", "=", "value", "and", "population", "=", "value"], "question": "Give the names of countries that are in Europe and have a population equal to 80000.", "question_toks": ["Give", "the", "names", "of", "countries", "that", "are", "in", "Europe", "and", "have", "a", "population", "equal", "to", "80000", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Europe\"", null], "and", [false, 2, [0, [0, 14, false], null], "\"80000\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"city": ["ID", "Name", "CountryCode", "District", "Population"], "sqlite_sequence": ["name", "seq"], "country": ["Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2"], "countrylanguage": ["CountryCode", "Language", "IsOfficial", "Percentage"]}, "answer": [], "results": {"generated_sql": "SELECT name FROM country WHERE continent  =  'Europe' AND population  =  80000", "generated_py": "t1 = pd.merge(country, countrylanguage, on='code'); t2 = pd.merge(t1, city, on='code'); t3 = t2[t2['population'] == 80000]; t4 = t3[t3['continent'] == 'Europe']; answer = t4['name'].unique()", "sql_exec_result": "[]", "py_exec_result": "None", "gold_answer": [], "gold_sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "gold_py": null}}
{"db_id": "concert_singer", "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "query_toks": ["SELECT", "avg", "(", "age", ")", ",", "min", "(", "age", ")", ",", "max", "(", "age", ")", "FROM", "singer", "WHERE", "country", "=", "'France", "'"], "query_toks_no_value": ["select", "avg", "(", "age", ")", ",", "min", "(", "age", ")", ",", "max", "(", "age", ")", "from", "singer", "where", "country", "=", "value"], "question": "What is the average, minimum, and maximum age of all singers from France?", "question_toks": ["What", "is", "the", "average", ",", "minimum", ",", "and", "maximum", "age", "of", "all", "singers", "from", "France", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 13, false], null]], [2, [0, [0, 13, false], null]], [1, [0, [0, 13, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"France\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"stadium": ["Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average"], "singer": ["Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male"], "concert": ["concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year"], "singer_in_concert": ["concert_ID", "Singer_ID"]}, "answer": [[34.5, 25, 43]], "results": {"generated_sql": "SELECT avg(T1.age) ,  min(T1.age) ,  max(T1.age) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T2.concert_id  =  T3.concert_id WHERE T1.country  =  'France'", "generated_py": "t1 = pd.merge(singer, singer_in_concert, on='singer_id'); t2 = pd.merge(t1, concert, on='concert_id'); t3 = t2[t2['country'] == 'France']; answer = t3[['age', 'age'].min(), t3['age'].max()]", "sql_exec_result": "[(33.0, 25, 43)]", "py_exec_result": "None", "gold_answer": [[34.5, 25, 43]], "gold_sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "gold_py": null}}
{"db_id": "dog_kennels", "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "query_toks": ["SELECT", "first_name", ",", "last_name", ",", "email_address", "FROM", "Owners", "WHERE", "state", "LIKE", "'", "%", "North", "%", "'"], "query_toks_no_value": ["select", "first_name", ",", "last_name", ",", "email_address", "from", "owners", "where", "state", "like", "value"], "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "question_toks": ["Return", "the", "first", "name", ",", "last", "name", "and", "email", "of", "the", "owners", "living", "in", "a", "state", "whose", "name", "contains", "the", "substring", "'North", "'", "."], "sql": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]], [0, [0, [0, 17, false], null]]]], "where": [[false, 9, [0, [0, 15, false], null], "\"%North%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Breeds": ["breed_code", "breed_name"], "Charges": ["charge_id", "charge_type", "charge_amount"], "Sizes": ["size_code", "size_description"], "Treatment_Types": ["treatment_type_code", "treatment_type_description"], "Owners": ["owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number"], "Dogs": ["dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed"], "Professionals": ["professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number"], "Treatments": ["treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "answer": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]], "results": {"generated_sql": "SELECT first_name ,  last_name ,  email_address FROM owners WHERE state  LIKE  '%North%'", "generated_py": "t1 = pd.merge(Owners, Dogs, on='owner_id'); t2 = pd.merge(t1, Breeds, on='breed_code'); t3 = pd.merge(t2, Sizes, on='size_code'); t4 = pd.merge(t3, Professionals, on='professional_id'); t5 = pd.merge(t4, Treatments, on='dog_id'); t6 = t5[t5['state'].str.contains('North')]; answer = t6[['first_name', 'last_name', 'email_address']]", "sql_exec_result": "[('Johann', 'Fisher', 'zboncak.madonna@example.net'), ('Cindy', 'Schmitt', 'wpfeffer@example.net')]", "py_exec_result": "None", "gold_answer": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]], "gold_sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "gold_py": null}}
{"db_id": "poker_player", "query": "SELECT avg(Earnings) FROM poker_player", "query_toks": ["SELECT", "avg", "(", "Earnings", ")", "FROM", "poker_player"], "query_toks_no_value": ["select", "avg", "(", "earnings", ")", "from", "poker_player"], "question": "Return the average earnings across all poker players.", "question_toks": ["Return", "the", "average", "earnings", "across", "all", "poker", "players", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 6, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"poker_player": ["Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings"], "people": ["People_ID", "Nationality", "Name", "Birth_Date", "Height"]}, "answer": [[301891.2]], "results": {"generated_sql": "SELECT avg(earnings) FROM poker_player", "generated_py": "answer = poker_player['earnings'].mean()", "sql_exec_result": "[(301891.2,)]", "py_exec_result": "301891.2", "gold_answer": [[301891.2]], "gold_sql": "SELECT avg(Earnings) FROM poker_player", "gold_py": null}}
{"db_id": "flight_2", "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "T1.Abbreviation", ",", "T1.Country", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "GROUP", "BY", "T1.Airline", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "abbreviation", ",", "t1", ".", "country", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "group", "by", "t1", ".", "airline", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "Find the abbreviation and country of the airline that has fewest number of flights?", "question_toks": ["Find", "the", "abbreviation", "and", "country", "of", "the", "airline", "that", "has", "fewest", "number", "of", "flights", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"airlines": ["uid", "Airline", "Abbreviation", "Country"], "airports": ["City", "AirportCode", "AirportName", "Country", "CountryAbbrev"], "flights": ["Airline", "FlightNo", "SourceAirport", "DestAirport"]}, "answer": [["AirTran", "USA"]], "results": {"generated_sql": "SELECT T1.abbreviation ,  T1.country FROM airlines AS T1 JOIN (SELECT T2.Airline ,  count(*) AS num_flights FROM flights AS T2 GROUP BY T2.Airline) AS T3 ON T1.uid  =  T3.Airline ORDER BY T3.num_flights", "generated_py": "t1 = pd.merge(flights, airlines, on='airline'); t2 = t1.groupby('abbreviation').size().rename('count').reset_index(); answer = t2[t2['count'] == t2['count'].min()][['abbreviation', 'country']]", "sql_exec_result": "[('UAL', 'USA'), ('USAir', 'USA'), ('Delta', 'USA'), ('Southwest', 'USA'), ('American', 'USA'), ('Northwest', 'USA'), ('Continental', 'USA'), ('JetBlue', 'USA'), ('Frontier', 'USA'), ('AirTran', 'USA'), ('Allegiant', 'USA'), ('Virgin', 'USA')]", "py_exec_result": "None", "gold_answer": [["AirTran", "USA"]], "gold_sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "gold_py": null}}
{"db_id": "singer", "query": "select citizenship from singer group by citizenship order by count(*) desc limit 1", "query_toks": ["select", "citizenship", "from", "singer", "group", "by", "citizenship", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "query_toks_no_value": ["select", "citizenship", "from", "singer", "group", "by", "citizenship", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most common singer citizenship ?", "question_toks": ["What", "is", "the", "most", "common", "singer", "citizenship", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"singer": ["Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship"], "song": ["Song_ID", "Title", "Singer_ID", "Sales", "Highest_Position"]}, "answer": [["United States"]], "results": {"generated_sql": "SELECT T1.citizenship ,  count(*) FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.citizenship ORDER BY count(*) DESC LIMIT 1", "generated_py": "t1 = pd.merge(singer, song, on='singer_id'); t2 = t1.groupby('citizenship').size().rename('count').reset_index(); answer = t2.sort_values('count', ascending = False).iloc[0]['citizenship']", "sql_exec_result": "[('United States', 3)]", "py_exec_result": "United States", "gold_answer": [["United States"]], "gold_sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1", "gold_py": null}}
{"db_id": "cre_Doc_Template_Mgt", "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "query_toks": ["SELECT", "T2.document_name", "FROM", "Templates", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.template_id", "=", "T2.template_id", "WHERE", "T1.template_type_code", "=", "``", "BK", "''"], "query_toks_no_value": ["select", "t2", ".", "document_name", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "template_id", "=", "t2", ".", "template_id", "where", "t1", ".", "template_type_code", "=", "value"], "question": "Show all document names using templates with template type code BK.", "question_toks": ["Show", "all", "document", "names", "using", "templates", "with", "template", "type", "code", "BK", "."], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"BK\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Ref_Template_Types": ["Template_Type_Code", "Template_Type_Description"], "Templates": ["Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details"], "Documents": ["Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details"], "Paragraphs": ["Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "answer": [["Robbin CV"], ["Data base"], ["How to read a book"], ["Palm reading"], ["About Korea"]], "results": {"generated_sql": "SELECT DISTINCT T1.document_name FROM documents AS T1 JOIN templates AS T2 ON T1.template_id  =  T2.template_id JOIN ref_template_types AS T3 ON T2.template_type_code  =  T3.template_type_code WHERE T3.template_type_code  =  'BK'", "generated_py": "t1 = pd.merge(Templates, Ref_Template_Types, on='template_type_code'); t2 = pd.merge(t1, Documents, on='template_id'); answer = t2[t2['template_type_code'] == 'BK']['document_name']", "sql_exec_result": "[('Robbin CV',), ('Data base',), ('How to read a book',), ('Palm reading',), ('About Korea',)]", "py_exec_result": "4    How to read a book\n5          Palm reading\n6             Data base\n7           About Korea\n8             Robbin CV\nName: document_name, dtype: object", "gold_answer": [["Robbin CV"], ["Data base"], ["How to read a book"], ["Palm reading"], ["About Korea"]], "gold_sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "gold_py": null}}
{"db_id": "orchestra", "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "query_toks": ["SELECT", "T1.Name", ",", "T2.Orchestra", "FROM", "conductor", "AS", "T1", "JOIN", "orchestra", "AS", "T2", "ON", "T1.Conductor_ID", "=", "T2.Conductor_ID"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "orchestra", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1", ".", "conductor_id", "=", "t2", ".", "conductor_id"], "question": "Show the names of conductors and the orchestras they have conducted.", "question_toks": ["Show", "the", "names", "of", "conductors", "and", "the", "orchestras", "they", "have", "conducted", "."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"conductor": ["Conductor_ID", "Name", "Age", "Nationality", "Year_of_Work"], "orchestra": ["Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format"], "performance": ["Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share"], "show": ["Show_ID", "Performance_ID", "If_first_show", "Result", "Attendance"]}, "answer": [["Antal Dor\u00e1ti", "London Symphony Orchestra"], ["Igor Stravinsky", "Columbia Symphony Orchestra"], ["Colin Davis", "Royal Concertgebouw Orchestra"], ["Paul Jorgensen", "Royal Danish Orchestra"], ["Antal Brown", "Detroit Symphony Orchestra"], ["Charles Dutoit", "Montreal Symphony Orchestra"], ["Gerard Schwarz", "Seattle Symphony Orchestra"], ["Pierre Boulez", "Chicago Symphony Orchestra"], ["Valeri Gergiev", "Kirov Orchestra"], ["Robert Craft", "Philharmonia Orchestra"], ["Seiji Ozawa", "Orchestre de Paris"], ["Michael Tilson Thomas", "San Francisco Symphony Orchestra"]], "results": {"generated_sql": "SELECT T1.name ,  T2.orchestra FROM conductor AS T1 JOIN performance AS T2 ON T1.conductor_id  =  T2.conductor_id", "generated_py": "t1 = pd.merge(orchestra, performance, on='orchestra_id'); t2 = pd.merge(t1, show, on='performance_id'); t3 = pd.merge(t2, conductor, on='conductor_id'); answer = t3[['conductor_id', 'name', 'orchestra_id', 'orchestra']]", "sql_exec_result": "None", "py_exec_result": "   conductor_id             name  orchestra_id                      orchestra\n0             1     Antal Dor\u00e1ti             1      London Symphony Orchestra\n1             2  Igor Stravinsky             2    Columbia Symphony Orchestra\n2             3      Colin Davis             3  Royal Concertgebouw Orchestra\n3             4   Paul Jorgensen             4         Royal Danish Orchestra\n4             5      Antal Brown             5     Detroit Symphony Orchestra", "gold_answer": [["Antal Dor\u00e1ti", "London Symphony Orchestra"], ["Igor Stravinsky", "Columbia Symphony Orchestra"], ["Colin Davis", "Royal Concertgebouw Orchestra"], ["Paul Jorgensen", "Royal Danish Orchestra"], ["Antal Brown", "Detroit Symphony Orchestra"], ["Charles Dutoit", "Montreal Symphony Orchestra"], ["Gerard Schwarz", "Seattle Symphony Orchestra"], ["Pierre Boulez", "Chicago Symphony Orchestra"], ["Valeri Gergiev", "Kirov Orchestra"], ["Robert Craft", "Philharmonia Orchestra"], ["Seiji Ozawa", "Orchestre de Paris"], ["Michael Tilson Thomas", "San Francisco Symphony Orchestra"]], "gold_sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "gold_py": null}}
{"db_id": "world_1", "query": "select name from city where population between 160000 and 900000", "query_toks": ["select", "name", "from", "city", "where", "population", "between", "160000", "and", "900000"], "query_toks_no_value": ["select", "name", "from", "city", "where", "population", "between", "value", "and", "value"], "question": "Return the names of cities that have a population between 160000 and 900000 .", "question_toks": ["Return", "the", "names", "of", "cities", "that", "have", "a", "population", "between", "160000", "and", "900000", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 1, [0, [0, 5, false], null], 160000.0, 900000.0]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"city": ["ID", "Name", "CountryCode", "District", "Population"], "sqlite_sequence": ["name", "seq"], "country": ["Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2"], "countrylanguage": ["CountryCode", "Language", "IsOfficial", "Percentage"]}, "answer": [["Qandahar"], ["Herat"], ["Amsterdam"], ["Rotterdam"], ["Haag"], ["Utrecht"], ["Eindhoven"], ["Tilburg"], ["Groningen"], ["Breda"], ["Tirana"], ["Oran"], ["Constantine"], ["Annaba"], ["Batna"], ["S\u00e9tif"], ["Huambo"], ["Dubai"], ["Abu Dhabi"], ["Sharja"], ["al-Ayn"], ["Lomas de Zamora"], ["Quilmes"], ["Almirante Brown"], ["La Plata"], ["Mar del Plata"], ["San Miguel de Tucum\u00e1n"], ["Lan\u00fas"], ["Merlo"], ["General San Mart\u00edn"], ["Salta"], ["Moreno"], ["Santa F\u00e9"], ["Avellaneda"], ["Tres de Febrero"], ["Mor\u00f3n"], ["Florencio Varela"], ["San Isidro"], ["Tigre"], ["Malvinas Argentinas"], ["Vicente L\u00f3pez"], ["Berazategui"], ["Corrientes"], ["San Miguel"], ["Bah\u00eda Blanca"], ["Esteban Echeverr\u00eda"], ["Resistencia"], ["Jos\u00e9 C. Paz"], ["Paran\u00e1"], ["Godoy Cruz"], ["Posadas"], ["Guaymall\u00e9n"], ["Santiago del Estero"], ["San Salvador de Jujuy"], ["Hurlingham"], ["Neuqu\u00e9n"], ["Gjumri"], ["Vanadzor"], ["Canberra"], ["Gold Coast"], ["Newcastle"], ["Central Coast"], ["Wollongong"], ["G\u00e4nc\u00e4"], ["Sumqayit"], ["Nassau"], ["Khulna"], ["Rajshahi"], ["Narayanganj"], ["Rangpur"], ["Mymensingh"], ["Barisal"], ["Tungi"], ["Antwerpen"], ["Gent"], ["Charleroi"], ["Li\u00e8ge"], ["Cotonou"], ["Porto-Novo"], ["La Paz"], ["El Alto"], ["Cochabamba"], ["Oruro"], ["Sucre"], ["Sarajevo"], ["Gaborone"], ["S\u00e3o Gon\u00e7alo"], ["Nova Igua\u00e7u"], ["S\u00e3o Lu\u00eds"], ["Macei\u00f3"], ["Duque de Caxias"], ["S\u00e3o Bernardo do Campo"], ["Teresina"], ["Natal"], ["Osasco"], ["Campo Grande"], ["Santo Andr\u00e9"], ["Jo\u00e3o Pessoa"], ["Jaboat\u00e3o dos Guararapes"], ["Contagem"], ["S\u00e3o Jos\u00e9 dos Campos"], ["Uberl\u00e2ndia"], ["Feira de Santana"], ["Ribeir\u00e3o Preto"], ["Sorocaba"], ["Niter\u00f3i"], ["Cuiab\u00e1"], ["Juiz de Fora"], ["Aracaju"], ["S\u00e3o Jo\u00e3o de Meriti"], ["Londrina"], ["Joinville"], ["Belford Roxo"], ["Santos"], ["Ananindeua"], ["Campos dos Goytacazes"], ["Mau\u00e1"], ["Carapicu\u00edba"], ["Olinda"], ["Campina Grande"], ["S\u00e3o Jos\u00e9 do Rio Preto"], ["Caxias do Sul"], ["Moji das Cruzes"], ["Diadema"], ["Aparecida de Goi\u00e2nia"], ["Piracicaba"], ["Cariacica"], ["Vila Velha"], ["Pelotas"], ["Bauru"], ["Porto Velho"], ["Serra"], ["Betim"], ["Jund\u00eda\u00ed"], ["Canoas"], ["Franca"], ["S\u00e3o Vicente"], ["Maring\u00e1"], ["Montes Claros"], ["An\u00e1polis"], ["Florian\u00f3polis"], ["Petr\u00f3polis"], ["Itaquaquecetuba"], ["Vit\u00f3ria"], ["Ponta Grossa"], ["Rio Branco"], ["Foz do Igua\u00e7u"], ["Macap\u00e1"], ["Ilh\u00e9us"], ["Vit\u00f3ria da Conquista"], ["Uberaba"], ["Paulista"], ["Limeira"], ["Blumenau"], ["Caruaru"], ["Santar\u00e9m"], ["Volta Redonda"], ["Novo Hamburgo"], ["Caucaia"], ["Santa Maria"], ["Cascavel"], ["Guaruj\u00e1"], ["Ribeir\u00e3o das Neves"], ["Governador Valadares"], ["Taubat\u00e9"], ["Imperatriz"], ["Gravata\u00ed"], ["Embu"], ["Mossor\u00f3"], ["V\u00e1rzea Grande"], ["Petrolina"], ["Barueri"], ["Viam\u00e3o"], ["Ipatinga"], ["Juazeiro"], ["Juazeiro do Norte"], ["Tabo\u00e3o da Serra"], ["S\u00e3o Jos\u00e9 dos Pinhais"], ["Mag\u00e9"], ["Suzano"], ["S\u00e3o Leopoldo"], ["Mar\u00edlia"], ["S\u00e3o Carlos"], ["Sumar\u00e9"], ["Presidente Prudente"], ["Divin\u00f3polis"], ["Sete Lagoas"], ["Rio Grande"], ["Itabuna"], ["Jequi\u00e9"], ["Arapiraca"], ["Colombo"], ["Americana"], ["Alvorada"], ["Araraquara"], ["Itabora\u00ed"], ["Santa B\u00e1rbara d\u00b4Oeste"], ["Nova Friburgo"], ["Jacare\u00ed"], ["Ara\u00e7atuba"], ["Barra Mansa"], ["Praia Grande"], ["Marab\u00e1"], ["Crici\u00fama"], ["Boa Vista"], ["Passo Fundo"], ["Dourados"], ["Santa Luzia"], ["Rio Claro"], ["Maracana\u00fa"], ["Guarapuava"], ["Glasgow"], ["Liverpool"], ["Edinburgh"], ["Sheffield"], ["Manchester"], ["Leeds"], ["Bristol"], ["Cardiff"], ["Coventry"], ["Leicester"], ["Bradford"], ["Belfast"], ["Nottingham"], ["Kingston upon Hull"], ["Plymouth"], ["Stoke-on-Trent"], ["Wolverhampton"], ["Derby"], ["Swansea"], ["Southampton"], ["Aberdeen"], ["Northampton"], ["Dudley"], ["Portsmouth"], ["Newcastle upon Tyne"], ["Sunderland"], ["Luton"], ["Swindon"], ["Southend-on-Sea"], ["Walsall"], ["Bournemouth"], ["Plovdiv"], ["Varna"], ["Burgas"], ["Ruse"], ["Ouagadougou"], ["Bobo-Dioulasso"], ["Bujumbura"], ["Puente Alto"], ["Vi\u00f1a del Mar"], ["Valpara\u00edso"], ["Talcahuano"], ["Antofagasta"], ["San Bernardo"], ["Temuco"], ["Concepci\u00f3n"], ["Rancagua"], ["Arica"], ["Talca"], ["Chill\u00e1n"], ["Iquique"], ["San Jos\u00e9"], ["Djibouti"], ["Santiago de los Caballeros"], ["Cuenca"], ["Machala"], ["Santo Domingo de los Colorados"], ["Portoviejo"], ["Ambato"], ["Manta"], ["Shubra al-Khayma"], ["Port Said"], ["Suez"], ["al-Mahallat al-Kubra"], ["Tanta"], ["al-Mansura"], ["Luxor"], ["Asyut"], ["Bahtim"], ["Zagazig"], ["al-Faiyum"], ["Ismailia"], ["Kafr al-Dawwar"], ["Assuan"], ["Damanhur"], ["al-Minya"], ["Bani Suwayf"], ["Qina"], ["Sawhaj"], ["San Salvador"], ["Asmara"], ["Valencia"], ["Sevilla"], ["Zaragoza"], ["M\u00e1laga"], ["Bilbao"], ["Las Palmas de Gran Canaria"], ["Murcia"], ["Palma de Mallorca"], ["Valladolid"], ["C\u00f3rdoba"], ["Vigo"], ["Alicante [Alacant]"], ["Gij\u00f3n"], ["L\u00b4Hospitalet de Llobregat"], ["Granada"], ["A Coru\u00f1a (La Coru\u00f1a)"], ["Vitoria-Gasteiz"], ["Santa Cruz de Tenerife"], ["Badalona"], ["Oviedo"], ["M\u00f3stoles"], ["Elche [Elx]"], ["Sabadell"], ["Santander"], ["Jerez de la Frontera"], ["Pamplona [Iru\u00f1a]"], ["Donostia-San Sebasti\u00e1n"], ["Cartagena"], ["Legan\u00e9s"], ["Fuenlabrada"], ["Almer\u00eda"], ["Terrassa"], ["Alcal\u00e1 de Henares"], ["Burgos"], ["Johannesburg"], ["Port Elizabeth"], ["Pretoria"], ["Inanda"], ["Durban"], ["Vanderbijlpark"], ["Kempton Park"], ["Alberton"], ["Pinetown"], ["Pietermaritzburg"], ["Benoni"], ["Randburg"], ["Umlazi"], ["Bloemfontein"], ["Vereeniging"], ["Wonderboom"], ["Roodepoort"], ["Boksburg"], ["Klerksdorp"], ["Soshanguve"], ["Newcastle"], ["East London"], ["Welkom"], ["Kimberley"], ["Uitenhage"], ["Chatsworth"], ["Mdantsane"], ["Krugersdorp"], ["Botshabelo"], ["Brakpan"], ["Witbank"], ["Oberholzer"], ["Germiston"], ["Springs"], ["Dire Dawa"], ["Cebu"], ["Zamboanga"], ["Pasig"], ["Valenzuela"], ["Las Pi\u00f1as"], ["Antipolo"], ["Taguig"], ["Cagayan de Oro"], ["Para\u00f1aque"], ["Makati"], ["Bacolod"], ["General Santos"], ["Marikina"], ["Dasmari\u00f1as"], ["Muntinlupa"], ["Iloilo"], ["Pasay"], ["Malabon"], ["San Jos\u00e9 del Monte"], ["Bacoor"], ["Iligan"], ["Calamba"], ["Mandaluyong"], ["Butuan"], ["Angeles"], ["Tarlac"], ["Mandaue"], ["Baguio"], ["Batangas"], ["Cainta"], ["San Pedro"], ["Navotas"], ["Cabanatuan"], ["San Fernando"], ["Lipa"], ["Lapu-Lapu"], ["San Pablo"], ["Bi\u00f1an"], ["Taytay"], ["Lucena"], ["Imus"], ["Olongapo"], ["Binangonan"], ["Santa Rosa"], ["Tagum"], ["Tacloban"], ["Malolos"], ["Mabalacat"], ["Cotabato"], ["Meycauayan"], ["Puerto Princesa"], ["Libreville"], ["Kutaisi"], ["Kumasi"], ["Ciudad de Guatemala"], ["Mixco"], ["Bissau"], ["Georgetown"], ["Port-au-Prince"], ["Carrefour"], ["Delmas"], ["Tegucigalpa"], ["San Pedro Sula"], ["Malang"], ["Bandar Lampung"], ["Bekasi"], ["Padang"], ["Surakarta"], ["Banjarmasin"], ["Pekan Baru"], ["Denpasar"], ["Yogyakarta"], ["Pontianak"], ["Samarinda"], ["Jambi"], ["Depok"], ["Cimahi"], ["Balikpapan"], ["Manado"], ["Mataram"], ["Pekalongan"], ["Tegal"], ["Bogor"], ["Ciputat"], ["Pondokgede"], ["Cirebon"], ["Kediri"], ["Ambon"], ["Jember"], ["Cilacap"], ["Cimanggis"], ["Pematang Siantar"], ["Purwokerto"], ["Ciomas"], ["Tasikmalaya"], ["Madiun"], ["Srinagar"], ["Agra"], ["Coimbatore"], ["Thane (Thana)"], ["Allahabad"], ["Meerut"], ["Vishakhapatnam"], ["Jabalpur"], ["Amritsar"], ["Faridabad"], ["Vijayawada"], ["Gwalior"], ["Jodhpur"], ["Nashik (Nasik)"], ["Hubli-Dharwad"], ["Solapur (Sholapur)"], ["Ranchi"], ["Bareilly"], ["Guwahati (Gauhati)"], ["Shambajinagar (Aurangabad)"], ["Cochin (Kochi)"], ["Rajkot"], ["Kota"], ["Thiruvananthapuram (Trivandrum"], ["Pimpri-Chinchwad"], ["Jalandhar (Jullundur)"], ["Gorakhpur"], ["Chandigarh"], ["Mysore"], ["Aligarh"], ["Guntur"], ["Jamshedpur"], ["Ghaziabad"], ["Warangal"], ["Raipur"], ["Moradabad"], ["Durgapur"], ["Amravati"], ["Calicut (Kozhikode)"], ["Bikaner"], ["Bhubaneswar"], ["Kolhapur"], ["Kataka (Cuttack)"], ["Ajmer"], ["Bhavnagar"], ["Tiruchirapalli"], ["Bhilai"], ["Bhiwandi"], ["Saharanpur"], ["Ulhasnagar"], ["Salem"], ["Ujjain"], ["Malegaon"], ["Jamnagar"], ["Bokaro Steel City"], ["Akola"], ["Belgaum"], ["Rajahmundry"], ["Nellore"], ["Udaipur"], ["New Bombay"], ["Bhatpara"], ["Gulbarga"], ["New Delhi"], ["Jhansi"], ["Gaya"], ["Kakinada"], ["Dhule (Dhulia)"], ["Panihati"], ["Nanded (Nander)"], ["Mangalore"], ["Dehra Dun"], ["Kamarhati"], ["Davangere"], ["Asansol"], ["Bhagalpur"], ["Bellary"], ["Barddhaman (Burdwan)"], ["Rampur"], ["Jalgaon"], ["Muzaffarpur"], ["Nizamabad"], ["Muzaffarnagar"], ["Patiala"], ["Shahjahanpur"], ["Kurnool"], ["Tiruppur (Tirupper)"], ["Rohtak"], ["South Dum Dum"], ["Mathura"], ["Chandrapur"], ["Barahanagar (Baranagar)"], ["Darbhanga"], ["Siliguri (Shiliguri)"], ["Raurkela"], ["Ambattur"], ["Panipat"], ["Firozabad"], ["Ichalkaranji"], ["Jammu"], ["Ramagundam"], ["Eluru"], ["Brahmapur"], ["Alwar"], ["Pondicherry"], ["Thanjavur"], ["Bihar Sharif"], ["Tuticorin"], ["Imphal"], ["Latur"], ["Sagar"], ["Farrukhabad-cum-Fatehgarh"], ["Sangli"], ["Parbhani"], ["Nagar Coil"], ["Bijapur"], ["Kukatpalle"], ["Bally"], ["Bhilwara"], ["Ratlam"], ["Avadi"], ["Dindigul"], ["Ahmadnagar"], ["Bilaspur"], ["Shimoga"], ["Kharagpur"], ["Mira Bhayandar"], ["Vellore"], ["Jalna"], ["Burnpur"], ["Anantapur"], ["Allappuzha (Alleppey)"], ["Tirupati"], ["Karnal"], ["Burhanpur"], ["Hisar (Hissar)"], ["Tiruvottiyur"], ["Mirzapur-cum-Vindhyachal"], ["Secunderabad"], ["Nadiad"], ["Dewas"], ["Murwara (Katni)"], ["Ganganagar"], ["Vizianagaram"], ["Mosul"], ["Irbil"], ["Kirkuk"], ["Basra"], ["al-Sulaymaniya"], ["al-Najaf"], ["Karbala"], ["al-Hilla"], ["al-Nasiriya"], ["al-Amara"], ["al-Diwaniya"], ["al-Ramadi"], ["al-Kut"], ["Ahvaz"], ["Qom"], ["Kermanshah"], ["Urmia"], ["Zahedan"], ["Rasht"], ["Hamadan"], ["Kerman"], ["Arak"], ["Ardebil"], ["Yazd"], ["Qazvin"], ["Zanjan"], ["Sanandaj"], ["Bandar-e-Abbas"], ["Khorramabad"], ["Eslamshahr"], ["Borujerd"], ["Abadan"], ["Dezful"], ["Kashan"], ["Sari"], ["Gorgan"], ["Najafabad"], ["Sabzevar"], ["Khomeynishahr"], ["Dublin"], ["Jerusalem"], ["Tel Aviv-Jaffa"], ["Haifa"], ["Rishon Le Ziyyon"], ["Beerseba"], ["Holon"], ["Palermo"], ["Genova"], ["Bologna"], ["Firenze"], ["Catania"], ["Bari"], ["Venezia"], ["Messina"], ["Verona"], ["Trieste"], ["Padova"], ["Taranto"], ["Brescia"], ["Reggio di Calabria"], ["Modena"], ["Prato"], ["Parma"], ["Cagliari"], ["Livorno"], ["Graz"], ["Linz"], ["Chiba"], ["Sakai"], ["Kumamoto"], ["Okayama"], ["Sagamihara"], ["Hamamatsu"], ["Kagoshima"], ["Funabashi"], ["Higashiosaka"], ["Hachioji"], ["Niigata"], ["Amagasaki"], ["Himeji"], ["Shizuoka"], ["Urawa"], ["Matsuyama"], ["Matsudo"], ["Kanazawa"], ["Kawaguchi"], ["Ichikawa"], ["Omiya"], ["Utsunomiya"], ["Oita"], ["Nagasaki"], ["Yokosuka"], ["Kurashiki"], ["Gifu"], ["Hirakata"], ["Nishinomiya"], ["Toyonaka"], ["Wakayama"], ["Fukuyama"], ["Fujisawa"], ["Asahikawa"], ["Machida"], ["Nara"], ["Takatsuki"], ["Iwaki"], ["Nagano"], ["Toyohashi"], ["Toyota"], ["Suita"], ["Takamatsu"], ["Koriyama"], ["Okazaki"], ["Kawagoe"], ["Tokorozawa"], ["Toyama"], ["Kochi"], ["Kashiwa"], ["Akita"], ["Miyazaki"], ["Koshigaya"], ["Naha"], ["Aomori"], ["Hakodate"], ["Akashi"], ["Yokkaichi"], ["Fukushima"], ["Morioka"], ["Maebashi"], ["Kasugai"], ["Otsu"], ["Ichihara"], ["Yao"], ["Ichinomiya"], ["Tokushima"], ["Kakogawa"], ["Ibaraki"], ["Neyagawa"], ["Shimonoseki"], ["Yamagata"], ["Fukui"], ["Hiratsuka"], ["Mito"], ["Sasebo"], ["Hachinohe"], ["Takasaki"], ["Shimizu"], ["Kurume"], ["Fuji"], ["Soka"], ["Fuchu"], ["Chigasaki"], ["Atsugi"], ["Numazu"], ["Ageo"], ["Yamato"], ["Matsumoto"], ["Kure"], ["Takarazuka"], ["Kasukabe"], ["Chofu"], ["Odawara"], ["Kofu"], ["Kushiro"], ["Kishiwada"], ["Hitachi"], ["Nagaoka"], ["Itami"], ["Uji"], ["Suzuka"], ["Hirosaki"], ["Ube"], ["Kodaira"], ["Takaoka"], ["Obihiro"], ["Tomakomai"], ["Saga"], ["Sakura"], ["Kamakura"], ["Mitaka"], ["Izumi"], ["Hino"], ["Hadano"], ["Ashikaga"], ["Tsu"], ["Sayama"], ["Yachiyo"], ["Tsukuba"], ["Sanaa"], ["Aden"], ["Taizz"], ["Hodeida"], ["al-Zarqa"], ["Irbid"], ["Novi Sad"], ["Ni\u0161"], ["Phnom Penh"], ["Garoua"], ["Calgary"], ["Toronto"], ["North York"], ["Winnipeg"], ["Edmonton"], ["Mississauga"], ["Scarborough"], ["Vancouver"], ["Etobicoke"], ["London"], ["Hamilton"], ["Ottawa"], ["Laval"], ["Surrey"], ["Brampton"], ["Windsor"], ["Saskatoon"], ["Kitchener"], ["Markham"], ["Regina"], ["Burnaby"], ["Qu\u00e9bec"], ["Qaraghandy"], ["Shymkent"], ["Taraz"], ["Astana"], ["\u00d6skemen"], ["Pavlodar"], ["Semey"], ["Aqt\u00f6be"], ["Qostanay"], ["Petropavl"], ["Oral"], ["Temirtau"], ["Mombasa"], ["Kisumu"], ["Nakuru"], ["Bangui"], ["Handan"], ["Wuxi"], ["Xuzhou"], ["Datong"], ["Yichun"], ["Benxi"], ["Luoyang"], ["Suzhou"], ["Xining"], ["Huainan"], ["Jixi"], ["Daqing"], ["Fuxin"], ["Amoy [Xiamen]"], ["Liuzhou"], ["Shantou"], ["Jinzhou"], ["Mudanjiang"], ["Yinchuan"], ["Changzhou"], ["Zhangjiakou"], ["Dandong"], ["Hegang"], ["Kaifeng"], ["Jiamusi"], ["Liaoyang"], ["Hengyang"], ["Baoding"], ["Hunjiang"], ["Xinxiang"], ["Huangshi"], ["Haikou"], ["Yantai"], ["Bengbu"], ["Xiangtan"], ["Weifang"], ["Wuhu"], ["Pingxiang"], ["Yingkou"], ["Anyang"], ["Panzhihua"], ["Pingdingshan"], ["Xiangfan"], ["Zhuzhou"], ["Jiaozuo"], ["Wenzhou"], ["Zhangjiang"], ["Zigong"], ["Shuangyashan"], ["Zaozhuang"], ["Yakeshi"], ["Yichang"], ["Zhenjiang"], ["Huaibei"], ["Qinhuangdao"], ["Guilin"], ["Liupanshui"], ["Panjin"], ["Yangquan"], ["Jinxi"], ["Liaoyuan"], ["Lianyungang"], ["Xianyang"], ["Tai\u00b4an"], ["Chifeng"], ["Shaoguan"], ["Nantong"], ["Leshan"], ["Baoji"], ["Linyi"], ["Tonghua"], ["Siping"], ["Changzhi"], ["Tengzhou"], ["Chaozhou"], ["Yangzhou"], ["Dongwan"], ["Ma\u00b4anshan"], ["Foshan"], ["Yueyang"], ["Xingtai"], ["Changde"], ["Shihezi"], ["Yancheng"], ["Jiujiang"], ["Dongying"], ["Shashi"], ["Xintai"], ["Jingdezhen"], ["Tongchuan"], ["Zhongshan"], ["Shiyan"], ["Tieli"], ["Jining"], ["Wuhai"], ["Mianyang"], ["Luzhou"], ["Zunyi"], ["Shizuishan"], ["Neijiang"], ["Tongliao"], ["Tieling"], ["Wafangdian"], ["Anqing"], ["Shaoyang"], ["Laiwu"], ["Chengde"], ["Tianshui"], ["Nanyang"], ["Cangzhou"], ["Yibin"], ["Huaiyin"], ["Dunhua"], ["Yanji"], ["Jiangmen"], ["Tongling"], ["Suihua"], ["Gongziling"], ["Xiantao"], ["Chaoyang"], ["Ganzhou"], ["Huzhou"], ["Baicheng"], ["Shangzi"], ["Yangjiang"], ["Qitaihe"], ["Gejiu"], ["Jiangyin"], ["Hebi"], ["Jiaxing"], ["Wuzhou"], ["Meihekou"], ["Xuchang"], ["Liaocheng"], ["Haicheng"], ["Qianjiang"], ["Baiyin"], ["Bei\u00b4an"], ["Yixing"], ["Laizhou"], ["Qaramay"], ["Acheng"], ["Dezhou"], ["Nanping"], ["Zhaoqing"], ["Beipiao"], ["Fengcheng"], ["Fuyu"], ["Xinyang"], ["Dongtai"], ["Yuci"], ["Honghu"], ["Ezhou"], ["Heze"], ["Daxian"], ["Linfen"], ["Tianmen"], ["Yiyang"], ["Quanzhou"], ["Rizhao"], ["Deyang"], ["Guangyuan"], ["Changshu"], ["Zhangzhou"], ["Hailar"], ["Nanchong"], ["Jiutai"], ["Zhaodong"], ["Shaoxing"], ["Fuyang"], ["Maoming"], ["Qujing"], ["Ghulja"], ["Jiaohe"], ["Puyang"], ["Huadian"], ["Jiangyou"], ["Qashqar"], ["Anshun"], ["Fuling"], ["Xinyu"], ["Hanzhong"], ["Danyang"], ["Chenzhou"], ["Xiaogan"], ["Shangqiu"], ["Zhuhai"], ["Qingyuan"], ["Aqsu"], ["Jining"], ["Xiaoshan"], ["Zaoyang"], ["Xinghua"], ["Hami"], ["Huizhou"], ["Jinmen"], ["Sanming"], ["Bishkek"], ["Osh"], ["Cartagena"], ["C\u00facuta"], ["Bucaramanga"], ["Ibagu\u00e9"], ["Pereira"], ["Santa Marta"], ["Manizales"], ["Bello"], ["Pasto"], ["Neiva"], ["Soledad"], ["Armenia"], ["Villavicencio"], ["Soacha"], ["Valledupar"], ["Monter\u00eda"], ["Itag\u00fc\u00ed"], ["Palmira"], ["Buenaventura"], ["Floridablanca"], ["Sincelejo"], ["Popay\u00e1n"], ["Barrancabermeja"], ["Pointe-Noire"], ["Lubumbashi"], ["Mbuji-Mayi"], ["Kolwezi"], ["Kisangani"], ["Kananga"], ["Likasi"], ["Bukavu"], ["Kikwit"], ["Tshikapa"], ["Matadi"], ["Mbandaka"], ["Hamhung"], ["Chongjin"], ["Nampo"], ["Sinuiju"], ["Wonsan"], ["Phyongsong"], ["Sariwon"], ["Haeju"], ["Kanggye"], ["Kimchaek"], ["Hyesan"], ["Kaesong"], ["Songnam"], ["Puchon"], ["Suwon"], ["Anyang"], ["Chonju"], ["Chongju"], ["Koyang"], ["Ansan"], ["Pohang"], ["Chang-won"], ["Masan"], ["Kwangmyong"], ["Chonan"], ["Chinju"], ["Iksan"], ["Pyongtaek"], ["Kumi"], ["Uijongbu"], ["Kyongju"], ["Kunsan"], ["Cheju"], ["Kimhae"], ["Sunchon"], ["Mokpo"], ["Yong-in"], ["Wonju"], ["Kunpo"], ["Chunchon"], ["Namyangju"], ["Kangnung"], ["Chungju"], ["Andong"], ["Yosu"], ["Kyongsan"], ["Paju"], ["Yangsan"], ["Athenai"], ["Thessaloniki"], ["Pireus"], ["Zagreb"], ["Split"], ["Rijeka"], ["Santiago de Cuba"], ["Camag\u00fcey"], ["Holgu\u00edn"], ["Santa Clara"], ["Guant\u00e1namo"], ["Nicosia"], ["Vientiane"], ["Riga"], ["Maseru"], ["Tripoli"], ["Monrovia"], ["Bengasi"], ["Vilnius"], ["Kaunas"], ["Klaipeda"], ["El-Aai\u00fan"], ["Macao"], ["Antananarivo"], ["Skopje"], ["Blantyre"], ["Lilongwe"], ["Ipoh"], ["Johor Baharu"], ["Petaling Jaya"], ["Kelang"], ["Kuala Terengganu"], ["Pinang"], ["Kota Bharu"], ["Kuantan"], ["Taiping"], ["Seremban"], ["Bamako"], ["Rabat"], ["Marrakech"], ["F\u00e8s"], ["Tanger"], ["Sal\u00e9"], ["Mekn\u00e8s"], ["Oujda"], ["K\u00e9nitra"], ["T\u00e9touan"], ["Safi"], ["Nouakchott"], ["Naucalpan de Ju\u00e1rez"], ["Mexicali"], ["Culiac\u00e1n"], ["Acapulco de Ju\u00e1rez"], ["Tlalnepantla de Baz"], ["M\u00e9rida"], ["Chihuahua"], ["San Luis Potos\u00ed"], ["Guadalupe"], ["Toluca"], ["Aguascalientes"], ["Quer\u00e9taro"], ["Morelia"], ["Hermosillo"], ["Saltillo"], ["Torre\u00f3n"], ["Centro (Villahermosa)"], ["San Nicol\u00e1s de los Garza"], ["Durango"], ["Chimalhuac\u00e1n"], ["Tlaquepaque"], ["Atizap\u00e1n de Zaragoza"], ["Veracruz"], ["Cuautitl\u00e1n Izcalli"], ["Irapuato"], ["Tuxtla Guti\u00e9rrez"], ["Tultitl\u00e1n"], ["Reynosa"], ["Benito Ju\u00e1rez"], ["Matamoros"], ["Xalapa"], ["Celaya"], ["Mazatl\u00e1n"], ["Ensenada"], ["Ahome"], ["Cajeme"], ["Cuernavaca"], ["Tonal\u00e1"], ["Valle de Chalco Solidaridad"], ["Nuevo Laredo"], ["Tepic"], ["Tampico"], ["Ixtapaluca"], ["Apodaca"], ["Guasave"], ["G\u00f3mez Palacio"], ["Tapachula"], ["Nicol\u00e1s Romero"], ["Coatzacoalcos"], ["Uruapan"], ["Victoria"], ["Oaxaca de Ju\u00e1rez"], ["Coacalco de Berrioz\u00e1bal"], ["Pachuca de Soto"], ["General Escobedo"], ["Salamanca"], ["Santa Catarina"], ["Tehuac\u00e1n"], ["Chalco"], ["C\u00e1rdenas"], ["Campeche"], ["La Paz"], ["Oth\u00f3n P. Blanco (Chetumal)"], ["Texcoco"], ["La Paz"], ["Metepec"], ["Monclova"], ["Huixquilucan"], ["Chilpancingo de los Bravo"], ["Puerto Vallarta"], ["Fresnillo"], ["Ciudad Madero"], ["Soledad de Graciano S\u00e1nchez"], ["San Juan del R\u00edo"], ["San Felipe del Progreso"], ["C\u00f3rdoba"], ["Tec\u00e1mac"], ["Ocosingo"], ["Carmen"], ["L\u00e1zaro C\u00e1rdenas"], ["Jiutepec"], ["Papantla"], ["Comalcalco"], ["Zamora"], ["Chisinau"], ["Tiraspol"], ["Ulan Bator"], ["Matola"], ["Beira"], ["Nampula"], ["Chimoio"], ["Mandalay"], ["Moulmein (Mawlamyine)"], ["Pegu (Bago)"], ["Bassein (Pathein)"], ["Windhoek"], ["Kathmandu"], ["Niamey"], ["Ogbomosho"], ["Kano"], ["Oshogbo"], ["Ilorin"], ["Abeokuta"], ["Port Harcourt"], ["Zaria"], ["Ilesha"], ["Onitsha"], ["Iwo"], ["Ado-Ekiti"], ["Abuja"], ["Kaduna"], ["Mushin"], ["Maiduguri"], ["Enugu"], ["Ede"], ["Aba"], ["Ife"], ["Ila"], ["Oyo"], ["Ikerre"], ["Benin City"], ["Iseyin"], ["Katsina"], ["Jos"], ["Sokoto"], ["Ilobu"], ["Offa"], ["Ikorodu"], ["Ilawe-Ekiti"], ["Owo"], ["Ikirun"], ["Shaki"], ["Calabar"], ["Ondo"], ["Akure"], ["Oslo"], ["Bergen"], ["Bouak\u00e9"], ["Quetta"], ["Islamabad"], ["Sargodha"], ["Sialkot"], ["Bahawalpur"], ["Sukkur"], ["Jhang"], ["Sheikhupura"], ["Larkana"], ["Gujrat"], ["Mardan"], ["Kasur"], ["Rahim Yar Khan"], ["Sahiwal"], ["Okara"], ["Wah"], ["Dera Ghazi Khan"], ["Mirpur Khas"], ["Nawabshah"], ["Mingora"], ["Chiniot"], ["Ciudad de Panam\u00e1"], ["San Miguelito"], ["Port Moresby"], ["Asunci\u00f3n"], ["Arequipa"], ["Trujillo"], ["Chiclayo"], ["Callao"], ["Iquitos"], ["Chimbote"], ["Huancayo"], ["Piura"], ["Cusco"], ["Pucallpa"], ["Tacna"], ["Ica"], ["Lisboa"], ["Porto"], ["San Juan"], ["Bayam\u00f3n"], ["Ponce"], ["Carolina"], ["L\u00f3dz"], ["Krak\u00f3w"], ["Wroclaw"], ["Poznan"], ["Gdansk"], ["Szczecin"], ["Bydgoszcz"], ["Lublin"], ["Katowice"], ["Bialystok"], ["Czestochowa"], ["Gdynia"], ["Sosnowiec"], ["Radom"], ["Kielce"], ["Gliwice"], ["Torun"], ["Bytom"], ["Zabrze"], ["Bielsko-Biala"], ["Olsztyn"], ["Rzesz\u00f3w"], ["Doha"], ["Marseille"], ["Lyon"], ["Toulouse"], ["Nice"], ["Nantes"], ["Strasbourg"], ["Montpellier"], ["Bordeaux"], ["Rennes"], ["Le Havre"], ["Reims"], ["Lille"], ["St-\u00c9tienne"], ["Toulon"], ["Iasi"], ["Constanta"], ["Cluj-Napoca"], ["Galati"], ["Timisoara"], ["Brasov"], ["Craiova"], ["Ploiesti"], ["Braila"], ["Oradea"], ["Bacau"], ["Pitesti"], ["Arad"], ["Sibiu"], ["T\u00e2rgu Mures"], ["Kigali"], ["Stockholm"], ["Gothenburg [G\u00f6teborg]"], ["Malm\u00f6"], ["Uppsala"], ["Frankfurt am Main"], ["Essen"], ["Dortmund"], ["Stuttgart"], ["D\u00fcsseldorf"], ["Bremen"], ["Duisburg"], ["Hannover"], ["Leipzig"], ["N\u00fcrnberg"], ["Dresden"], ["Bochum"], ["Wuppertal"], ["Bielefeld"], ["Mannheim"], ["Bonn"], ["Gelsenkirchen"], ["Karlsruhe"], ["Wiesbaden"], ["M\u00fcnster"], ["M\u00f6nchengladbach"], ["Chemnitz"], ["Augsburg"], ["Halle/Saale"], ["Braunschweig"], ["Aachen"], ["Krefeld"], ["Magdeburg"], ["Kiel"], ["Oberhausen"], ["L\u00fcbeck"], ["Hagen"], ["Rostock"], ["Freiburg im Breisgau"], ["Erfurt"], ["Kassel"], ["Saarbr\u00fccken"], ["Mainz"], ["Hamm"], ["Herne"], ["M\u00fclheim an der Ruhr"], ["Solingen"], ["Osnabr\u00fcck"], ["Ludwigshafen am Rhein"], ["Leverkusen"], ["Ndola"], ["Kitwe"], ["Medina"], ["al-Dammam"], ["al-Taif"], ["Tabuk"], ["Burayda"], ["al-Hufuf"], ["al-Mubarraz"], ["Khamis Mushayt"], ["Hail"], ["Pikine"], ["Dakar"], ["Thi\u00e8s"], ["Kaolack"], ["Ziguinchor"], ["Freetown"], ["Bratislava"], ["Ko\u0161ice"], ["Ljubljana"], ["Colombo"], ["Dehiwala"], ["Moratuwa"], ["Sharq al-Nil"], ["Port Sudan"], ["Kassala"], ["Obeid"], ["Nyala"], ["Wad Madani"], ["al-Qadarif"], ["Kusti"], ["Helsinki [Helsingfors]"], ["Espoo"], ["Tampere"], ["Vantaa"], ["Turku [\u00c5bo]"], ["Z\u00fcrich"], ["Geneve"], ["Basel"], ["Hims"], ["Hama"], ["Latakia"], ["Dushanbe"], ["Khujand"], ["Tainan"], ["Panchiao"], ["Chungho"], ["Keelung (Chilung)"], ["Sanchung"], ["Hsinchuang"], ["Hsinchu"], ["Chungli"], ["Fengshan"], ["Taoyuan"], ["Chiayi"], ["Hsintien"], ["Changhwa"], ["Yungho"], ["Tucheng"], ["Pingtung"], ["Yungkang"], ["Pingchen"], ["Tali"], ["Taiping"], ["Pate"], ["Fengyuan"], ["Luchou"], ["Dodoma"], ["Mwanza"], ["K\u00f8benhavn"], ["\u00c5rhus"], ["Odense"], ["Aalborg"], ["Nonthaburi"], ["Nakhon Ratchasima"], ["Chiang Mai"], ["Lom\u00e9"], ["N\u00b4Djam\u00e9na"], ["Brno"], ["Ostrava"], ["Plzen"], ["Tunis"], ["Sfax"], ["Ariana"], ["Ettadhamen"], ["Gaziantep"], ["Konya"], ["Mersin (I\u00e7el)"], ["Antalya"], ["Diyarbakir"], ["Kayseri"], ["Eskisehir"], ["Sanliurfa"], ["Samsun"], ["Malatya"], ["Gebze"], ["Denizli"], ["Sivas"], ["Erzurum"], ["Tarsus"], ["Kahramanmaras"], ["El\u00e2zig"], ["Van"], ["Sultanbeyli"], ["Izmit (Kocaeli)"], ["Manisa"], ["Batman"], ["Balikesir"], ["Sakarya (Adapazari)"], ["Ashgabat"], ["Ch\u00e4rjew"], ["Kampala"], ["Zaporizzja"], ["Lviv"], ["Kryvyi Rig"], ["Mykolajiv"], ["Mariupol"], ["Lugansk"], ["Vinnytsja"], ["Makijivka"], ["Herson"], ["Sevastopol"], ["Simferopol"], ["Pultava [Poltava]"], ["T\u0161ernigiv"], ["T\u0161erkasy"], ["Gorlivka"], ["Zytomyr"], ["Sumy"], ["Dniprodzerzynsk"], ["Kirovograd"], ["Hmelnytskyi"], ["T\u0161ernivtsi"], ["Rivne"], ["Krement\u0161uk"], ["Ivano-Frankivsk"], ["Ternopil"], ["Lutsk"], ["Bila Tserkva"], ["Kramatorsk"], ["Melitopol"], ["Kert\u0161"], ["Debrecen"], ["Miskolc"], ["Auckland"], ["Christchurch"], ["Manukau"], ["North Shore"], ["Waitakere"], ["Wellington"], ["Namangan"], ["Samarkand"], ["Andijon"], ["Buhoro"], ["Karsi"], ["Nukus"], ["K\u00fckon"], ["Fargona"], ["Gomel"], ["Mogiljov"], ["Vitebsk"], ["Grodno"], ["Brest"], ["Bobruisk"], ["Baranovit\u0161i"], ["Barquisimeto"], ["Valencia"], ["Ciudad Guayana"], ["Petare"], ["Maracay"], ["Barcelona"], ["Matur\u00edn"], ["San Crist\u00f3bal"], ["Ciudad Bol\u00edvar"], ["Cuman\u00e1"], ["M\u00e9rida"], ["Cabimas"], ["Barinas"], ["Turmero"], ["Baruta"], ["Puerto Cabello"], ["Santa Ana de Coro"], ["Los Teques"], ["Punto Fijo"], ["Guarenas"], ["Krasnojarsk"], ["Saratov"], ["Toljatti"], ["Uljanovsk"], ["Izevsk"], ["Krasnodar"], ["Jaroslavl"], ["Habarovsk"], ["Vladivostok"], ["Irkutsk"], ["Barnaul"], ["Novokuznetsk"], ["Penza"], ["Rjazan"], ["Orenburg"], ["Lipetsk"], ["Nabereznyje T\u0161elny"], ["Tula"], ["Tjumen"], ["Kemerovo"], ["Astrahan"], ["Tomsk"], ["Kirov"], ["Ivanovo"], ["T\u0161eboksary"], ["Brjansk"], ["Tver"], ["Kursk"], ["Magnitogorsk"], ["Kaliningrad"], ["Nizni Tagil"], ["Murmansk"], ["Ulan-Ude"], ["Kurgan"], ["Arkangeli"], ["Sot\u0161i"], ["Smolensk"], ["Orjol"], ["Stavropol"], ["Belgorod"], ["Kaluga"], ["Vladimir"], ["Mahat\u0161kala"], ["T\u0161erepovets"], ["Saransk"], ["Tambov"], ["Vladikavkaz"], ["T\u0161ita"], ["Vologda"], ["Veliki Novgorod"], ["Komsomolsk-na-Amure"], ["Kostroma"], ["Volzski"], ["Taganrog"], ["Petroskoi"], ["Bratsk"], ["Dzerzinsk"], ["Surgut"], ["Orsk"], ["Sterlitamak"], ["Angarsk"], ["Jo\u0161kar-Ola"], ["Rybinsk"], ["Prokopjevsk"], ["Niznevartovsk"], ["Nalt\u0161ik"], ["Syktyvkar"], ["Severodvinsk"], ["Bijsk"], ["Niznekamsk"], ["Blagove\u0161t\u0161ensk"], ["\u0160ahty"], ["Staryi Oskol"], ["Zelenograd"], ["Balakovo"], ["Novorossijsk"], ["Pihkova"], ["Zlatoust"], ["Jakutsk"], ["Podolsk"], ["Petropavlovsk-Kamt\u0161atski"], ["Kamensk-Uralski"], ["Engels"], ["Syzran"], ["Grozny"], ["Novot\u0161erkassk"], ["Berezniki"], ["Juzno-Sahalinsk"], ["Volgodonsk"], ["Abakan"], ["Maikop"], ["Miass"], ["Armavir"], ["Ljubertsy"], ["Rubtsovsk"], ["Haiphong"], ["Da Nang"], ["Bi\u00ean Hoa"], ["Nha Trang"], ["Hue"], ["Can Tho"], ["Cam Pha"], ["Nam Dinh"], ["Quy Nhon"], ["Tallinn"], ["San Jose"], ["Indianapolis"], ["San Francisco"], ["Jacksonville"], ["Columbus"], ["Austin"], ["Baltimore"], ["Memphis"], ["Milwaukee"], ["Boston"], ["Washington"], ["Nashville-Davidson"], ["El Paso"], ["Seattle"], ["Denver"], ["Charlotte"], ["Fort Worth"], ["Portland"], ["Oklahoma City"], ["Tucson"], ["New Orleans"], ["Las Vegas"], ["Cleveland"], ["Long Beach"], ["Albuquerque"], ["Kansas City"], ["Fresno"], ["Virginia Beach"], ["Atlanta"], ["Sacramento"], ["Oakland"], ["Mesa"], ["Tulsa"], ["Omaha"], ["Minneapolis"], ["Honolulu"], ["Miami"], ["Colorado Springs"], ["Saint Louis"], ["Wichita"], ["Santa Ana"], ["Pittsburgh"], ["Arlington"], ["Cincinnati"], ["Anaheim"], ["Toledo"], ["Tampa"], ["Buffalo"], ["Saint Paul"], ["Corpus Christi"], ["Aurora"], ["Raleigh"], ["Newark"], ["Lexington-Fayette"], ["Anchorage"], ["Louisville"], ["Riverside"], ["Saint Petersburg"], ["Bakersfield"], ["Stockton"], ["Birmingham"], ["Jersey City"], ["Norfolk"], ["Baton Rouge"], ["Hialeah"], ["Lincoln"], ["Greensboro"], ["Plano"], ["Rochester"], ["Glendale"], ["Akron"], ["Garland"], ["Madison"], ["Fort Wayne"], ["Fremont"], ["Scottsdale"], ["Montgomery"], ["Shreveport"], ["Augusta-Richmond County"], ["Lubbock"], ["Chesapeake"], ["Mobile"], ["Des Moines"], ["Grand Rapids"], ["Richmond"], ["Yonkers"], ["Spokane"], ["Glendale"], ["Tacoma"], ["Irving"], ["Huntington Beach"], ["Modesto"], ["Durham"], ["Columbus"], ["Orlando"], ["Boise City"], ["Winston-Salem"], ["San Bernardino"], ["Jackson"], ["Little Rock"], ["Salt Lake City"], ["Reno"], ["Newport News"], ["Chandler"], ["Laredo"], ["Henderson"], ["Arlington"], ["Knoxville"], ["Amarillo"], ["Providence"], ["Chula Vista"], ["Worcester"], ["Oxnard"], ["Dayton"], ["Garden Grove"], ["Oceanside"], ["Bulawayo"], ["Chitungwiza"], ["Mount Darwin"], ["Gaza"]], "results": {"generated_sql": "SELECT name FROM city WHERE population  >  160000 AND population  <  900000", "generated_py": "t1 = pd.merge(city, sqlite_sequence, on='name'); t2 = pd.merge(t1, country, on='country_code'); t3 = pd.merge(t2, countrylanguage, on='country_code'); t4 = t3[(t3['population'] > 160000) & (t3['population'] < 900000)]; answer = t4['name'].unique()", "sql_exec_result": "[('Qandahar',), ('Herat',), ('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Tirana',), ('Oran',), ('Constantine',), ('Annaba',), ('Batna',), ('S\u00e9tif',), ('Huambo',), ('Dubai',), ('Abu Dhabi',), ('Sharja',), ('al-Ayn',), ('Lomas de Zamora',), ('Quilmes',), ('Almirante Brown',), ('La Plata',), ('Mar del Plata',), ('San Miguel de Tucum\u00e1n',), ('Lan\u00fas',), ('Merlo',), ('General San Mart\u00edn',), ('Salta',), ('Moreno',), ('Santa F\u00e9',), ('Avellaneda',), ('Tres de Febrero',), ('Mor\u00f3n',), ('Florencio Varela',), ('San Isidro',), ('Tigre',), ('Malvinas Argentinas',), ('Vicente L\u00f3pez',), ('Berazategui',), ('Corrientes',), ('San Miguel',), ('Bah\u00eda Blanca',), ('Esteban Echeverr\u00eda',), ('Resistencia',), ('Jos\u00e9 C. Paz',), ('Paran\u00e1',), ('Godoy Cruz',), ('Posadas',), ('Guaymall\u00e9n',), ('Santiago del Estero',), ('San Salvador de Jujuy',), ('Hurlingham',), ('Neuqu\u00e9n',), ('Gjumri',), ('Vanadzor',), ('Canberra',), ('Gold Coast',), ('Newcastle',), ('Central Coast',), ('Wollongong',), ('G\u00e4nc\u00e4',), ('Sumqayit',), ('Nassau',), ('Khulna',), ('Rajshahi',), ('Narayanganj',), ('Rangpur',), ('Mymensingh',), ('Barisal',), ('Tungi',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Li\u00e8ge',), ('Cotonou',), ('Porto-Novo',), ('La Paz',), ('El Alto',), ('Cochabamba',), ('Oruro',), ('Sucre',), ('Sarajevo',), ('Gaborone',), ('S\u00e3o Gon\u00e7alo',), ('Nova Igua\u00e7u',), ('S\u00e3o Lu\u00eds',), ('Macei\u00f3',), ('Duque de Caxias',), ('S\u00e3o Bernardo do Campo',), ('Teresina',), ('Natal',), ('Osasco',), ('Campo Grande',), ('Santo Andr\u00e9',), ('Jo\u00e3o Pessoa',), ('Jaboat\u00e3o dos Guararapes',), ('Contagem',), ('S\u00e3o Jos\u00e9 dos Campos',), ('Uberl\u00e2ndia',), ('Feira de Santana',), ('Ribeir\u00e3o Preto',), ('Sorocaba',), ('Niter\u00f3i',), ('Cuiab\u00e1',), ('Juiz de Fora',), ('Aracaju',), ('S\u00e3o Jo\u00e3o de Meriti',), ('Londrina',), ('Joinville',), ('Belford Roxo',), ('Santos',), ('Ananindeua',), ('Campos dos Goytacazes',), ('Mau\u00e1',), ('Carapicu\u00edba',), ('Olinda',), ('Campina Grande',), ('S\u00e3o Jos\u00e9 do Rio Preto',), ('Caxias do Sul',), ('Moji das Cruzes',), ('Diadema',), ('Aparecida de Goi\u00e2nia',), ('Piracicaba',), ('Cariacica',), ('Vila Velha',), ('Pelotas',), ('Bauru',), ('Porto Velho',), ('Serra',), ('Betim',), ('Jund\u00eda\u00ed',), ('Canoas',), ('Franca',), ('S\u00e3o Vicente',), ('Maring\u00e1',), ('Montes Claros',), ('An\u00e1polis',), ('Florian\u00f3polis',), ('Petr\u00f3polis',), ('Itaquaquecetuba',), ('Vit\u00f3ria',), ('Ponta Grossa',), ('Rio Branco',), ('Foz do Igua\u00e7u',), ('Macap\u00e1',), ('Ilh\u00e9us',), ('Vit\u00f3ria da Conquista',), ('Uberaba',), ('Paulista',), ('Limeira',), ('Blumenau',), ('Caruaru',), ('Santar\u00e9m',), ('Volta Redonda',), ('Novo Hamburgo',), ('Caucaia',), ('Santa Maria',), ('Cascavel',), ('Guaruj\u00e1',), ('Ribeir\u00e3o das Neves',), ('Governador Valadares',), ('Taubat\u00e9',), ('Imperatriz',), ('Gravata\u00ed',), ('Embu',), ('Mossor\u00f3',), ('V\u00e1rzea Grande',), ('Petrolina',), ('Barueri',), ('Viam\u00e3o',), ('Ipatinga',), ('Juazeiro',), ('Juazeiro do Norte',), ('Tabo\u00e3o da Serra',), ('S\u00e3o Jos\u00e9 dos Pinhais',), ('Mag\u00e9',), ('Suzano',), ('S\u00e3o Leopoldo',), ('Mar\u00edlia',), ('S\u00e3o Carlos',), ('Sumar\u00e9',), ('Presidente Prudente',), ('Divin\u00f3polis',), ('Sete Lagoas',), ('Rio Grande',), ('Itabuna',), ('Jequi\u00e9',), ('Arapiraca',), ('Colombo',), ('Americana',), ('Alvorada',), ('Araraquara',), ('Itabora\u00ed',), ('Santa B\u00e1rbara d\u00b4Oeste',), ('Nova Friburgo',), ('Jacare\u00ed',), ('Ara\u00e7atuba',), ('Barra Mansa',), ('Praia Grande',), ('Marab\u00e1',), ('Crici\u00fama',), ('Boa Vista',), ('Passo Fundo',), ('Dourados',), ('Santa Luzia',), ('Rio Claro',), ('Maracana\u00fa',), ('Guarapuava',), ('Glasgow',), ('Liverpool',), ('Edinburgh',), ('Sheffield',), ('Manchester',), ('Leeds',), ('Bristol',), ('Cardiff',), ('Coventry',), ('Leicester',), ('Bradford',), ('Belfast',), ('Nottingham',), ('Kingston upon Hull',), ('Plymouth',), ('Stoke-on-Trent',), ('Wolverhampton',), ('Derby',), ('Swansea',), ('Southampton',), ('Aberdeen',), ('Northampton',), ('Dudley',), ('Portsmouth',), ('Newcastle upon Tyne',), ('Sunderland',), ('Luton',), ('Swindon',), ('Southend-on-Sea',), ('Walsall',), ('Bournemouth',), ('Plovdiv',), ('Varna',), ('Burgas',), ('Ruse',), ('Ouagadougou',), ('Bobo-Dioulasso',), ('Bujumbura',), ('Puente Alto',), ('Vi\u00f1a del Mar',), ('Valpara\u00edso',), ('Talcahuano',), ('Antofagasta',), ('San Bernardo',), ('Temuco',), ('Concepci\u00f3n',), ('Rancagua',), ('Arica',), ('Talca',), ('Chill\u00e1n',), ('Iquique',), ('San Jos\u00e9',), ('Djibouti',), ('Santiago de los Caballeros',), ('Cuenca',), ('Machala',), ('Santo Domingo de los Colorados',), ('Portoviejo',), ('Ambato',), ('Manta',), ('Shubra al-Khayma',), ('Port Said',), ('Suez',), ('al-Mahallat al-Kubra',), ('Tanta',), ('al-Mansura',), ('Luxor',), ('Asyut',), ('Bahtim',), ('Zagazig',), ('al-Faiyum',), ('Ismailia',), ('Kafr al-Dawwar',), ('Assuan',), ('Damanhur',), ('al-Minya',), ('Bani Suwayf',), ('Qina',), ('Sawhaj',), ('San Salvador',), ('Asmara',), ('Valencia',), ('Sevilla',), ('Zaragoza',), ('M\u00e1laga',), ('Bilbao',), ('Las Palmas de Gran Canaria',), ('Murcia',), ('Palma de Mallorca',), ('Valladolid',), ('C\u00f3rdoba',), ('Vigo',), ('Alicante [Alacant]',), ('Gij\u00f3n',), ('L\u00b4Hospitalet de Llobregat',), ('Granada',), ('A Coru\u00f1a (La Coru\u00f1a)',), ('Vitoria-Gasteiz',), ('Santa Cruz de Tenerife',), ('Badalona',), ('Oviedo',), ('M\u00f3stoles',), ('Elche [Elx]',), ('Sabadell',), ('Santander',), ('Jerez de la Frontera',), ('Pamplona [Iru\u00f1a]',), ('Donostia-San Sebasti\u00e1n',), ('Cartagena',), ('Legan\u00e9s',), ('Fuenlabrada',), ('Almer\u00eda',), ('Terrassa',), ('Alcal\u00e1 de Henares',), ('Burgos',), ('Johannesburg',), ('Port Elizabeth',), ('Pretoria',), ('Inanda',), ('Durban',), ('Vanderbijlpark',), ('Kempton Park',), ('Alberton',), ('Pinetown',), ('Pietermaritzburg',), ('Benoni',), ('Randburg',), ('Umlazi',), ('Bloemfontein',), ('Vereeniging',), ('Wonderboom',), ('Roodepoort',), ('Boksburg',), ('Klerksdorp',), ('Soshanguve',), ('Newcastle',), ('East London',), ('Welkom',), ('Kimberley',), ('Uitenhage',), ('Chatsworth',), ('Mdantsane',), ('Krugersdorp',), ('Botshabelo',), ('Brakpan',), ('Witbank',), ('Oberholzer',), ('Germiston',), ('Springs',), ('Dire Dawa',), ('Cebu',), ('Zamboanga',), ('Pasig',), ('Valenzuela',), ('Las Pi\u00f1as',), ('Antipolo',), ('Taguig',), ('Cagayan de Oro',), ('Para\u00f1aque',), ('Makati',), ('Bacolod',), ('General Santos',), ('Marikina',), ('Dasmari\u00f1as',), ('Muntinlupa',), ('Iloilo',), ('Pasay',), ('Malabon',), ('San Jos\u00e9 del Monte',), ('Bacoor',), ('Iligan',), ('Calamba',), ('Mandaluyong',), ('Butuan',), ('Angeles',), ('Tarlac',), ('Mandaue',), ('Baguio',), ('Batangas',), ('Cainta',), ('San Pedro',), ('Navotas',), ('Cabanatuan',), ('San Fernando',), ('Lipa',), ('Lapu-Lapu',), ('San Pablo',), ('Bi\u00f1an',), ('Taytay',), ('Lucena',), ('Imus',), ('Olongapo',), ('Binangonan',), ('Santa Rosa',), ('Tagum',), ('Tacloban',), ('Malolos',), ('Mabalacat',), ('Cotabato',), ('Meycauayan',), ('Puerto Princesa',), ('Libreville',), ('Kutaisi',), ('Kumasi',), ('Ciudad de Guatemala',), ('Mixco',), ('Bissau',), ('Georgetown',), ('Port-au-Prince',), ('Carrefour',), ('Delmas',), ('Tegucigalpa',), ('San Pedro Sula',), ('Malang',), ('Bandar Lampung',), ('Bekasi',), ('Padang',), ('Surakarta',), ('Banjarmasin',), ('Pekan Baru',), ('Denpasar',), ('Yogyakarta',), ('Pontianak',), ('Samarinda',), ('Jambi',), ('Depok',), ('Cimahi',), ('Balikpapan',), ('Manado',), ('Mataram',), ('Pekalongan',), ('Tegal',), ('Bogor',), ('Ciputat',), ('Pondokgede',), ('Cirebon',), ('Kediri',), ('Ambon',), ('Jember',), ('Cilacap',), ('Cimanggis',), ('Pematang Siantar',), ('Purwokerto',), ('Ciomas',), ('Tasikmalaya',), ('Madiun',), ('Srinagar',), ('Agra',), ('Coimbatore',), ('Thane (Thana)',), ('Allahabad',), ('Meerut',), ('Vishakhapatnam',), ('Jabalpur',), ('Amritsar',), ('Faridabad',), ('Vijayawada',), ('Gwalior',), ('Jodhpur',), ('Nashik (Nasik)',), ('Hubli-Dharwad',), ('Solapur (Sholapur)',), ('Ranchi',), ('Bareilly',), ('Guwahati (Gauhati)',), ('Shambajinagar (Aurangabad)',), ('Cochin (Kochi)',), ('Rajkot',), ('Kota',), ('Thiruvananthapuram (Trivandrum',), ('Pimpri-Chinchwad',), ('Jalandhar (Jullundur)',), ('Gorakhpur',), ('Chandigarh',), ('Mysore',), ('Aligarh',), ('Guntur',), ('Jamshedpur',), ('Ghaziabad',), ('Warangal',), ('Raipur',), ('Moradabad',), ('Durgapur',), ('Amravati',), ('Calicut (Kozhikode)',), ('Bikaner',), ('Bhubaneswar',), ('Kolhapur',), ('Kataka (Cuttack)',), ('Ajmer',), ('Bhavnagar',), ('Tiruchirapalli',), ('Bhilai',), ('Bhiwandi',), ('Saharanpur',), ('Ulhasnagar',), ('Salem',), ('Ujjain',), ('Malegaon',), ('Jamnagar',), ('Bokaro Steel City',), ('Akola',), ('Belgaum',), ('Rajahmundry',), ('Nellore',), ('Udaipur',), ('New Bombay',), ('Bhatpara',), ('Gulbarga',), ('New Delhi',), ('Jhansi',), ('Gaya',), ('Kakinada',), ('Dhule (Dhulia)',), ('Panihati',), ('Nanded (Nander)',), ('Mangalore',), ('Dehra Dun',), ('Kamarhati',), ('Davangere',), ('Asansol',), ('Bhagalpur',), ('Bellary',), ('Barddhaman (Burdwan)',), ('Rampur',), ('Jalgaon',), ('Muzaffarpur',), ('Nizamabad',), ('Muzaffarnagar',), ('Patiala',), ('Shahjahanpur',), ('Kurnool',), ('Tiruppur (Tirupper)',), ('Rohtak',), ('South Dum Dum',), ('Mathura',), ('Chandrapur',), ('Barahanagar (Baranagar)',), ('Darbhanga',), ('Siliguri (Shiliguri)',), ('Raurkela',), ('Ambattur',), ('Panipat',), ('Firozabad',), ('Ichalkaranji',), ('Jammu',), ('Ramagundam',), ('Eluru',), ('Brahmapur',), ('Alwar',), ('Pondicherry',), ('Thanjavur',), ('Bihar Sharif',), ('Tuticorin',), ('Imphal',), ('Latur',), ('Sagar',), ('Farrukhabad-cum-Fatehgarh',), ('Sangli',), ('Parbhani',), ('Nagar Coil',), ('Bijapur',), ('Kukatpalle',), ('Bally',), ('Bhilwara',), ('Ratlam',), ('Avadi',), ('Dindigul',), ('Ahmadnagar',), ('Bilaspur',), ('Shimoga',), ('Kharagpur',), ('Mira Bhayandar',), ('Vellore',), ('Jalna',), ('Burnpur',), ('Anantapur',), ('Allappuzha (Alleppey)',), ('Tirupati',), ('Karnal',), ('Burhanpur',), ('Hisar (Hissar)',), ('Tiruvottiyur',), ('Mirzapur-cum-Vindhyachal',), ('Secunderabad',), ('Nadiad',), ('Dewas',), ('Murwara (Katni)',), ('Ganganagar',), ('Vizianagaram',), ('Mosul',), ('Irbil',), ('Kirkuk',), ('Basra',), ('al-Sulaymaniya',), ('al-Najaf',), ('Karbala',), ('al-Hilla',), ('al-Nasiriya',), ('al-Amara',), ('al-Diwaniya',), ('al-Ramadi',), ('al-Kut',), ('Ahvaz',), ('Qom',), ('Kermanshah',), ('Urmia',), ('Zahedan',), ('Rasht',), ('Hamadan',), ('Kerman',), ('Arak',), ('Ardebil',), ('Yazd',), ('Qazvin',), ('Zanjan',), ('Sanandaj',), ('Bandar-e-Abbas',), ('Khorramabad',), ('Eslamshahr',), ('Borujerd',), ('Abadan',), ('Dezful',), ('Kashan',), ('Sari',), ('Gorgan',), ('Najafabad',), ('Sabzevar',), ('Khomeynishahr',), ('Dublin',), ('Jerusalem',), ('Tel Aviv-Jaffa',), ('Haifa',), ('Rishon Le Ziyyon',), ('Beerseba',), ('Holon',), ('Palermo',), ('Genova',), ('Bologna',), ('Firenze',), ('Catania',), ('Bari',), ('Venezia',), ('Messina',), ('Verona',), ('Trieste',), ('Padova',), ('Taranto',), ('Brescia',), ('Reggio di Calabria',), ('Modena',), ('Prato',), ('Parma',), ('Cagliari',), ('Livorno',), ('Graz',), ('Linz',), ('Chiba',), ('Sakai',), ('Kumamoto',), ('Okayama',), ('Sagamihara',), ('Hamamatsu',), ('Kagoshima',), ('Funabashi',), ('Higashiosaka',), ('Hachioji',), ('Niigata',), ('Amagasaki',), ('Himeji',), ('Shizuoka',), ('Urawa',), ('Matsuyama',), ('Matsudo',), ('Kanazawa',), ('Kawaguchi',), ('Ichikawa',), ('Omiya',), ('Utsunomiya',), ('Oita',), ('Nagasaki',), ('Yokosuka',), ('Kurashiki',), ('Gifu',), ('Hirakata',), ('Nishinomiya',), ('Toyonaka',), ('Wakayama',), ('Fukuyama',), ('Fujisawa',), ('Asahikawa',), ('Machida',), ('Nara',), ('Takatsuki',), ('Iwaki',), ('Nagano',), ('Toyohashi',), ('Toyota',), ('Suita',), ('Takamatsu',), ('Koriyama',), ('Okazaki',), ('Kawagoe',), ('Tokorozawa',), ('Toyama',), ('Kochi',), ('Kashiwa',), ('Akita',), ('Miyazaki',), ('Koshigaya',), ('Naha',), ('Aomori',), ('Hakodate',), ('Akashi',), ('Yokkaichi',), ('Fukushima',), ('Morioka',), ('Maebashi',), ('Kasugai',), ('Otsu',), ('Ichihara',), ('Yao',), ('Ichinomiya',), ('Tokushima',), ('Kakogawa',), ('Ibaraki',), ('Neyagawa',), ('Shimonoseki',), ('Yamagata',), ('Fukui',), ('Hiratsuka',), ('Mito',), ('Sasebo',), ('Hachinohe',), ('Takasaki',), ('Shimizu',), ('Kurume',), ('Fuji',), ('Soka',), ('Fuchu',), ('Chigasaki',), ('Atsugi',), ('Numazu',), ('Ageo',), ('Yamato',), ('Matsumoto',), ('Kure',), ('Takarazuka',), ('Kasukabe',), ('Chofu',), ('Odawara',), ('Kofu',), ('Kushiro',), ('Kishiwada',), ('Hitachi',), ('Nagaoka',), ('Itami',), ('Uji',), ('Suzuka',), ('Hirosaki',), ('Ube',), ('Kodaira',), ('Takaoka',), ('Obihiro',), ('Tomakomai',), ('Saga',), ('Sakura',), ('Kamakura',), ('Mitaka',), ('Izumi',), ('Hino',), ('Hadano',), ('Ashikaga',), ('Tsu',), ('Sayama',), ('Yachiyo',), ('Tsukuba',), ('Sanaa',), ('Aden',), ('Taizz',), ('Hodeida',), ('al-Zarqa',), ('Irbid',), ('Novi Sad',), ('Ni\u0161',), ('Phnom Penh',), ('Garoua',), ('Calgary',), ('Toronto',), ('North York',), ('Winnipeg',), ('Edmonton',), ('Mississauga',), ('Scarborough',), ('Vancouver',), ('Etobicoke',), ('London',), ('Hamilton',), ('Ottawa',), ('Laval',), ('Surrey',), ('Brampton',), ('Windsor',), ('Saskatoon',), ('Kitchener',), ('Markham',), ('Regina',), ('Burnaby',), ('Qu\u00e9bec',), ('Qaraghandy',), ('Shymkent',), ('Taraz',), ('Astana',), ('\u00d6skemen',), ('Pavlodar',), ('Semey',), ('Aqt\u00f6be',), ('Qostanay',), ('Petropavl',), ('Oral',), ('Temirtau',), ('Mombasa',), ('Kisumu',), ('Nakuru',), ('Bangui',), ('Handan',), ('Wuxi',), ('Xuzhou',), ('Datong',), ('Yichun',), ('Benxi',), ('Luoyang',), ('Suzhou',), ('Xining',), ('Huainan',), ('Jixi',), ('Daqing',), ('Fuxin',), ('Amoy [Xiamen]',), ('Liuzhou',), ('Shantou',), ('Jinzhou',), ('Mudanjiang',), ('Yinchuan',), ('Changzhou',), ('Zhangjiakou',), ('Dandong',), ('Hegang',), ('Kaifeng',), ('Jiamusi',), ('Liaoyang',), ('Hengyang',), ('Baoding',), ('Hunjiang',), ('Xinxiang',), ('Huangshi',), ('Haikou',), ('Yantai',), ('Bengbu',), ('Xiangtan',), ('Weifang',), ('Wuhu',), ('Pingxiang',), ('Yingkou',), ('Anyang',), ('Panzhihua',), ('Pingdingshan',), ('Xiangfan',), ('Zhuzhou',), ('Jiaozuo',), ('Wenzhou',), ('Zhangjiang',), ('Zigong',), ('Shuangyashan',), ('Zaozhuang',), ('Yakeshi',), ('Yichang',), ('Zhenjiang',), ('Huaibei',), ('Qinhuangdao',), ('Guilin',), ('Liupanshui',), ('Panjin',), ('Yangquan',), ('Jinxi',), ('Liaoyuan',), ('Lianyungang',), ('Xianyang',), ('Tai\u00b4an',), ('Chifeng',), ('Shaoguan',), ('Nantong',), ('Leshan',), ('Baoji',), ('Linyi',), ('Tonghua',), ('Siping',), ('Changzhi',), ('Tengzhou',), ('Chaozhou',), ('Yangzhou',), ('Dongwan',), ('Ma\u00b4anshan',), ('Foshan',), ('Yueyang',), ('Xingtai',), ('Changde',), ('Shihezi',), ('Yancheng',), ('Jiujiang',), ('Dongying',), ('Shashi',), ('Xintai',), ('Jingdezhen',), ('Tongchuan',), ('Zhongshan',), ('Shiyan',), ('Tieli',), ('Jining',), ('Wuhai',), ('Mianyang',), ('Luzhou',), ('Zunyi',), ('Shizuishan',), ('Neijiang',), ('Tongliao',), ('Tieling',), ('Wafangdian',), ('Anqing',), ('Shaoyang',), ('Laiwu',), ('Chengde',), ('Tianshui',), ('Nanyang',), ('Cangzhou',), ('Yibin',), ('Huaiyin',), ('Dunhua',), ('Yanji',), ('Jiangmen',), ('Tongling',), ('Suihua',), ('Gongziling',), ('Xiantao',), ('Chaoyang',), ('Ganzhou',), ('Huzhou',), ('Baicheng',), ('Shangzi',), ('Yangjiang',), ('Qitaihe',), ('Gejiu',), ('Jiangyin',), ('Hebi',), ('Jiaxing',), ('Wuzhou',), ('Meihekou',), ('Xuchang',), ('Liaocheng',), ('Haicheng',), ('Qianjiang',), ('Baiyin',), ('Bei\u00b4an',), ('Yixing',), ('Laizhou',), ('Qaramay',), ('Acheng',), ('Dezhou',), ('Nanping',), ('Zhaoqing',), ('Beipiao',), ('Fengcheng',), ('Fuyu',), ('Xinyang',), ('Dongtai',), ('Yuci',), ('Honghu',), ('Ezhou',), ('Heze',), ('Daxian',), ('Linfen',), ('Tianmen',), ('Yiyang',), ('Quanzhou',), ('Rizhao',), ('Deyang',), ('Guangyuan',), ('Changshu',), ('Zhangzhou',), ('Hailar',), ('Nanchong',), ('Jiutai',), ('Zhaodong',), ('Shaoxing',), ('Fuyang',), ('Maoming',), ('Qujing',), ('Ghulja',), ('Jiaohe',), ('Puyang',), ('Huadian',), ('Jiangyou',), ('Qashqar',), ('Anshun',), ('Fuling',), ('Xinyu',), ('Hanzhong',), ('Danyang',), ('Chenzhou',), ('Xiaogan',), ('Shangqiu',), ('Zhuhai',), ('Qingyuan',), ('Aqsu',), ('Jining',), ('Xiaoshan',), ('Zaoyang',), ('Xinghua',), ('Hami',), ('Huizhou',), ('Jinmen',), ('Sanming',), ('Bishkek',), ('Osh',), ('Cartagena',), ('C\u00facuta',), ('Bucaramanga',), ('Ibagu\u00e9',), ('Pereira',), ('Santa Marta',), ('Manizales',), ('Bello',), ('Pasto',), ('Neiva',), ('Soledad',), ('Armenia',), ('Villavicencio',), ('Soacha',), ('Valledupar',), ('Monter\u00eda',), ('Itag\u00fc\u00ed',), ('Palmira',), ('Buenaventura',), ('Floridablanca',), ('Sincelejo',), ('Popay\u00e1n',), ('Barrancabermeja',), ('Pointe-Noire',), ('Lubumbashi',), ('Mbuji-Mayi',), ('Kolwezi',), ('Kisangani',), ('Kananga',), ('Likasi',), ('Bukavu',), ('Kikwit',), ('Tshikapa',), ('Matadi',), ('Mbandaka',), ('Hamhung',), ('Chongjin',), ('Nampo',), ('Sinuiju',), ('Wonsan',), ('Phyongsong',), ('Sariwon',), ('Haeju',), ('Kanggye',), ('Kimchaek',), ('Hyesan',), ('Kaesong',), ('Songnam',), ('Puchon',), ('Suwon',), ('Anyang',), ('Chonju',), ('Chongju',), ('Koyang',), ('Ansan',), ('Pohang',), ('Chang-won',), ('Masan',), ('Kwangmyong',), ('Chonan',), ('Chinju',), ('Iksan',), ('Pyongtaek',), ('Kumi',), ('Uijongbu',), ('Kyongju',), ('Kunsan',), ('Cheju',), ('Kimhae',), ('Sunchon',), ('Mokpo',), ('Yong-in',), ('Wonju',), ('Kunpo',), ('Chunchon',), ('Namyangju',), ('Kangnung',), ('Chungju',), ('Andong',), ('Yosu',), ('Kyongsan',), ('Paju',), ('Yangsan',), ('Athenai',), ('Thessaloniki',), ('Pireus',), ('Zagreb',), ('Split',), ('Rijeka',), ('Santiago de Cuba',), ('Camag\u00fcey',), ('Holgu\u00edn',), ('Santa Clara',), ('Guant\u00e1namo',), ('Nicosia',), ('Vientiane',), ('Riga',), ('Maseru',), ('Tripoli',), ('Monrovia',), ('Bengasi',), ('Vilnius',), ('Kaunas',), ('Klaipeda',), ('El-Aai\u00fan',), ('Macao',), ('Antananarivo',), ('Skopje',), ('Blantyre',), ('Lilongwe',), ('Ipoh',), ('Johor Baharu',), ('Petaling Jaya',), ('Kelang',), ('Kuala Terengganu',), ('Pinang',), ('Kota Bharu',), ('Kuantan',), ('Taiping',), ('Seremban',), ('Bamako',), ('Rabat',), ('Marrakech',), ('F\u00e8s',), ('Tanger',), ('Sal\u00e9',), ('Mekn\u00e8s',), ('Oujda',), ('K\u00e9nitra',), ('T\u00e9touan',), ('Safi',), ('Nouakchott',), ('Naucalpan de Ju\u00e1rez',), ('Mexicali',), ('Culiac\u00e1n',), ('Acapulco de Ju\u00e1rez',), ('Tlalnepantla de Baz',), ('M\u00e9rida',), ('Chihuahua',), ('San Luis Potos\u00ed',), ('Guadalupe',), ('Toluca',), ('Aguascalientes',), ('Quer\u00e9taro',), ('Morelia',), ('Hermosillo',), ('Saltillo',), ('Torre\u00f3n',), ('Centro (Villahermosa)',), ('San Nicol\u00e1s de los Garza',), ('Durango',), ('Chimalhuac\u00e1n',), ('Tlaquepaque',), ('Atizap\u00e1n de Zaragoza',), ('Veracruz',), ('Cuautitl\u00e1n Izcalli',), ('Irapuato',), ('Tuxtla Guti\u00e9rrez',), ('Tultitl\u00e1n',), ('Reynosa',), ('Benito Ju\u00e1rez',), ('Matamoros',), ('Xalapa',), ('Celaya',), ('Mazatl\u00e1n',), ('Ensenada',), ('Ahome',), ('Cajeme',), ('Cuernavaca',), ('Tonal\u00e1',), ('Valle de Chalco Solidaridad',), ('Nuevo Laredo',), ('Tepic',), ('Tampico',), ('Ixtapaluca',), ('Apodaca',), ('Guasave',), ('G\u00f3mez Palacio',), ('Tapachula',), ('Nicol\u00e1s Romero',), ('Coatzacoalcos',), ('Uruapan',), ('Victoria',), ('Oaxaca de Ju\u00e1rez',), ('Coacalco de Berrioz\u00e1bal',), ('Pachuca de Soto',), ('General Escobedo',), ('Salamanca',), ('Santa Catarina',), ('Tehuac\u00e1n',), ('Chalco',), ('C\u00e1rdenas',), ('Campeche',), ('La Paz',), ('Oth\u00f3n P. Blanco (Chetumal)',), ('Texcoco',), ('La Paz',), ('Metepec',), ('Monclova',), ('Huixquilucan',), ('Chilpancingo de los Bravo',), ('Puerto Vallarta',), ('Fresnillo',), ('Ciudad Madero',), ('Soledad de Graciano S\u00e1nchez',), ('San Juan del R\u00edo',), ('San Felipe del Progreso',), ('C\u00f3rdoba',), ('Tec\u00e1mac',), ('Ocosingo',), ('Carmen',), ('L\u00e1zaro C\u00e1rdenas',), ('Jiutepec',), ('Papantla',), ('Comalcalco',), ('Zamora',), ('Chisinau',), ('Tiraspol',), ('Ulan Bator',), ('Matola',), ('Beira',), ('Nampula',), ('Chimoio',), ('Mandalay',), ('Moulmein (Mawlamyine)',), ('Pegu (Bago)',), ('Bassein (Pathein)',), ('Windhoek',), ('Kathmandu',), ('Niamey',), ('Ogbomosho',), ('Kano',), ('Oshogbo',), ('Ilorin',), ('Abeokuta',), ('Port Harcourt',), ('Zaria',), ('Ilesha',), ('Onitsha',), ('Iwo',), ('Ado-Ekiti',), ('Abuja',), ('Kaduna',), ('Mushin',), ('Maiduguri',), ('Enugu',), ('Ede',), ('Aba',), ('Ife',), ('Ila',), ('Oyo',), ('Ikerre',), ('Benin City',), ('Iseyin',), ('Katsina',), ('Jos',), ('Sokoto',), ('Ilobu',), ('Offa',), ('Ikorodu',), ('Ilawe-Ekiti',), ('Owo',), ('Ikirun',), ('Shaki',), ('Calabar',), ('Ondo',), ('Akure',), ('Oslo',), ('Bergen',), ('Bouak\u00e9',), ('Quetta',), ('Islamabad',), ('Sargodha',), ('Sialkot',), ('Bahawalpur',), ('Sukkur',), ('Jhang',), ('Sheikhupura',), ('Larkana',), ('Gujrat',), ('Mardan',), ('Kasur',), ('Rahim Yar Khan',), ('Sahiwal',), ('Okara',), ('Wah',), ('Dera Ghazi Khan',), ('Mirpur Khas',), ('Nawabshah',), ('Mingora',), ('Chiniot',), ('Ciudad de Panam\u00e1',), ('San Miguelito',), ('Port Moresby',), ('Asunci\u00f3n',), ('Arequipa',), ('Trujillo',), ('Chiclayo',), ('Callao',), ('Iquitos',), ('Chimbote',), ('Huancayo',), ('Piura',), ('Cusco',), ('Pucallpa',), ('Tacna',), ('Ica',), ('Lisboa',), ('Porto',), ('San Juan',), ('Bayam\u00f3n',), ('Ponce',), ('Carolina',), ('L\u00f3dz',), ('Krak\u00f3w',), ('Wroclaw',), ('Poznan',), ('Gdansk',), ('Szczecin',), ('Bydgoszcz',), ('Lublin',), ('Katowice',), ('Bialystok',), ('Czestochowa',), ('Gdynia',), ('Sosnowiec',), ('Radom',), ('Kielce',), ('Gliwice',), ('Torun',), ('Bytom',), ('Zabrze',), ('Bielsko-Biala',), ('Olsztyn',), ('Rzesz\u00f3w',), ('Doha',), ('Marseille',), ('Lyon',), ('Toulouse',), ('Nice',), ('Nantes',), ('Strasbourg',), ('Montpellier',), ('Bordeaux',), ('Rennes',), ('Le Havre',), ('Reims',), ('Lille',), ('St-\u00c9tienne',), ('Toulon',), ('Iasi',), ('Constanta',), ('Cluj-Napoca',), ('Galati',), ('Timisoara',), ('Brasov',), ('Craiova',), ('Ploiesti',), ('Braila',), ('Oradea',), ('Bacau',), ('Pitesti',), ('Arad',), ('Sibiu',), ('T\u00e2rgu Mures',), ('Kigali',), ('Stockholm',), ('Gothenburg [G\u00f6teborg]',), ('Malm\u00f6',), ('Uppsala',), ('Frankfurt am Main',), ('Essen',), ('Dortmund',), ('Stuttgart',), ('D\u00fcsseldorf',), ('Bremen',), ('Duisburg',), ('Hannover',), ('Leipzig',), ('N\u00fcrnberg',), ('Dresden',), ('Bochum',), ('Wuppertal',), ('Bielefeld',), ('Mannheim',), ('Bonn',), ('Gelsenkirchen',), ('Karlsruhe',), ('Wiesbaden',), ('M\u00fcnster',), ('M\u00f6nchengladbach',), ('Chemnitz',), ('Augsburg',), ('Halle/Saale',), ('Braunschweig',), ('Aachen',), ('Krefeld',), ('Magdeburg',), ('Kiel',), ('Oberhausen',), ('L\u00fcbeck',), ('Hagen',), ('Rostock',), ('Freiburg im Breisgau',), ('Erfurt',), ('Kassel',), ('Saarbr\u00fccken',), ('Mainz',), ('Hamm',), ('Herne',), ('M\u00fclheim an der Ruhr',), ('Solingen',), ('Osnabr\u00fcck',), ('Ludwigshafen am Rhein',), ('Leverkusen',), ('Ndola',), ('Kitwe',), ('Medina',), ('al-Dammam',), ('al-Taif',), ('Tabuk',), ('Burayda',), ('al-Hufuf',), ('al-Mubarraz',), ('Khamis Mushayt',), ('Hail',), ('Pikine',), ('Dakar',), ('Thi\u00e8s',), ('Kaolack',), ('Ziguinchor',), ('Freetown',), ('Bratislava',), ('Ko\u0161ice',), ('Ljubljana',), ('Colombo',), ('Dehiwala',), ('Moratuwa',), ('Sharq al-Nil',), ('Port Sudan',), ('Kassala',), ('Obeid',), ('Nyala',), ('Wad Madani',), ('al-Qadarif',), ('Kusti',), ('Helsinki [Helsingfors]',), ('Espoo',), ('Tampere',), ('Vantaa',), ('Turku [\u00c5bo]',), ('Z\u00fcrich',), ('Geneve',), ('Basel',), ('Hims',), ('Hama',), ('Latakia',), ('Dushanbe',), ('Khujand',), ('Tainan',), ('Panchiao',), ('Chungho',), ('Keelung (Chilung)',), ('Sanchung',), ('Hsinchuang',), ('Hsinchu',), ('Chungli',), ('Fengshan',), ('Taoyuan',), ('Chiayi',), ('Hsintien',), ('Changhwa',), ('Yungho',), ('Tucheng',), ('Pingtung',), ('Yungkang',), ('Pingchen',), ('Tali',), ('Taiping',), ('Pate',), ('Fengyuan',), ('Luchou',), ('Dodoma',), ('Mwanza',), ('K\u00f8benhavn',), ('\u00c5rhus',), ('Odense',), ('Aalborg',), ('Nonthaburi',), ('Nakhon Ratchasima',), ('Chiang Mai',), ('Lom\u00e9',), ('N\u00b4Djam\u00e9na',), ('Brno',), ('Ostrava',), ('Plzen',), ('Tunis',), ('Sfax',), ('Ariana',), ('Ettadhamen',), ('Gaziantep',), ('Konya',), ('Mersin (I\u00e7el)',), ('Antalya',), ('Diyarbakir',), ('Kayseri',), ('Eskisehir',), ('Sanliurfa',), ('Samsun',), ('Malatya',), ('Gebze',), ('Denizli',), ('Sivas',), ('Erzurum',), ('Tarsus',), ('Kahramanmaras',), ('El\u00e2zig',), ('Van',), ('Sultanbeyli',), ('Izmit (Kocaeli)',), ('Manisa',), ('Batman',), ('Balikesir',), ('Sakarya (Adapazari)',), ('Ashgabat',), ('Ch\u00e4rjew',), ('Kampala',), ('Zaporizzja',), ('Lviv',), ('Kryvyi Rig',), ('Mykolajiv',), ('Mariupol',), ('Lugansk',), ('Vinnytsja',), ('Makijivka',), ('Herson',), ('Sevastopol',), ('Simferopol',), ('Pultava [Poltava]',), ('T\u0161ernigiv',), ('T\u0161erkasy',), ('Gorlivka',), ('Zytomyr',), ('Sumy',), ('Dniprodzerzynsk',), ('Kirovograd',), ('Hmelnytskyi',), ('T\u0161ernivtsi',), ('Rivne',), ('Krement\u0161uk',), ('Ivano-Frankivsk',), ('Ternopil',), ('Lutsk',), ('Bila Tserkva',), ('Kramatorsk',), ('Melitopol',), ('Kert\u0161',), ('Debrecen',), ('Miskolc',), ('Auckland',), ('Christchurch',), ('Manukau',), ('North Shore',), ('Waitakere',), ('Wellington',), ('Namangan',), ('Samarkand',), ('Andijon',), ('Buhoro',), ('Karsi',), ('Nukus',), ('K\u00fckon',), ('Fargona',), ('Gomel',), ('Mogiljov',), ('Vitebsk',), ('Grodno',), ('Brest',), ('Bobruisk',), ('Baranovit\u0161i',), ('Barquisimeto',), ('Valencia',), ('Ciudad Guayana',), ('Petare',), ('Maracay',), ('Barcelona',), ('Matur\u00edn',), ('San Crist\u00f3bal',), ('Ciudad Bol\u00edvar',), ('Cuman\u00e1',), ('M\u00e9rida',), ('Cabimas',), ('Barinas',), ('Turmero',), ('Baruta',), ('Puerto Cabello',), ('Santa Ana de Coro',), ('Los Teques',), ('Punto Fijo',), ('Guarenas',), ('Krasnojarsk',), ('Saratov',), ('Toljatti',), ('Uljanovsk',), ('Izevsk',), ('Krasnodar',), ('Jaroslavl',), ('Habarovsk',), ('Vladivostok',), ('Irkutsk',), ('Barnaul',), ('Novokuznetsk',), ('Penza',), ('Rjazan',), ('Orenburg',), ('Lipetsk',), ('Nabereznyje T\u0161elny',), ('Tula',), ('Tjumen',), ('Kemerovo',), ('Astrahan',), ('Tomsk',), ('Kirov',), ('Ivanovo',), ('T\u0161eboksary',), ('Brjansk',), ('Tver',), ('Kursk',), ('Magnitogorsk',), ('Kaliningrad',), ('Nizni Tagil',), ('Murmansk',), ('Ulan-Ude',), ('Kurgan',), ('Arkangeli',), ('Sot\u0161i',), ('Smolensk',), ('Orjol',), ('Stavropol',), ('Belgorod',), ('Kaluga',), ('Vladimir',), ('Mahat\u0161kala',), ('T\u0161erepovets',), ('Saransk',), ('Tambov',), ('Vladikavkaz',), ('T\u0161ita',), ('Vologda',), ('Veliki Novgorod',), ('Komsomolsk-na-Amure',), ('Kostroma',), ('Volzski',), ('Taganrog',), ('Petroskoi',), ('Bratsk',), ('Dzerzinsk',), ('Surgut',), ('Orsk',), ('Sterlitamak',), ('Angarsk',), ('Jo\u0161kar-Ola',), ('Rybinsk',), ('Prokopjevsk',), ('Niznevartovsk',), ('Nalt\u0161ik',), ('Syktyvkar',), ('Severodvinsk',), ('Bijsk',), ('Niznekamsk',), ('Blagove\u0161t\u0161ensk',), ('\u0160ahty',), ('Staryi Oskol',), ('Zelenograd',), ('Balakovo',), ('Novorossijsk',), ('Pihkova',), ('Zlatoust',), ('Jakutsk',), ('Podolsk',), ('Petropavlovsk-Kamt\u0161atski',), ('Kamensk-Uralski',), ('Engels',), ('Syzran',), ('Grozny',), ('Novot\u0161erkassk',), ('Berezniki',), ('Juzno-Sahalinsk',), ('Volgodonsk',), ('Abakan',), ('Maikop',), ('Miass',), ('Armavir',), ('Ljubertsy',), ('Rubtsovsk',), ('Haiphong',), ('Da Nang',), ('Bi\u00ean Hoa',), ('Nha Trang',), ('Hue',), ('Can Tho',), ('Cam Pha',), ('Nam Dinh',), ('Quy Nhon',), ('Tallinn',), ('San Jose',), ('Indianapolis',), ('San Francisco',), ('Jacksonville',), ('Columbus',), ('Austin',), ('Baltimore',), ('Memphis',), ('Milwaukee',), ('Boston',), ('Washington',), ('Nashville-Davidson',), ('El Paso',), ('Seattle',), ('Denver',), ('Charlotte',), ('Fort Worth',), ('Portland',), ('Oklahoma City',), ('Tucson',), ('New Orleans',), ('Las Vegas',), ('Cleveland',), ('Long Beach',), ('Albuquerque',), ('Kansas City',), ('Fresno',), ('Virginia Beach',), ('Atlanta',), ('Sacramento',), ('Oakland',), ('Mesa',), ('Tulsa',), ('Omaha',), ('Minneapolis',), ('Honolulu',), ('Miami',), ('Colorado Springs',), ('Saint Louis',), ('Wichita',), ('Santa Ana',), ('Pittsburgh',), ('Arlington',), ('Cincinnati',), ('Anaheim',), ('Toledo',), ('Tampa',), ('Buffalo',), ('Saint Paul',), ('Corpus Christi',), ('Aurora',), ('Raleigh',), ('Newark',), ('Lexington-Fayette',), ('Anchorage',), ('Louisville',), ('Riverside',), ('Saint Petersburg',), ('Bakersfield',), ('Stockton',), ('Birmingham',), ('Jersey City',), ('Norfolk',), ('Baton Rouge',), ('Hialeah',), ('Lincoln',), ('Greensboro',), ('Plano',), ('Rochester',), ('Glendale',), ('Akron',), ('Garland',), ('Madison',), ('Fort Wayne',), ('Fremont',), ('Scottsdale',), ('Montgomery',), ('Shreveport',), ('Augusta-Richmond County',), ('Lubbock',), ('Chesapeake',), ('Mobile',), ('Des Moines',), ('Grand Rapids',), ('Richmond',), ('Yonkers',), ('Spokane',), ('Glendale',), ('Tacoma',), ('Irving',), ('Huntington Beach',), ('Modesto',), ('Durham',), ('Columbus',), ('Orlando',), ('Boise City',), ('Winston-Salem',), ('San Bernardino',), ('Jackson',), ('Little Rock',), ('Salt Lake City',), ('Reno',), ('Newport News',), ('Chandler',), ('Laredo',), ('Henderson',), ('Arlington',), ('Knoxville',), ('Amarillo',), ('Providence',), ('Chula Vista',), ('Worcester',), ('Oxnard',), ('Dayton',), ('Garden Grove',), ('Oceanside',), ('Bulawayo',), ('Chitungwiza',), ('Mount Darwin',), ('Gaza',)]", "py_exec_result": "None", "gold_answer": [["Qandahar"], ["Herat"], ["Amsterdam"], ["Rotterdam"], ["Haag"], ["Utrecht"], ["Eindhoven"], ["Tilburg"], ["Groningen"], ["Breda"], ["Tirana"], ["Oran"], ["Constantine"], ["Annaba"], ["Batna"], ["S\u00e9tif"], ["Huambo"], ["Dubai"], ["Abu Dhabi"], ["Sharja"], ["al-Ayn"], ["Lomas de Zamora"], ["Quilmes"], ["Almirante Brown"], ["La Plata"], ["Mar del Plata"], ["San Miguel de Tucum\u00e1n"], ["Lan\u00fas"], ["Merlo"], ["General San Mart\u00edn"], ["Salta"], ["Moreno"], ["Santa F\u00e9"], ["Avellaneda"], ["Tres de Febrero"], ["Mor\u00f3n"], ["Florencio Varela"], ["San Isidro"], ["Tigre"], ["Malvinas Argentinas"], ["Vicente L\u00f3pez"], ["Berazategui"], ["Corrientes"], ["San Miguel"], ["Bah\u00eda Blanca"], ["Esteban Echeverr\u00eda"], ["Resistencia"], ["Jos\u00e9 C. Paz"], ["Paran\u00e1"], ["Godoy Cruz"], ["Posadas"], ["Guaymall\u00e9n"], ["Santiago del Estero"], ["San Salvador de Jujuy"], ["Hurlingham"], ["Neuqu\u00e9n"], ["Gjumri"], ["Vanadzor"], ["Canberra"], ["Gold Coast"], ["Newcastle"], ["Central Coast"], ["Wollongong"], ["G\u00e4nc\u00e4"], ["Sumqayit"], ["Nassau"], ["Khulna"], ["Rajshahi"], ["Narayanganj"], ["Rangpur"], ["Mymensingh"], ["Barisal"], ["Tungi"], ["Antwerpen"], ["Gent"], ["Charleroi"], ["Li\u00e8ge"], ["Cotonou"], ["Porto-Novo"], ["La Paz"], ["El Alto"], ["Cochabamba"], ["Oruro"], ["Sucre"], ["Sarajevo"], ["Gaborone"], ["S\u00e3o Gon\u00e7alo"], ["Nova Igua\u00e7u"], ["S\u00e3o Lu\u00eds"], ["Macei\u00f3"], ["Duque de Caxias"], ["S\u00e3o Bernardo do Campo"], ["Teresina"], ["Natal"], ["Osasco"], ["Campo Grande"], ["Santo Andr\u00e9"], ["Jo\u00e3o Pessoa"], ["Jaboat\u00e3o dos Guararapes"], ["Contagem"], ["S\u00e3o Jos\u00e9 dos Campos"], ["Uberl\u00e2ndia"], ["Feira de Santana"], ["Ribeir\u00e3o Preto"], ["Sorocaba"], ["Niter\u00f3i"], ["Cuiab\u00e1"], ["Juiz de Fora"], ["Aracaju"], ["S\u00e3o Jo\u00e3o de Meriti"], ["Londrina"], ["Joinville"], ["Belford Roxo"], ["Santos"], ["Ananindeua"], ["Campos dos Goytacazes"], ["Mau\u00e1"], ["Carapicu\u00edba"], ["Olinda"], ["Campina Grande"], ["S\u00e3o Jos\u00e9 do Rio Preto"], ["Caxias do Sul"], ["Moji das Cruzes"], ["Diadema"], ["Aparecida de Goi\u00e2nia"], ["Piracicaba"], ["Cariacica"], ["Vila Velha"], ["Pelotas"], ["Bauru"], ["Porto Velho"], ["Serra"], ["Betim"], ["Jund\u00eda\u00ed"], ["Canoas"], ["Franca"], ["S\u00e3o Vicente"], ["Maring\u00e1"], ["Montes Claros"], ["An\u00e1polis"], ["Florian\u00f3polis"], ["Petr\u00f3polis"], ["Itaquaquecetuba"], ["Vit\u00f3ria"], ["Ponta Grossa"], ["Rio Branco"], ["Foz do Igua\u00e7u"], ["Macap\u00e1"], ["Ilh\u00e9us"], ["Vit\u00f3ria da Conquista"], ["Uberaba"], ["Paulista"], ["Limeira"], ["Blumenau"], ["Caruaru"], ["Santar\u00e9m"], ["Volta Redonda"], ["Novo Hamburgo"], ["Caucaia"], ["Santa Maria"], ["Cascavel"], ["Guaruj\u00e1"], ["Ribeir\u00e3o das Neves"], ["Governador Valadares"], ["Taubat\u00e9"], ["Imperatriz"], ["Gravata\u00ed"], ["Embu"], ["Mossor\u00f3"], ["V\u00e1rzea Grande"], ["Petrolina"], ["Barueri"], ["Viam\u00e3o"], ["Ipatinga"], ["Juazeiro"], ["Juazeiro do Norte"], ["Tabo\u00e3o da Serra"], ["S\u00e3o Jos\u00e9 dos Pinhais"], ["Mag\u00e9"], ["Suzano"], ["S\u00e3o Leopoldo"], ["Mar\u00edlia"], ["S\u00e3o Carlos"], ["Sumar\u00e9"], ["Presidente Prudente"], ["Divin\u00f3polis"], ["Sete Lagoas"], ["Rio Grande"], ["Itabuna"], ["Jequi\u00e9"], ["Arapiraca"], ["Colombo"], ["Americana"], ["Alvorada"], ["Araraquara"], ["Itabora\u00ed"], ["Santa B\u00e1rbara d\u00b4Oeste"], ["Nova Friburgo"], ["Jacare\u00ed"], ["Ara\u00e7atuba"], ["Barra Mansa"], ["Praia Grande"], ["Marab\u00e1"], ["Crici\u00fama"], ["Boa Vista"], ["Passo Fundo"], ["Dourados"], ["Santa Luzia"], ["Rio Claro"], ["Maracana\u00fa"], ["Guarapuava"], ["Glasgow"], ["Liverpool"], ["Edinburgh"], ["Sheffield"], ["Manchester"], ["Leeds"], ["Bristol"], ["Cardiff"], ["Coventry"], ["Leicester"], ["Bradford"], ["Belfast"], ["Nottingham"], ["Kingston upon Hull"], ["Plymouth"], ["Stoke-on-Trent"], ["Wolverhampton"], ["Derby"], ["Swansea"], ["Southampton"], ["Aberdeen"], ["Northampton"], ["Dudley"], ["Portsmouth"], ["Newcastle upon Tyne"], ["Sunderland"], ["Luton"], ["Swindon"], ["Southend-on-Sea"], ["Walsall"], ["Bournemouth"], ["Plovdiv"], ["Varna"], ["Burgas"], ["Ruse"], ["Ouagadougou"], ["Bobo-Dioulasso"], ["Bujumbura"], ["Puente Alto"], ["Vi\u00f1a del Mar"], ["Valpara\u00edso"], ["Talcahuano"], ["Antofagasta"], ["San Bernardo"], ["Temuco"], ["Concepci\u00f3n"], ["Rancagua"], ["Arica"], ["Talca"], ["Chill\u00e1n"], ["Iquique"], ["San Jos\u00e9"], ["Djibouti"], ["Santiago de los Caballeros"], ["Cuenca"], ["Machala"], ["Santo Domingo de los Colorados"], ["Portoviejo"], ["Ambato"], ["Manta"], ["Shubra al-Khayma"], ["Port Said"], ["Suez"], ["al-Mahallat al-Kubra"], ["Tanta"], ["al-Mansura"], ["Luxor"], ["Asyut"], ["Bahtim"], ["Zagazig"], ["al-Faiyum"], ["Ismailia"], ["Kafr al-Dawwar"], ["Assuan"], ["Damanhur"], ["al-Minya"], ["Bani Suwayf"], ["Qina"], ["Sawhaj"], ["San Salvador"], ["Asmara"], ["Valencia"], ["Sevilla"], ["Zaragoza"], ["M\u00e1laga"], ["Bilbao"], ["Las Palmas de Gran Canaria"], ["Murcia"], ["Palma de Mallorca"], ["Valladolid"], ["C\u00f3rdoba"], ["Vigo"], ["Alicante [Alacant]"], ["Gij\u00f3n"], ["L\u00b4Hospitalet de Llobregat"], ["Granada"], ["A Coru\u00f1a (La Coru\u00f1a)"], ["Vitoria-Gasteiz"], ["Santa Cruz de Tenerife"], ["Badalona"], ["Oviedo"], ["M\u00f3stoles"], ["Elche [Elx]"], ["Sabadell"], ["Santander"], ["Jerez de la Frontera"], ["Pamplona [Iru\u00f1a]"], ["Donostia-San Sebasti\u00e1n"], ["Cartagena"], ["Legan\u00e9s"], ["Fuenlabrada"], ["Almer\u00eda"], ["Terrassa"], ["Alcal\u00e1 de Henares"], ["Burgos"], ["Johannesburg"], ["Port Elizabeth"], ["Pretoria"], ["Inanda"], ["Durban"], ["Vanderbijlpark"], ["Kempton Park"], ["Alberton"], ["Pinetown"], ["Pietermaritzburg"], ["Benoni"], ["Randburg"], ["Umlazi"], ["Bloemfontein"], ["Vereeniging"], ["Wonderboom"], ["Roodepoort"], ["Boksburg"], ["Klerksdorp"], ["Soshanguve"], ["Newcastle"], ["East London"], ["Welkom"], ["Kimberley"], ["Uitenhage"], ["Chatsworth"], ["Mdantsane"], ["Krugersdorp"], ["Botshabelo"], ["Brakpan"], ["Witbank"], ["Oberholzer"], ["Germiston"], ["Springs"], ["Dire Dawa"], ["Cebu"], ["Zamboanga"], ["Pasig"], ["Valenzuela"], ["Las Pi\u00f1as"], ["Antipolo"], ["Taguig"], ["Cagayan de Oro"], ["Para\u00f1aque"], ["Makati"], ["Bacolod"], ["General Santos"], ["Marikina"], ["Dasmari\u00f1as"], ["Muntinlupa"], ["Iloilo"], ["Pasay"], ["Malabon"], ["San Jos\u00e9 del Monte"], ["Bacoor"], ["Iligan"], ["Calamba"], ["Mandaluyong"], ["Butuan"], ["Angeles"], ["Tarlac"], ["Mandaue"], ["Baguio"], ["Batangas"], ["Cainta"], ["San Pedro"], ["Navotas"], ["Cabanatuan"], ["San Fernando"], ["Lipa"], ["Lapu-Lapu"], ["San Pablo"], ["Bi\u00f1an"], ["Taytay"], ["Lucena"], ["Imus"], ["Olongapo"], ["Binangonan"], ["Santa Rosa"], ["Tagum"], ["Tacloban"], ["Malolos"], ["Mabalacat"], ["Cotabato"], ["Meycauayan"], ["Puerto Princesa"], ["Libreville"], ["Kutaisi"], ["Kumasi"], ["Ciudad de Guatemala"], ["Mixco"], ["Bissau"], ["Georgetown"], ["Port-au-Prince"], ["Carrefour"], ["Delmas"], ["Tegucigalpa"], ["San Pedro Sula"], ["Malang"], ["Bandar Lampung"], ["Bekasi"], ["Padang"], ["Surakarta"], ["Banjarmasin"], ["Pekan Baru"], ["Denpasar"], ["Yogyakarta"], ["Pontianak"], ["Samarinda"], ["Jambi"], ["Depok"], ["Cimahi"], ["Balikpapan"], ["Manado"], ["Mataram"], ["Pekalongan"], ["Tegal"], ["Bogor"], ["Ciputat"], ["Pondokgede"], ["Cirebon"], ["Kediri"], ["Ambon"], ["Jember"], ["Cilacap"], ["Cimanggis"], ["Pematang Siantar"], ["Purwokerto"], ["Ciomas"], ["Tasikmalaya"], ["Madiun"], ["Srinagar"], ["Agra"], ["Coimbatore"], ["Thane (Thana)"], ["Allahabad"], ["Meerut"], ["Vishakhapatnam"], ["Jabalpur"], ["Amritsar"], ["Faridabad"], ["Vijayawada"], ["Gwalior"], ["Jodhpur"], ["Nashik (Nasik)"], ["Hubli-Dharwad"], ["Solapur (Sholapur)"], ["Ranchi"], ["Bareilly"], ["Guwahati (Gauhati)"], ["Shambajinagar (Aurangabad)"], ["Cochin (Kochi)"], ["Rajkot"], ["Kota"], ["Thiruvananthapuram (Trivandrum"], ["Pimpri-Chinchwad"], ["Jalandhar (Jullundur)"], ["Gorakhpur"], ["Chandigarh"], ["Mysore"], ["Aligarh"], ["Guntur"], ["Jamshedpur"], ["Ghaziabad"], ["Warangal"], ["Raipur"], ["Moradabad"], ["Durgapur"], ["Amravati"], ["Calicut (Kozhikode)"], ["Bikaner"], ["Bhubaneswar"], ["Kolhapur"], ["Kataka (Cuttack)"], ["Ajmer"], ["Bhavnagar"], ["Tiruchirapalli"], ["Bhilai"], ["Bhiwandi"], ["Saharanpur"], ["Ulhasnagar"], ["Salem"], ["Ujjain"], ["Malegaon"], ["Jamnagar"], ["Bokaro Steel City"], ["Akola"], ["Belgaum"], ["Rajahmundry"], ["Nellore"], ["Udaipur"], ["New Bombay"], ["Bhatpara"], ["Gulbarga"], ["New Delhi"], ["Jhansi"], ["Gaya"], ["Kakinada"], ["Dhule (Dhulia)"], ["Panihati"], ["Nanded (Nander)"], ["Mangalore"], ["Dehra Dun"], ["Kamarhati"], ["Davangere"], ["Asansol"], ["Bhagalpur"], ["Bellary"], ["Barddhaman (Burdwan)"], ["Rampur"], ["Jalgaon"], ["Muzaffarpur"], ["Nizamabad"], ["Muzaffarnagar"], ["Patiala"], ["Shahjahanpur"], ["Kurnool"], ["Tiruppur (Tirupper)"], ["Rohtak"], ["South Dum Dum"], ["Mathura"], ["Chandrapur"], ["Barahanagar (Baranagar)"], ["Darbhanga"], ["Siliguri (Shiliguri)"], ["Raurkela"], ["Ambattur"], ["Panipat"], ["Firozabad"], ["Ichalkaranji"], ["Jammu"], ["Ramagundam"], ["Eluru"], ["Brahmapur"], ["Alwar"], ["Pondicherry"], ["Thanjavur"], ["Bihar Sharif"], ["Tuticorin"], ["Imphal"], ["Latur"], ["Sagar"], ["Farrukhabad-cum-Fatehgarh"], ["Sangli"], ["Parbhani"], ["Nagar Coil"], ["Bijapur"], ["Kukatpalle"], ["Bally"], ["Bhilwara"], ["Ratlam"], ["Avadi"], ["Dindigul"], ["Ahmadnagar"], ["Bilaspur"], ["Shimoga"], ["Kharagpur"], ["Mira Bhayandar"], ["Vellore"], ["Jalna"], ["Burnpur"], ["Anantapur"], ["Allappuzha (Alleppey)"], ["Tirupati"], ["Karnal"], ["Burhanpur"], ["Hisar (Hissar)"], ["Tiruvottiyur"], ["Mirzapur-cum-Vindhyachal"], ["Secunderabad"], ["Nadiad"], ["Dewas"], ["Murwara (Katni)"], ["Ganganagar"], ["Vizianagaram"], ["Mosul"], ["Irbil"], ["Kirkuk"], ["Basra"], ["al-Sulaymaniya"], ["al-Najaf"], ["Karbala"], ["al-Hilla"], ["al-Nasiriya"], ["al-Amara"], ["al-Diwaniya"], ["al-Ramadi"], ["al-Kut"], ["Ahvaz"], ["Qom"], ["Kermanshah"], ["Urmia"], ["Zahedan"], ["Rasht"], ["Hamadan"], ["Kerman"], ["Arak"], ["Ardebil"], ["Yazd"], ["Qazvin"], ["Zanjan"], ["Sanandaj"], ["Bandar-e-Abbas"], ["Khorramabad"], ["Eslamshahr"], ["Borujerd"], ["Abadan"], ["Dezful"], ["Kashan"], ["Sari"], ["Gorgan"], ["Najafabad"], ["Sabzevar"], ["Khomeynishahr"], ["Dublin"], ["Jerusalem"], ["Tel Aviv-Jaffa"], ["Haifa"], ["Rishon Le Ziyyon"], ["Beerseba"], ["Holon"], ["Palermo"], ["Genova"], ["Bologna"], ["Firenze"], ["Catania"], ["Bari"], ["Venezia"], ["Messina"], ["Verona"], ["Trieste"], ["Padova"], ["Taranto"], ["Brescia"], ["Reggio di Calabria"], ["Modena"], ["Prato"], ["Parma"], ["Cagliari"], ["Livorno"], ["Graz"], ["Linz"], ["Chiba"], ["Sakai"], ["Kumamoto"], ["Okayama"], ["Sagamihara"], ["Hamamatsu"], ["Kagoshima"], ["Funabashi"], ["Higashiosaka"], ["Hachioji"], ["Niigata"], ["Amagasaki"], ["Himeji"], ["Shizuoka"], ["Urawa"], ["Matsuyama"], ["Matsudo"], ["Kanazawa"], ["Kawaguchi"], ["Ichikawa"], ["Omiya"], ["Utsunomiya"], ["Oita"], ["Nagasaki"], ["Yokosuka"], ["Kurashiki"], ["Gifu"], ["Hirakata"], ["Nishinomiya"], ["Toyonaka"], ["Wakayama"], ["Fukuyama"], ["Fujisawa"], ["Asahikawa"], ["Machida"], ["Nara"], ["Takatsuki"], ["Iwaki"], ["Nagano"], ["Toyohashi"], ["Toyota"], ["Suita"], ["Takamatsu"], ["Koriyama"], ["Okazaki"], ["Kawagoe"], ["Tokorozawa"], ["Toyama"], ["Kochi"], ["Kashiwa"], ["Akita"], ["Miyazaki"], ["Koshigaya"], ["Naha"], ["Aomori"], ["Hakodate"], ["Akashi"], ["Yokkaichi"], ["Fukushima"], ["Morioka"], ["Maebashi"], ["Kasugai"], ["Otsu"], ["Ichihara"], ["Yao"], ["Ichinomiya"], ["Tokushima"], ["Kakogawa"], ["Ibaraki"], ["Neyagawa"], ["Shimonoseki"], ["Yamagata"], ["Fukui"], ["Hiratsuka"], ["Mito"], ["Sasebo"], ["Hachinohe"], ["Takasaki"], ["Shimizu"], ["Kurume"], ["Fuji"], ["Soka"], ["Fuchu"], ["Chigasaki"], ["Atsugi"], ["Numazu"], ["Ageo"], ["Yamato"], ["Matsumoto"], ["Kure"], ["Takarazuka"], ["Kasukabe"], ["Chofu"], ["Odawara"], ["Kofu"], ["Kushiro"], ["Kishiwada"], ["Hitachi"], ["Nagaoka"], ["Itami"], ["Uji"], ["Suzuka"], ["Hirosaki"], ["Ube"], ["Kodaira"], ["Takaoka"], ["Obihiro"], ["Tomakomai"], ["Saga"], ["Sakura"], ["Kamakura"], ["Mitaka"], ["Izumi"], ["Hino"], ["Hadano"], ["Ashikaga"], ["Tsu"], ["Sayama"], ["Yachiyo"], ["Tsukuba"], ["Sanaa"], ["Aden"], ["Taizz"], ["Hodeida"], ["al-Zarqa"], ["Irbid"], ["Novi Sad"], ["Ni\u0161"], ["Phnom Penh"], ["Garoua"], ["Calgary"], ["Toronto"], ["North York"], ["Winnipeg"], ["Edmonton"], ["Mississauga"], ["Scarborough"], ["Vancouver"], ["Etobicoke"], ["London"], ["Hamilton"], ["Ottawa"], ["Laval"], ["Surrey"], ["Brampton"], ["Windsor"], ["Saskatoon"], ["Kitchener"], ["Markham"], ["Regina"], ["Burnaby"], ["Qu\u00e9bec"], ["Qaraghandy"], ["Shymkent"], ["Taraz"], ["Astana"], ["\u00d6skemen"], ["Pavlodar"], ["Semey"], ["Aqt\u00f6be"], ["Qostanay"], ["Petropavl"], ["Oral"], ["Temirtau"], ["Mombasa"], ["Kisumu"], ["Nakuru"], ["Bangui"], ["Handan"], ["Wuxi"], ["Xuzhou"], ["Datong"], ["Yichun"], ["Benxi"], ["Luoyang"], ["Suzhou"], ["Xining"], ["Huainan"], ["Jixi"], ["Daqing"], ["Fuxin"], ["Amoy [Xiamen]"], ["Liuzhou"], ["Shantou"], ["Jinzhou"], ["Mudanjiang"], ["Yinchuan"], ["Changzhou"], ["Zhangjiakou"], ["Dandong"], ["Hegang"], ["Kaifeng"], ["Jiamusi"], ["Liaoyang"], ["Hengyang"], ["Baoding"], ["Hunjiang"], ["Xinxiang"], ["Huangshi"], ["Haikou"], ["Yantai"], ["Bengbu"], ["Xiangtan"], ["Weifang"], ["Wuhu"], ["Pingxiang"], ["Yingkou"], ["Anyang"], ["Panzhihua"], ["Pingdingshan"], ["Xiangfan"], ["Zhuzhou"], ["Jiaozuo"], ["Wenzhou"], ["Zhangjiang"], ["Zigong"], ["Shuangyashan"], ["Zaozhuang"], ["Yakeshi"], ["Yichang"], ["Zhenjiang"], ["Huaibei"], ["Qinhuangdao"], ["Guilin"], ["Liupanshui"], ["Panjin"], ["Yangquan"], ["Jinxi"], ["Liaoyuan"], ["Lianyungang"], ["Xianyang"], ["Tai\u00b4an"], ["Chifeng"], ["Shaoguan"], ["Nantong"], ["Leshan"], ["Baoji"], ["Linyi"], ["Tonghua"], ["Siping"], ["Changzhi"], ["Tengzhou"], ["Chaozhou"], ["Yangzhou"], ["Dongwan"], ["Ma\u00b4anshan"], ["Foshan"], ["Yueyang"], ["Xingtai"], ["Changde"], ["Shihezi"], ["Yancheng"], ["Jiujiang"], ["Dongying"], ["Shashi"], ["Xintai"], ["Jingdezhen"], ["Tongchuan"], ["Zhongshan"], ["Shiyan"], ["Tieli"], ["Jining"], ["Wuhai"], ["Mianyang"], ["Luzhou"], ["Zunyi"], ["Shizuishan"], ["Neijiang"], ["Tongliao"], ["Tieling"], ["Wafangdian"], ["Anqing"], ["Shaoyang"], ["Laiwu"], ["Chengde"], ["Tianshui"], ["Nanyang"], ["Cangzhou"], ["Yibin"], ["Huaiyin"], ["Dunhua"], ["Yanji"], ["Jiangmen"], ["Tongling"], ["Suihua"], ["Gongziling"], ["Xiantao"], ["Chaoyang"], ["Ganzhou"], ["Huzhou"], ["Baicheng"], ["Shangzi"], ["Yangjiang"], ["Qitaihe"], ["Gejiu"], ["Jiangyin"], ["Hebi"], ["Jiaxing"], ["Wuzhou"], ["Meihekou"], ["Xuchang"], ["Liaocheng"], ["Haicheng"], ["Qianjiang"], ["Baiyin"], ["Bei\u00b4an"], ["Yixing"], ["Laizhou"], ["Qaramay"], ["Acheng"], ["Dezhou"], ["Nanping"], ["Zhaoqing"], ["Beipiao"], ["Fengcheng"], ["Fuyu"], ["Xinyang"], ["Dongtai"], ["Yuci"], ["Honghu"], ["Ezhou"], ["Heze"], ["Daxian"], ["Linfen"], ["Tianmen"], ["Yiyang"], ["Quanzhou"], ["Rizhao"], ["Deyang"], ["Guangyuan"], ["Changshu"], ["Zhangzhou"], ["Hailar"], ["Nanchong"], ["Jiutai"], ["Zhaodong"], ["Shaoxing"], ["Fuyang"], ["Maoming"], ["Qujing"], ["Ghulja"], ["Jiaohe"], ["Puyang"], ["Huadian"], ["Jiangyou"], ["Qashqar"], ["Anshun"], ["Fuling"], ["Xinyu"], ["Hanzhong"], ["Danyang"], ["Chenzhou"], ["Xiaogan"], ["Shangqiu"], ["Zhuhai"], ["Qingyuan"], ["Aqsu"], ["Jining"], ["Xiaoshan"], ["Zaoyang"], ["Xinghua"], ["Hami"], ["Huizhou"], ["Jinmen"], ["Sanming"], ["Bishkek"], ["Osh"], ["Cartagena"], ["C\u00facuta"], ["Bucaramanga"], ["Ibagu\u00e9"], ["Pereira"], ["Santa Marta"], ["Manizales"], ["Bello"], ["Pasto"], ["Neiva"], ["Soledad"], ["Armenia"], ["Villavicencio"], ["Soacha"], ["Valledupar"], ["Monter\u00eda"], ["Itag\u00fc\u00ed"], ["Palmira"], ["Buenaventura"], ["Floridablanca"], ["Sincelejo"], ["Popay\u00e1n"], ["Barrancabermeja"], ["Pointe-Noire"], ["Lubumbashi"], ["Mbuji-Mayi"], ["Kolwezi"], ["Kisangani"], ["Kananga"], ["Likasi"], ["Bukavu"], ["Kikwit"], ["Tshikapa"], ["Matadi"], ["Mbandaka"], ["Hamhung"], ["Chongjin"], ["Nampo"], ["Sinuiju"], ["Wonsan"], ["Phyongsong"], ["Sariwon"], ["Haeju"], ["Kanggye"], ["Kimchaek"], ["Hyesan"], ["Kaesong"], ["Songnam"], ["Puchon"], ["Suwon"], ["Anyang"], ["Chonju"], ["Chongju"], ["Koyang"], ["Ansan"], ["Pohang"], ["Chang-won"], ["Masan"], ["Kwangmyong"], ["Chonan"], ["Chinju"], ["Iksan"], ["Pyongtaek"], ["Kumi"], ["Uijongbu"], ["Kyongju"], ["Kunsan"], ["Cheju"], ["Kimhae"], ["Sunchon"], ["Mokpo"], ["Yong-in"], ["Wonju"], ["Kunpo"], ["Chunchon"], ["Namyangju"], ["Kangnung"], ["Chungju"], ["Andong"], ["Yosu"], ["Kyongsan"], ["Paju"], ["Yangsan"], ["Athenai"], ["Thessaloniki"], ["Pireus"], ["Zagreb"], ["Split"], ["Rijeka"], ["Santiago de Cuba"], ["Camag\u00fcey"], ["Holgu\u00edn"], ["Santa Clara"], ["Guant\u00e1namo"], ["Nicosia"], ["Vientiane"], ["Riga"], ["Maseru"], ["Tripoli"], ["Monrovia"], ["Bengasi"], ["Vilnius"], ["Kaunas"], ["Klaipeda"], ["El-Aai\u00fan"], ["Macao"], ["Antananarivo"], ["Skopje"], ["Blantyre"], ["Lilongwe"], ["Ipoh"], ["Johor Baharu"], ["Petaling Jaya"], ["Kelang"], ["Kuala Terengganu"], ["Pinang"], ["Kota Bharu"], ["Kuantan"], ["Taiping"], ["Seremban"], ["Bamako"], ["Rabat"], ["Marrakech"], ["F\u00e8s"], ["Tanger"], ["Sal\u00e9"], ["Mekn\u00e8s"], ["Oujda"], ["K\u00e9nitra"], ["T\u00e9touan"], ["Safi"], ["Nouakchott"], ["Naucalpan de Ju\u00e1rez"], ["Mexicali"], ["Culiac\u00e1n"], ["Acapulco de Ju\u00e1rez"], ["Tlalnepantla de Baz"], ["M\u00e9rida"], ["Chihuahua"], ["San Luis Potos\u00ed"], ["Guadalupe"], ["Toluca"], ["Aguascalientes"], ["Quer\u00e9taro"], ["Morelia"], ["Hermosillo"], ["Saltillo"], ["Torre\u00f3n"], ["Centro (Villahermosa)"], ["San Nicol\u00e1s de los Garza"], ["Durango"], ["Chimalhuac\u00e1n"], ["Tlaquepaque"], ["Atizap\u00e1n de Zaragoza"], ["Veracruz"], ["Cuautitl\u00e1n Izcalli"], ["Irapuato"], ["Tuxtla Guti\u00e9rrez"], ["Tultitl\u00e1n"], ["Reynosa"], ["Benito Ju\u00e1rez"], ["Matamoros"], ["Xalapa"], ["Celaya"], ["Mazatl\u00e1n"], ["Ensenada"], ["Ahome"], ["Cajeme"], ["Cuernavaca"], ["Tonal\u00e1"], ["Valle de Chalco Solidaridad"], ["Nuevo Laredo"], ["Tepic"], ["Tampico"], ["Ixtapaluca"], ["Apodaca"], ["Guasave"], ["G\u00f3mez Palacio"], ["Tapachula"], ["Nicol\u00e1s Romero"], ["Coatzacoalcos"], ["Uruapan"], ["Victoria"], ["Oaxaca de Ju\u00e1rez"], ["Coacalco de Berrioz\u00e1bal"], ["Pachuca de Soto"], ["General Escobedo"], ["Salamanca"], ["Santa Catarina"], ["Tehuac\u00e1n"], ["Chalco"], ["C\u00e1rdenas"], ["Campeche"], ["La Paz"], ["Oth\u00f3n P. Blanco (Chetumal)"], ["Texcoco"], ["La Paz"], ["Metepec"], ["Monclova"], ["Huixquilucan"], ["Chilpancingo de los Bravo"], ["Puerto Vallarta"], ["Fresnillo"], ["Ciudad Madero"], ["Soledad de Graciano S\u00e1nchez"], ["San Juan del R\u00edo"], ["San Felipe del Progreso"], ["C\u00f3rdoba"], ["Tec\u00e1mac"], ["Ocosingo"], ["Carmen"], ["L\u00e1zaro C\u00e1rdenas"], ["Jiutepec"], ["Papantla"], ["Comalcalco"], ["Zamora"], ["Chisinau"], ["Tiraspol"], ["Ulan Bator"], ["Matola"], ["Beira"], ["Nampula"], ["Chimoio"], ["Mandalay"], ["Moulmein (Mawlamyine)"], ["Pegu (Bago)"], ["Bassein (Pathein)"], ["Windhoek"], ["Kathmandu"], ["Niamey"], ["Ogbomosho"], ["Kano"], ["Oshogbo"], ["Ilorin"], ["Abeokuta"], ["Port Harcourt"], ["Zaria"], ["Ilesha"], ["Onitsha"], ["Iwo"], ["Ado-Ekiti"], ["Abuja"], ["Kaduna"], ["Mushin"], ["Maiduguri"], ["Enugu"], ["Ede"], ["Aba"], ["Ife"], ["Ila"], ["Oyo"], ["Ikerre"], ["Benin City"], ["Iseyin"], ["Katsina"], ["Jos"], ["Sokoto"], ["Ilobu"], ["Offa"], ["Ikorodu"], ["Ilawe-Ekiti"], ["Owo"], ["Ikirun"], ["Shaki"], ["Calabar"], ["Ondo"], ["Akure"], ["Oslo"], ["Bergen"], ["Bouak\u00e9"], ["Quetta"], ["Islamabad"], ["Sargodha"], ["Sialkot"], ["Bahawalpur"], ["Sukkur"], ["Jhang"], ["Sheikhupura"], ["Larkana"], ["Gujrat"], ["Mardan"], ["Kasur"], ["Rahim Yar Khan"], ["Sahiwal"], ["Okara"], ["Wah"], ["Dera Ghazi Khan"], ["Mirpur Khas"], ["Nawabshah"], ["Mingora"], ["Chiniot"], ["Ciudad de Panam\u00e1"], ["San Miguelito"], ["Port Moresby"], ["Asunci\u00f3n"], ["Arequipa"], ["Trujillo"], ["Chiclayo"], ["Callao"], ["Iquitos"], ["Chimbote"], ["Huancayo"], ["Piura"], ["Cusco"], ["Pucallpa"], ["Tacna"], ["Ica"], ["Lisboa"], ["Porto"], ["San Juan"], ["Bayam\u00f3n"], ["Ponce"], ["Carolina"], ["L\u00f3dz"], ["Krak\u00f3w"], ["Wroclaw"], ["Poznan"], ["Gdansk"], ["Szczecin"], ["Bydgoszcz"], ["Lublin"], ["Katowice"], ["Bialystok"], ["Czestochowa"], ["Gdynia"], ["Sosnowiec"], ["Radom"], ["Kielce"], ["Gliwice"], ["Torun"], ["Bytom"], ["Zabrze"], ["Bielsko-Biala"], ["Olsztyn"], ["Rzesz\u00f3w"], ["Doha"], ["Marseille"], ["Lyon"], ["Toulouse"], ["Nice"], ["Nantes"], ["Strasbourg"], ["Montpellier"], ["Bordeaux"], ["Rennes"], ["Le Havre"], ["Reims"], ["Lille"], ["St-\u00c9tienne"], ["Toulon"], ["Iasi"], ["Constanta"], ["Cluj-Napoca"], ["Galati"], ["Timisoara"], ["Brasov"], ["Craiova"], ["Ploiesti"], ["Braila"], ["Oradea"], ["Bacau"], ["Pitesti"], ["Arad"], ["Sibiu"], ["T\u00e2rgu Mures"], ["Kigali"], ["Stockholm"], ["Gothenburg [G\u00f6teborg]"], ["Malm\u00f6"], ["Uppsala"], ["Frankfurt am Main"], ["Essen"], ["Dortmund"], ["Stuttgart"], ["D\u00fcsseldorf"], ["Bremen"], ["Duisburg"], ["Hannover"], ["Leipzig"], ["N\u00fcrnberg"], ["Dresden"], ["Bochum"], ["Wuppertal"], ["Bielefeld"], ["Mannheim"], ["Bonn"], ["Gelsenkirchen"], ["Karlsruhe"], ["Wiesbaden"], ["M\u00fcnster"], ["M\u00f6nchengladbach"], ["Chemnitz"], ["Augsburg"], ["Halle/Saale"], ["Braunschweig"], ["Aachen"], ["Krefeld"], ["Magdeburg"], ["Kiel"], ["Oberhausen"], ["L\u00fcbeck"], ["Hagen"], ["Rostock"], ["Freiburg im Breisgau"], ["Erfurt"], ["Kassel"], ["Saarbr\u00fccken"], ["Mainz"], ["Hamm"], ["Herne"], ["M\u00fclheim an der Ruhr"], ["Solingen"], ["Osnabr\u00fcck"], ["Ludwigshafen am Rhein"], ["Leverkusen"], ["Ndola"], ["Kitwe"], ["Medina"], ["al-Dammam"], ["al-Taif"], ["Tabuk"], ["Burayda"], ["al-Hufuf"], ["al-Mubarraz"], ["Khamis Mushayt"], ["Hail"], ["Pikine"], ["Dakar"], ["Thi\u00e8s"], ["Kaolack"], ["Ziguinchor"], ["Freetown"], ["Bratislava"], ["Ko\u0161ice"], ["Ljubljana"], ["Colombo"], ["Dehiwala"], ["Moratuwa"], ["Sharq al-Nil"], ["Port Sudan"], ["Kassala"], ["Obeid"], ["Nyala"], ["Wad Madani"], ["al-Qadarif"], ["Kusti"], ["Helsinki [Helsingfors]"], ["Espoo"], ["Tampere"], ["Vantaa"], ["Turku [\u00c5bo]"], ["Z\u00fcrich"], ["Geneve"], ["Basel"], ["Hims"], ["Hama"], ["Latakia"], ["Dushanbe"], ["Khujand"], ["Tainan"], ["Panchiao"], ["Chungho"], ["Keelung (Chilung)"], ["Sanchung"], ["Hsinchuang"], ["Hsinchu"], ["Chungli"], ["Fengshan"], ["Taoyuan"], ["Chiayi"], ["Hsintien"], ["Changhwa"], ["Yungho"], ["Tucheng"], ["Pingtung"], ["Yungkang"], ["Pingchen"], ["Tali"], ["Taiping"], ["Pate"], ["Fengyuan"], ["Luchou"], ["Dodoma"], ["Mwanza"], ["K\u00f8benhavn"], ["\u00c5rhus"], ["Odense"], ["Aalborg"], ["Nonthaburi"], ["Nakhon Ratchasima"], ["Chiang Mai"], ["Lom\u00e9"], ["N\u00b4Djam\u00e9na"], ["Brno"], ["Ostrava"], ["Plzen"], ["Tunis"], ["Sfax"], ["Ariana"], ["Ettadhamen"], ["Gaziantep"], ["Konya"], ["Mersin (I\u00e7el)"], ["Antalya"], ["Diyarbakir"], ["Kayseri"], ["Eskisehir"], ["Sanliurfa"], ["Samsun"], ["Malatya"], ["Gebze"], ["Denizli"], ["Sivas"], ["Erzurum"], ["Tarsus"], ["Kahramanmaras"], ["El\u00e2zig"], ["Van"], ["Sultanbeyli"], ["Izmit (Kocaeli)"], ["Manisa"], ["Batman"], ["Balikesir"], ["Sakarya (Adapazari)"], ["Ashgabat"], ["Ch\u00e4rjew"], ["Kampala"], ["Zaporizzja"], ["Lviv"], ["Kryvyi Rig"], ["Mykolajiv"], ["Mariupol"], ["Lugansk"], ["Vinnytsja"], ["Makijivka"], ["Herson"], ["Sevastopol"], ["Simferopol"], ["Pultava [Poltava]"], ["T\u0161ernigiv"], ["T\u0161erkasy"], ["Gorlivka"], ["Zytomyr"], ["Sumy"], ["Dniprodzerzynsk"], ["Kirovograd"], ["Hmelnytskyi"], ["T\u0161ernivtsi"], ["Rivne"], ["Krement\u0161uk"], ["Ivano-Frankivsk"], ["Ternopil"], ["Lutsk"], ["Bila Tserkva"], ["Kramatorsk"], ["Melitopol"], ["Kert\u0161"], ["Debrecen"], ["Miskolc"], ["Auckland"], ["Christchurch"], ["Manukau"], ["North Shore"], ["Waitakere"], ["Wellington"], ["Namangan"], ["Samarkand"], ["Andijon"], ["Buhoro"], ["Karsi"], ["Nukus"], ["K\u00fckon"], ["Fargona"], ["Gomel"], ["Mogiljov"], ["Vitebsk"], ["Grodno"], ["Brest"], ["Bobruisk"], ["Baranovit\u0161i"], ["Barquisimeto"], ["Valencia"], ["Ciudad Guayana"], ["Petare"], ["Maracay"], ["Barcelona"], ["Matur\u00edn"], ["San Crist\u00f3bal"], ["Ciudad Bol\u00edvar"], ["Cuman\u00e1"], ["M\u00e9rida"], ["Cabimas"], ["Barinas"], ["Turmero"], ["Baruta"], ["Puerto Cabello"], ["Santa Ana de Coro"], ["Los Teques"], ["Punto Fijo"], ["Guarenas"], ["Krasnojarsk"], ["Saratov"], ["Toljatti"], ["Uljanovsk"], ["Izevsk"], ["Krasnodar"], ["Jaroslavl"], ["Habarovsk"], ["Vladivostok"], ["Irkutsk"], ["Barnaul"], ["Novokuznetsk"], ["Penza"], ["Rjazan"], ["Orenburg"], ["Lipetsk"], ["Nabereznyje T\u0161elny"], ["Tula"], ["Tjumen"], ["Kemerovo"], ["Astrahan"], ["Tomsk"], ["Kirov"], ["Ivanovo"], ["T\u0161eboksary"], ["Brjansk"], ["Tver"], ["Kursk"], ["Magnitogorsk"], ["Kaliningrad"], ["Nizni Tagil"], ["Murmansk"], ["Ulan-Ude"], ["Kurgan"], ["Arkangeli"], ["Sot\u0161i"], ["Smolensk"], ["Orjol"], ["Stavropol"], ["Belgorod"], ["Kaluga"], ["Vladimir"], ["Mahat\u0161kala"], ["T\u0161erepovets"], ["Saransk"], ["Tambov"], ["Vladikavkaz"], ["T\u0161ita"], ["Vologda"], ["Veliki Novgorod"], ["Komsomolsk-na-Amure"], ["Kostroma"], ["Volzski"], ["Taganrog"], ["Petroskoi"], ["Bratsk"], ["Dzerzinsk"], ["Surgut"], ["Orsk"], ["Sterlitamak"], ["Angarsk"], ["Jo\u0161kar-Ola"], ["Rybinsk"], ["Prokopjevsk"], ["Niznevartovsk"], ["Nalt\u0161ik"], ["Syktyvkar"], ["Severodvinsk"], ["Bijsk"], ["Niznekamsk"], ["Blagove\u0161t\u0161ensk"], ["\u0160ahty"], ["Staryi Oskol"], ["Zelenograd"], ["Balakovo"], ["Novorossijsk"], ["Pihkova"], ["Zlatoust"], ["Jakutsk"], ["Podolsk"], ["Petropavlovsk-Kamt\u0161atski"], ["Kamensk-Uralski"], ["Engels"], ["Syzran"], ["Grozny"], ["Novot\u0161erkassk"], ["Berezniki"], ["Juzno-Sahalinsk"], ["Volgodonsk"], ["Abakan"], ["Maikop"], ["Miass"], ["Armavir"], ["Ljubertsy"], ["Rubtsovsk"], ["Haiphong"], ["Da Nang"], ["Bi\u00ean Hoa"], ["Nha Trang"], ["Hue"], ["Can Tho"], ["Cam Pha"], ["Nam Dinh"], ["Quy Nhon"], ["Tallinn"], ["San Jose"], ["Indianapolis"], ["San Francisco"], ["Jacksonville"], ["Columbus"], ["Austin"], ["Baltimore"], ["Memphis"], ["Milwaukee"], ["Boston"], ["Washington"], ["Nashville-Davidson"], ["El Paso"], ["Seattle"], ["Denver"], ["Charlotte"], ["Fort Worth"], ["Portland"], ["Oklahoma City"], ["Tucson"], ["New Orleans"], ["Las Vegas"], ["Cleveland"], ["Long Beach"], ["Albuquerque"], ["Kansas City"], ["Fresno"], ["Virginia Beach"], ["Atlanta"], ["Sacramento"], ["Oakland"], ["Mesa"], ["Tulsa"], ["Omaha"], ["Minneapolis"], ["Honolulu"], ["Miami"], ["Colorado Springs"], ["Saint Louis"], ["Wichita"], ["Santa Ana"], ["Pittsburgh"], ["Arlington"], ["Cincinnati"], ["Anaheim"], ["Toledo"], ["Tampa"], ["Buffalo"], ["Saint Paul"], ["Corpus Christi"], ["Aurora"], ["Raleigh"], ["Newark"], ["Lexington-Fayette"], ["Anchorage"], ["Louisville"], ["Riverside"], ["Saint Petersburg"], ["Bakersfield"], ["Stockton"], ["Birmingham"], ["Jersey City"], ["Norfolk"], ["Baton Rouge"], ["Hialeah"], ["Lincoln"], ["Greensboro"], ["Plano"], ["Rochester"], ["Glendale"], ["Akron"], ["Garland"], ["Madison"], ["Fort Wayne"], ["Fremont"], ["Scottsdale"], ["Montgomery"], ["Shreveport"], ["Augusta-Richmond County"], ["Lubbock"], ["Chesapeake"], ["Mobile"], ["Des Moines"], ["Grand Rapids"], ["Richmond"], ["Yonkers"], ["Spokane"], ["Glendale"], ["Tacoma"], ["Irving"], ["Huntington Beach"], ["Modesto"], ["Durham"], ["Columbus"], ["Orlando"], ["Boise City"], ["Winston-Salem"], ["San Bernardino"], ["Jackson"], ["Little Rock"], ["Salt Lake City"], ["Reno"], ["Newport News"], ["Chandler"], ["Laredo"], ["Henderson"], ["Arlington"], ["Knoxville"], ["Amarillo"], ["Providence"], ["Chula Vista"], ["Worcester"], ["Oxnard"], ["Dayton"], ["Garden Grove"], ["Oceanside"], ["Bulawayo"], ["Chitungwiza"], ["Mount Darwin"], ["Gaza"]], "gold_sql": "select name from city where population between 160000 and 900000", "gold_py": null}}
{"db_id": "tvshow", "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "query_toks": ["SELECT", "count", "(", "DISTINCT", "series_name", ")", ",", "count", "(", "DISTINCT", "content", ")", "FROM", "TV_Channel", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "series_name", ")", ",", "count", "(", "distinct", "content", ")", "from", "tv_channel"], "question": "How many different series and contents are listed in the TV Channel table?", "question_toks": ["How", "many", "different", "series", "and", "contents", "are", "listed", "in", "the", "TV", "Channel", "table", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 2, true], null]], [3, [0, [0, 5, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"TV_Channel": ["id", "series_name", "Country", "Language", "Content", "Pixel_aspect_ratio_PAR", "Hight_definition_TV", "Pay_per_view_PPV", "Package_Option"], "TV_series": ["id", "Episode", "Air_Date", "Rating", "Share", "18_49_Rating_Share", "Viewers_m", "Weekly_Rank", "Channel"], "Cartoon": ["id", "Title", "Directed_by", "Written_by", "Original_air_date", "Production_code", "Channel"]}, "answer": [[15, 1]], "results": {"generated_sql": "SELECT COUNT(DISTINCT T1.series_name) AS 'Series', COUNT(DISTINCT T1.content) AS 'Content' FROM TV_Channel AS T1", "generated_py": "answer = TV_Channel[['series_name', 'content']].drop_duplicates().shape[0]", "sql_exec_result": "[(15, 1)]", "py_exec_result": "15", "gold_answer": [[15, 1]], "gold_sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "gold_py": null}}
{"db_id": "car_1", "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "query_toks": ["SELECT", "avg", "(", "Weight", ")", ",", "YEAR", "FROM", "CARS_DATA", "GROUP", "BY", "YEAR", ";"], "query_toks_no_value": ["select", "avg", "(", "weight", ")", ",", "year", "from", "cars_data", "group", "by", "year"], "question": "What is the average weight and year for each year?", "question_toks": ["What", "is", "the", "average", "weight", "and", "year", "for", "each", "year", "?"], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 21, false], null]], [0, [0, [0, 23, false], null]]]], "where": [], "groupBy": [[0, 23, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [[3441.3142857142857, 1970], [2960.344827586207, 1971], [3237.714285714286, 1972], [3419.025, 1973], [2877.925925925926, 1974], [3176.8, 1975], [3078.735294117647, 1976], [2997.3571428571427, 1977], [2861.8055555555557, 1978], [3055.344827586207, 1979], [2436.655172413793, 1980], [2532.1666666666665, 1981], [2453.548387096774, 1982]], "results": {"generated_sql": "SELECT Year, AVG(Weight), AVG(Year) FROM cars_data GROUP BY Year", "generated_py": "t1 = pd.merge(cars_data, model_list, on='model'); t2 = pd.merge(t1, car_names, on='model'); t3 = pd.merge(t2, car_makers, on='make'); t4 = pd.merge(t3, countries, on='country'); t5 = pd.merge(t4, continents, on='continent'); answer = t5.groupby('year').agg({'weight': 'mean', 'year': 'mean'})", "sql_exec_result": "[(1970, 3441.3142857142857, 1970.0), (1971, 2960.344827586207, 1971.0), (1972, 3237.714285714286, 1972.0), (1973, 3419.025, 1973.0), (1974, 2877.925925925926, 1974.0), (1975, 3176.8, 1975.0), (1976, 3078.735294117647, 1976.0), (1977, 2997.3571428571427, 1977.0), (1978, 2861.8055555555557, 1978.0), (1979, 3055.344827586207, 1979.0), (1980, 2436.655172413793, 1980.0), (1981, 2532.1666666666665, 1981.0), (1982, 2453.548387096774, 1982.0)]", "py_exec_result": "None", "gold_answer": [[3441.3142857142857, 1970], [2960.344827586207, 1971], [3237.714285714286, 1972], [3419.025, 1973], [2877.925925925926, 1974], [3176.8, 1975], [3078.735294117647, 1976], [2997.3571428571427, 1977], [2861.8055555555557, 1978], [3055.344827586207, 1979], [2436.655172413793, 1980], [2532.1666666666665, 1981], [2453.548387096774, 1982]], "gold_sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "gold_py": null}}
{"db_id": "flight_2", "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "query_toks": ["SELECT", "AirportName", "FROM", "Airports", "WHERE", "AirportCode", "NOT", "IN", "(", "SELECT", "SourceAirport", "FROM", "Flights", "UNION", "SELECT", "DestAirport", "FROM", "Flights", ")"], "query_toks_no_value": ["select", "airportname", "from", "airports", "where", "airportcode", "not", "in", "(", "select", "sourceairport", "from", "flights", "union", "select", "destairport", "from", "flights", ")"], "question": "Which airports do not have departing or arriving flights?", "question_toks": ["Which", "airports", "do", "not", "have", "departing", "or", "arriving", "flights", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[true, 8, [0, [0, 6, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"airlines": ["uid", "Airline", "Abbreviation", "Country"], "airports": ["City", "AirportCode", "AirportName", "Country", "CountryAbbrev"], "flights": ["Airline", "FlightNo", "SourceAirport", "DestAirport"]}, "answer": [["Phillips AAF "], ["Municipal "], ["Dyess AFB "], ["Municipal "], ["Virginia Highlands "], ["Ada "], ["Adak Island Ns "], ["Lenawee County "], ["Municipal "], ["Municipal "], ["Ainsworth "], ["Akhiok SPB "], ["Spb "], ["Akiak "], ["Colorado Plains Regional Airport "], ["Akron/canton Regional "], ["Fulton International "], ["Akutan "], ["Alakanuk "], ["NAS "], ["Holloman AFB "], ["Municipal "], ["Municipal "], ["Albany NAS "], ["Dougherty County "], ["Albany International "], ["Albany "], ["Albert Lea "], ["Albuquerque International "], ["Aleknagik "], ["Aleneva "], ["Thomas C Russell Fld "], ["Alexandria International "], ["Esler Field "], ["Alexandria "], ["Alexandria Bay "], ["Algona "], ["International "], ["George Downer "], ["Alitak SPB "], ["Allakaket "], ["Alliance "], ["Gratiot Community "], ["Alpena County Regional "], ["Alpine "], ["Alton "], ["Altus AFB "], ["Municipal "], ["Alyeska "], ["Rick Husband Amarillo International "], ["Tradewind "], ["Ambler "], ["Amchitka "], ["Municipal "], ["Ames "], ["Zahns "], ["Amook "], ["Anacortes "], ["USN Heliport "], ["Orange County Steel Salvage Heliport "], ["Anaktuvuk "], ["Elmendorf Afb "], ["Ted Stevens Anchorage International Airport "], ["Merrill Field "], ["Municipal "], ["Anderson "], ["Andrews "], ["Angel Fire "], ["Tri-State Steuben Cty "], ["Angoon "], ["Rollang Field "], ["Aniak "], ["Anita Bay "], ["Municipal "], ["Lee "], ["Annette Island "], ["Anniston Metropolitan "], ["Ft Mcclellan Bus Trml "], ["Reilly AHP "], ["Anthony "], ["Antlers "], ["Anvik "], ["Municipal "], ["Apple Valley "], ["Outagamie County "], ["Municipal "], ["Arcata "], ["Arctic Village "], ["Downtown "], ["Ardmore Municipal Arpt "], ["US Army Heliport "], ["Artesia "], ["Asbury Park "], ["Ashland "], ["Ashley "], ["Aspen "], ["Astoria "], ["Athens "], ["Ohio University "], ["McMinn County "]], "results": {"generated_sql": "SELECT AirportCode ,  AirportName ,  City FROM airports WHERE AirportCode  NOT  IN  (SELECT DestAirport FROM flights UNION SELECT SourceAirport FROM flights)", "generated_py": "t1 = pd.merge(flights, airports, left_on='source_airport', right_on='airport_code'); t2 = pd.merge(t1, airports, left_on='dest_airport', right_on='airport_code'); t3 = t2[['city_x', 'city_y']].drop_duplicates(); answer = t3[t3['city_x'] != t3['city_y']][['city_x', 'city_y']].drop_duplicates()", "sql_exec_result": "[('APG', 'Phillips AAF ', 'Aberdeen '), ('ABR', 'Municipal ', 'Aberdeen '), ('DYS', 'Dyess AFB ', 'Abilene '), ('ABI', 'Municipal ', 'Abilene '), ('VJI', 'Virginia Highlands ', 'Abingdon '), ('ADT', 'Ada ', 'Ada '), ('ADK', 'Adak Island Ns ', 'Adak Island '), ('ADG', 'Lenawee County ', 'Adrian '), ('AFO', 'Municipal ', 'Afton '), ('AIK', 'Municipal ', 'Aiken '), ('ANW', 'Ainsworth ', 'Ainsworth '), ('AKK', 'Akhiok SPB ', 'Akhiok '), ('KKI', 'Spb ', 'Akiachak '), ('AKI', 'Akiak ', 'Akiak '), ('AKO', 'Colorado Plains Regional Airport ', 'Akron CO  '), ('CAK', 'Akron/canton Regional ', 'Akron/Canton OH  '), ('AKC', 'Fulton International ', 'Akron/Canton '), ('KQA', 'Akutan ', 'Akutan '), ('AUK', 'Alakanuk ', 'Alakanuk '), ('NGZ', 'NAS ', 'Alameda '), ('HMN', 'Holloman AFB ', 'Alamogordo '), ('ALM', 'Municipal ', 'Alamogordo '), ('ALS', 'Municipal ', 'Alamosa '), ('NAB', 'Albany NAS ', 'Albany '), ('ABY', 'Dougherty County ', 'Albany '), ('ALB', 'Albany International ', 'Albany '), ('CVO', 'Albany ', 'Albany '), ('AEL', 'Albert Lea ', 'Albert Lea '), ('ABQ', 'Albuquerque International ', 'Albuquerque '), ('WKK', 'Aleknagik ', 'Aleknagik '), ('AED', 'Aleneva ', 'Aleneva '), ('ALX', 'Thomas C Russell Fld ', ' Alexander City AL  '), ('AEX', 'Alexandria International ', ' Alexandria LA  '), ('ESF', 'Esler Field ', 'Alexandria '), ('AXN', 'Alexandria ', 'Alexandria '), ('AXB', 'Alexandria Bay ', 'Alexandria Bay '), ('AXG', 'Algona ', 'Algona '), ('ALI', 'International ', 'Alice '), ('AIV', 'George Downer ', ' Aliceville AL  '), ('ALZ', 'Alitak SPB ', 'Alitak '), ('AET', 'Allakaket ', 'Allakaket '), ('AIA', 'Alliance ', 'Alliance '), ('AMN', 'Gratiot Community ', 'Alma '), ('APN', 'Alpena County Regional ', 'Alpena '), ('ALE', 'Alpine ', 'Alpine '), ('ALN', 'Alton ', 'Alton '), ('LTS', 'Altus AFB ', 'Altus '), ('AXS', 'Municipal ', 'Altus '), ('AQY', 'Alyeska ', 'Alyeska '), ('AMA', 'Rick Husband Amarillo International ', ' Amarillo   '), ('TDW', 'Tradewind ', 'Amarillo '), ('ABL', 'Ambler ', 'Ambler '), ('AHT', 'Amchitka ', 'Amchitka '), ('AHH', 'Municipal ', 'Amery '), ('AMW', 'Ames ', 'Ames '), ('AYZ', 'Zahns ', 'Amityville '), ('AOS', 'Amook ', 'Amook '), ('OTS', 'Anacortes ', 'Anacortes '), ('NDV', 'USN Heliport ', 'Anacostia '), ('ANA', 'Orange County Steel Salvage Heliport ', 'Anaheim '), ('AKP', 'Anaktuvuk ', 'Anaktuvuk '), ('EDF', 'Elmendorf Afb ', 'Anchorage '), ('ANC', 'Ted Stevens Anchorage International Airport ', 'Anchorage '), ('MRI', 'Merrill Field ', 'Anchorage '), ('AID', 'Municipal ', 'Anderson '), ('AND', 'Anderson ', 'Anderson '), ('ADR', 'Andrews ', 'Andrews '), ('AXX', 'Angel Fire ', 'Angel Fire '), ('ANQ', 'Tri-State Steuben Cty ', 'Angola '), ('AGN', 'Angoon ', 'Angoon '), ('RFK', 'Rollang Field ', 'Anguilla '), ('ANI', 'Aniak ', 'Aniak '), ('AIB', 'Anita Bay ', 'Anita Bay '), ('ARB', 'Municipal ', ' Ann Arbor MI  '), ('ANP', 'Lee ', 'Annapolis '), ('ANN', 'Annette Island ', 'Annette Island '), ('ANB', 'Anniston Metropolitan ', ' Anniston AL  '), ('QAW', 'Ft Mcclellan Bus Trml ', 'Anniston '), ('RLI', 'Reilly AHP ', 'Anniston '), ('ANY', 'Anthony ', 'Anthony '), ('ATE', 'Antlers ', 'Antlers '), ('ANV', 'Anvik ', 'Anvik '), ('AAF', 'Municipal ', 'Apalachicola '), ('APV', 'Apple Valley ', 'Apple Valley '), ('ATW', 'Outagamie County ', 'Appleton '), ('AHF', 'Municipal ', 'Arapahoe '), ('ACV', 'Arcata ', 'Arcata '), ('ARC', 'Arctic Village ', 'Arctic Village '), ('AHD', 'Downtown ', 'Ardmore '), ('ADM', 'Ardmore Municipal Arpt ', 'Ardmore '), ('JLH', 'US Army Heliport ', 'Arlington Heights '), ('ATS', 'Artesia ', 'Artesia '), ('ARX', 'Asbury Park ', ' Neptune  '), ('ASX', 'Ashland ', 'Ashland '), ('ASY', 'Ashley ', 'Ashley '), ('ASE', 'Aspen ', 'Aspen '), ('AST', 'Astoria ', 'Astoria '), ('AHN', 'Athens ', 'Athens '), ('ATO', 'Ohio University ', 'Athens '), ('MMI', 'McMinn County ', 'Athens ')]", "py_exec_result": "None", "gold_answer": [["Phillips AAF "], ["Municipal "], ["Dyess AFB "], ["Municipal "], ["Virginia Highlands "], ["Ada "], ["Adak Island Ns "], ["Lenawee County "], ["Municipal "], ["Municipal "], ["Ainsworth "], ["Akhiok SPB "], ["Spb "], ["Akiak "], ["Colorado Plains Regional Airport "], ["Akron/canton Regional "], ["Fulton International "], ["Akutan "], ["Alakanuk "], ["NAS "], ["Holloman AFB "], ["Municipal "], ["Municipal "], ["Albany NAS "], ["Dougherty County "], ["Albany International "], ["Albany "], ["Albert Lea "], ["Albuquerque International "], ["Aleknagik "], ["Aleneva "], ["Thomas C Russell Fld "], ["Alexandria International "], ["Esler Field "], ["Alexandria "], ["Alexandria Bay "], ["Algona "], ["International "], ["George Downer "], ["Alitak SPB "], ["Allakaket "], ["Alliance "], ["Gratiot Community "], ["Alpena County Regional "], ["Alpine "], ["Alton "], ["Altus AFB "], ["Municipal "], ["Alyeska "], ["Rick Husband Amarillo International "], ["Tradewind "], ["Ambler "], ["Amchitka "], ["Municipal "], ["Ames "], ["Zahns "], ["Amook "], ["Anacortes "], ["USN Heliport "], ["Orange County Steel Salvage Heliport "], ["Anaktuvuk "], ["Elmendorf Afb "], ["Ted Stevens Anchorage International Airport "], ["Merrill Field "], ["Municipal "], ["Anderson "], ["Andrews "], ["Angel Fire "], ["Tri-State Steuben Cty "], ["Angoon "], ["Rollang Field "], ["Aniak "], ["Anita Bay "], ["Municipal "], ["Lee "], ["Annette Island "], ["Anniston Metropolitan "], ["Ft Mcclellan Bus Trml "], ["Reilly AHP "], ["Anthony "], ["Antlers "], ["Anvik "], ["Municipal "], ["Apple Valley "], ["Outagamie County "], ["Municipal "], ["Arcata "], ["Arctic Village "], ["Downtown "], ["Ardmore Municipal Arpt "], ["US Army Heliport "], ["Artesia "], ["Asbury Park "], ["Ashland "], ["Ashley "], ["Aspen "], ["Astoria "], ["Athens "], ["Ohio University "], ["McMinn County "]], "gold_sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "gold_py": null}}
{"db_id": "dog_kennels", "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.breed_name", "FROM", "Breeds", "AS", "T1", "JOIN", "Dogs", "AS", "T2", "ON", "T1.breed_code", "=", "T2.breed_code", "GROUP", "BY", "T1.breed_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "breed_name", "from", "breeds", "as", "t1", "join", "dogs", "as", "t2", "on", "t1", ".", "breed_code", "=", "t2", ".", "breed_code", "group", "by", "t1", ".", "breed_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the breed with the most dogs?", "question_toks": ["What", "is", "the", "name", "of", "the", "breed", "with", "the", "most", "dogs", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Breeds": ["breed_code", "breed_name"], "Charges": ["charge_id", "charge_type", "charge_amount"], "Sizes": ["size_code", "size_description"], "Treatment_Types": ["treatment_type_code", "treatment_type_description"], "Owners": ["owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number"], "Dogs": ["dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed"], "Professionals": ["professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number"], "Treatments": ["treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "answer": [["Bulldog"]], "results": {"generated_sql": "SELECT T1.breed_name FROM breeds AS T1 JOIN dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*)  DESC LIMIT 1", "generated_py": "t1 = pd.merge(Dogs, Breeds, on='breed_code'); t2 = t1.groupby('breed_name').size().rename('count').reset_index(); answer = t2[t2['count'] == t2['count'].max()]['breed_name'].iloc[0]", "sql_exec_result": "[('Bulldog',)]", "py_exec_result": "Bulldog", "gold_answer": [["Bulldog"]], "gold_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "gold_py": null}}
{"db_id": "employee_hire_evaluation", "query": "SELECT * FROM hiring", "query_toks": ["SELECT", "*", "FROM", "hiring"], "query_toks_no_value": ["select", "*", "from", "hiring"], "question": "What is all the information about hiring?", "question_toks": ["What", "is", "all", "the", "information", "about", "hiring", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"employee": ["Employee_ID", "Name", "Age", "City"], "shop": ["Shop_ID", "Name", "Location", "District", "Number_products", "Manager_name"], "hiring": ["Shop_ID", "Employee_ID", "Start_from", "Is_full_time"], "evaluation": ["Employee_ID", "Year_awarded", "Bonus"]}, "answer": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]], "results": {"generated_sql": "SELECT * FROM hiring", "generated_py": "answer = pd.merge(hiring, employee, on='employee_id')", "sql_exec_result": "[(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F'), (4, 4, '2012', 'T'), (5, 5, '2013', 'T'), (2, 6, '2010', 'F'), (6, 7, '2008', 'T')]", "py_exec_result": "   shop_id  employee_id start_from is_full_time             name  age     city\n0        1            1       2009            T    George Chuter   23  Bristol\n1        1            2       2003            T        Lee Mears   29     Bath\n2        8            3       2011            F       Mark Regan   43  Bristol\n3        4            4       2012            T     Jason Hobson   30  Bristol\n4        5            5       2013            T        Tim Payne   29    Wasps\n5        2            6       2010            F  Andrew Sheridan   28     Sale\n6        6            7       2008            T     Matt Stevens   29     Bath", "gold_answer": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]], "gold_sql": "SELECT * FROM hiring", "gold_py": null}}
{"db_id": "orchestra", "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "query_toks": ["SELECT", "T1.Name", "FROM", "conductor", "AS", "T1", "JOIN", "orchestra", "AS", "T2", "ON", "T1.Conductor_ID", "=", "T2.Conductor_ID", "WHERE", "Year_of_Founded", ">", "2008"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1", ".", "conductor_id", "=", "t2", ".", "conductor_id", "where", "year_of_founded", ">", "value"], "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "question_toks": ["Please", "show", "the", "name", "of", "the", "conductor", "that", "has", "conducted", "orchestras", "founded", "after", "2008", "."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 3, [0, [0, 10, false], null], 2008.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"conductor": ["Conductor_ID", "Name", "Age", "Nationality", "Year_of_Work"], "orchestra": ["Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format"], "performance": ["Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share"], "show": ["Show_ID", "Performance_ID", "If_first_show", "Result", "Attendance"]}, "answer": [["Igor Stravinsky"]], "results": {"generated_sql": "SELECT T1.name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.conductor_id  =  T2.conductor_id WHERE T2.year_of_founded  >  2008", "generated_py": "t1 = pd.merge(orchestra, performance, on='orchestra_id'); t2 = pd.merge(t1, show, on='performance_id'); t3 = pd.merge(t2, conductor, on='conductor_id'); answer = t3[t3['year_of_founded'] > 2008]['name'].drop_duplicates()", "sql_exec_result": "[('Igor Stravinsky',)]", "py_exec_result": "1    Igor Stravinsky\nName: name, dtype: object", "gold_answer": [["Igor Stravinsky"]], "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "gold_py": null}}
{"db_id": "student_transcripts_tracking", "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.address_id", ",", "T1.line_1", ",", "T1.line_2", "FROM", "Addresses", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.address_id", "=", "T2.current_address_id", "GROUP", "BY", "T1.address_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "address_id", ",", "t1", ".", "line_1", ",", "t1", ".", "line_2", "from", "addresses", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "current_address_id", "group", "by", "t1", ".", "address_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the id, line 1, and line 2 of the address with the most students?", "question_toks": ["What", "is", "the", "id", ",", "line", "1", ",", "and", "line", "2", "of", "the", "address", "with", "the", "most", "students", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 6]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 33, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details"], "Courses": ["course_id", "course_name", "course_description", "other_details"], "Departments": ["department_id", "department_name", "department_description", "other_details"], "Degree_Programs": ["degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details"], "Sections": ["section_id", "course_id", "section_name", "section_description", "other_details"], "Semesters": ["semester_id", "semester_name", "semester_description", "other_details"], "Students": ["student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details"], "Student_Enrolment": ["student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details"], "Student_Enrolment_Courses": ["student_course_id", "course_id", "student_enrolment_id"], "Transcripts": ["transcript_id", "transcript_date", "other_details"], "Transcript_Contents": ["student_course_id", "transcript_id"]}, "answer": [[9, "0643 Muller Vista", "Suite 383"]], "results": {"generated_sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*)  DESC LIMIT 1", "generated_py": "t1 = pd.merge(Students, Addresses, left_on='current_address_id', right_on='address_id'); t2 = pd.merge(t1, Students.groupby('current_address_id').size().rename('count'), left_on='current_address_id', right_index=True); t3 = t2[t2['count'] == t2['count'].max()]; answer = t3[['address_id', 'line_1', 'line_2']].drop_duplicates()", "sql_exec_result": "[(9, '0643 Muller Vista', 'Suite 383')]", "py_exec_result": "   address_id             line_1     line_2\n3           9  0643 Muller Vista  Suite 383", "gold_answer": [[9, "0643 Muller Vista", "Suite 383"]], "gold_sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "gold_py": null}}
{"db_id": "tvshow", "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "query_toks": ["SELECT", "id", "FROM", "TV_Channel", "EXCEPT", "SELECT", "channel", "FROM", "cartoon", "WHERE", "directed_by", "=", "'Ben", "Jones", "'"], "query_toks_no_value": ["select", "id", "from", "tv_channel", "except", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "value"], "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.", "question_toks": ["find", "the", "id", "of", "tv", "channels", "that", "do", "not", "play", "any", "cartoon", "directed", "by", "Ben", "Jones", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Ben Jones\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "db_table_headers": {"TV_Channel": ["id", "series_name", "Country", "Language", "Content", "Pixel_aspect_ratio_PAR", "Hight_definition_TV", "Pay_per_view_PPV", "Package_Option"], "TV_series": ["id", "Episode", "Air_Date", "Rating", "Share", "18_49_Rating_Share", "Viewers_m", "Weekly_Rank", "Channel"], "Cartoon": ["id", "Title", "Directed_by", "Written_by", "Original_air_date", "Production_code", "Channel"]}, "answer": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]], "results": {"generated_sql": "SELECT T1.id FROM tv_channel AS T1 LEFT JOIN tv_series AS T2 ON T1.id  =  T2.channel WHERE T2.Directed_by  <>  'Ben Jones'", "generated_py": "t1 = pd.merge(Cartoon, TV_Channel, on='Channel'); t2 = t1[t1['Directed_by'] == 'Ben Jones']; t3 = t2[['id', 'Directed_by']].drop_duplicates(); t4 = t1[['id', 'Directed_by']].drop_duplicates(); answer = t4[~t4['id'].isin(t3['id'])]", "sql_exec_result": "None", "py_exec_result": "None", "gold_answer": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]], "gold_sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "gold_py": null}}
{"db_id": "course_teach", "query": "SELECT Name FROM teacher ORDER BY Age ASC", "query_toks": ["SELECT", "Name", "FROM", "teacher", "ORDER", "BY", "Age", "ASC"], "query_toks_no_value": ["select", "name", "from", "teacher", "order", "by", "age", "asc"], "question": "What are the names of the teachers ordered by ascending age?", "question_toks": ["What", "are", "the", "names", "of", "the", "teachers", "ordered", "by", "ascending", "age", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 6, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"course": ["Course_ID", "Staring_Date", "Course"], "teacher": ["Teacher_ID", "Name", "Age", "Hometown"], "course_arrange": ["Course_ID", "Teacher_ID", "Grade"]}, "answer": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]], "results": {"generated_sql": "SELECT T1.name FROM teacher AS T1 ORDER BY T1.age", "generated_py": "answer = teacher[['name', 'age']].sort_values('age', ascending = True)", "sql_exec_result": "[('Vicente Carretero',), ('Gustaaf Deloor',), ('Joseph Huts',), ('John Deloor',), ('Lucy Wong',), ('Anne Walker',), ('Kearsley Brown',)]", "py_exec_result": "                name age\n2  Vicente Carretero  26\n1     Gustaaf Deloor  29\n0        Joseph Huts  32\n3        John Deloor  33\n6          Lucy Wong  39\n5        Anne Walker  41\n4     Kearsley Brown  45", "gold_answer": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]], "gold_sql": "SELECT Name FROM teacher ORDER BY Age ASC", "gold_py": null}}
{"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights"], "question": "How many flights do we have?", "question_toks": ["How", "many", "flights", "do", "we", "have", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"airlines": ["uid", "Airline", "Abbreviation", "Country"], "airports": ["City", "AirportCode", "AirportName", "Country", "CountryAbbrev"], "flights": ["Airline", "FlightNo", "SourceAirport", "DestAirport"]}, "answer": [[1200]], "results": {"generated_sql": "SELECT count(*) FROM flights", "generated_py": "answer = flights.shape[0]", "sql_exec_result": "[(1200,)]", "py_exec_result": "1200", "gold_answer": [[1200]], "gold_sql": "SELECT count(*) FROM FLIGHTS", "gold_py": null}}
{"db_id": "orchestra", "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "query_toks": ["SELECT", "Name", "FROM", "conductor", "WHERE", "Nationality", "!", "=", "'USA", "'"], "query_toks_no_value": ["select", "name", "from", "conductor", "where", "nationality", "!", "=", "value"], "question": "What are the names of conductors whose nationalities are not \"USA\"?", "question_toks": ["What", "are", "the", "names", "of", "conductors", "whose", "nationalities", "are", "not", "``", "USA", "''", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 7, [0, [0, 4, false], null], "\"USA\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"conductor": ["Conductor_ID", "Name", "Age", "Nationality", "Year_of_Work"], "orchestra": ["Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format"], "performance": ["Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share"], "show": ["Show_ID", "Performance_ID", "If_first_show", "Result", "Attendance"]}, "answer": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]], "results": {"generated_sql": "SELECT Name FROM conductor WHERE Nationality  <>  'USA'", "generated_py": "t1 = pd.merge(orchestra, conductor, on='conductor_id'); t2 = t1[t1['nationality'] != 'USA']; answer = t2['name'].unique()", "sql_exec_result": "[('Igor Stravinsky',), ('Paul Jorgensen',), ('Charles Dutoit',), ('Pierre Boulez',), ('Robert Craft',), ('Michael Tilson Thomas',)]", "py_exec_result": "['Igor Stravinsky' 'Paul Jorgensen' 'Charles Dutoit' 'Pierre Boulez'\n 'Robert Craft' 'Michael Tilson Thomas']", "gold_answer": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]], "gold_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "gold_py": null}}
{"db_id": "cre_Doc_Template_Mgt", "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "query_toks": ["SELECT", "T1.paragraph_id", ",", "T1.paragraph_text", "FROM", "Paragraphs", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.document_id", "=", "T2.document_id", "WHERE", "T2.Document_Name", "=", "'Welcome", "to", "NY", "'"], "query_toks_no_value": ["select", "t1", ".", "paragraph_id", ",", "t1", ".", "paragraph_text", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "document_id", "=", "t2", ".", "document_id", "where", "t2", ".", "document_name", "=", "value"], "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "question_toks": ["What", "are", "the", "ids", "and", "texts", "of", "paragraphs", "in", "the", "document", "titled", "'Welcome", "to", "NY", "'", "?"], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]], [0, [0, [0, 16, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"Welcome to NY\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Ref_Template_Types": ["Template_Type_Code", "Template_Type_Description"], "Templates": ["Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details"], "Documents": ["Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details"], "Paragraphs": ["Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "answer": [[16615, "Japan"], [608931827, "Micronesia"]], "results": {"generated_sql": "SELECT T1.paragraph_id ,  T1.paragraph_text FROM paragraphs AS T1 JOIN documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Welcome to NY'", "generated_py": "t1 = pd.merge(Documents, Templates, on='template_id'); t2 = pd.merge(t1, Paragraphs, on='document_id'); t3 = t2[t2['document_name'] == 'Welcome to NY']; answer = t3[['paragraph_id', 'paragraph_text']]", "sql_exec_result": "[(16615, 'Japan'), (608931827, 'Micronesia')]", "py_exec_result": "   paragraph_id paragraph_text\n3         16615          Japan\n4     608931827     Micronesia", "gold_answer": [[16615, "Japan"], [608931827, "Micronesia"]], "gold_sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "gold_py": null}}
{"db_id": "cre_Doc_Template_Mgt", "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "query_toks": ["SELECT", "version_number", ",", "template_type_code", "FROM", "Templates", "WHERE", "version_number", ">", "5"], "query_toks_no_value": ["select", "version_number", ",", "template_type_code", "from", "templates", "where", "version_number", ">", "value"], "question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "question_toks": ["Return", "the", "version", "numbers", "and", "template", "type", "codes", "of", "templates", "with", "a", "version", "number", "greater", "than", "5", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], 5.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Ref_Template_Types": ["Template_Type_Code", "Template_Type_Description"], "Templates": ["Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details"], "Documents": ["Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details"], "Paragraphs": ["Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "answer": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]], "results": {"generated_sql": "SELECT T1.version_number ,  T1.template_type_code FROM Templates AS T1 WHERE T1.version_number  >  5", "generated_py": "t1 = pd.merge(Templates, Ref_Template_Types, on='template_type_code'); t2 = t1[t1['version_number'] > 5]; answer = t2[['version_number', 'template_type_code']]", "sql_exec_result": "[(9, 'PP'), (8, 'PPT'), (6, 'BK'), (7, 'AD'), (9, 'CV'), (7, 'AD'), (6, 'BK'), (9, 'AD'), (8, 'PP')]", "py_exec_result": "    version_number template_type_code\n1                9                 PP\n4                8                 PP\n9                6                 BK\n10               6                 BK\n13               8                PPT\n15               7                 AD\n16               7                 AD\n17               9                 AD\n18               9                 CV", "gold_answer": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]], "gold_sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "gold_py": null}}
{"db_id": "car_1", "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "query_toks": ["SELECT", "T1.model", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "CARS_DATA", "AS", "T2", "ON", "T1.MakeId", "=", "T2.Id", "WHERE", "T2.Weight", "<", "(", "SELECT", "avg", "(", "Weight", ")", "FROM", "CARS_DATA", ")"], "query_toks_no_value": ["select", "t1", ".", "model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1", ".", "makeid", "=", "t2", ".", "id", "where", "t2", ".", "weight", "<", "(", "select", "avg", "(", "weight", ")", "from", "cars_data", ")"], "question": "Find the model of the car whose weight is below the average weight.", "question_toks": ["Find", "the", "model", "of", "the", "car", "whose", "weight", "is", "below", "the", "average", "weight", "."], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [[false, 4, [0, [0, 21, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 21, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [["toyota"], ["plymouth"], ["amc"], ["ford"], ["datsun"], ["volkswagen"], ["peugeot"], ["audi"], ["saab"], ["bmw"], ["amc"], ["datsun"], ["chevrolet"], ["toyota"], ["ford"], ["volkswagen"], ["amc"], ["amc"], ["chevrolet"], ["mercury"], ["opel"], ["peugeot"], ["fiat"], ["toyota"], ["datsun"], ["volkswagen"], ["plymouth"], ["toyota"], ["dodge"], ["volkswagen"], ["chevrolet"], ["ford"], ["mazda"], ["volvo"], ["volkswagen"], ["peugeot"], ["renault"], ["ford"], ["datsun"], ["toyota"], ["dodge"], ["toyota"], ["amc"], ["plymouth"], ["volkswagen"], ["amc"], ["toyota"], ["chevrolet"], ["datsun"], ["mazda"], ["ford"], ["mercury"], ["fiat"], ["fiat"], ["opel"], ["audi"], ["volvo"], ["saab"], ["toyota"], ["ford"], ["amc"], ["datsun"], ["ford"], ["toyota"], ["chevrolet"], ["audi"], ["volkswagen"], ["opel"], ["toyota"], ["datsun"], ["dodge"], ["fiat"], ["fiat"], ["honda"], ["subaru"], ["fiat"], ["toyota"], ["ford"], ["amc"], ["pontiac"], ["toyota"], ["volkswagen"], ["datsun"], ["volkswagen"], ["audi"], ["peugeot"], ["volvo"], ["saab"], ["honda"], ["fiat"], ["opel"], ["capri"], ["dodge"], ["renault"], ["chevrolet"], ["chevrolet"], ["volkswagen"], ["honda"], ["volkswagen"], ["datsun"], ["toyota"], ["ford"], ["toyota"], ["honda"], ["buick"], ["renault"], ["plymouth"], ["datsun"], ["volkswagen"], ["pontiac"], ["toyota"], ["ford"], ["chevrolet"], ["dodge"], ["subaru"], ["volkswagen"], ["datsun"], ["bmw"], ["mazda"], ["volkswagen"], ["ford"], ["mazda"], ["datsun"], ["honda"], ["ford"], ["ford"], ["chevrolet"], ["toyota"], ["datsun"], ["dodge"], ["toyota"], ["plymouth"], ["oldsmobile"], ["datsun"], ["audi"], ["saab"], ["volkswagen"], ["honda"], ["ford"], ["volkswagen"], ["mazda"], ["dodge"], ["amc"], ["plymouth"], ["plymouth"], ["datsun"], ["fiat"], ["buick"], ["chevrolet"], ["oldsmobile"], ["pontiac"], ["volkswagen"], ["toyota"], ["chevrolet"], ["datsun"], ["chevrolet"], ["ford"], ["audi"], ["toyota"], ["mazda"], ["datsun"], ["toyota"], ["mazda"], ["dodge"], ["datsun"], ["volkswagen"], ["volkswagen"], ["audi"], ["honda"], ["renault"], ["subaru"], [" volkswagen"], ["datsun"], ["mazda"], ["triumph"], ["ford"], ["honda"], ["plymouth"], ["buick"], ["dodge"], ["chevrolet"], ["plymouth"], ["toyota"], ["plymouth"], ["honda"], ["subaru"], ["datsun"], ["toyota"], ["mazda"], ["plymouth"], ["ford"], ["ford"], ["volkswagen"], ["renault"], ["honda"], ["toyota"], ["datsun"], ["mazda"], ["saab"], ["toyota"], ["datsun"], ["chevrolet"], ["chevrolet"], ["chevrolet"], ["pontiac"], ["dodge"], ["pontiac"], ["ford"], ["volkswagen"], ["mazda"], ["mazda"], ["plymouth"], ["mercury"], ["nissan"], ["honda"], ["toyota"], ["honda"], ["honda"], ["datsun"], ["buick"], ["chrysler"], ["ford"], ["toyota"], ["dodge"], ["chevrolet"], ["ford"], ["volkswagen"], ["dodge"], ["ford"], ["chevrolet"]], "results": {"generated_sql": "SELECT T1.model FROM cars_data AS T1 JOIN (SELECT AVG(weight) AS avg_weight FROM cars_data) AS T2 ON T1.weight  <  T2.avg_weight", "generated_py": "t1 = pd.merge(car_names, cars_data, on='model'); t2 = pd.merge(t1, car_makers, on='maker'); t3 = pd.merge(t2, model_list, on='model'); t4 = pd.merge(t3, countries, on='country'); t5 = pd.merge(t4, continents, on='continent'); t6 = t5[t5['weight'] < t5['weight'].mean()]; answer = t6[['model']].drop_duplicates()", "sql_exec_result": "None", "py_exec_result": "None", "gold_answer": [["toyota"], ["plymouth"], ["amc"], ["ford"], ["datsun"], ["volkswagen"], ["peugeot"], ["audi"], ["saab"], ["bmw"], ["amc"], ["datsun"], ["chevrolet"], ["toyota"], ["ford"], ["volkswagen"], ["amc"], ["amc"], ["chevrolet"], ["mercury"], ["opel"], ["peugeot"], ["fiat"], ["toyota"], ["datsun"], ["volkswagen"], ["plymouth"], ["toyota"], ["dodge"], ["volkswagen"], ["chevrolet"], ["ford"], ["mazda"], ["volvo"], ["volkswagen"], ["peugeot"], ["renault"], ["ford"], ["datsun"], ["toyota"], ["dodge"], ["toyota"], ["amc"], ["plymouth"], ["volkswagen"], ["amc"], ["toyota"], ["chevrolet"], ["datsun"], ["mazda"], ["ford"], ["mercury"], ["fiat"], ["fiat"], ["opel"], ["audi"], ["volvo"], ["saab"], ["toyota"], ["ford"], ["amc"], ["datsun"], ["ford"], ["toyota"], ["chevrolet"], ["audi"], ["volkswagen"], ["opel"], ["toyota"], ["datsun"], ["dodge"], ["fiat"], ["fiat"], ["honda"], ["subaru"], ["fiat"], ["toyota"], ["ford"], ["amc"], ["pontiac"], ["toyota"], ["volkswagen"], ["datsun"], ["volkswagen"], ["audi"], ["peugeot"], ["volvo"], ["saab"], ["honda"], ["fiat"], ["opel"], ["capri"], ["dodge"], ["renault"], ["chevrolet"], ["chevrolet"], ["volkswagen"], ["honda"], ["volkswagen"], ["datsun"], ["toyota"], ["ford"], ["toyota"], ["honda"], ["buick"], ["renault"], ["plymouth"], ["datsun"], ["volkswagen"], ["pontiac"], ["toyota"], ["ford"], ["chevrolet"], ["dodge"], ["subaru"], ["volkswagen"], ["datsun"], ["bmw"], ["mazda"], ["volkswagen"], ["ford"], ["mazda"], ["datsun"], ["honda"], ["ford"], ["ford"], ["chevrolet"], ["toyota"], ["datsun"], ["dodge"], ["toyota"], ["plymouth"], ["oldsmobile"], ["datsun"], ["audi"], ["saab"], ["volkswagen"], ["honda"], ["ford"], ["volkswagen"], ["mazda"], ["dodge"], ["amc"], ["plymouth"], ["plymouth"], ["datsun"], ["fiat"], ["buick"], ["chevrolet"], ["oldsmobile"], ["pontiac"], ["volkswagen"], ["toyota"], ["chevrolet"], ["datsun"], ["chevrolet"], ["ford"], ["audi"], ["toyota"], ["mazda"], ["datsun"], ["toyota"], ["mazda"], ["dodge"], ["datsun"], ["volkswagen"], ["volkswagen"], ["audi"], ["honda"], ["renault"], ["subaru"], [" volkswagen"], ["datsun"], ["mazda"], ["triumph"], ["ford"], ["honda"], ["plymouth"], ["buick"], ["dodge"], ["chevrolet"], ["plymouth"], ["toyota"], ["plymouth"], ["honda"], ["subaru"], ["datsun"], ["toyota"], ["mazda"], ["plymouth"], ["ford"], ["ford"], ["volkswagen"], ["renault"], ["honda"], ["toyota"], ["datsun"], ["mazda"], ["saab"], ["toyota"], ["datsun"], ["chevrolet"], ["chevrolet"], ["chevrolet"], ["pontiac"], ["dodge"], ["pontiac"], ["ford"], ["volkswagen"], ["mazda"], ["mazda"], ["plymouth"], ["mercury"], ["nissan"], ["honda"], ["toyota"], ["honda"], ["honda"], ["datsun"], ["buick"], ["chrysler"], ["ford"], ["toyota"], ["dodge"], ["chevrolet"], ["ford"], ["volkswagen"], ["dodge"], ["ford"], ["chevrolet"]], "gold_sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "gold_py": null}}
{"db_id": "dog_kennels", "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "query_toks": ["SELECT", "T1.treatment_type_description", "FROM", "Treatment_types", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.treatment_type_code", "=", "T2.treatment_type_code", "GROUP", "BY", "T1.treatment_type_code", "ORDER", "BY", "sum", "(", "cost_of_treatment", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "treatment_type_description", "from", "treatment_types", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "treatment_type_code", "=", "t2", ".", "treatment_type_code", "group", "by", "t1", ".", "treatment_type_code", "order", "by", "sum", "(", "cost_of_treatment", ")", "asc", "limit", "value"], "question": "What is the description of the treatment type that costs the least money in total?", "question_toks": ["What", "is", "the", "description", "of", "the", "treatment", "type", "that", "costs", "the", "least", "money", "in", "total", "?"], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 47, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": ["asc", [[0, [4, 49, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Breeds": ["breed_code", "breed_name"], "Charges": ["charge_id", "charge_type", "charge_amount"], "Sizes": ["size_code", "size_description"], "Treatment_Types": ["treatment_type_code", "treatment_type_description"], "Owners": ["owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number"], "Dogs": ["dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed"], "Professionals": ["professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number"], "Treatments": ["treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "answer": [["Take for a Walk"]], "results": {"generated_sql": "SELECT T1.treatment_type_description FROM treatment_types AS T1 JOIN (SELECT T2.treatment_type_code ,  sum(T2.cost_of_treatment) AS total_cost FROM treatments AS T2 GROUP BY T2.treatment_type_code) AS T3 ON T1.treatment_type_code  =  T3.treatment_type_code WHERE T3.total_cost  =  (SELECT min(T4.total_cost) FROM (SELECT T5.treatment_type_code ,  sum(T5.cost_of_treatment) AS total_cost FROM treatments AS T5 GROUP BY T5.treatment_type_code) AS T4)", "generated_py": "t1 = pd.merge(Treatments, Charges, on='charge_id'); t2 = pd.merge(t1, Treatment_Types, on='treatment_type_code'); t3 = t2.groupby('treatment_type_description').sum(); answer = t3.sort_values('cost_of_treatment', ascending = True).head(1).index[0]", "sql_exec_result": "[('Take for a Walk',)]", "py_exec_result": "None", "gold_answer": [["Take for a Walk"]], "gold_sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "gold_py": null}}
{"db_id": "concert_singer", "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "query_toks": ["SELECT", "name", "FROM", "stadium", "EXCEPT", "SELECT", "T2.name", "FROM", "concert", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.stadium_id", "WHERE", "T1.year", "=", "2014"], "query_toks_no_value": ["select", "name", "from", "stadium", "except", "select", "t2", ".", "name", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "stadium_id", "where", "t1", ".", "year", "=", "value"], "question": "Show names for all stadiums except for stadiums having a concert in year 2014.", "question_toks": ["Show", "names", "for", "all", "stadiums", "except", "for", "stadiums", "having", "a", "concert", "in", "year", "2014", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2014.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "db_table_headers": {"stadium": ["Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average"], "singer": ["Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male"], "concert": ["concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year"], "singer_in_concert": ["concert_ID", "Singer_ID"]}, "answer": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "results": {"generated_sql": "SELECT T1.name FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year  <>  2014", "generated_py": "t1 = pd.merge(concert, stadium, on='stadium_id'); t2 = pd.merge(t1, singer_in_concert, on='concert_id'); t3 = pd.merge(t2, singer, on='singer_id'); answer = t3[t3['year'] != 2014]['name_x']", "sql_exec_result": "[('Somerset Park',), ('Balmoor',), ('Recreation Park',)]", "py_exec_result": "None", "gold_answer": [["Balmoor"], ["Bayview Stadium"], ["Forthbank Stadium"], ["Gayfield Park"], ["Hampden Park"], ["Recreation Park"]], "gold_sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "gold_py": null}}
{"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "query_toks": ["SELECT", "template_id", "FROM", "Documents", "GROUP", "BY", "template_id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "template_id", "from", "documents", "group", "by", "template_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Show ids for all templates that are used by more than one document.", "question_toks": ["Show", "ids", "for", "all", "templates", "that", "are", "used", "by", "more", "than", "one", "document", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Ref_Template_Types": ["Template_Type_Code", "Template_Type_Description"], "Templates": ["Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details"], "Documents": ["Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details"], "Paragraphs": ["Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "answer": [[11], [14], [25]], "results": {"generated_sql": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID GROUP BY T1.Template_ID HAVING count(*)  >  1", "generated_py": "t1 = pd.merge(Documents, Templates, on='template_id'); t2 = pd.merge(t1, t1.groupby('template_id').size().rename('count'), on='template_id'); t3 = t2[t2['count'] > 1]; answer = t3[['template_id']].drop_duplicates()", "sql_exec_result": "[(11,), (14,), (25,)]", "py_exec_result": "   template_id\n1           25\n5           14\n7           11", "gold_answer": [[11], [14], [25]], "gold_sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "gold_py": null}}
{"db_id": "employee_hire_evaluation", "query": "SELECT count(DISTINCT LOCATION) FROM shop", "query_toks": ["SELECT", "count", "(", "DISTINCT", "LOCATION", ")", "FROM", "shop"], "query_toks_no_value": ["select", "count", "(", "distinct", "location", ")", "from", "shop"], "question": "Count the number of distinct store locations.", "question_toks": ["Count", "the", "number", "of", "distinct", "store", "locations", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 7, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"employee": ["Employee_ID", "Name", "Age", "City"], "shop": ["Shop_ID", "Name", "Location", "District", "Number_products", "Manager_name"], "hiring": ["Shop_ID", "Employee_ID", "Start_from", "Is_full_time"], "evaluation": ["Employee_ID", "Year_awarded", "Bonus"]}, "answer": [[9]], "results": {"generated_sql": "SELECT COUNT(DISTINCT T1.location) FROM shop AS T1", "generated_py": "answer = shop['location'].unique().shape[0]", "sql_exec_result": "[(9,)]", "py_exec_result": "9", "gold_answer": [[9]], "gold_sql": "SELECT count(DISTINCT LOCATION) FROM shop", "gold_py": null}}
{"db_id": "flight_2", "query": "SELECT count(*) FROM AIRLINES", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "AIRLINES"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airlines"], "question": "What is the total number of airlines?", "question_toks": ["What", "is", "the", "total", "number", "of", "airlines", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"airlines": ["uid", "Airline", "Abbreviation", "Country"], "airports": ["City", "AirportCode", "AirportName", "Country", "CountryAbbrev"], "flights": ["Airline", "FlightNo", "SourceAirport", "DestAirport"]}, "answer": [[12]], "results": {"generated_sql": "SELECT count(*) FROM airlines", "generated_py": "answer = airlines.shape[0]", "sql_exec_result": "[(12,)]", "py_exec_result": "12", "gold_answer": [[12]], "gold_sql": "SELECT count(*) FROM AIRLINES", "gold_py": null}}
{"db_id": "student_transcripts_tracking", "query": "SELECT section_name FROM Sections ORDER BY section_name DESC", "query_toks": ["SELECT", "section_name", "FROM", "Sections", "ORDER", "BY", "section_name", "DESC"], "query_toks_no_value": ["select", "section_name", "from", "sections", "order", "by", "section_name", "desc"], "question": "List the section_name in reversed lexicographical order.", "question_toks": ["List", "the", "section_name", "in", "reversed", "lexicographical", "order", "."], "sql": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 25, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details"], "Courses": ["course_id", "course_name", "course_description", "other_details"], "Departments": ["department_id", "department_name", "department_description", "other_details"], "Degree_Programs": ["degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details"], "Sections": ["section_id", "course_id", "section_name", "section_description", "other_details"], "Semesters": ["semester_id", "semester_name", "semester_description", "other_details"], "Students": ["student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details"], "Student_Enrolment": ["student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details"], "Student_Enrolment_Courses": ["student_course_id", "course_id", "student_enrolment_id"], "Transcripts": ["transcript_id", "transcript_date", "other_details"], "Transcript_Contents": ["student_course_id", "transcript_id"]}, "answer": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]], "results": {"generated_sql": "SELECT section_name FROM sections ORDER BY section_name DESC", "generated_py": "answer = Sections[['section_name']].sort_values('section_name', ascending = False)", "sql_exec_result": "[('y',), ('u',), ('p',), ('o',), ('l',), ('k',), ('j',), ('h',), ('g',), ('f',), ('e',), ('d',), ('c',), ('b',), ('a',)]", "py_exec_result": "   section_name\n14            y\n13            u\n12            p\n11            o\n10            l\n9             k\n8             j\n7             h\n6             g\n5             f\n4             e\n3             d\n2             c\n1             b\n0             a", "gold_answer": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]], "gold_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC", "gold_py": null}}
{"db_id": "network_1", "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "GROUP", "BY", "T1.student_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "group", "by", "t1", ".", "student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the name of the high school student with the most friends.", "question_toks": ["Return", "the", "name", "of", "the", "high", "school", "student", "with", "the", "most", "friends", "."], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Highschooler": ["ID", "name", "grade"], "Friend": ["student_id", "friend_id"], "Likes": ["student_id", "liked_id"]}, "answer": [["Andrew"]], "results": {"generated_sql": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id JOIN Highschooler AS T3 ON T2.friend_id  =  T3.ID GROUP BY T1.ID ORDER BY count(*) DESC LIMIT 1", "generated_py": "t1 = pd.merge(Friend, Highschooler, left_on='student_id', right_on='ID'); t2 = pd.merge(t1, Highschooler, left_on='friend_id', right_on='ID'); t3 = t2.groupby('name_x').size().rename('count').reset_index(); answer = t3.sort_values('count', ascending = False).iloc[0]['name_x']", "sql_exec_result": "[('Andrew',)]", "py_exec_result": "None", "gold_answer": [["Andrew"]], "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "gold_py": null}}
{"db_id": "concert_singer", "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "query_toks": ["SELECT", "name", ",", "country", "FROM", "singer", "WHERE", "song_name", "LIKE", "'", "%", "Hey", "%", "'"], "query_toks_no_value": ["select", "name", ",", "country", "from", "singer", "where", "song_name", "like", "value"], "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "question_toks": ["what", "is", "the", "name", "and", "nation", "of", "the", "singer", "who", "have", "a", "song", "having", "'Hey", "'", "in", "its", "name", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]]]], "where": [[false, 9, [0, [0, 11, false], null], "\"%Hey%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"stadium": ["Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average"], "singer": ["Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male"], "concert": ["concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year"], "singer_in_concert": ["concert_ID", "Singer_ID"]}, "answer": [["Justin Brown", "France"]], "results": {"generated_sql": "SELECT T1.name ,  T1.country FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id WHERE T2.song_name  LIKE  '%Hey%'", "generated_py": "t1 = pd.merge(singer, singer_in_concert, on='singer_id'); t2 = pd.merge(t1, concert, on='concert_id'); t3 = t2[t2['song_name'].str.contains('Hey')]; answer = t3[['name', 'country']]", "sql_exec_result": "None", "py_exec_result": "None", "gold_answer": [["Justin Brown", "France"]], "gold_sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "gold_py": null}}
{"db_id": "pets_1", "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "query_toks": ["SELECT", "major", ",", "age", "FROM", "student", "WHERE", "stuid", "NOT", "IN", "(", "SELECT", "T1.stuid", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'cat", "'", ")"], "query_toks_no_value": ["select", "major", ",", "age", "from", "student", "where", "stuid", "not", "in", "(", "select", "t1", ".", "stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value", ")"], "question": "What major is every student who does not own a cat as a pet, and also how old are they?", "question_toks": ["What", "major", "is", "every", "student", "who", "does", "not", "own", "a", "cat", "as", "a", "pet", ",", "and", "also", "how", "old", "are", "they", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"cat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Student": ["StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code"], "Has_Pet": ["StuID", "PetID"], "Pets": ["PetID", "PetType", "pet_age", "weight"]}, "answer": [[600, 19], [600, 21], [600, 20], [600, 26], [600, 18], [600, 18], [600, 20], [600, 19], [600, 17], [600, 22], [600, 20], [600, 18], [600, 16], [600, 17], [600, 27], [600, 20], [600, 18], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [520, 19], [520, 18], [550, 20], [100, 17], [550, 21], [550, 20], [550, 20], [550, 18], [50, 18], [50, 26]], "results": {"generated_sql": "SELECT T1.major ,  T1.age FROM Student AS T1 LEFT JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID LEFT JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'cat'", "generated_py": "t1 = pd.merge(Student, Has_Pet, on='StuID'); t2 = pd.merge(t1, Pets, on='PetID'); t3 = t2[t2['PetType'] != 'Cat']; answer = t3[['Major', 'pet_age']]", "sql_exec_result": "[(600, 18)]", "py_exec_result": "None", "gold_answer": [[600, 19], [600, 21], [600, 20], [600, 26], [600, 18], [600, 18], [600, 20], [600, 19], [600, 17], [600, 22], [600, 20], [600, 18], [600, 16], [600, 17], [600, 27], [600, 20], [600, 18], [520, 22], [520, 19], [540, 17], [520, 20], [540, 18], [520, 18], [520, 19], [520, 18], [550, 20], [100, 17], [550, 21], [550, 20], [550, 20], [550, 18], [50, 18], [50, 26]], "gold_sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "gold_py": null}}
{"db_id": "student_transcripts_tracking", "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "query_toks": ["SELECT", "first_name", ",", "middle_name", ",", "last_name", "FROM", "Students", "ORDER", "BY", "date_first_registered", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_first_registered", "asc", "limit", "value"], "question": "What is the first, middle, and last name of the first student to register?", "question_toks": ["What", "is", "the", "first", ",", "middle", ",", "and", "last", "name", "of", "the", "first", "student", "to", "register", "?"], "sql": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 41, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details"], "Courses": ["course_id", "course_name", "course_description", "other_details"], "Departments": ["department_id", "department_name", "department_description", "other_details"], "Degree_Programs": ["degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details"], "Sections": ["section_id", "course_id", "section_name", "section_description", "other_details"], "Semesters": ["semester_id", "semester_name", "semester_description", "other_details"], "Students": ["student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details"], "Student_Enrolment": ["student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details"], "Student_Enrolment_Courses": ["student_course_id", "course_id", "student_enrolment_id"], "Transcripts": ["transcript_id", "transcript_date", "other_details"], "Transcript_Contents": ["student_course_id", "transcript_id"]}, "answer": [["Timmothy", "Anna", "Ward"]], "results": {"generated_sql": "SELECT first_name ,  middle_name ,  last_name FROM students WHERE date_first_registered  =  (SELECT MIN(date_first_registered) FROM students)", "generated_py": "t1 = pd.merge(Students, Student_Enrolment, on='student_id'); t2 = pd.merge(t1, Semesters, on='semester_id'); t3 = pd.merge(t2, Sections, on='section_id'); t4 = pd.merge(t3, Courses, on='course_id'); answer = t4[['first_name', 'middle_name', 'last_name']].drop_duplicates().head(1)", "sql_exec_result": "[('Timmothy', 'Anna', 'Ward')]", "py_exec_result": "None", "gold_answer": [["Timmothy", "Anna", "Ward"]], "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "gold_py": null}}
{"db_id": "world_1", "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "query_toks": ["SELECT", "Name", "FROM", "country", "ORDER", "BY", "Population", "ASC", "LIMIT", "3"], "query_toks_no_value": ["select", "name", "from", "country", "order", "by", "population", "asc", "limit", "value"], "question": "Return the names of the 3 countries with the fewest people.", "question_toks": ["Return", "the", "names", "of", "the", "3", "countries", "with", "the", "fewest", "people", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 14, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}, "db_table_headers": {"city": ["ID", "Name", "CountryCode", "District", "Population"], "sqlite_sequence": ["name", "seq"], "country": ["Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2"], "countrylanguage": ["CountryCode", "Language", "IsOfficial", "Percentage"]}, "answer": [["Antarctica"], ["French Southern territories"], ["Bouvet Island"]], "results": {"generated_sql": "SELECT name FROM country ORDER BY population  LIMIT  3", "generated_py": "t1 = pd.merge(country, city, on='code'); t2 = t1.groupby('name').size().rename('count').reset_index(); answer = t2.sort_values('count', ascending=True).head(3)['name'].tolist()", "sql_exec_result": "[('Antarctica',), ('French Southern territories',), ('Bouvet Island',)]", "py_exec_result": "None", "gold_answer": [["Antarctica"], ["French Southern territories"], ["Bouvet Island"]], "gold_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "gold_py": null}}
{"db_id": "student_transcripts_tracking", "query": "SELECT count(DISTINCT current_address_id) FROM Students", "query_toks": ["SELECT", "count", "(", "DISTINCT", "current_address_id", ")", "FROM", "Students"], "query_toks_no_value": ["select", "count", "(", "distinct", "current_address_id", ")", "from", "students"], "question": "What are the different addresses that have students living there?", "question_toks": ["What", "are", "the", "different", "addresses", "that", "have", "students", "living", "there", "?"], "sql": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[3, [0, [0, 33, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details"], "Courses": ["course_id", "course_name", "course_description", "other_details"], "Departments": ["department_id", "department_name", "department_description", "other_details"], "Degree_Programs": ["degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details"], "Sections": ["section_id", "course_id", "section_name", "section_description", "other_details"], "Semesters": ["semester_id", "semester_name", "semester_description", "other_details"], "Students": ["student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details"], "Student_Enrolment": ["student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details"], "Student_Enrolment_Courses": ["student_course_id", "course_id", "student_enrolment_id"], "Transcripts": ["transcript_id", "transcript_date", "other_details"], "Transcript_Contents": ["student_course_id", "transcript_id"]}, "answer": [[9]], "results": {"generated_sql": "SELECT DISTINCT T1.line_1 ,  T1.line_2 ,  T1.line_3 ,  T1.city ,  T1.zip_postcode ,  T1.state_province_county ,  T1.country ,  T1.other_address_details FROM students AS T2 JOIN addresses AS T1 ON T2.current_address_id  =  T1.address_id OR T2.permanent_address_id  =  T1.address_id", "generated_py": "t1 = pd.merge(Students, Addresses, left_on='current_address_id', right_on='address_id'); t2 = pd.merge(t1, Addresses, left_on='permanent_address_id', right_on='address_id'); answer = t2['line_1_x'].append(t2['line_1_y']).drop_duplicates()", "sql_exec_result": "[('7081 Eda Center', 'Suite 830', None, 'Rutherfordtown', '839', 'Delaware', 'Kyrgyz Republic', None), ('74046 Metz Walk Apt. 113', 'Suite 674', None, 'Port Oceane', '669', 'Wyoming', 'Norfolk Island', None), ('858 Peggie Bypass Suite 212', 'Apt. 335', None, 'Michelleburgh', '446', 'Hawaii', 'Haiti', None), ('979 Haag Shores Suite 656', 'Apt. 468', None, 'Prohaskafort', '590', 'SouthDakota', 'Lesotho', None), ('0643 Muller Vista', 'Suite 383', None, 'Port Elvisfurt', '777', 'NorthCarolina', 'Gabon', None), ('193 Marlin Brook', 'Apt. 406', None, 'Herzoghaven', '068', 'Arkansas', 'Cook Islands', None), ('9283 Schulist Falls Apt. 037', 'Suite 239', None, 'South Palma', '400', 'WestVirginia', 'Bermuda', None), ('67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None), ('16998 Mraz Lodge', 'Apt. 689', None, 'North Omer', '902', 'Kentucky', 'Gibraltar', None), ('2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), ('3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), ('186 Evan Motorway Apt. 409', 'Suite 079', None, 'Lake Careyberg', '895', 'Kentucky', 'New Caledonia', None), ('0144 Lamar Plaza Apt. 346', 'Suite 703', None, 'Port Evanston', '847', 'Washington', 'Angola', None), ('202 Hessel Views Apt. 468', 'Apt. 305', None, 'Mariliehaven', '638', 'Idaho', 'Croatia', None)]", "py_exec_result": "0                   7081 Eda Center\n1     3999 Aufderhar Ways Suite 593\n2         979 Haag Shores Suite 656\n3                 0643 Muller Vista\n4        2294 Grant Square Apt. 235\n6                  193 Marlin Brook\n9        186 Evan Motorway Apt. 409\n11                 16998 Mraz Lodge\n12         74046 Metz Walk Apt. 113\n2       858 Peggie Bypass Suite 212\n5      9283 Schulist Falls Apt. 037\n10        202 Hessel Views Apt. 468\n11    67942 Carlotta Ferry Apt. 686\n14        0144 Lamar Plaza Apt. 346\ndtype: object", "gold_answer": [[9]], "gold_sql": "SELECT count(DISTINCT current_address_id) FROM Students", "gold_py": null}}
{"db_id": "employee_hire_evaluation", "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "query_toks": ["SELECT", "manager_name", ",", "district", "FROM", "shop", "ORDER", "BY", "number_products", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "manager_name", ",", "district", "from", "shop", "order", "by", "number_products", "desc", "limit", "value"], "question": "Find the manager name and district of the shop whose number of products is the largest.", "question_toks": ["Find", "the", "manager", "name", "and", "district", "of", "the", "shop", "whose", "number", "of", "products", "is", "the", "largest", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 9, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"employee": ["Employee_ID", "Name", "Age", "City"], "shop": ["Shop_ID", "Name", "Location", "District", "Number_products", "Manager_name"], "hiring": ["Shop_ID", "Employee_ID", "Start_from", "Is_full_time"], "evaluation": ["Employee_ID", "Year_awarded", "Bonus"]}, "answer": [["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"]], "results": {"generated_sql": "SELECT T1.manager_name ,  T1.district FROM shop AS T1 JOIN (SELECT T2.shop_id ,  max(T2.number_products) AS max_number_products FROM shop AS T2) AS T2 ON T1.shop_id  =  T2.shop_id", "generated_py": "answer = shop.sort_values('number_products', ascending = False).drop_duplicates(subset = 'shop_id').iloc[0, :][['manager_name', 'district']]", "sql_exec_result": "[('Ilkka M\u00e4kel\u00e4', 'Lahden Stadion')]", "py_exec_result": "manager_name      Ilkka M\u00e4kel\u00e4\ndistrict        Lahden Stadion\nName: 7, dtype: object", "gold_answer": [["Ilkka M\u00e4kel\u00e4", "Lahden Stadion"]], "gold_sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "gold_py": null}}
{"db_id": "museum_visit", "query": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "visitor", "WHERE", "id", "NOT", "IN", "(", "SELECT", "t2.visitor_id", "FROM", "museum", "AS", "t1", "JOIN", "visit", "AS", "t2", "ON", "t1.Museum_ID", "=", "t2.Museum_ID", "WHERE", "t1.open_year", ">", "2010", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "visitor", "where", "id", "not", "in", "(", "select", "t2", ".", "visitor_id", "from", "museum", "as", "t1", "join", "visit", "as", "t2", "on", "t1", ".", "museum_id", "=", "t2", ".", "museum_id", "where", "t1", ".", "open_year", ">", "value", ")"], "question": "Find the number of visitors who did not visit any museum opened after 2010.", "question_toks": ["Find", "the", "number", "of", "visitors", "who", "did", "not", "visit", "any", "museum", "opened", "after", "2010", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[true, 8, [0, [0, 5, false], null], {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], 2010.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"museum": ["Museum_ID", "Name", "Num_of_Staff", "Open_Year"], "visitor": ["ID", "Name", "Level_of_membership", "Age"], "visit": ["Museum_ID", "visitor_ID", "Num_of_Ticket", "Total_spent"]}, "answer": [[3]], "results": {"generated_sql": "SELECT count(*) FROM visitor WHERE visitor_id NOT IN (SELECT visitor_id FROM visit WHERE museum_id IN (SELECT museum_id FROM museum WHERE open_year  >  2010))", "generated_py": "t1 = pd.merge(visitor, visit, on='id'); t2 = pd.merge(t1, museum, on='museum_id'); t3 = t2[t2['open_year'] > 2010]; answer = t3['id'].unique().shape[0]", "sql_exec_result": "None", "py_exec_result": "None", "gold_answer": [[3]], "gold_sql": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)", "gold_py": null}}
{"db_id": "orchestra", "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "query_toks": ["SELECT", "Orchestra", "FROM", "orchestra", "WHERE", "Orchestra_ID", "NOT", "IN", "(", "SELECT", "Orchestra_ID", "FROM", "performance", ")"], "query_toks_no_value": ["select", "orchestra", "from", "orchestra", "where", "orchestra_id", "not", "in", "(", "select", "orchestra_id", "from", "performance", ")"], "question": "What are the orchestras that do not have any performances?", "question_toks": ["What", "are", "the", "orchestras", "that", "do", "not", "have", "any", "performances", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[true, 8, [0, [0, 6, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"conductor": ["Conductor_ID", "Name", "Age", "Nationality", "Year_of_Work"], "orchestra": ["Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format"], "performance": ["Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share"], "show": ["Show_ID", "Performance_ID", "If_first_show", "Result", "Attendance"]}, "answer": [["San Francisco Symphony Orchestra"]], "results": {"generated_sql": "SELECT DISTINCT T1.orchestra FROM orchestra AS T1 LEFT JOIN performance AS T2 ON T1.orchestra_id  =  T2.orchestra_id WHERE T2.performance_id  IS  NULL", "generated_py": "t1 = pd.merge(orchestra, performance, on='orchestra_id'); t2 = t1[t1['performance_id'].isnull()]; answer = t2['orchestra_id'].unique()", "sql_exec_result": "[('San Francisco Symphony Orchestra',)]", "py_exec_result": "[]", "gold_answer": [["San Francisco Symphony Orchestra"]], "gold_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "gold_py": null}}
{"db_id": "dog_kennels", "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.owner_id", ",", "T2.first_name", ",", "T2.last_name", "FROM", "Dogs", "AS", "T1", "JOIN", "Owners", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id", "GROUP", "BY", "T1.owner_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "owner_id", ",", "t2", ".", "first_name", ",", "t2", ".", "last_name", "from", "dogs", "as", "t1", "join", "owners", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id", "group", "by", "t1", ".", "owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which owner owns the most dogs? List the owner id, first name and last name.", "question_toks": ["Which", "owner", "owns", "the", "most", "dogs", "?", "List", "the", "owner", "id", ",", "first", "name", "and", "last", "name", "."], "sql": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 21, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 21, false], null]], [0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [[0, 21, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Breeds": ["breed_code", "breed_name"], "Charges": ["charge_id", "charge_type", "charge_amount"], "Sizes": ["size_code", "size_description"], "Treatment_Types": ["treatment_type_code", "treatment_type_description"], "Owners": ["owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number"], "Dogs": ["dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed"], "Professionals": ["professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number"], "Treatments": ["treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "answer": [[14, "Rachelle", "Funk"]], "results": {"generated_sql": "SELECT T1.owner_id ,  T1.first_name ,  T1.last_name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*)  DESC LIMIT 1", "generated_py": "t1 = pd.merge(Dogs, Owners, on='owner_id'); t2 = pd.merge(t1, Dogs.groupby('owner_id').size().rename('count'), on='owner_id'); answer = t2[t2['count'] == t2['count'].max()][['owner_id', 'first_name', 'last_name']]", "sql_exec_result": "[(14, 'Rachelle', 'Funk')]", "py_exec_result": "   owner_id first_name last_name\n4        14   Rachelle      Funk\n5        14   Rachelle      Funk\n6        14   Rachelle      Funk", "gold_answer": [[14, "Rachelle", "Funk"]], "gold_sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "gold_py": null}}
{"db_id": "orchestra", "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "query_toks": ["SELECT", "Name", "FROM", "conductor", "ORDER", "BY", "Year_of_Work", "DESC"], "query_toks_no_value": ["select", "name", "from", "conductor", "order", "by", "year_of_work", "desc"], "question": "List names of conductors in descending order of years of work.", "question_toks": ["List", "names", "of", "conductors", "in", "descending", "order", "of", "years", "of", "work", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 5, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"conductor": ["Conductor_ID", "Name", "Age", "Nationality", "Year_of_Work"], "orchestra": ["Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format"], "performance": ["Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share"], "show": ["Show_ID", "Performance_ID", "If_first_show", "Result", "Attendance"]}, "answer": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]], "results": {"generated_sql": "SELECT name FROM conductor ORDER BY year_of_work DESC", "generated_py": "t1 = pd.merge(conductor, orchestra, on='conductor_id'); t2 = pd.merge(t1, performance, on='orchestra_id'); t3 = pd.merge(t2, show, on='performance_id'); answer = t3.groupby('conductor_id').size().rename('years_of_work').sort_values(ascending = False)", "sql_exec_result": "[('Robert Craft',), ('Antal Brown',), ('Gerard Schwarz',), ('Valeri Gergiev',), ('Charles Dutoit',), ('Michael Tilson Thomas',), ('Igor Stravinsky',), ('Paul Jorgensen',), ('Pierre Boulez',), ('Antal Dor\u00e1ti',), ('Seiji Ozawa',), ('Colin Davis',)]", "py_exec_result": "conductor_id\n1    1\n2    1\n3    1\n4    1\n5    1\nName: years_of_work, dtype: int64", "gold_answer": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Dor\u00e1ti"], ["Seiji Ozawa"], ["Colin Davis"]], "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "gold_py": null}}
{"db_id": "world_1", "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "query_toks": ["SELECT", "T2.Language", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T1.HeadOfState", "=", "``", "Beatrix", "''", "AND", "T2.IsOfficial", "=", "``", "T", "''"], "query_toks_no_value": ["select", "t2", ".", "language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t1", ".", "headofstate", "=", "value", "and", "t2", ".", "isofficial", "=", "value"], "question": "What is the official language spoken in the country whose head of state is Beatrix?", "question_toks": ["What", "is", "the", "official", "language", "spoken", "in", "the", "country", "whose", "head", "of", "state", "is", "Beatrix", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"Beatrix\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"city": ["ID", "Name", "CountryCode", "District", "Population"], "sqlite_sequence": ["name", "seq"], "country": ["Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2"], "countrylanguage": ["CountryCode", "Language", "IsOfficial", "Percentage"]}, "answer": [["Dutch"], ["Dutch"], ["Papiamento"], ["Dutch"]], "results": {"generated_sql": "SELECT T1.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.code  =  T2.countrycode JOIN headofstate AS T3 ON T1.code  =  T3.code WHERE T3.name  =  'Beatrix'", "generated_py": "t1 = pd.merge(country, countrylanguage, on='code'); t2 = pd.merge(t1, head, on='code'); answer = t2[t2['name'] == 'Beatrix']['language'].unique()", "sql_exec_result": "None", "py_exec_result": "None", "gold_answer": [["Dutch"], ["Dutch"], ["Papiamento"], ["Dutch"]], "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "gold_py": null}}
{"db_id": "orchestra", "query": "SELECT avg(Attendance) FROM SHOW", "query_toks": ["SELECT", "avg", "(", "Attendance", ")", "FROM", "SHOW"], "query_toks_no_value": ["select", "avg", "(", "attendance", ")", "from", "show"], "question": "Return the average attendance across all shows.", "question_toks": ["Return", "the", "average", "attendance", "across", "all", "shows", "."], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[5, [0, [0, 23, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"conductor": ["Conductor_ID", "Name", "Age", "Nationality", "Year_of_Work"], "orchestra": ["Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format"], "performance": ["Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share"], "show": ["Show_ID", "Performance_ID", "If_first_show", "Result", "Attendance"]}, "answer": [[1326.4]], "results": {"generated_sql": "SELECT avg(attendance) FROM show", "generated_py": "answer = show['attendance'].mean()", "sql_exec_result": "[(1326.4,)]", "py_exec_result": "1326.4", "gold_answer": [[1326.4]], "gold_sql": "SELECT avg(Attendance) FROM SHOW", "gold_py": null}}
{"db_id": "course_teach", "query": "SELECT Age ,  Hometown FROM teacher", "query_toks": ["SELECT", "Age", ",", "Hometown", "FROM", "teacher"], "query_toks_no_value": ["select", "age", ",", "hometown", "from", "teacher"], "question": "What are the age and hometown of teachers?", "question_toks": ["What", "are", "the", "age", "and", "hometown", "of", "teachers", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"course": ["Course_ID", "Staring_Date", "Course"], "teacher": ["Teacher_ID", "Name", "Age", "Hometown"], "course_arrange": ["Course_ID", "Teacher_ID", "Grade"]}, "answer": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]], "results": {"generated_sql": "SELECT T1.age ,  T1.hometown FROM teacher AS T1", "generated_py": "answer = teacher[['age', 'hometown']]", "sql_exec_result": "[('32', 'Blackrod Urban District'), ('29', 'Bolton County Borough'), ('26', 'Farnworth Municipal Borough'), ('33', 'Horwich Urban District'), ('45', 'Kearsley Urban District'), ('41', 'Little Lever Urban District'), ('39', 'Turton Urban District')]", "py_exec_result": "  age                     hometown\n0  32      Blackrod Urban District\n1  29        Bolton County Borough\n2  26  Farnworth Municipal Borough\n3  33       Horwich Urban District\n4  45      Kearsley Urban District\n5  41  Little Lever Urban District\n6  39        Turton Urban District", "gold_answer": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]], "gold_sql": "SELECT Age ,  Hometown FROM teacher", "gold_py": null}}
{"db_id": "student_transcripts_tracking", "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "query_toks": ["SELECT", "T1.first_name", ",", "T1.middle_name", ",", "T1.last_name", ",", "T1.student_id", "FROM", "Students", "AS", "T1", "JOIN", "Student_Enrolment", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "GROUP", "BY", "T1.student_id", "HAVING", "count", "(", "*", ")", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "middle_name", ",", "t1", ".", "last_name", ",", "t1", ".", "student_id", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "group", "by", "t1", ".", "student_id", "having", "count", "(", "*", ")", "=", "value"], "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.", "question_toks": ["Who", "are", "enrolled", "in", "2", "degree", "programs", "in", "one", "semester", "?", "List", "the", "first", "name", ",", "middle", "name", "and", "last", "name", "and", "the", "id", "."], "sql": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 47, false], null]]}, "select": [false, [[0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]], [0, [0, [0, 32, false], null]]]], "where": [], "groupBy": [[0, 32, false]], "having": [[false, 2, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details"], "Courses": ["course_id", "course_name", "course_description", "other_details"], "Departments": ["department_id", "department_name", "department_description", "other_details"], "Degree_Programs": ["degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details"], "Sections": ["section_id", "course_id", "section_name", "section_description", "other_details"], "Semesters": ["semester_id", "semester_name", "semester_description", "other_details"], "Students": ["student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details"], "Student_Enrolment": ["student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details"], "Student_Enrolment_Courses": ["student_course_id", "course_id", "student_enrolment_id"], "Transcripts": ["transcript_id", "transcript_date", "other_details"], "Transcript_Contents": ["student_course_id", "transcript_id"]}, "answer": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]], "results": {"generated_sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T2.student_enrolment_id FROM student_enrolment AS T2 JOIN students AS T1 ON T1.student_id  =  T2.student_id JOIN degree_programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id JOIN sections AS T4 ON T3.section_id  =  T4.section_id JOIN semesters AS T5 ON T4.semester_id  =  T5.semester_id WHERE T5.semester_name  =  'Fall' GROUP BY T2.student_enrolment_id HAVING count(*)  =  2", "generated_py": "t1 = pd.merge(Student_Enrolment, Degree_Programs, on='degree_program_id'); t2 = pd.merge(t1, Students, on='student_id'); t3 = pd.merge(t2, t2.groupby(['student_id', 'semester_id']).size().rename('count'), on=['student_id', 'semester_id']); t4 = t3[t3['count'] > 1]; answer = t4[['first_name', 'middle_name', 'last_name', 'student_enrolment_id']].drop_duplicates()", "sql_exec_result": "None", "py_exec_result": "  first_name middle_name last_name  student_enrolment_id\n3      Frida       Aisha      Huel                     3\n4      Frida       Aisha      Huel                    10", "gold_answer": [["Jarvis", "Aaliyah", "Carroll", 4], ["Reva", "Golda", "Osinski", 9], ["Jordy", "Osborne", "Rempel", 14]], "gold_sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "gold_py": null}}
{"db_id": "dog_kennels", "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.professional_id", ",", "T1.role_code", ",", "T1.first_name", "FROM", "Professionals", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.professional_id", "=", "T2.professional_id", "GROUP", "BY", "T1.professional_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "professional_id", ",", "t1", ".", "role_code", ",", "t1", ".", "first_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "professional_id", "=", "t2", ".", "professional_id", "group", "by", "t1", ".", "professional_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.", "question_toks": ["Which", "professionals", "have", "done", "at", "least", "two", "treatments", "?", "List", "the", "professional", "'s", "id", ",", "role", ",", "and", "first", "name", "."], "sql": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 34, false], null]], [0, [0, [0, 35, false], null]]]], "where": [], "groupBy": [[0, 33, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Breeds": ["breed_code", "breed_name"], "Charges": ["charge_id", "charge_type", "charge_amount"], "Sizes": ["size_code", "size_description"], "Treatment_Types": ["treatment_type_code", "treatment_type_description"], "Owners": ["owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number"], "Dogs": ["dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed"], "Professionals": ["professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number"], "Treatments": ["treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "answer": [[4, "Veterenarian", "Vernice"], [6, "Veterenarian", "Ruben"], [8, "Employee", "Karley"], [9, "Veterenarian", "Monte"], [10, "Employee", "Domenica"], [14, "Employee", "Sigurd"]], "results": {"generated_sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM treatments AS T2 JOIN professionals AS T1 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  1", "generated_py": "t1 = pd.merge(Treatments, Dogs, on='dog_id'); t2 = pd.merge(t1, Professionals, on='professional_id'); t3 = pd.merge(t2, t2.groupby('professional_id').size().rename('count'), on='professional_id'); t4 = t3[t3['count'] >= 2]; answer = t4[['professional_id', 'role_code', 'first_name']].drop_duplicates()", "sql_exec_result": "[(4, 'Veterenarian', 'Vernice'), (6, 'Veterenarian', 'Ruben'), (8, 'Employee', 'Karley'), (9, 'Veterenarian', 'Monte'), (10, 'Employee', 'Domenica'), (14, 'Employee', 'Sigurd')]", "py_exec_result": "    professional_id     role_code first_name\n0                 9  Veterenarian      Monte\n3                 4  Veterenarian    Vernice\n5                10      Employee   Domenica\n7                 8      Employee     Karley\n9                 6  Veterenarian      Ruben\n11               14      Employee     Sigurd", "gold_answer": [[4, "Veterenarian", "Vernice"], [6, "Veterenarian", "Ruben"], [8, "Employee", "Karley"], [9, "Veterenarian", "Monte"], [10, "Employee", "Domenica"], [14, "Employee", "Sigurd"]], "gold_sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "gold_py": null}}
{"db_id": "dog_kennels", "query": "SELECT avg(age) FROM Dogs", "query_toks": ["SELECT", "avg", "(", "age", ")", "FROM", "Dogs"], "query_toks_no_value": ["select", "avg", "(", "age", ")", "from", "dogs"], "question": "Compute the average age of all the dogs.", "question_toks": ["Compute", "the", "average", "age", "of", "all", "the", "dogs", "."], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Breeds": ["breed_code", "breed_name"], "Charges": ["charge_id", "charge_type", "charge_amount"], "Sizes": ["size_code", "size_description"], "Treatment_Types": ["treatment_type_code", "treatment_type_description"], "Owners": ["owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number"], "Dogs": ["dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed"], "Professionals": ["professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number"], "Treatments": ["treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "answer": [[5.066666666666666]], "results": {"generated_sql": "SELECT AVG(age) FROM dogs", "generated_py": "answer = Dogs['age'].mean()", "sql_exec_result": "[(5.066666666666666,)]", "py_exec_result": "46569948329216.07", "gold_answer": [[5.066666666666666]], "gold_sql": "SELECT avg(age) FROM Dogs", "gold_py": null}}
{"db_id": "orchestra", "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "T1.Name", "FROM", "conductor", "AS", "T1", "JOIN", "orchestra", "AS", "T2", "ON", "T1.Conductor_ID", "=", "T2.Conductor_ID", "GROUP", "BY", "T2.Conductor_ID", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1", ".", "conductor_id", "=", "t2", ".", "conductor_id", "group", "by", "t2", ".", "conductor_id", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the names of conductors who have conducted at more than one orchestra?", "question_toks": ["What", "are", "the", "names", "of", "conductors", "who", "have", "conducted", "at", "more", "than", "one", "orchestra", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"conductor": ["Conductor_ID", "Name", "Age", "Nationality", "Year_of_Work"], "orchestra": ["Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format"], "performance": ["Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share"], "show": ["Show_ID", "Performance_ID", "If_first_show", "Result", "Attendance"]}, "answer": [], "results": {"generated_sql": "SELECT T1.name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.conductor_id  =  T2.conductor_id GROUP BY T1.name HAVING count(*)  >  1", "generated_py": "t1 = pd.merge(orchestra, performance, on='orchestra_id'); t2 = pd.merge(t1, show, on='performance_id'); t3 = t2.groupby('conductor_id').size().rename('count').reset_index(); t4 = t3[t3['count'] > 1]; answer = t4.merge(conductor, on='conductor_id')['name']", "sql_exec_result": "[]", "py_exec_result": "Series([], Name: name, dtype: object)", "gold_answer": [], "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "gold_py": null}}
{"db_id": "pets_1", "query": "SELECT count(DISTINCT pettype) FROM pets", "query_toks": ["SELECT", "count", "(", "DISTINCT", "pettype", ")", "FROM", "pets"], "query_toks_no_value": ["select", "count", "(", "distinct", "pettype", ")", "from", "pets"], "question": "How many different types of pet are there?", "question_toks": ["How", "many", "different", "types", "of", "pet", "are", "there", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 12, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Student": ["StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code"], "Has_Pet": ["StuID", "PetID"], "Pets": ["PetID", "PetType", "pet_age", "weight"]}, "answer": [[2]], "results": {"generated_sql": "SELECT COUNT(DISTINCT T1.pet_type) FROM pets_1.pets AS T1 JOIN pets_1.has_pet AS T2 ON T1.pet_id  =  T2.pet_id JOIN pets_1.student AS T3 ON T2.stu_id  =  T3.stu_id", "generated_py": "answer = Pets['pet_type'].unique().shape[0]", "sql_exec_result": "None", "py_exec_result": "None", "gold_answer": [[2]], "gold_sql": "SELECT count(DISTINCT pettype) FROM pets", "gold_py": null}}
{"db_id": "pets_1", "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "query_toks": ["SELECT", "weight", "FROM", "pets", "ORDER", "BY", "pet_age", "LIMIT", "1"], "query_toks_no_value": ["select", "weight", "from", "pets", "order", "by", "pet_age", "limit", "value"], "question": "How much does the youngest dog weigh?", "question_toks": ["How", "much", "does", "the", "youngest", "dog", "weigh", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 13, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Student": ["StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code"], "Has_Pet": ["StuID", "PetID"], "Pets": ["PetID", "PetType", "pet_age", "weight"]}, "answer": [[9.3]], "results": {"generated_sql": "SELECT MIN(weight) FROM pets WHERE pettype  =  'dog'", "generated_py": "t1 = pd.merge(Has_Pet, Pets, on='pet_id'); t2 = pd.merge(t1, Student, on='stu_id'); answer = t2[t2['pet_type'] == 'dog']['weight'].min()", "sql_exec_result": "[(9.3,)]", "py_exec_result": "None", "gold_answer": [[9.3]], "gold_sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "gold_py": null}}
{"db_id": "student_transcripts_tracking", "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.course_name", "FROM", "Courses", "AS", "T1", "JOIN", "Student_Enrolment_Courses", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "GROUP", "BY", "T1.course_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "course_name", "from", "courses", "as", "t1", "join", "student_enrolment_courses", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "group", "by", "t1", ".", "course_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What's the name of the course with most number of enrollments?", "question_toks": ["What", "'s", "the", "name", "of", "the", "course", "with", "most", "number", "of", "enrollments", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 8]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 50, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [[0, 11, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details"], "Courses": ["course_id", "course_name", "course_description", "other_details"], "Departments": ["department_id", "department_name", "department_description", "other_details"], "Degree_Programs": ["degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details"], "Sections": ["section_id", "course_id", "section_name", "section_description", "other_details"], "Semesters": ["semester_id", "semester_name", "semester_description", "other_details"], "Students": ["student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details"], "Student_Enrolment": ["student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details"], "Student_Enrolment_Courses": ["student_course_id", "course_id", "student_enrolment_id"], "Transcripts": ["transcript_id", "transcript_date", "other_details"], "Transcript_Contents": ["student_course_id", "transcript_id"]}, "answer": [["rs"]], "results": {"generated_sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id JOIN Student_Enrolment AS T3 ON T2.section_id  =  T3.section_id GROUP BY T1.course_id ORDER BY count(*)  DESC LIMIT 1", "generated_py": "t1 = pd.merge(Student_Enrolment, Sections, on='section_id'); t2 = pd.merge(t1, Courses, on='course_id'); answer = t2.groupby('course_name').size().rename('count').sort_values(ascending=False).index[0]", "sql_exec_result": "None", "py_exec_result": "None", "gold_answer": [["rs"]], "gold_sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "gold_py": null}}
{"db_id": "museum_visit", "query": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "query_toks": ["SELECT", "name", "FROM", "museum", "WHERE", "num_of_staff", ">", "(", "SELECT", "min", "(", "num_of_staff", ")", "FROM", "museum", "WHERE", "open_year", ">", "2010", ")"], "query_toks_no_value": ["select", "name", "from", "museum", "where", "num_of_staff", ">", "(", "select", "min", "(", "num_of_staff", ")", "from", "museum", "where", "open_year", ">", "value", ")"], "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.", "question_toks": ["find", "the", "names", "of", "museums", "which", "have", "more", "staff", "than", "the", "minimum", "staff", "number", "of", "all", "museums", "opened", "after", "2010", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 3, [0, [0, 3, false], null], {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[2, [0, [0, 3, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], 2010.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"museum": ["Museum_ID", "Name", "Num_of_Staff", "Open_Year"], "visitor": ["ID", "Name", "Level_of_membership", "Age"], "visit": ["Museum_ID", "visitor_ID", "Num_of_Ticket", "Total_spent"]}, "answer": [["Plaza Museum"], ["Capital Plaza Museum"], ["Jefferson Development Museum"]], "results": {"generated_sql": "SELECT T1.name FROM museum AS T1 JOIN (SELECT min(T2.num_of_staff) AS min_staff FROM museum AS T2 WHERE T2.open_year  >  2010) AS T3 ON T1.num_of_staff  >  T3.min_staff", "generated_py": "t1 = pd.merge(museum, visit, on='museum_id'); t2 = pd.merge(t1, visitor, on='visitor_id'); t3 = t2[t2['open_year'] > 2010]; t4 = t3.groupby('museum_id').min()[['num_of_staff']]; t5 = pd.merge(t4, museum, on='museum_id'); answer = t5[t5['num_of_staff_x'] > t5['num_of_staff_y']]['name']", "sql_exec_result": "[('Plaza Museum',), ('Capital Plaza Museum',), ('Jefferson Development Museum',)]", "py_exec_result": "None", "gold_answer": [["Plaza Museum"], ["Capital Plaza Museum"], ["Jefferson Development Museum"]], "gold_sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "gold_py": null}}
{"db_id": "car_1", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "query_toks": ["SELECT", "T1.Model", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "CARS_DATA", "AS", "T2", "ON", "T1.MakeId", "=", "T2.Id", "ORDER", "BY", "T2.horsepower", "ASC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1", ".", "makeid", "=", "t2", ".", "id", "order", "by", "t2", ".", "horsepower", "asc", "limit", "value"], "question": "What is the model of the car with the smallest amount of horsepower?", "question_toks": ["What", "is", "the", "model", "of", "the", "car", "with", "the", "smallest", "amount", "of", "horsepower", "?"], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [["amc"]], "results": {"generated_sql": "SELECT T1.model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.makeid  =  T2.id WHERE T2.horsepower  =  (SELECT MIN(T3.horsepower) FROM cars_data AS T3)", "generated_py": "t1 = pd.merge(car_names, cars_data, on='model'); t2 = t1.groupby('model').min()['horsepower'].rename('min_horsepower'); answer = t1[t1['horsepower'] == t2.iloc[0]]['model'].iloc[0]", "sql_exec_result": "[('amc',), ('chevrolet',), ('amc',), ('pontiac',), ('chevrolet',), ('amc',), ('amc',), ('amc',), ('chevrolet',), ('chevrolet',), ('amc',), ('plymouth',), ('dodge',), ('plymouth',), ('plymouth',), ('mazda',), ('datsun',)]", "py_exec_result": "None", "gold_answer": [["amc"]], "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "gold_py": null}}
{"db_id": "world_1", "query": "SELECT Name FROM country WHERE IndepYear  >  1950", "query_toks": ["SELECT", "Name", "FROM", "country", "WHERE", "IndepYear", ">", "1950"], "query_toks_no_value": ["select", "name", "from", "country", "where", "indepyear", ">", "value"], "question": "What are the names of all the countries that became independent after 1950?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "countries", "that", "became", "independent", "after", "1950", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], 1950.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"city": ["ID", "Name", "CountryCode", "District", "Population"], "sqlite_sequence": ["name", "seq"], "country": ["Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2"], "countrylanguage": ["CountryCode", "Language", "IsOfficial", "Percentage"]}, "answer": [["Angola"], ["United Arab Emirates"], ["Armenia"], ["Antigua and Barbuda"], ["Azerbaijan"], ["Burundi"], ["Benin"], ["Burkina Faso"], ["Bangladesh"], ["Bahrain"], ["Bahamas"], ["Bosnia and Herzegovina"], ["Belarus"], ["Belize"], ["Barbados"], ["Brunei"], ["Botswana"], ["Central African Republic"], ["C\u00f4te d\u2019Ivoire"], ["Cameroon"], ["Congo, The Democratic Republic of the"], ["Congo"], ["Comoros"], ["Cape Verde"], ["Cyprus"], ["Czech Republic"], ["Germany"], ["Djibouti"], ["Dominica"], ["Algeria"], ["Eritrea"], ["Estonia"], ["Fiji Islands"], ["Micronesia, Federated States of"], ["Gabon"], ["Georgia"], ["Ghana"], ["Guinea"], ["Gambia"], ["Guinea-Bissau"], ["Equatorial Guinea"], ["Grenada"], ["Guyana"], ["Croatia"], ["Jamaica"], ["Kazakstan"], ["Kenya"], ["Kyrgyzstan"], ["Cambodia"], ["Kiribati"], ["Saint Kitts and Nevis"], ["Kuwait"], ["Laos"], ["Libyan Arab Jamahiriya"], ["Saint Lucia"], ["Lesotho"], ["Lithuania"], ["Latvia"], ["Morocco"], ["Moldova"], ["Madagascar"], ["Maldives"], ["Marshall Islands"], ["Macedonia"], ["Mali"], ["Malta"], ["Mozambique"], ["Mauritania"], ["Mauritius"], ["Malawi"], ["Malaysia"], ["Namibia"], ["Niger"], ["Nigeria"], ["Nauru"], ["Oman"], ["Palau"], ["Papua New Guinea"], ["Qatar"], ["Russian Federation"], ["Rwanda"], ["Sudan"], ["Senegal"], ["Singapore"], ["Solomon Islands"], ["Sierra Leone"], ["Somalia"], ["Sao Tome and Principe"], ["Suriname"], ["Slovakia"], ["Slovenia"], ["Swaziland"], ["Seychelles"], ["Chad"], ["Togo"], ["Tajikistan"], ["Turkmenistan"], ["Tonga"], ["Trinidad and Tobago"], ["Tunisia"], ["Tuvalu"], ["Tanzania"], ["Uganda"], ["Ukraine"], ["Uzbekistan"], ["Saint Vincent and the Grenadines"], ["Vanuatu"], ["Samoa"], ["Zambia"], ["Zimbabwe"]], "results": {"generated_sql": "SELECT name FROM country WHERE indepyear  >  1950", "generated_py": "t1 = pd.merge(country, sqlite_sequence, on='Code'); t2 = pd.merge(t1, countrylanguage, on='Code'); t3 = t2[t2['IndepYear'] > 1950]; answer = t3['Name_y'].unique()", "sql_exec_result": "[('Angola',), ('United Arab Emirates',), ('Armenia',), ('Antigua and Barbuda',), ('Azerbaijan',), ('Burundi',), ('Benin',), ('Burkina Faso',), ('Bangladesh',), ('Bahrain',), ('Bahamas',), ('Bosnia and Herzegovina',), ('Belarus',), ('Belize',), ('Barbados',), ('Brunei',), ('Botswana',), ('Central African Republic',), ('C\u00f4te d\u2019Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Comoros',), ('Cape Verde',), ('Cyprus',), ('Czech Republic',), ('Germany',), ('Djibouti',), ('Dominica',), ('Algeria',), ('Eritrea',), ('Estonia',), ('Fiji Islands',), ('Micronesia, Federated States of',), ('Gabon',), ('Georgia',), ('Ghana',), ('Guinea',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Grenada',), ('Guyana',), ('Croatia',), ('Jamaica',), ('Kazakstan',), ('Kenya',), ('Kyrgyzstan',), ('Cambodia',), ('Kiribati',), ('Saint Kitts and Nevis',), ('Kuwait',), ('Laos',), ('Libyan Arab Jamahiriya',), ('Saint Lucia',), ('Lesotho',), ('Lithuania',), ('Latvia',), ('Morocco',), ('Moldova',), ('Madagascar',), ('Maldives',), ('Marshall Islands',), ('Macedonia',), ('Mali',), ('Malta',), ('Mozambique',), ('Mauritania',), ('Mauritius',), ('Malawi',), ('Malaysia',), ('Namibia',), ('Niger',), ('Nigeria',), ('Nauru',), ('Oman',), ('Palau',), ('Papua New Guinea',), ('Qatar',), ('Russian Federation',), ('Rwanda',), ('Sudan',), ('Senegal',), ('Singapore',), ('Solomon Islands',), ('Sierra Leone',), ('Somalia',), ('Sao Tome and Principe',), ('Suriname',), ('Slovakia',), ('Slovenia',), ('Swaziland',), ('Seychelles',), ('Chad',), ('Togo',), ('Tajikistan',), ('Turkmenistan',), ('Tonga',), ('Trinidad and Tobago',), ('Tunisia',), ('Tuvalu',), ('Tanzania',), ('Uganda',), ('Ukraine',), ('Uzbekistan',), ('Saint Vincent and the Grenadines',), ('Vanuatu',), ('Samoa',), ('Zambia',), ('Zimbabwe',)]", "py_exec_result": "None", "gold_answer": [["Angola"], ["United Arab Emirates"], ["Armenia"], ["Antigua and Barbuda"], ["Azerbaijan"], ["Burundi"], ["Benin"], ["Burkina Faso"], ["Bangladesh"], ["Bahrain"], ["Bahamas"], ["Bosnia and Herzegovina"], ["Belarus"], ["Belize"], ["Barbados"], ["Brunei"], ["Botswana"], ["Central African Republic"], ["C\u00f4te d\u2019Ivoire"], ["Cameroon"], ["Congo, The Democratic Republic of the"], ["Congo"], ["Comoros"], ["Cape Verde"], ["Cyprus"], ["Czech Republic"], ["Germany"], ["Djibouti"], ["Dominica"], ["Algeria"], ["Eritrea"], ["Estonia"], ["Fiji Islands"], ["Micronesia, Federated States of"], ["Gabon"], ["Georgia"], ["Ghana"], ["Guinea"], ["Gambia"], ["Guinea-Bissau"], ["Equatorial Guinea"], ["Grenada"], ["Guyana"], ["Croatia"], ["Jamaica"], ["Kazakstan"], ["Kenya"], ["Kyrgyzstan"], ["Cambodia"], ["Kiribati"], ["Saint Kitts and Nevis"], ["Kuwait"], ["Laos"], ["Libyan Arab Jamahiriya"], ["Saint Lucia"], ["Lesotho"], ["Lithuania"], ["Latvia"], ["Morocco"], ["Moldova"], ["Madagascar"], ["Maldives"], ["Marshall Islands"], ["Macedonia"], ["Mali"], ["Malta"], ["Mozambique"], ["Mauritania"], ["Mauritius"], ["Malawi"], ["Malaysia"], ["Namibia"], ["Niger"], ["Nigeria"], ["Nauru"], ["Oman"], ["Palau"], ["Papua New Guinea"], ["Qatar"], ["Russian Federation"], ["Rwanda"], ["Sudan"], ["Senegal"], ["Singapore"], ["Solomon Islands"], ["Sierra Leone"], ["Somalia"], ["Sao Tome and Principe"], ["Suriname"], ["Slovakia"], ["Slovenia"], ["Swaziland"], ["Seychelles"], ["Chad"], ["Togo"], ["Tajikistan"], ["Turkmenistan"], ["Tonga"], ["Trinidad and Tobago"], ["Tunisia"], ["Tuvalu"], ["Tanzania"], ["Uganda"], ["Ukraine"], ["Uzbekistan"], ["Saint Vincent and the Grenadines"], ["Vanuatu"], ["Samoa"], ["Zambia"], ["Zimbabwe"]], "gold_sql": "SELECT Name FROM country WHERE IndepYear  >  1950", "gold_py": null}}
