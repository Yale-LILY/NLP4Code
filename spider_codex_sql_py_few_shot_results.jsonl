{"db_id": "department_management", "query": "SELECT count(DISTINCT temporary_acting) FROM management", "query_toks": ["SELECT", "count", "(", "DISTINCT", "temporary_acting", ")", "FROM", "management"], "query_toks_no_value": ["select", "count", "(", "distinct", "temporary_acting", ")", "from", "management"], "question": "How many acting statuses are there?", "question_toks": ["How", "many", "acting", "statuses", "are", "there", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 13, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(management['temporary_acting'].drop_duplicates().size)", "db_table_headers": {"department": ["Department_ID", "Name", "Creation", "Ranking", "Budget_in_Billions", "Num_Employees"], "head": ["head_ID", "name", "born_state", "age"], "management": ["department_ID", "head_ID", "temporary_acting"]}, "answer": [[2]], "results": {"generated_sql": "SELECT count(*) FROM management WHERE temporary_acting = 'Yes'", "generated_py": "management['temporary_acting'].value_counts()", "sql_exec_result": "[(3,)]", "py_exec_result": "Yes    3\nNo     2\nName: temporary_acting, dtype: int64", "gold_answer": [[2]], "gold_sql": "SELECT count(DISTINCT temporary_acting) FROM management", "gold_py": "pd.Series(management['temporary_acting'].drop_duplicates().size)"}}
{"db_id": "farm", "query": "SELECT count(*) FROM farm", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "farm"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "farm"], "question": "How many farms are there?", "question_toks": ["How", "many", "farms", "are", "there", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(farm.shape[0])", "db_table_headers": {"city": ["City_ID", "Official_Name", "Status", "Area_km_2", "Population", "Census_Ranking"], "farm": ["Farm_ID", "Year", "Total_Horses", "Working_Horses", "Total_Cattle", "Oxen", "Bulls", "Cows", "Pigs", "Sheep_and_Goats"], "farm_competition": ["Competition_ID", "Year", "Theme", "Host_city_ID", "Hosts"], "competition_record": ["Competition_ID", "Farm_ID", "Rank"]}, "answer": [[8]], "results": {"generated_sql": "SELECT count(*) FROM farm", "generated_py": "pd.Series(farm.shape[0])", "sql_exec_result": "[(8,)]", "py_exec_result": "0    8\ndtype: int64", "gold_answer": [[8]], "gold_sql": "SELECT count(*) FROM farm", "gold_py": "pd.Series(farm.shape[0])"}}
{"db_id": "farm", "query": "SELECT count(*) FROM farm", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "farm"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "farm"], "question": "Count the number of farms.", "question_toks": ["Count", "the", "number", "of", "farms", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(farm.shape[0])", "db_table_headers": {"city": ["City_ID", "Official_Name", "Status", "Area_km_2", "Population", "Census_Ranking"], "farm": ["Farm_ID", "Year", "Total_Horses", "Working_Horses", "Total_Cattle", "Oxen", "Bulls", "Cows", "Pigs", "Sheep_and_Goats"], "farm_competition": ["Competition_ID", "Year", "Theme", "Host_city_ID", "Hosts"], "competition_record": ["Competition_ID", "Farm_ID", "Rank"]}, "answer": [[8]], "results": {"generated_sql": "SELECT count(*) FROM farm", "generated_py": "farm.shape[0]", "sql_exec_result": "[(8,)]", "py_exec_result": "8", "gold_answer": [[8]], "gold_sql": "SELECT count(*) FROM farm", "gold_py": "pd.Series(farm.shape[0])"}}
{"db_id": "farm", "query": "SELECT count(DISTINCT Status) FROM city", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Status", ")", "FROM", "city"], "query_toks_no_value": ["select", "count", "(", "distinct", "status", ")", "from", "city"], "question": "How many different statuses do cities have?", "question_toks": ["How", "many", "different", "statuses", "do", "cities", "have", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 3, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(city['status'].drop_duplicates().size)", "db_table_headers": {"city": ["City_ID", "Official_Name", "Status", "Area_km_2", "Population", "Census_Ranking"], "farm": ["Farm_ID", "Year", "Total_Horses", "Working_Horses", "Total_Cattle", "Oxen", "Bulls", "Cows", "Pigs", "Sheep_and_Goats"], "farm_competition": ["Competition_ID", "Year", "Theme", "Host_city_ID", "Hosts"], "competition_record": ["Competition_ID", "Farm_ID", "Rank"]}, "answer": [[2]], "results": {"generated_sql": "SELECT count(distinct status) FROM city", "generated_py": "city['status'].nunique()", "sql_exec_result": "[(2,)]", "py_exec_result": "2", "gold_answer": [[2]], "gold_sql": "SELECT count(DISTINCT Status) FROM city", "gold_py": "pd.Series(city['status'].drop_duplicates().size)"}}
{"db_id": "farm", "query": "SELECT count(DISTINCT Status) FROM city", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Status", ")", "FROM", "city"], "query_toks_no_value": ["select", "count", "(", "distinct", "status", ")", "from", "city"], "question": "Count the number of different statuses.", "question_toks": ["Count", "the", "number", "of", "different", "statuses", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 3, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(city['status'].drop_duplicates().size)", "db_table_headers": {"city": ["City_ID", "Official_Name", "Status", "Area_km_2", "Population", "Census_Ranking"], "farm": ["Farm_ID", "Year", "Total_Horses", "Working_Horses", "Total_Cattle", "Oxen", "Bulls", "Cows", "Pigs", "Sheep_and_Goats"], "farm_competition": ["Competition_ID", "Year", "Theme", "Host_city_ID", "Hosts"], "competition_record": ["Competition_ID", "Farm_ID", "Rank"]}, "answer": [[2]], "results": {"generated_sql": "SELECT count(distinct status) FROM city", "generated_py": "pd.Series(city['status'].unique()).shape[0]", "sql_exec_result": "[(2,)]", "py_exec_result": "2", "gold_answer": [[2]], "gold_sql": "SELECT count(DISTINCT Status) FROM city", "gold_py": "pd.Series(city['status'].drop_duplicates().size)"}}
{"db_id": "bike_1", "query": "SELECT name FROM station WHERE lat  <  37.5", "query_toks": ["SELECT", "name", "FROM", "station", "WHERE", "lat", "<", "37.5"], "query_toks_no_value": ["select", "name", "from", "station", "where", "lat", "<", "value"], "question": "What are the names of stations that have latitude lower than 37.5?", "question_toks": ["What", "are", "the", "names", "of", "stations", "that", "have", "latitude", "lower", "than", "37.5", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 4, [0, [0, 3, false], null], 37.5, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "station[station['lat'] < 37.5]['name']", "db_table_headers": {"station": ["id", "name", "lat", "long", "dock_count", "city", "installation_date"], "status": ["station_id", "bikes_available", "docks_available", "time"], "trip": ["id", "duration", "start_date", "start_station_name", "start_station_id", "end_date", "end_station_name", "end_station_id", "bike_id", "subscription_type", "zip_code"], "weather": ["date", "max_temperature_f", "mean_temperature_f", "min_temperature_f", "max_dew_point_f", "mean_dew_point_f", "min_dew_point_f", "max_humidity", "mean_humidity", "min_humidity", "max_sea_level_pressure_inches", "mean_sea_level_pressure_inches", "min_sea_level_pressure_inches", "max_visibility_miles", "mean_visibility_miles", "min_visibility_miles", "max_wind_Speed_mph", "mean_wind_speed_mph", "max_gust_speed_mph", "precipitation_inches", "cloud_cover", "events", "wind_dir_degrees", "zip_code"]}, "answer": [["San Jose Diridon Caltrain Station"], ["San Jose Civic Center"], ["Santa Clara at Almaden"], ["Adobe on Almaden"], ["San Pedro Square"], ["Paseo de San Antonio"], ["San Salvador at 1st"], ["Japantown"], ["San Jose City Hall"], ["MLK Library"], ["SJSU 4th at San Carlos"], ["St James Park"], ["Arena Green / SAP Center"], ["SJSU - San Salvador at 9th"], ["Franklin at Maple"], ["Redwood City Caltrain Station"], ["San Mateo County Center"], ["Redwood City Public Library"], ["Stanford in Redwood City"], ["Redwood City Medical Center"], ["Mountain View City Hall"], ["Mountain View Caltrain Station"], ["San Antonio Caltrain Station"], ["Evelyn Park and Ride"], ["San Antonio Shopping Center"], ["Castro Street and El Camino Real"], ["Rengstorff Avenue / California Street"], ["Palo Alto Caltrain Station"], ["University and Emerson"], ["California Ave Caltrain Station"], ["Cowper at University"], ["Park at Olive"], ["Santa Clara County Civic Center"], ["Mezes Park"], ["Ryland Park"]], "results": {"generated_sql": "SELECT name FROM station WHERE lat < 37.5", "generated_py": "station[station['lat'] < 37.5]['name']", "sql_exec_result": "[('San Jose Diridon Caltrain Station',), ('San Jose Civic Center',), ('Santa Clara at Almaden',), ('Adobe on Almaden',), ('San Pedro Square',), ('Paseo de San Antonio',), ('San Salvador at 1st',), ('Japantown',), ('San Jose City Hall',), ('MLK Library',), ('SJSU 4th at San Carlos',), ('St James Park',), ('Arena Green / SAP Center',), ('SJSU - San Salvador at 9th',), ('Franklin at Maple',), ('Redwood City Caltrain Station',), ('San Mateo County Center',), ('Redwood City Public Library',), ('Stanford in Redwood City',), ('Redwood City Medical Center',), ('Mountain View City Hall',), ('Mountain View Caltrain Station',), ('San Antonio Caltrain Station',), ('Evelyn Park and Ride',), ('San Antonio Shopping Center',), ('Castro Street and El Camino Real',), ('Rengstorff Avenue / California Street',), ('Palo Alto Caltrain Station',), ('University and Emerson',), ('California Ave Caltrain Station',), ('Cowper at University',), ('Park at Olive',), ('Santa Clara County Civic Center',), ('Mezes Park',), ('Ryland Park',)]", "py_exec_result": "0         San Jose Diridon Caltrain Station\n1                     San Jose Civic Center\n2                    Santa Clara at Almaden\n3                          Adobe on Almaden\n4                          San Pedro Square\n5                      Paseo de San Antonio\n6                       San Salvador at 1st\n7                                 Japantown\n8                        San Jose City Hall\n9                               MLK Library\n10                   SJSU 4th at San Carlos\n11                            St James Park\n12                 Arena Green / SAP Center\n13               SJSU - San Salvador at 9th\n14                        Franklin at Maple\n15            Redwood City Caltrain Station\n16                  San Mateo County Center\n17              Redwood City Public Library\n18                 Stanford in Redwood City\n19              Redwood City Medical Center\n20                  Mountain View City Hall\n21           Mountain View Caltrain Station\n22             San Antonio Caltrain Station\n23                     Evelyn Park and Ride\n24              San Antonio Shopping Center\n25         Castro Street and El Camino Real\n26    Rengstorff Avenue / California Street\n27               Palo Alto Caltrain Station\n28                   University and Emerson\n29          California Ave Caltrain Station\n30                     Cowper at University\n31                            Park at Olive\n66          Santa Clara County Civic Center\n68                               Mezes Park\n69                              Ryland Park\nName: name, dtype: object", "gold_answer": [["San Jose Diridon Caltrain Station"], ["San Jose Civic Center"], ["Santa Clara at Almaden"], ["Adobe on Almaden"], ["San Pedro Square"], ["Paseo de San Antonio"], ["San Salvador at 1st"], ["Japantown"], ["San Jose City Hall"], ["MLK Library"], ["SJSU 4th at San Carlos"], ["St James Park"], ["Arena Green / SAP Center"], ["SJSU - San Salvador at 9th"], ["Franklin at Maple"], ["Redwood City Caltrain Station"], ["San Mateo County Center"], ["Redwood City Public Library"], ["Stanford in Redwood City"], ["Redwood City Medical Center"], ["Mountain View City Hall"], ["Mountain View Caltrain Station"], ["San Antonio Caltrain Station"], ["Evelyn Park and Ride"], ["San Antonio Shopping Center"], ["Castro Street and El Camino Real"], ["Rengstorff Avenue / California Street"], ["Palo Alto Caltrain Station"], ["University and Emerson"], ["California Ave Caltrain Station"], ["Cowper at University"], ["Park at Olive"], ["Santa Clara County Civic Center"], ["Mezes Park"], ["Ryland Park"]], "gold_sql": "SELECT name FROM station WHERE lat  <  37.5", "gold_py": "station[station['lat'] < 37.5]['name']"}}
{"db_id": "bike_1", "query": "SELECT name FROM station WHERE lat  <  37.5", "query_toks": ["SELECT", "name", "FROM", "station", "WHERE", "lat", "<", "37.5"], "query_toks_no_value": ["select", "name", "from", "station", "where", "lat", "<", "value"], "question": "What are the names of all stations with a latitude smaller than 37.5?", "question_toks": ["What", "are", "the", "names", "of", "all", "stations", "with", "a", "latitude", "smaller", "than", "37.5", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 4, [0, [0, 3, false], null], 37.5, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "station[station['lat'] < 37.5]['name']", "db_table_headers": {"station": ["id", "name", "lat", "long", "dock_count", "city", "installation_date"], "status": ["station_id", "bikes_available", "docks_available", "time"], "trip": ["id", "duration", "start_date", "start_station_name", "start_station_id", "end_date", "end_station_name", "end_station_id", "bike_id", "subscription_type", "zip_code"], "weather": ["date", "max_temperature_f", "mean_temperature_f", "min_temperature_f", "max_dew_point_f", "mean_dew_point_f", "min_dew_point_f", "max_humidity", "mean_humidity", "min_humidity", "max_sea_level_pressure_inches", "mean_sea_level_pressure_inches", "min_sea_level_pressure_inches", "max_visibility_miles", "mean_visibility_miles", "min_visibility_miles", "max_wind_Speed_mph", "mean_wind_speed_mph", "max_gust_speed_mph", "precipitation_inches", "cloud_cover", "events", "wind_dir_degrees", "zip_code"]}, "answer": [["San Jose Diridon Caltrain Station"], ["San Jose Civic Center"], ["Santa Clara at Almaden"], ["Adobe on Almaden"], ["San Pedro Square"], ["Paseo de San Antonio"], ["San Salvador at 1st"], ["Japantown"], ["San Jose City Hall"], ["MLK Library"], ["SJSU 4th at San Carlos"], ["St James Park"], ["Arena Green / SAP Center"], ["SJSU - San Salvador at 9th"], ["Franklin at Maple"], ["Redwood City Caltrain Station"], ["San Mateo County Center"], ["Redwood City Public Library"], ["Stanford in Redwood City"], ["Redwood City Medical Center"], ["Mountain View City Hall"], ["Mountain View Caltrain Station"], ["San Antonio Caltrain Station"], ["Evelyn Park and Ride"], ["San Antonio Shopping Center"], ["Castro Street and El Camino Real"], ["Rengstorff Avenue / California Street"], ["Palo Alto Caltrain Station"], ["University and Emerson"], ["California Ave Caltrain Station"], ["Cowper at University"], ["Park at Olive"], ["Santa Clara County Civic Center"], ["Mezes Park"], ["Ryland Park"]], "results": {"generated_sql": "SELECT name FROM station WHERE lat < 37.5", "generated_py": "station[station['lat'] < 37.5]['name']", "sql_exec_result": "[('San Jose Diridon Caltrain Station',), ('San Jose Civic Center',), ('Santa Clara at Almaden',), ('Adobe on Almaden',), ('San Pedro Square',), ('Paseo de San Antonio',), ('San Salvador at 1st',), ('Japantown',), ('San Jose City Hall',), ('MLK Library',), ('SJSU 4th at San Carlos',), ('St James Park',), ('Arena Green / SAP Center',), ('SJSU - San Salvador at 9th',), ('Franklin at Maple',), ('Redwood City Caltrain Station',), ('San Mateo County Center',), ('Redwood City Public Library',), ('Stanford in Redwood City',), ('Redwood City Medical Center',), ('Mountain View City Hall',), ('Mountain View Caltrain Station',), ('San Antonio Caltrain Station',), ('Evelyn Park and Ride',), ('San Antonio Shopping Center',), ('Castro Street and El Camino Real',), ('Rengstorff Avenue / California Street',), ('Palo Alto Caltrain Station',), ('University and Emerson',), ('California Ave Caltrain Station',), ('Cowper at University',), ('Park at Olive',), ('Santa Clara County Civic Center',), ('Mezes Park',), ('Ryland Park',)]", "py_exec_result": "0         San Jose Diridon Caltrain Station\n1                     San Jose Civic Center\n2                    Santa Clara at Almaden\n3                          Adobe on Almaden\n4                          San Pedro Square\n5                      Paseo de San Antonio\n6                       San Salvador at 1st\n7                                 Japantown\n8                        San Jose City Hall\n9                               MLK Library\n10                   SJSU 4th at San Carlos\n11                            St James Park\n12                 Arena Green / SAP Center\n13               SJSU - San Salvador at 9th\n14                        Franklin at Maple\n15            Redwood City Caltrain Station\n16                  San Mateo County Center\n17              Redwood City Public Library\n18                 Stanford in Redwood City\n19              Redwood City Medical Center\n20                  Mountain View City Hall\n21           Mountain View Caltrain Station\n22             San Antonio Caltrain Station\n23                     Evelyn Park and Ride\n24              San Antonio Shopping Center\n25         Castro Street and El Camino Real\n26    Rengstorff Avenue / California Street\n27               Palo Alto Caltrain Station\n28                   University and Emerson\n29          California Ave Caltrain Station\n30                     Cowper at University\n31                            Park at Olive\n66          Santa Clara County Civic Center\n68                               Mezes Park\n69                              Ryland Park\nName: name, dtype: object", "gold_answer": [["San Jose Diridon Caltrain Station"], ["San Jose Civic Center"], ["Santa Clara at Almaden"], ["Adobe on Almaden"], ["San Pedro Square"], ["Paseo de San Antonio"], ["San Salvador at 1st"], ["Japantown"], ["San Jose City Hall"], ["MLK Library"], ["SJSU 4th at San Carlos"], ["St James Park"], ["Arena Green / SAP Center"], ["SJSU - San Salvador at 9th"], ["Franklin at Maple"], ["Redwood City Caltrain Station"], ["San Mateo County Center"], ["Redwood City Public Library"], ["Stanford in Redwood City"], ["Redwood City Medical Center"], ["Mountain View City Hall"], ["Mountain View Caltrain Station"], ["San Antonio Caltrain Station"], ["Evelyn Park and Ride"], ["San Antonio Shopping Center"], ["Castro Street and El Camino Real"], ["Rengstorff Avenue / California Street"], ["Palo Alto Caltrain Station"], ["University and Emerson"], ["California Ave Caltrain Station"], ["Cowper at University"], ["Park at Olive"], ["Santa Clara County Civic Center"], ["Mezes Park"], ["Ryland Park"]], "gold_sql": "SELECT name FROM station WHERE lat  <  37.5", "gold_py": "station[station['lat'] < 37.5]['name']"}}
{"db_id": "bike_1", "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"", "query_toks": ["SELECT", "avg", "(", "lat", ")", ",", "avg", "(", "long", ")", "FROM", "station", "WHERE", "city", "=", "``", "San", "Jose", "''"], "query_toks_no_value": ["select", "avg", "(", "lat", ")", ",", "avg", "(", "long", ")", "from", "station", "where", "city", "=", "value"], "question": "What is the average latitude and longitude of stations located in San Jose city?", "question_toks": ["What", "is", "the", "average", "latitude", "and", "longitude", "of", "stations", "located", "in", "San", "Jose", "city", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 3, false], null]], [5, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], "\"San Jose\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "station[station['city'] == 'San Jose'].agg({'lat': ['mean'], 'long': ['mean']})", "db_table_headers": {"station": ["id", "name", "lat", "long", "dock_count", "city", "installation_date"], "status": ["station_id", "bikes_available", "docks_available", "time"], "trip": ["id", "duration", "start_date", "start_station_name", "start_station_id", "end_date", "end_station_name", "end_station_id", "bike_id", "subscription_type", "zip_code"], "weather": ["date", "max_temperature_f", "mean_temperature_f", "min_temperature_f", "max_dew_point_f", "mean_dew_point_f", "min_dew_point_f", "max_humidity", "mean_humidity", "min_humidity", "max_sea_level_pressure_inches", "mean_sea_level_pressure_inches", "min_sea_level_pressure_inches", "max_visibility_miles", "mean_visibility_miles", "min_visibility_miles", "max_wind_Speed_mph", "mean_wind_speed_mph", "max_gust_speed_mph", "precipitation_inches", "cloud_cover", "events", "wind_dir_degrees", "zip_code"]}, "answer": [[37.3364135625, -121.89160575]], "results": {"generated_sql": "SELECT avg(lat) ,  avg(long) FROM station WHERE city = 'San Jose'", "generated_py": "pd.Series(station[station['city'] == 'San Jose'][['lat', 'long']].mean())", "sql_exec_result": "[(37.3364135625, -121.89160575)]", "py_exec_result": "lat      37.336414\nlong   -121.891606\ndtype: float64", "gold_answer": [[37.3364135625, -121.89160575]], "gold_sql": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"", "gold_py": "station[station['city'] == 'San Jose'].agg({'lat': ['mean'], 'long': ['mean']})"}}
{"db_id": "bike_1", "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"", "query_toks": ["SELECT", "avg", "(", "lat", ")", ",", "avg", "(", "long", ")", "FROM", "station", "WHERE", "city", "=", "``", "San", "Jose", "''"], "query_toks_no_value": ["select", "avg", "(", "lat", ")", ",", "avg", "(", "long", ")", "from", "station", "where", "city", "=", "value"], "question": "What is the average latitude and longitude in San Jose?", "question_toks": ["What", "is", "the", "average", "latitude", "and", "longitude", "in", "San", "Jose", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 3, false], null]], [5, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], "\"San Jose\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "station[station['city'] == 'San Jose'].agg({'lat': ['mean'], 'long': ['mean']})", "db_table_headers": {"station": ["id", "name", "lat", "long", "dock_count", "city", "installation_date"], "status": ["station_id", "bikes_available", "docks_available", "time"], "trip": ["id", "duration", "start_date", "start_station_name", "start_station_id", "end_date", "end_station_name", "end_station_id", "bike_id", "subscription_type", "zip_code"], "weather": ["date", "max_temperature_f", "mean_temperature_f", "min_temperature_f", "max_dew_point_f", "mean_dew_point_f", "min_dew_point_f", "max_humidity", "mean_humidity", "min_humidity", "max_sea_level_pressure_inches", "mean_sea_level_pressure_inches", "min_sea_level_pressure_inches", "max_visibility_miles", "mean_visibility_miles", "min_visibility_miles", "max_wind_Speed_mph", "mean_wind_speed_mph", "max_gust_speed_mph", "precipitation_inches", "cloud_cover", "events", "wind_dir_degrees", "zip_code"]}, "answer": [[37.3364135625, -121.89160575]], "results": {"generated_sql": "SELECT avg(lat) ,  avg(long) FROM station WHERE city = 'San Jose'", "generated_py": "pd.Series(station[station['city'] == 'San Jose'][['lat', 'long']].mean())", "sql_exec_result": "[(37.3364135625, -121.89160575)]", "py_exec_result": "lat      37.336414\nlong   -121.891606\ndtype: float64", "gold_answer": [[37.3364135625, -121.89160575]], "gold_sql": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"", "gold_py": "station[station['city'] == 'San Jose'].agg({'lat': ['mean'], 'long': ['mean']})"}}
{"db_id": "bike_1", "query": "SELECT count(DISTINCT bike_id) FROM trip", "query_toks": ["SELECT", "count", "(", "DISTINCT", "bike_id", ")", "FROM", "trip"], "query_toks_no_value": ["select", "count", "(", "distinct", "bike_id", ")", "from", "trip"], "question": "From the trip record, find the number of unique bikes.", "question_toks": ["From", "the", "trip", "record", ",", "find", "the", "number", "of", "unique", "bikes", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 20, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(trip['bike_id'].drop_duplicates().size)", "db_table_headers": {"station": ["id", "name", "lat", "long", "dock_count", "city", "installation_date"], "status": ["station_id", "bikes_available", "docks_available", "time"], "trip": ["id", "duration", "start_date", "start_station_name", "start_station_id", "end_date", "end_station_name", "end_station_id", "bike_id", "subscription_type", "zip_code"], "weather": ["date", "max_temperature_f", "mean_temperature_f", "min_temperature_f", "max_dew_point_f", "mean_dew_point_f", "min_dew_point_f", "max_humidity", "mean_humidity", "min_humidity", "max_sea_level_pressure_inches", "mean_sea_level_pressure_inches", "min_sea_level_pressure_inches", "max_visibility_miles", "mean_visibility_miles", "min_visibility_miles", "max_wind_Speed_mph", "mean_wind_speed_mph", "max_gust_speed_mph", "precipitation_inches", "cloud_cover", "events", "wind_dir_degrees", "zip_code"]}, "answer": [[530]], "results": {"generated_sql": "SELECT COUNT(DISTINCT bike_id) FROM trip", "generated_py": "trip['bike_id'].nunique()", "sql_exec_result": "[(530,)]", "py_exec_result": "530", "gold_answer": [[530]], "gold_sql": "SELECT count(DISTINCT bike_id) FROM trip", "gold_py": "pd.Series(trip['bike_id'].drop_duplicates().size)"}}
{"db_id": "bike_1", "query": "SELECT count(DISTINCT bike_id) FROM trip", "query_toks": ["SELECT", "count", "(", "DISTINCT", "bike_id", ")", "FROM", "trip"], "query_toks_no_value": ["select", "count", "(", "distinct", "bike_id", ")", "from", "trip"], "question": "How many different bike ids are there?", "question_toks": ["How", "many", "different", "bike", "ids", "are", "there", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 20, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(trip['bike_id'].drop_duplicates().size)", "db_table_headers": {"station": ["id", "name", "lat", "long", "dock_count", "city", "installation_date"], "status": ["station_id", "bikes_available", "docks_available", "time"], "trip": ["id", "duration", "start_date", "start_station_name", "start_station_id", "end_date", "end_station_name", "end_station_id", "bike_id", "subscription_type", "zip_code"], "weather": ["date", "max_temperature_f", "mean_temperature_f", "min_temperature_f", "max_dew_point_f", "mean_dew_point_f", "min_dew_point_f", "max_humidity", "mean_humidity", "min_humidity", "max_sea_level_pressure_inches", "mean_sea_level_pressure_inches", "min_sea_level_pressure_inches", "max_visibility_miles", "mean_visibility_miles", "min_visibility_miles", "max_wind_Speed_mph", "mean_wind_speed_mph", "max_gust_speed_mph", "precipitation_inches", "cloud_cover", "events", "wind_dir_degrees", "zip_code"]}, "answer": [[530]], "results": {"generated_sql": "SELECT COUNT(DISTINCT bike_id) FROM trip", "generated_py": "pd.Series(trip['bike_id'].unique().shape[0])", "sql_exec_result": "[(530,)]", "py_exec_result": "0    530\ndtype: int64", "gold_answer": [[530]], "gold_sql": "SELECT count(DISTINCT bike_id) FROM trip", "gold_py": "pd.Series(trip['bike_id'].drop_duplicates().size)"}}
{"db_id": "bike_1", "query": "SELECT count(DISTINCT city) FROM station", "query_toks": ["SELECT", "count", "(", "DISTINCT", "city", ")", "FROM", "station"], "query_toks_no_value": ["select", "count", "(", "distinct", "city", ")", "from", "station"], "question": "What is the number of distinct cities the stations are located at?", "question_toks": ["What", "is", "the", "number", "of", "distinct", "cities", "the", "stations", "are", "located", "at", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 6, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(station['city'].drop_duplicates().size)", "db_table_headers": {"station": ["id", "name", "lat", "long", "dock_count", "city", "installation_date"], "status": ["station_id", "bikes_available", "docks_available", "time"], "trip": ["id", "duration", "start_date", "start_station_name", "start_station_id", "end_date", "end_station_name", "end_station_id", "bike_id", "subscription_type", "zip_code"], "weather": ["date", "max_temperature_f", "mean_temperature_f", "min_temperature_f", "max_dew_point_f", "mean_dew_point_f", "min_dew_point_f", "max_humidity", "mean_humidity", "min_humidity", "max_sea_level_pressure_inches", "mean_sea_level_pressure_inches", "min_sea_level_pressure_inches", "max_visibility_miles", "mean_visibility_miles", "min_visibility_miles", "max_wind_Speed_mph", "mean_wind_speed_mph", "max_gust_speed_mph", "precipitation_inches", "cloud_cover", "events", "wind_dir_degrees", "zip_code"]}, "answer": [[5]], "results": {"generated_sql": "SELECT count(distinct city) FROM station", "generated_py": "pd.Series(station['city'].unique().size)", "sql_exec_result": "[(5,)]", "py_exec_result": "0    5\ndtype: int64", "gold_answer": [[5]], "gold_sql": "SELECT count(DISTINCT city) FROM station", "gold_py": "pd.Series(station['city'].drop_duplicates().size)"}}
{"db_id": "bike_1", "query": "SELECT count(DISTINCT city) FROM station", "query_toks": ["SELECT", "count", "(", "DISTINCT", "city", ")", "FROM", "station"], "query_toks_no_value": ["select", "count", "(", "distinct", "city", ")", "from", "station"], "question": "How many different cities have these stations?", "question_toks": ["How", "many", "different", "cities", "have", "these", "stations", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 6, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(station['city'].drop_duplicates().size)", "db_table_headers": {"station": ["id", "name", "lat", "long", "dock_count", "city", "installation_date"], "status": ["station_id", "bikes_available", "docks_available", "time"], "trip": ["id", "duration", "start_date", "start_station_name", "start_station_id", "end_date", "end_station_name", "end_station_id", "bike_id", "subscription_type", "zip_code"], "weather": ["date", "max_temperature_f", "mean_temperature_f", "min_temperature_f", "max_dew_point_f", "mean_dew_point_f", "min_dew_point_f", "max_humidity", "mean_humidity", "min_humidity", "max_sea_level_pressure_inches", "mean_sea_level_pressure_inches", "min_sea_level_pressure_inches", "max_visibility_miles", "mean_visibility_miles", "min_visibility_miles", "max_wind_Speed_mph", "mean_wind_speed_mph", "max_gust_speed_mph", "precipitation_inches", "cloud_cover", "events", "wind_dir_degrees", "zip_code"]}, "answer": [[5]], "results": {"generated_sql": "SELECT COUNT(DISTINCT city) FROM station", "generated_py": "pd.Series(station['city'].unique().size)", "sql_exec_result": "[(5,)]", "py_exec_result": "0    5\ndtype: int64", "gold_answer": [[5]], "gold_sql": "SELECT count(DISTINCT city) FROM station", "gold_py": "pd.Series(station['city'].drop_duplicates().size)"}}
{"db_id": "bike_1", "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "station", "WHERE", "city", "=", "``", "Mountain", "View", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "station", "where", "city", "=", "value"], "question": "How many stations does Mountain View city has?", "question_toks": ["How", "many", "stations", "does", "Mountain", "View", "city", "has", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], "\"Mountain View\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(station[station['city'] == 'Mountain View'].shape[0])", "db_table_headers": {"station": ["id", "name", "lat", "long", "dock_count", "city", "installation_date"], "status": ["station_id", "bikes_available", "docks_available", "time"], "trip": ["id", "duration", "start_date", "start_station_name", "start_station_id", "end_date", "end_station_name", "end_station_id", "bike_id", "subscription_type", "zip_code"], "weather": ["date", "max_temperature_f", "mean_temperature_f", "min_temperature_f", "max_dew_point_f", "mean_dew_point_f", "min_dew_point_f", "max_humidity", "mean_humidity", "min_humidity", "max_sea_level_pressure_inches", "mean_sea_level_pressure_inches", "min_sea_level_pressure_inches", "max_visibility_miles", "mean_visibility_miles", "min_visibility_miles", "max_wind_Speed_mph", "mean_wind_speed_mph", "max_gust_speed_mph", "precipitation_inches", "cloud_cover", "events", "wind_dir_degrees", "zip_code"]}, "answer": [[7]], "results": {"generated_sql": "SELECT count(*) FROM station WHERE city = 'Mountain View'", "generated_py": "pd.Series(station[station['city'] == 'Mountain View'].shape[0])", "sql_exec_result": "[(7,)]", "py_exec_result": "0    7\ndtype: int64", "gold_answer": [[7]], "gold_sql": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"", "gold_py": "pd.Series(station[station['city'] == 'Mountain View'].shape[0])"}}
{"db_id": "bike_1", "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "station", "WHERE", "city", "=", "``", "Mountain", "View", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "station", "where", "city", "=", "value"], "question": "How many stations are in Mountain View?", "question_toks": ["How", "many", "stations", "are", "in", "Mountain", "View", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], "\"Mountain View\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(station[station['city'] == 'Mountain View'].shape[0])", "db_table_headers": {"station": ["id", "name", "lat", "long", "dock_count", "city", "installation_date"], "status": ["station_id", "bikes_available", "docks_available", "time"], "trip": ["id", "duration", "start_date", "start_station_name", "start_station_id", "end_date", "end_station_name", "end_station_id", "bike_id", "subscription_type", "zip_code"], "weather": ["date", "max_temperature_f", "mean_temperature_f", "min_temperature_f", "max_dew_point_f", "mean_dew_point_f", "min_dew_point_f", "max_humidity", "mean_humidity", "min_humidity", "max_sea_level_pressure_inches", "mean_sea_level_pressure_inches", "min_sea_level_pressure_inches", "max_visibility_miles", "mean_visibility_miles", "min_visibility_miles", "max_wind_Speed_mph", "mean_wind_speed_mph", "max_gust_speed_mph", "precipitation_inches", "cloud_cover", "events", "wind_dir_degrees", "zip_code"]}, "answer": [[7]], "results": {"generated_sql": "SELECT COUNT(*) FROM station WHERE city = 'Mountain View'", "generated_py": "pd.Series(station[station['city'] == 'Mountain View'].shape[0])", "sql_exec_result": "[(7,)]", "py_exec_result": "0    7\ndtype: int64", "gold_answer": [[7]], "gold_sql": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"", "gold_py": "pd.Series(station[station['city'] == 'Mountain View'].shape[0])"}}
{"db_id": "bike_1", "query": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1", "query_toks": ["SELECT", "name", ",", "lat", ",", "city", "FROM", "station", "ORDER", "BY", "lat", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "lat", ",", "city", "from", "station", "order", "by", "lat", "limit", "value"], "question": "What are the name, latitude, and city of the station with the lowest latitude?", "question_toks": ["What", "are", "the", "name", ",", "latitude", ",", "and", "city", "of", "the", "station", "with", "the", "lowest", "latitude", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 3, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "pandas_converted": "station[['name', 'lat', 'city']].sort_values('lat', ascending = True).head(1)", "db_table_headers": {"station": ["id", "name", "lat", "long", "dock_count", "city", "installation_date"], "status": ["station_id", "bikes_available", "docks_available", "time"], "trip": ["id", "duration", "start_date", "start_station_name", "start_station_id", "end_date", "end_station_name", "end_station_id", "bike_id", "subscription_type", "zip_code"], "weather": ["date", "max_temperature_f", "mean_temperature_f", "min_temperature_f", "max_dew_point_f", "mean_dew_point_f", "min_dew_point_f", "max_humidity", "mean_humidity", "min_humidity", "max_sea_level_pressure_inches", "mean_sea_level_pressure_inches", "min_sea_level_pressure_inches", "max_visibility_miles", "mean_visibility_miles", "min_visibility_miles", "max_wind_Speed_mph", "mean_wind_speed_mph", "max_gust_speed_mph", "precipitation_inches", "cloud_cover", "events", "wind_dir_degrees", "zip_code"]}, "answer": [["San Jose Diridon Caltrain Station", 37.329732, "San Jose"]], "results": {"generated_sql": "SELECT name ,  lat ,  city FROM station WHERE lat = (SELECT min(lat) FROM station)", "generated_py": "station[['name', 'lat', 'city']].sort_values('lat', ascending = True).head(1)", "sql_exec_result": "[('San Jose Diridon Caltrain Station', 37.329732, 'San Jose')]", "py_exec_result": "                                name        lat      city\n0  San Jose Diridon Caltrain Station  37.329732  San Jose", "gold_answer": [["San Jose Diridon Caltrain Station", 37.329732, "San Jose"]], "gold_sql": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1", "gold_py": "station[['name', 'lat', 'city']].sort_values('lat', ascending = True).head(1)"}}
{"db_id": "bike_1", "query": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1", "query_toks": ["SELECT", "name", ",", "lat", ",", "city", "FROM", "station", "ORDER", "BY", "lat", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "lat", ",", "city", "from", "station", "order", "by", "lat", "limit", "value"], "question": "What is the name, latitude, and city of the station that is located the furthest South?", "question_toks": ["What", "is", "the", "name", ",", "latitude", ",", "and", "city", "of", "the", "station", "that", "is", "located", "the", "furthest", "South", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 3, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "pandas_converted": "station[['name', 'lat', 'city']].sort_values('lat', ascending = True).head(1)", "db_table_headers": {"station": ["id", "name", "lat", "long", "dock_count", "city", "installation_date"], "status": ["station_id", "bikes_available", "docks_available", "time"], "trip": ["id", "duration", "start_date", "start_station_name", "start_station_id", "end_date", "end_station_name", "end_station_id", "bike_id", "subscription_type", "zip_code"], "weather": ["date", "max_temperature_f", "mean_temperature_f", "min_temperature_f", "max_dew_point_f", "mean_dew_point_f", "min_dew_point_f", "max_humidity", "mean_humidity", "min_humidity", "max_sea_level_pressure_inches", "mean_sea_level_pressure_inches", "min_sea_level_pressure_inches", "max_visibility_miles", "mean_visibility_miles", "min_visibility_miles", "max_wind_Speed_mph", "mean_wind_speed_mph", "max_gust_speed_mph", "precipitation_inches", "cloud_cover", "events", "wind_dir_degrees", "zip_code"]}, "answer": [["San Jose Diridon Caltrain Station", 37.329732, "San Jose"]], "results": {"generated_sql": "SELECT name, lat, city FROM station WHERE lat = (SELECT min(lat) FROM station)", "generated_py": "station[['name', 'lat', 'city']][station['lat'] == station['lat'].min()]", "sql_exec_result": "[('San Jose Diridon Caltrain Station', 37.329732, 'San Jose')]", "py_exec_result": "                                name        lat      city\n0  San Jose Diridon Caltrain Station  37.329732  San Jose", "gold_answer": [["San Jose Diridon Caltrain Station", 37.329732, "San Jose"]], "gold_sql": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1", "gold_py": "station[['name', 'lat', 'city']].sort_values('lat', ascending = True).head(1)"}}
{"db_id": "bike_1", "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3", "query_toks": ["SELECT", "id", ",", "duration", "FROM", "trip", "ORDER", "BY", "duration", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "id", ",", "duration", "from", "trip", "order", "by", "duration", "desc", "limit", "value"], "question": "What are the ids and durations of the trips with the top 3 durations?", "question_toks": ["What", "are", "the", "ids", "and", "durations", "of", "the", "trips", "with", "the", "top", "3", "durations", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]], [0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 13, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}, "pandas_converted": "trip[['id', 'duration']].sort_values('duration', ascending = False).head(3)", "db_table_headers": {"station": ["id", "name", "lat", "long", "dock_count", "city", "installation_date"], "status": ["station_id", "bikes_available", "docks_available", "time"], "trip": ["id", "duration", "start_date", "start_station_name", "start_station_id", "end_date", "end_station_name", "end_station_id", "bike_id", "subscription_type", "zip_code"], "weather": ["date", "max_temperature_f", "mean_temperature_f", "min_temperature_f", "max_dew_point_f", "mean_dew_point_f", "min_dew_point_f", "max_humidity", "mean_humidity", "min_humidity", "max_sea_level_pressure_inches", "mean_sea_level_pressure_inches", "min_sea_level_pressure_inches", "max_visibility_miles", "mean_visibility_miles", "min_visibility_miles", "max_wind_Speed_mph", "mean_wind_speed_mph", "max_gust_speed_mph", "precipitation_inches", "cloud_cover", "events", "wind_dir_degrees", "zip_code"]}, "answer": [[911017, 154368], [902480, 83921], [902481, 83888]], "results": {"generated_sql": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 3", "generated_py": "trip[['id', 'duration']].sort_values('duration', ascending = False).head(3)", "sql_exec_result": "[(911017, 154368), (902480, 83921), (902481, 83888)]", "py_exec_result": "          id  duration\n8156  911017    154368\n1603  902480     83921\n1604  902481     83888", "gold_answer": [[911017, 154368], [902480, 83921], [902481, 83888]], "gold_sql": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3", "gold_py": "trip[['id', 'duration']].sort_values('duration', ascending = False).head(3)"}}
{"db_id": "bike_1", "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3", "query_toks": ["SELECT", "id", ",", "duration", "FROM", "trip", "ORDER", "BY", "duration", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "id", ",", "duration", "from", "trip", "order", "by", "duration", "desc", "limit", "value"], "question": "What are the ids of the trips that lasted the longest and how long did they last?", "question_toks": ["What", "are", "the", "ids", "of", "the", "trips", "that", "lasted", "the", "longest", "and", "how", "long", "did", "they", "last", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]], [0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 13, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}, "pandas_converted": "trip[['id', 'duration']].sort_values('duration', ascending = False).head(3)", "db_table_headers": {"station": ["id", "name", "lat", "long", "dock_count", "city", "installation_date"], "status": ["station_id", "bikes_available", "docks_available", "time"], "trip": ["id", "duration", "start_date", "start_station_name", "start_station_id", "end_date", "end_station_name", "end_station_id", "bike_id", "subscription_type", "zip_code"], "weather": ["date", "max_temperature_f", "mean_temperature_f", "min_temperature_f", "max_dew_point_f", "mean_dew_point_f", "min_dew_point_f", "max_humidity", "mean_humidity", "min_humidity", "max_sea_level_pressure_inches", "mean_sea_level_pressure_inches", "min_sea_level_pressure_inches", "max_visibility_miles", "mean_visibility_miles", "min_visibility_miles", "max_wind_Speed_mph", "mean_wind_speed_mph", "max_gust_speed_mph", "precipitation_inches", "cloud_cover", "events", "wind_dir_degrees", "zip_code"]}, "answer": [[911017, 154368], [902480, 83921], [902481, 83888]], "results": {"generated_sql": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 1", "generated_py": "trip[['id', 'duration']].sort_values('duration', ascending = False)", "sql_exec_result": "[(911017, 154368)]", "py_exec_result": "          id  duration\n8156  911017    154368\n1603  902480     83921\n1604  902481     83888\n1610  902487     83511\n2338  903482     76592\n...      ...       ...\n872   901599        63\n7508  910168        62\n536   901178        62\n1466  902308        62\n4425  906210        61\n\n[9959 rows x 2 columns]", "gold_answer": [[911017, 154368], [902480, 83921], [902481, 83888]], "gold_sql": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3", "gold_py": "trip[['id', 'duration']].sort_values('duration', ascending = False).head(3)"}}
{"db_id": "bike_1", "query": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100", "query_toks": ["SELECT", "DISTINCT", "start_station_name", "FROM", "trip", "WHERE", "duration", "<", "100"], "query_toks_no_value": ["select", "distinct", "start_station_name", "from", "trip", "where", "duration", "<", "value"], "question": "List all the distinct stations from which a trip of duration below 100 started.", "question_toks": ["List", "all", "the", "distinct", "stations", "from", "which", "a", "trip", "of", "duration", "below", "100", "started", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [true, [[0, [0, [0, 15, false], null]]]], "where": [[false, 4, [0, [0, 13, false], null], 100.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "trip[trip['duration'] < 100]['start_station_name'].drop_duplicates().reset_index(drop=True)", "db_table_headers": {"station": ["id", "name", "lat", "long", "dock_count", "city", "installation_date"], "status": ["station_id", "bikes_available", "docks_available", "time"], "trip": ["id", "duration", "start_date", "start_station_name", "start_station_id", "end_date", "end_station_name", "end_station_id", "bike_id", "subscription_type", "zip_code"], "weather": ["date", "max_temperature_f", "mean_temperature_f", "min_temperature_f", "max_dew_point_f", "mean_dew_point_f", "min_dew_point_f", "max_humidity", "mean_humidity", "min_humidity", "max_sea_level_pressure_inches", "mean_sea_level_pressure_inches", "min_sea_level_pressure_inches", "max_visibility_miles", "mean_visibility_miles", "min_visibility_miles", "max_wind_Speed_mph", "mean_wind_speed_mph", "max_gust_speed_mph", "precipitation_inches", "cloud_cover", "events", "wind_dir_degrees", "zip_code"]}, "answer": [["2nd at South Park"], ["Embarcadero at Sansome"], ["Embarcadero at Folsom"], ["Post at Kearny"], ["Beale at Market"], ["2nd at Folsom"], ["Commercial at Montgomery"], ["San Francisco Caltrain (Townsend at 4th)"], ["San Francisco Caltrain 2 (330 Townsend)"], ["Steuart at Market"], ["Palo Alto Caltrain Station"], ["2nd at Townsend"], ["Washington at Kearny"], ["South Van Ness at Market"], ["Davis at Jackson"], ["Embarcadero at Vallejo"], ["5th at Howard"]], "results": {"generated_sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration < 100", "generated_py": "trip[trip['duration'] < 100]['start_station_name'].unique()", "sql_exec_result": "[('2nd at South Park',), ('Embarcadero at Sansome',), ('Embarcadero at Folsom',), ('Post at Kearny',), ('Beale at Market',), ('2nd at Folsom',), ('Commercial at Montgomery',), ('San Francisco Caltrain (Townsend at 4th)',), ('San Francisco Caltrain 2 (330 Townsend)',), ('Steuart at Market',), ('Palo Alto Caltrain Station',), ('2nd at Townsend',), ('Washington at Kearny',), ('South Van Ness at Market',), ('Davis at Jackson',), ('Embarcadero at Vallejo',), ('5th at Howard',)]", "py_exec_result": "['2nd at South Park' 'Embarcadero at Sansome' 'Embarcadero at Folsom'\n 'Post at Kearny' 'Beale at Market' '2nd at Folsom'\n 'Commercial at Montgomery' 'San Francisco Caltrain (Townsend at 4th)'\n 'San Francisco Caltrain 2 (330 Townsend)' 'Steuart at Market'\n 'Palo Alto Caltrain Station' '2nd at Townsend' 'Washington at Kearny'\n 'South Van Ness at Market' 'Davis at Jackson' 'Embarcadero at Vallejo'\n '5th at Howard']", "gold_answer": [["2nd at South Park"], ["Embarcadero at Sansome"], ["Embarcadero at Folsom"], ["Post at Kearny"], ["Beale at Market"], ["2nd at Folsom"], ["Commercial at Montgomery"], ["San Francisco Caltrain (Townsend at 4th)"], ["San Francisco Caltrain 2 (330 Townsend)"], ["Steuart at Market"], ["Palo Alto Caltrain Station"], ["2nd at Townsend"], ["Washington at Kearny"], ["South Van Ness at Market"], ["Davis at Jackson"], ["Embarcadero at Vallejo"], ["5th at Howard"]], "gold_sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100", "gold_py": "trip[trip['duration'] < 100]['start_station_name'].drop_duplicates().reset_index(drop=True)"}}
{"db_id": "bike_1", "query": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100", "query_toks": ["SELECT", "DISTINCT", "start_station_name", "FROM", "trip", "WHERE", "duration", "<", "100"], "query_toks_no_value": ["select", "distinct", "start_station_name", "from", "trip", "where", "duration", "<", "value"], "question": "What are all the different start station names for a trip that lasted less than 100?", "question_toks": ["What", "are", "all", "the", "different", "start", "station", "names", "for", "a", "trip", "that", "lasted", "less", "than", "100", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [true, [[0, [0, [0, 15, false], null]]]], "where": [[false, 4, [0, [0, 13, false], null], 100.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "trip[trip['duration'] < 100]['start_station_name'].drop_duplicates().reset_index(drop=True)", "db_table_headers": {"station": ["id", "name", "lat", "long", "dock_count", "city", "installation_date"], "status": ["station_id", "bikes_available", "docks_available", "time"], "trip": ["id", "duration", "start_date", "start_station_name", "start_station_id", "end_date", "end_station_name", "end_station_id", "bike_id", "subscription_type", "zip_code"], "weather": ["date", "max_temperature_f", "mean_temperature_f", "min_temperature_f", "max_dew_point_f", "mean_dew_point_f", "min_dew_point_f", "max_humidity", "mean_humidity", "min_humidity", "max_sea_level_pressure_inches", "mean_sea_level_pressure_inches", "min_sea_level_pressure_inches", "max_visibility_miles", "mean_visibility_miles", "min_visibility_miles", "max_wind_Speed_mph", "mean_wind_speed_mph", "max_gust_speed_mph", "precipitation_inches", "cloud_cover", "events", "wind_dir_degrees", "zip_code"]}, "answer": [["2nd at South Park"], ["Embarcadero at Sansome"], ["Embarcadero at Folsom"], ["Post at Kearny"], ["Beale at Market"], ["2nd at Folsom"], ["Commercial at Montgomery"], ["San Francisco Caltrain (Townsend at 4th)"], ["San Francisco Caltrain 2 (330 Townsend)"], ["Steuart at Market"], ["Palo Alto Caltrain Station"], ["2nd at Townsend"], ["Washington at Kearny"], ["South Van Ness at Market"], ["Davis at Jackson"], ["Embarcadero at Vallejo"], ["5th at Howard"]], "results": {"generated_sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration < 100", "generated_py": "trip[trip['duration'] < 100]['start_station_name'].unique()", "sql_exec_result": "[('2nd at South Park',), ('Embarcadero at Sansome',), ('Embarcadero at Folsom',), ('Post at Kearny',), ('Beale at Market',), ('2nd at Folsom',), ('Commercial at Montgomery',), ('San Francisco Caltrain (Townsend at 4th)',), ('San Francisco Caltrain 2 (330 Townsend)',), ('Steuart at Market',), ('Palo Alto Caltrain Station',), ('2nd at Townsend',), ('Washington at Kearny',), ('South Van Ness at Market',), ('Davis at Jackson',), ('Embarcadero at Vallejo',), ('5th at Howard',)]", "py_exec_result": "['2nd at South Park' 'Embarcadero at Sansome' 'Embarcadero at Folsom'\n 'Post at Kearny' 'Beale at Market' '2nd at Folsom'\n 'Commercial at Montgomery' 'San Francisco Caltrain (Townsend at 4th)'\n 'San Francisco Caltrain 2 (330 Townsend)' 'Steuart at Market'\n 'Palo Alto Caltrain Station' '2nd at Townsend' 'Washington at Kearny'\n 'South Van Ness at Market' 'Davis at Jackson' 'Embarcadero at Vallejo'\n '5th at Howard']", "gold_answer": [["2nd at South Park"], ["Embarcadero at Sansome"], ["Embarcadero at Folsom"], ["Post at Kearny"], ["Beale at Market"], ["2nd at Folsom"], ["Commercial at Montgomery"], ["San Francisco Caltrain (Townsend at 4th)"], ["San Francisco Caltrain 2 (330 Townsend)"], ["Steuart at Market"], ["Palo Alto Caltrain Station"], ["2nd at Townsend"], ["Washington at Kearny"], ["South Van Ness at Market"], ["Davis at Jackson"], ["Embarcadero at Vallejo"], ["5th at Howard"]], "gold_sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100", "gold_py": "trip[trip['duration'] < 100]['start_station_name'].drop_duplicates().reset_index(drop=True)"}}
{"db_id": "book_2", "query": "SELECT count(*) FROM book", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "book"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "book"], "question": "How many books are there?", "question_toks": ["How", "many", "books", "are", "there", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(book.shape[0])", "db_table_headers": {"publication": ["Publication_ID", "Book_ID", "Publisher", "Publication_Date", "Price"], "book": ["Book_ID", "Title", "Issues", "Writer"]}, "answer": [[10]], "results": {"generated_sql": "SELECT count(*) FROM book", "generated_py": "pd.Series(book.shape[0])", "sql_exec_result": "[(10,)]", "py_exec_result": "0    10\ndtype: int64", "gold_answer": [[10]], "gold_sql": "SELECT count(*) FROM book", "gold_py": "pd.Series(book.shape[0])"}}
{"db_id": "book_2", "query": "SELECT Title ,  Issues FROM book", "query_toks": ["SELECT", "Title", ",", "Issues", "FROM", "book"], "query_toks_no_value": ["select", "title", ",", "issues", "from", "book"], "question": "What are the title and issues of the books?", "question_toks": ["What", "are", "the", "title", "and", "issues", "of", "the", "books", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]], [0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "book[['title', 'issues']]", "db_table_headers": {"publication": ["Publication_ID", "Book_ID", "Publisher", "Publication_Date", "Price"], "book": ["Book_ID", "Title", "Issues", "Writer"]}, "answer": [["The Black Lamb", 6.0], ["Bloody Mary", 4.0], ["Bloody Mary : Lady Liberty", 4.0], ["BrainBanx", 6.0], ["Cyberella", 12.0], ["Dead Corps", 4.0], ["The Dome: Ground Zero", 1.0], ["Gemini Blood", 9.0], ["Michael Moorcock's Multiverse", 12.0], ["Sheva's War", 5.0]], "results": {"generated_sql": "SELECT title ,  issues FROM book", "generated_py": "book[['title', 'issues']]", "sql_exec_result": "[('The Black Lamb', 6.0), ('Bloody Mary', 4.0), ('Bloody Mary : Lady Liberty', 4.0), ('BrainBanx', 6.0), ('Cyberella', 12.0), ('Dead Corps', 4.0), ('The Dome: Ground Zero', 1.0), ('Gemini Blood', 9.0), (\"Michael Moorcock's Multiverse\", 12.0), (\"Sheva's War\", 5.0)]", "py_exec_result": "                           title  issues\n0                 The Black Lamb     6.0\n1                    Bloody Mary     4.0\n2     Bloody Mary : Lady Liberty     4.0\n3                      BrainBanx     6.0\n4                      Cyberella    12.0\n5                     Dead Corps     4.0\n6          The Dome: Ground Zero     1.0\n7                   Gemini Blood     9.0\n8  Michael Moorcock's Multiverse    12.0\n9                    Sheva's War     5.0", "gold_answer": [["The Black Lamb", 6.0], ["Bloody Mary", 4.0], ["Bloody Mary : Lady Liberty", 4.0], ["BrainBanx", 6.0], ["Cyberella", 12.0], ["Dead Corps", 4.0], ["The Dome: Ground Zero", 1.0], ["Gemini Blood", 9.0], ["Michael Moorcock's Multiverse", 12.0], ["Sheva's War", 5.0]], "gold_sql": "SELECT Title ,  Issues FROM book", "gold_py": "book[['title', 'issues']]"}}
{"db_id": "musical", "query": "SELECT count(*) FROM actor", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "actor"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "actor"], "question": "How many actors are there?", "question_toks": ["How", "many", "actors", "are", "there", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(actor.shape[0])", "db_table_headers": {"musical": ["Musical_ID", "Name", "Year", "Award", "Category", "Nominee", "Result"], "actor": ["Actor_ID", "Name", "Musical_ID", "Character", "Duration", "age"]}, "answer": [[9]], "results": {"generated_sql": "SELECT count(*) FROM actor", "generated_py": "pd.Series(actor.shape[0])", "sql_exec_result": "[(9,)]", "py_exec_result": "0    9\ndtype: int64", "gold_answer": [[9]], "gold_sql": "SELECT count(*) FROM actor", "gold_py": "pd.Series(actor.shape[0])"}}
{"db_id": "musical", "query": "SELECT count(*) FROM actor", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "actor"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "actor"], "question": "Count the number of actors.", "question_toks": ["Count", "the", "number", "of", "actors", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(actor.shape[0])", "db_table_headers": {"musical": ["Musical_ID", "Name", "Year", "Award", "Category", "Nominee", "Result"], "actor": ["Actor_ID", "Name", "Musical_ID", "Character", "Duration", "age"]}, "answer": [[9]], "results": {"generated_sql": "SELECT count(*) FROM actor", "generated_py": "pd.Series(actor.shape[0])", "sql_exec_result": "[(9,)]", "py_exec_result": "0    9\ndtype: int64", "gold_answer": [[9]], "gold_sql": "SELECT count(*) FROM actor", "gold_py": "pd.Series(actor.shape[0])"}}
{"db_id": "musical", "query": "SELECT Character ,  Duration FROM actor", "query_toks": ["SELECT", "Character", ",", "Duration", "FROM", "actor"], "query_toks_no_value": ["select", "character", ",", "duration", "from", "actor"], "question": "What are the characters and duration of actors?", "question_toks": ["What", "are", "the", "characters", "and", "duration", "of", "actors", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "actor[['character', 'duration']]", "db_table_headers": {"musical": ["Musical_ID", "Name", "Year", "Award", "Category", "Nominee", "Result"], "actor": ["Actor_ID", "Name", "Musical_ID", "Character", "Duration", "age"]}, "answer": [["Alf Stewart", "1988\u2014"], ["Lou Carpenter", "1988, 1992\u2014"], ["Irene Roberts", "1993\u2014"], ["Sally Fletcher", "1988\u20132008, 2013"], ["Karl Kennedy", "1994\u2014"], ["Susan Kennedy", "1994\u2014"], ["Toadfish Rebecchi", "1995, 1996\u2014"], ["Harold Bishop", "1987\u20131991, 1996\u20132009, 2011"], ["Paul Robinson", "1985\u20131992, 1993, 2004\u2014"]], "results": {"generated_sql": "SELECT character ,  duration FROM actor", "generated_py": "actor[['character', 'duration']]", "sql_exec_result": "[('Alf Stewart', '1988\u2014'), ('Lou Carpenter', '1988, 1992\u2014'), ('Irene Roberts', '1993\u2014'), ('Sally Fletcher', '1988\u20132008, 2013'), ('Karl Kennedy', '1994\u2014'), ('Susan Kennedy', '1994\u2014'), ('Toadfish Rebecchi', '1995, 1996\u2014'), ('Harold Bishop', '1987\u20131991, 1996\u20132009, 2011'), ('Paul Robinson', '1985\u20131992, 1993, 2004\u2014')]", "py_exec_result": "           character                    duration\n0        Alf Stewart                       1988\u2014\n1      Lou Carpenter                 1988, 1992\u2014\n2      Irene Roberts                       1993\u2014\n3     Sally Fletcher             1988\u20132008, 2013\n4       Karl Kennedy                       1994\u2014\n5      Susan Kennedy                       1994\u2014\n6  Toadfish Rebecchi                 1995, 1996\u2014\n7      Harold Bishop  1987\u20131991, 1996\u20132009, 2011\n8      Paul Robinson      1985\u20131992, 1993, 2004\u2014", "gold_answer": [["Alf Stewart", "1988\u2014"], ["Lou Carpenter", "1988, 1992\u2014"], ["Irene Roberts", "1993\u2014"], ["Sally Fletcher", "1988\u20132008, 2013"], ["Karl Kennedy", "1994\u2014"], ["Susan Kennedy", "1994\u2014"], ["Toadfish Rebecchi", "1995, 1996\u2014"], ["Harold Bishop", "1987\u20131991, 1996\u20132009, 2011"], ["Paul Robinson", "1985\u20131992, 1993, 2004\u2014"]], "gold_sql": "SELECT Character ,  Duration FROM actor", "gold_py": "actor[['character', 'duration']]"}}
{"db_id": "musical", "query": "SELECT Character ,  Duration FROM actor", "query_toks": ["SELECT", "Character", ",", "Duration", "FROM", "actor"], "query_toks_no_value": ["select", "character", ",", "duration", "from", "actor"], "question": "Return the characters and durations for each actor.", "question_toks": ["Return", "the", "characters", "and", "durations", "for", "each", "actor", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "actor[['character', 'duration']]", "db_table_headers": {"musical": ["Musical_ID", "Name", "Year", "Award", "Category", "Nominee", "Result"], "actor": ["Actor_ID", "Name", "Musical_ID", "Character", "Duration", "age"]}, "answer": [["Alf Stewart", "1988\u2014"], ["Lou Carpenter", "1988, 1992\u2014"], ["Irene Roberts", "1993\u2014"], ["Sally Fletcher", "1988\u20132008, 2013"], ["Karl Kennedy", "1994\u2014"], ["Susan Kennedy", "1994\u2014"], ["Toadfish Rebecchi", "1995, 1996\u2014"], ["Harold Bishop", "1987\u20131991, 1996\u20132009, 2011"], ["Paul Robinson", "1985\u20131992, 1993, 2004\u2014"]], "results": {"generated_sql": "SELECT character ,  duration FROM actor", "generated_py": "actor[['character', 'duration']]", "sql_exec_result": "[('Alf Stewart', '1988\u2014'), ('Lou Carpenter', '1988, 1992\u2014'), ('Irene Roberts', '1993\u2014'), ('Sally Fletcher', '1988\u20132008, 2013'), ('Karl Kennedy', '1994\u2014'), ('Susan Kennedy', '1994\u2014'), ('Toadfish Rebecchi', '1995, 1996\u2014'), ('Harold Bishop', '1987\u20131991, 1996\u20132009, 2011'), ('Paul Robinson', '1985\u20131992, 1993, 2004\u2014')]", "py_exec_result": "           character                    duration\n0        Alf Stewart                       1988\u2014\n1      Lou Carpenter                 1988, 1992\u2014\n2      Irene Roberts                       1993\u2014\n3     Sally Fletcher             1988\u20132008, 2013\n4       Karl Kennedy                       1994\u2014\n5      Susan Kennedy                       1994\u2014\n6  Toadfish Rebecchi                 1995, 1996\u2014\n7      Harold Bishop  1987\u20131991, 1996\u20132009, 2011\n8      Paul Robinson      1985\u20131992, 1993, 2004\u2014", "gold_answer": [["Alf Stewart", "1988\u2014"], ["Lou Carpenter", "1988, 1992\u2014"], ["Irene Roberts", "1993\u2014"], ["Sally Fletcher", "1988\u20132008, 2013"], ["Karl Kennedy", "1994\u2014"], ["Susan Kennedy", "1994\u2014"], ["Toadfish Rebecchi", "1995, 1996\u2014"], ["Harold Bishop", "1987\u20131991, 1996\u20132009, 2011"], ["Paul Robinson", "1985\u20131992, 1993, 2004\u2014"]], "gold_sql": "SELECT Character ,  Duration FROM actor", "gold_py": "actor[['character', 'duration']]"}}
{"db_id": "twitter_1", "query": "SELECT email FROM user_profiles WHERE name  =  'Mary'", "query_toks": ["SELECT", "email", "FROM", "user_profiles", "WHERE", "name", "=", "'Mary", "'"], "query_toks_no_value": ["select", "email", "from", "user_profiles", "where", "name", "=", "value"], "question": "Find the emails of the user named \"Mary\".", "question_toks": ["Find", "the", "emails", "of", "the", "user", "named", "``", "Mary", "''", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 8, false], null], "\"Mary\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "user_profiles[user_profiles['name'] == 'Mary']['email']", "db_table_headers": {"follows": ["f1", "f2"], "tweets": ["id", "uid", "text", "createdate"], "user_profiles": ["uid", "name", "email", "partitionid", "followers"]}, "answer": [["Mary@yale.edu"]], "results": {"generated_sql": "SELECT email FROM user_profiles WHERE name = 'Mary'", "generated_py": "user_profiles[user_profiles['name'] == 'Mary']['email']", "sql_exec_result": "[('Mary@yale.edu',)]", "py_exec_result": "1    Mary@yale.edu\nName: email, dtype: object", "gold_answer": [["Mary@yale.edu"]], "gold_sql": "SELECT email FROM user_profiles WHERE name  =  'Mary'", "gold_py": "user_profiles[user_profiles['name'] == 'Mary']['email']"}}
{"db_id": "twitter_1", "query": "SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man'", "query_toks": ["SELECT", "partitionid", "FROM", "user_profiles", "WHERE", "name", "=", "'Iron", "Man", "'"], "query_toks_no_value": ["select", "partitionid", "from", "user_profiles", "where", "name", "=", "value"], "question": "What is the partition id of the user named \"Iron Man\".", "question_toks": ["What", "is", "the", "partition", "id", "of", "the", "user", "named", "``", "Iron", "Man", "''", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [[false, 2, [0, [0, 8, false], null], "\"Iron Man\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "user_profiles[user_profiles['name'] == 'Iron Man']['partitionid']", "db_table_headers": {"follows": ["f1", "f2"], "tweets": ["id", "uid", "text", "createdate"], "user_profiles": ["uid", "name", "email", "partitionid", "followers"]}, "answer": [[1]], "results": {"generated_sql": "SELECT partitionid FROM user_profiles WHERE name = 'Iron Man'", "generated_py": "user_profiles[user_profiles['name'] == 'Iron Man']['partitionid']", "sql_exec_result": "[(1,)]", "py_exec_result": "0    1\nName: partitionid, dtype: int64", "gold_answer": [[1]], "gold_sql": "SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man'", "gold_py": "user_profiles[user_profiles['name'] == 'Iron Man']['partitionid']"}}
{"db_id": "twitter_1", "query": "SELECT count(*) FROM user_profiles", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "user_profiles"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "user_profiles"], "question": "How many users are there?", "question_toks": ["How", "many", "users", "are", "there", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(user_profiles.shape[0])", "db_table_headers": {"follows": ["f1", "f2"], "tweets": ["id", "uid", "text", "createdate"], "user_profiles": ["uid", "name", "email", "partitionid", "followers"]}, "answer": [[7]], "results": {"generated_sql": "SELECT count(*) FROM user_profiles", "generated_py": "pd.Series(user_profiles.shape[0])", "sql_exec_result": "[(7,)]", "py_exec_result": "0    7\ndtype: int64", "gold_answer": [[7]], "gold_sql": "SELECT count(*) FROM user_profiles", "gold_py": "pd.Series(user_profiles.shape[0])"}}
{"db_id": "twitter_1", "query": "SELECT count(*) FROM follows", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "follows"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "follows"], "question": "How many followers does each user have?", "question_toks": ["How", "many", "followers", "does", "each", "user", "have", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(follows.shape[0])", "db_table_headers": {"follows": ["f1", "f2"], "tweets": ["id", "uid", "text", "createdate"], "user_profiles": ["uid", "name", "email", "partitionid", "followers"]}, "answer": [[9]], "results": {"generated_sql": "SELECT uid, count(followers) FROM user_profiles GROUP BY uid", "generated_py": "user_profiles[['name', 'followers']].set_index('name')", "sql_exec_result": "[(1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1)]", "py_exec_result": "                 followers\nname                      \nIron Man           6662425\nMary                   890\nBlack Widow\\n     35425845\nSusan                  100\nTyler Swift       99999998\nCeline Dion       23927492\nNatalie Portman   94375428", "gold_answer": [[9]], "gold_sql": "SELECT count(*) FROM follows", "gold_py": "pd.Series(follows.shape[0])"}}
{"db_id": "twitter_1", "query": "SELECT count(*) FROM tweets", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "tweets"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "tweets"], "question": "Find the number of tweets in record.", "question_toks": ["Find", "the", "number", "of", "tweets", "in", "record", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(tweets.shape[0])", "db_table_headers": {"follows": ["f1", "f2"], "tweets": ["id", "uid", "text", "createdate"], "user_profiles": ["uid", "name", "email", "partitionid", "followers"]}, "answer": [[8]], "results": {"generated_sql": "SELECT count(*) FROM tweets", "generated_py": "tweets.shape[0]", "sql_exec_result": "[(8,)]", "py_exec_result": "8", "gold_answer": [[8]], "gold_sql": "SELECT count(*) FROM tweets", "gold_py": "pd.Series(tweets.shape[0])"}}
{"db_id": "twitter_1", "query": "SELECT count(DISTINCT UID) FROM tweets", "query_toks": ["SELECT", "count", "(", "DISTINCT", "UID", ")", "FROM", "tweets"], "query_toks_no_value": ["select", "count", "(", "distinct", "uid", ")", "from", "tweets"], "question": "Find the number of users who posted some tweets.", "question_toks": ["Find", "the", "number", "of", "users", "who", "posted", "some", "tweets", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 4, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(tweets['uid'].drop_duplicates().size)", "db_table_headers": {"follows": ["f1", "f2"], "tweets": ["id", "uid", "text", "createdate"], "user_profiles": ["uid", "name", "email", "partitionid", "followers"]}, "answer": [[5]], "results": {"generated_sql": "SELECT count(*) FROM user_profiles WHERE uid IN (SELECT uid FROM tweets)", "generated_py": "tweets['uid'].unique().shape[0]", "sql_exec_result": "[(5,)]", "py_exec_result": "5", "gold_answer": [[5]], "gold_sql": "SELECT count(DISTINCT UID) FROM tweets", "gold_py": "pd.Series(tweets['uid'].drop_duplicates().size)"}}
{"db_id": "twitter_1", "query": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'", "query_toks": ["SELECT", "name", ",", "email", "FROM", "user_profiles", "WHERE", "name", "LIKE", "'", "%", "Swift", "%", "'"], "query_toks_no_value": ["select", "name", ",", "email", "from", "user_profiles", "where", "name", "like", "value"], "question": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.", "question_toks": ["Find", "the", "name", "and", "email", "of", "the", "user", "whose", "name", "contains", "the", "word", "\u2018Swift\u2019", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 9, false], null]]]], "where": [[false, 9, [0, [0, 8, false], null], "\"%Swift%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "user_profiles[user_profiles['name'].str.contains('Swift')][['name', 'email']]", "db_table_headers": {"follows": ["f1", "f2"], "tweets": ["id", "uid", "text", "createdate"], "user_profiles": ["uid", "name", "email", "partitionid", "followers"]}, "answer": [["Tyler Swift", "ts@superstar.com\n"]], "results": {"generated_sql": "SELECT name, email FROM user_profiles WHERE name LIKE '%Swift%'", "generated_py": "user_profiles[user_profiles['name'].str.contains('Swift')][['name', 'email']]", "sql_exec_result": "[('Tyler Swift', 'ts@superstar.com\\n')]", "py_exec_result": "          name               email\n4  Tyler Swift  ts@superstar.com\\n", "gold_answer": [["Tyler Swift", "ts@superstar.com\n"]], "gold_sql": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'", "gold_py": "user_profiles[user_profiles['name'].str.contains('Swift')][['name', 'email']]"}}
{"db_id": "twitter_1", "query": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'", "query_toks": ["SELECT", "name", "FROM", "user_profiles", "WHERE", "email", "LIKE", "'", "%", "superstar", "%", "'", "OR", "email", "LIKE", "'", "%", "edu", "%", "'"], "query_toks_no_value": ["select", "name", "from", "user_profiles", "where", "email", "like", "value", "or", "email", "like", "value"], "question": "Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.", "question_toks": ["Find", "the", "names", "of", "users", "whose", "emails", "contain", "\u2018superstar\u2019", "or", "\u2018edu\u2019", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [[false, 9, [0, [0, 9, false], null], "\"%superstar%\"", null], "or", [false, 9, [0, [0, 9, false], null], "\"%edu%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "user_profiles[(user_profiles['email'].str.contains('superstar')) | (user_profiles['email'].str.contains('edu'))]['name']", "db_table_headers": {"follows": ["f1", "f2"], "tweets": ["id", "uid", "text", "createdate"], "user_profiles": ["uid", "name", "email", "partitionid", "followers"]}, "answer": [["Mary"], ["Tyler Swift"], ["Celine Dion"], ["Natalie Portman"]], "results": {"generated_sql": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'", "generated_py": "user_profiles[user_profiles['email'].str.contains('superstar|edu')]['name']", "sql_exec_result": "[('Mary',), ('Tyler Swift',), ('Celine Dion',), ('Natalie Portman',)]", "py_exec_result": "1               Mary\n4        Tyler Swift\n5        Celine Dion\n6    Natalie Portman\nName: name, dtype: object", "gold_answer": [["Mary"], ["Tyler Swift"], ["Celine Dion"], ["Natalie Portman"]], "gold_sql": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'", "gold_py": "user_profiles[(user_profiles['email'].str.contains('superstar')) | (user_profiles['email'].str.contains('edu'))]['name']"}}
{"db_id": "twitter_1", "query": "SELECT text FROM tweets WHERE text LIKE '%intern%'", "query_toks": ["SELECT", "text", "FROM", "tweets", "WHERE", "text", "LIKE", "'", "%", "intern", "%", "'"], "query_toks_no_value": ["select", "text", "from", "tweets", "where", "text", "like", "value"], "question": "Return the text of tweets about the topic 'intern'.", "question_toks": ["Return", "the", "text", "of", "tweets", "about", "the", "topic", "'intern", "'", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 9, [0, [0, 5, false], null], "\"%intern%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "tweets[tweets['text'].str.contains('intern')]['text']", "db_table_headers": {"follows": ["f1", "f2"], "tweets": ["id", "uid", "text", "createdate"], "user_profiles": ["uid", "name", "email", "partitionid", "followers"]}, "answer": [["My company is hiring interns."]], "results": {"generated_sql": "SELECT text FROM tweets WHERE text LIKE '%intern%'", "generated_py": "tweets[tweets['text'].str.contains('intern')]['text']", "sql_exec_result": "[('My company is hiring interns.',)]", "py_exec_result": "2    My company is hiring interns.\nName: text, dtype: object", "gold_answer": [["My company is hiring interns."]], "gold_sql": "SELECT text FROM tweets WHERE text LIKE '%intern%'", "gold_py": "tweets[tweets['text'].str.contains('intern')]['text']"}}
{"db_id": "twitter_1", "query": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000", "query_toks": ["SELECT", "name", ",", "email", "FROM", "user_profiles", "WHERE", "followers", ">", "1000"], "query_toks_no_value": ["select", "name", ",", "email", "from", "user_profiles", "where", "followers", ">", "value"], "question": "Find the name and email of the users who have more than 1000 followers.", "question_toks": ["Find", "the", "name", "and", "email", "of", "the", "users", "who", "have", "more", "than", "1000", "followers", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 9, false], null]]]], "where": [[false, 3, [0, [0, 11, false], null], 1000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "user_profiles[user_profiles['followers'] > 1000][['name', 'email']]", "db_table_headers": {"follows": ["f1", "f2"], "tweets": ["id", "uid", "text", "createdate"], "user_profiles": ["uid", "name", "email", "partitionid", "followers"]}, "answer": [["Iron Man", "ts@richest.com"], ["Black Widow\n", "bw@superhero.com"], ["Tyler Swift", "ts@superstar.com\n"], ["Celine Dion", "cd@superstar.com"], ["Natalie Portman", "np@superstar.com"]], "results": {"generated_sql": "SELECT name ,  email FROM user_profiles WHERE followers > 1000", "generated_py": "user_profiles[user_profiles['followers'] > 1000][['name', 'email']]", "sql_exec_result": "[('Iron Man', 'ts@richest.com'), ('Black Widow\\n', 'bw@superhero.com'), ('Tyler Swift', 'ts@superstar.com\\n'), ('Celine Dion', 'cd@superstar.com'), ('Natalie Portman', 'np@superstar.com')]", "py_exec_result": "              name               email\n0         Iron Man      ts@richest.com\n2    Black Widow\\n    bw@superhero.com\n4      Tyler Swift  ts@superstar.com\\n\n5      Celine Dion    cd@superstar.com\n6  Natalie Portman    np@superstar.com", "gold_answer": [["Iron Man", "ts@richest.com"], ["Black Widow\n", "bw@superhero.com"], ["Tyler Swift", "ts@superstar.com\n"], ["Celine Dion", "cd@superstar.com"], ["Natalie Portman", "np@superstar.com"]], "gold_sql": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000", "gold_py": "user_profiles[user_profiles['followers'] > 1000][['name', 'email']]"}}
{"db_id": "twitter_1", "query": "SELECT name ,  followers FROM user_profiles ORDER BY followers DESC", "query_toks": ["SELECT", "name", ",", "followers", "FROM", "user_profiles", "ORDER", "BY", "followers", "DESC"], "query_toks_no_value": ["select", "name", ",", "followers", "from", "user_profiles", "order", "by", "followers", "desc"], "question": "List the name and number of followers for each user, and sort the results by the number of followers in descending order.", "question_toks": ["List", "the", "name", "and", "number", "of", "followers", "for", "each", "user", ",", "and", "sort", "the", "results", "by", "the", "number", "of", "followers", "in", "descending", "order", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 11, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "user_profiles[['name', 'followers']].sort_values('followers', ascending = False)", "db_table_headers": {"follows": ["f1", "f2"], "tweets": ["id", "uid", "text", "createdate"], "user_profiles": ["uid", "name", "email", "partitionid", "followers"]}, "answer": [["Tyler Swift", 99999998], ["Natalie Portman", 94375428], ["Black Widow\n", 35425845], ["Celine Dion", 23927492], ["Iron Man", 6662425], ["Mary", 890], ["Susan", 100]], "results": {"generated_sql": "SELECT name ,  followers FROM user_profiles ORDER BY followers DESC", "generated_py": "user_profiles[['name', 'followers']].sort_values('followers', ascending = False)", "sql_exec_result": "[('Tyler Swift', 99999998), ('Natalie Portman', 94375428), ('Black Widow\\n', 35425845), ('Celine Dion', 23927492), ('Iron Man', 6662425), ('Mary', 890), ('Susan', 100)]", "py_exec_result": "              name  followers\n4      Tyler Swift   99999998\n6  Natalie Portman   94375428\n2    Black Widow\\n   35425845\n5      Celine Dion   23927492\n0         Iron Man    6662425\n1             Mary        890\n3            Susan        100", "gold_answer": [["Tyler Swift", 99999998], ["Natalie Portman", 94375428], ["Black Widow\n", 35425845], ["Celine Dion", 23927492], ["Iron Man", 6662425], ["Mary", 890], ["Susan", 100]], "gold_sql": "SELECT name ,  followers FROM user_profiles ORDER BY followers DESC", "gold_py": "user_profiles[['name', 'followers']].sort_values('followers', ascending = False)"}}
{"db_id": "flight_1", "query": "SELECT count(*) FROM Aircraft", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Aircraft"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "aircraft"], "question": "How many aircrafts do we have?", "question_toks": ["How", "many", "aircrafts", "do", "we", "have", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(aircraft.shape[0])", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [[16]], "results": {"generated_sql": "SELECT count(*) FROM aircraft", "generated_py": "aircraft.shape[0]", "sql_exec_result": "[(16,)]", "py_exec_result": "16", "gold_answer": [[16]], "gold_sql": "SELECT count(*) FROM Aircraft", "gold_py": "pd.Series(aircraft.shape[0])"}}
{"db_id": "flight_1", "query": "SELECT count(*) FROM Aircraft", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Aircraft"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "aircraft"], "question": "How many aircrafts exist in the database?", "question_toks": ["How", "many", "aircrafts", "exist", "in", "the", "database", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(aircraft.shape[0])", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [[16]], "results": {"generated_sql": "SELECT count(*) FROM aircraft", "generated_py": "aircraft.shape[0]", "sql_exec_result": "[(16,)]", "py_exec_result": "16", "gold_answer": [[16]], "gold_sql": "SELECT count(*) FROM Aircraft", "gold_py": "pd.Series(aircraft.shape[0])"}}
{"db_id": "flight_1", "query": "SELECT name ,  distance FROM Aircraft", "query_toks": ["SELECT", "name", ",", "distance", "FROM", "Aircraft"], "query_toks_no_value": ["select", "name", ",", "distance", "from", "aircraft"], "question": "Show name and distance for all aircrafts.", "question_toks": ["Show", "name", "and", "distance", "for", "all", "aircrafts", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "aircraft[['name', 'distance']]", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [["Boeing 747-400", 8430], ["Boeing 737-800", 3383], ["Airbus A340-300", 7120], ["British Aerospace Jetstream 41", 1502], ["Embraer ERJ-145", 1530], ["SAAB 340", 2128], ["Piper Archer III", 520], ["Tupolev 154", 4103], ["Schwitzer 2-33", 30], ["Lockheed L1011", 6900], ["Boeing 757-300", 4010], ["Boeing 777-300", 6441], ["Boeing 767-400ER", 6475], ["Airbus A320", 2605], ["Airbus A319", 1805], ["Boeing 727", 1504]], "results": {"generated_sql": "SELECT name ,  distance FROM aircraft", "generated_py": "aircraft[['name', 'distance']]", "sql_exec_result": "[('Boeing 747-400', 8430), ('Boeing 737-800', 3383), ('Airbus A340-300', 7120), ('British Aerospace Jetstream 41', 1502), ('Embraer ERJ-145', 1530), ('SAAB 340', 2128), ('Piper Archer III', 520), ('Tupolev 154', 4103), ('Schwitzer 2-33', 30), ('Lockheed L1011', 6900), ('Boeing 757-300', 4010), ('Boeing 777-300', 6441), ('Boeing 767-400ER', 6475), ('Airbus A320', 2605), ('Airbus A319', 1805), ('Boeing 727', 1504)]", "py_exec_result": "                              name  distance\n0                   Boeing 747-400      8430\n1                   Boeing 737-800      3383\n2                  Airbus A340-300      7120\n3   British Aerospace Jetstream 41      1502\n4                  Embraer ERJ-145      1530\n5                         SAAB 340      2128\n6                 Piper Archer III       520\n7                      Tupolev 154      4103\n8                   Schwitzer 2-33        30\n9                   Lockheed L1011      6900\n10                  Boeing 757-300      4010\n11                  Boeing 777-300      6441\n12                Boeing 767-400ER      6475\n13                     Airbus A320      2605\n14                     Airbus A319      1805\n15                      Boeing 727      1504", "gold_answer": [["Boeing 747-400", 8430], ["Boeing 737-800", 3383], ["Airbus A340-300", 7120], ["British Aerospace Jetstream 41", 1502], ["Embraer ERJ-145", 1530], ["SAAB 340", 2128], ["Piper Archer III", 520], ["Tupolev 154", 4103], ["Schwitzer 2-33", 30], ["Lockheed L1011", 6900], ["Boeing 757-300", 4010], ["Boeing 777-300", 6441], ["Boeing 767-400ER", 6475], ["Airbus A320", 2605], ["Airbus A319", 1805], ["Boeing 727", 1504]], "gold_sql": "SELECT name ,  distance FROM Aircraft", "gold_py": "aircraft[['name', 'distance']]"}}
{"db_id": "flight_1", "query": "SELECT name ,  distance FROM Aircraft", "query_toks": ["SELECT", "name", ",", "distance", "FROM", "Aircraft"], "query_toks_no_value": ["select", "name", ",", "distance", "from", "aircraft"], "question": "What are the names and distances for all airplanes?", "question_toks": ["What", "are", "the", "names", "and", "distances", "for", "all", "airplanes", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "aircraft[['name', 'distance']]", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [["Boeing 747-400", 8430], ["Boeing 737-800", 3383], ["Airbus A340-300", 7120], ["British Aerospace Jetstream 41", 1502], ["Embraer ERJ-145", 1530], ["SAAB 340", 2128], ["Piper Archer III", 520], ["Tupolev 154", 4103], ["Schwitzer 2-33", 30], ["Lockheed L1011", 6900], ["Boeing 757-300", 4010], ["Boeing 777-300", 6441], ["Boeing 767-400ER", 6475], ["Airbus A320", 2605], ["Airbus A319", 1805], ["Boeing 727", 1504]], "results": {"generated_sql": "SELECT name ,  distance FROM aircraft", "generated_py": "aircraft[['name', 'distance']]", "sql_exec_result": "[('Boeing 747-400', 8430), ('Boeing 737-800', 3383), ('Airbus A340-300', 7120), ('British Aerospace Jetstream 41', 1502), ('Embraer ERJ-145', 1530), ('SAAB 340', 2128), ('Piper Archer III', 520), ('Tupolev 154', 4103), ('Schwitzer 2-33', 30), ('Lockheed L1011', 6900), ('Boeing 757-300', 4010), ('Boeing 777-300', 6441), ('Boeing 767-400ER', 6475), ('Airbus A320', 2605), ('Airbus A319', 1805), ('Boeing 727', 1504)]", "py_exec_result": "                              name  distance\n0                   Boeing 747-400      8430\n1                   Boeing 737-800      3383\n2                  Airbus A340-300      7120\n3   British Aerospace Jetstream 41      1502\n4                  Embraer ERJ-145      1530\n5                         SAAB 340      2128\n6                 Piper Archer III       520\n7                      Tupolev 154      4103\n8                   Schwitzer 2-33        30\n9                   Lockheed L1011      6900\n10                  Boeing 757-300      4010\n11                  Boeing 777-300      6441\n12                Boeing 767-400ER      6475\n13                     Airbus A320      2605\n14                     Airbus A319      1805\n15                      Boeing 727      1504", "gold_answer": [["Boeing 747-400", 8430], ["Boeing 737-800", 3383], ["Airbus A340-300", 7120], ["British Aerospace Jetstream 41", 1502], ["Embraer ERJ-145", 1530], ["SAAB 340", 2128], ["Piper Archer III", 520], ["Tupolev 154", 4103], ["Schwitzer 2-33", 30], ["Lockheed L1011", 6900], ["Boeing 757-300", 4010], ["Boeing 777-300", 6441], ["Boeing 767-400ER", 6475], ["Airbus A320", 2605], ["Airbus A319", 1805], ["Boeing 727", 1504]], "gold_sql": "SELECT name ,  distance FROM Aircraft", "gold_py": "aircraft[['name', 'distance']]"}}
{"db_id": "flight_1", "query": "SELECT aid FROM Aircraft WHERE distance  >  1000", "query_toks": ["SELECT", "aid", "FROM", "Aircraft", "WHERE", "distance", ">", "1000"], "query_toks_no_value": ["select", "aid", "from", "aircraft", "where", "distance", ">", "value"], "question": "Show ids for all aircrafts with more than 1000 distance.", "question_toks": ["Show", "ids", "for", "all", "aircrafts", "with", "more", "than", "1000", "distance", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 3, [0, [0, 11, false], null], 1000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "aircraft[aircraft['distance'] > 1000]['aid']", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [[1], [2], [3], [4], [5], [6], [8], [9], [10], [11], [12], [13], [14], [15]], "results": {"generated_sql": "SELECT aid FROM aircraft WHERE distance > 1000", "generated_py": "aircraft[aircraft['distance'] > 1000]['aid']", "sql_exec_result": "[(1,), (2,), (3,), (4,), (5,), (6,), (8,), (9,), (10,), (11,), (12,), (13,), (14,), (15,)]", "py_exec_result": "0      1\n1      2\n2      3\n3      4\n4      5\n5      6\n7      8\n9      9\n10    10\n11    11\n12    12\n13    13\n14    14\n15    15\nName: aid, dtype: int64", "gold_answer": [[1], [2], [3], [4], [5], [6], [8], [9], [10], [11], [12], [13], [14], [15]], "gold_sql": "SELECT aid FROM Aircraft WHERE distance  >  1000", "gold_py": "aircraft[aircraft['distance'] > 1000]['aid']"}}
{"db_id": "flight_1", "query": "SELECT aid FROM Aircraft WHERE distance  >  1000", "query_toks": ["SELECT", "aid", "FROM", "Aircraft", "WHERE", "distance", ">", "1000"], "query_toks_no_value": ["select", "aid", "from", "aircraft", "where", "distance", ">", "value"], "question": "What are the ids of all aircrafts that can cover a distance of more than 1000?", "question_toks": ["What", "are", "the", "ids", "of", "all", "aircrafts", "that", "can", "cover", "a", "distance", "of", "more", "than", "1000", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 3, [0, [0, 11, false], null], 1000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "aircraft[aircraft['distance'] > 1000]['aid']", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [[1], [2], [3], [4], [5], [6], [8], [9], [10], [11], [12], [13], [14], [15]], "results": {"generated_sql": "SELECT aid FROM aircraft WHERE distance > 1000", "generated_py": "aircraft[aircraft['distance'] > 1000]['aid']", "sql_exec_result": "[(1,), (2,), (3,), (4,), (5,), (6,), (8,), (9,), (10,), (11,), (12,), (13,), (14,), (15,)]", "py_exec_result": "0      1\n1      2\n2      3\n3      4\n4      5\n5      6\n7      8\n9      9\n10    10\n11    11\n12    12\n13    13\n14    14\n15    15\nName: aid, dtype: int64", "gold_answer": [[1], [2], [3], [4], [5], [6], [8], [9], [10], [11], [12], [13], [14], [15]], "gold_sql": "SELECT aid FROM Aircraft WHERE distance  >  1000", "gold_py": "aircraft[aircraft['distance'] > 1000]['aid']"}}
{"db_id": "flight_1", "query": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Aircraft", "WHERE", "distance", "BETWEEN", "1000", "AND", "5000"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "aircraft", "where", "distance", "between", "value", "and", "value"], "question": "How many aircrafts have distance between 1000 and 5000?", "question_toks": ["How", "many", "aircrafts", "have", "distance", "between", "1000", "and", "5000", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 1, [0, [0, 11, false], null], 1000.0, 5000.0]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(aircraft[(aircraft['distance'] >= 1000) & (aircraft['distance'] <= 5000)].shape[0])", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [[9]], "results": {"generated_sql": "SELECT count(*) FROM aircraft WHERE distance BETWEEN 1000 AND 5000", "generated_py": "aircraft[(aircraft['distance'] >= 1000) & (aircraft['distance'] <= 5000)].shape[0]", "sql_exec_result": "[(9,)]", "py_exec_result": "9", "gold_answer": [[9]], "gold_sql": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000", "gold_py": "pd.Series(aircraft[(aircraft['distance'] >= 1000) & (aircraft['distance'] <= 5000)].shape[0])"}}
{"db_id": "flight_1", "query": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Aircraft", "WHERE", "distance", "BETWEEN", "1000", "AND", "5000"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "aircraft", "where", "distance", "between", "value", "and", "value"], "question": "What is the count of aircrafts that have a distance between 1000 and 5000?", "question_toks": ["What", "is", "the", "count", "of", "aircrafts", "that", "have", "a", "distance", "between", "1000", "and", "5000", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 1, [0, [0, 11, false], null], 1000.0, 5000.0]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(aircraft[(aircraft['distance'] >= 1000) & (aircraft['distance'] <= 5000)].shape[0])", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [[9]], "results": {"generated_sql": "SELECT count(*) FROM aircraft WHERE distance BETWEEN 1000 AND 5000", "generated_py": "aircraft[(aircraft['distance'] >= 1000) & (aircraft['distance'] <= 5000)].shape[0]", "sql_exec_result": "[(9,)]", "py_exec_result": "9", "gold_answer": [[9]], "gold_sql": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000", "gold_py": "pd.Series(aircraft[(aircraft['distance'] >= 1000) & (aircraft['distance'] <= 5000)].shape[0])"}}
{"db_id": "flight_1", "query": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12", "query_toks": ["SELECT", "name", ",", "distance", "FROM", "Aircraft", "WHERE", "aid", "=", "12"], "query_toks_no_value": ["select", "name", ",", "distance", "from", "aircraft", "where", "aid", "=", "value"], "question": "What is the name and distance for aircraft with id 12?", "question_toks": ["What", "is", "the", "name", "and", "distance", "for", "aircraft", "with", "id", "12", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], 12.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "aircraft[aircraft['aid'] == 12][['name', 'distance']]", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [["Boeing 767-400ER", 6475]], "results": {"generated_sql": "SELECT name ,  distance FROM aircraft WHERE aid = 12", "generated_py": "aircraft[aircraft['aid'] == 12][['name', 'distance']]", "sql_exec_result": "[('Boeing 767-400ER', 6475)]", "py_exec_result": "                name  distance\n12  Boeing 767-400ER      6475", "gold_answer": [["Boeing 767-400ER", 6475]], "gold_sql": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12", "gold_py": "aircraft[aircraft['aid'] == 12][['name', 'distance']]"}}
{"db_id": "flight_1", "query": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12", "query_toks": ["SELECT", "name", ",", "distance", "FROM", "Aircraft", "WHERE", "aid", "=", "12"], "query_toks_no_value": ["select", "name", ",", "distance", "from", "aircraft", "where", "aid", "=", "value"], "question": "What is the name and distance for the aircraft that has an id of 12?", "question_toks": ["What", "is", "the", "name", "and", "distance", "for", "the", "aircraft", "that", "has", "an", "id", "of", "12", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], 12.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "aircraft[aircraft['aid'] == 12][['name', 'distance']]", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [["Boeing 767-400ER", 6475]], "results": {"generated_sql": "SELECT name ,  distance FROM aircraft WHERE aid = 12", "generated_py": "aircraft[aircraft['aid'] == 12][['name', 'distance']]", "sql_exec_result": "[('Boeing 767-400ER', 6475)]", "py_exec_result": "                name  distance\n12  Boeing 767-400ER      6475", "gold_answer": [["Boeing 767-400ER", 6475]], "gold_sql": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12", "gold_py": "aircraft[aircraft['aid'] == 12][['name', 'distance']]"}}
{"db_id": "flight_1", "query": "SELECT count(*) FROM Employee", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Employee"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employee"], "question": "How many employees do we have?", "question_toks": ["How", "many", "employees", "do", "we", "have", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(employee.shape[0])", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [[31]], "results": {"generated_sql": "SELECT count(*) FROM employee", "generated_py": "pd.Series(employee.shape[0])", "sql_exec_result": "[(31,)]", "py_exec_result": "0    31\ndtype: int64", "gold_answer": [[31]], "gold_sql": "SELECT count(*) FROM Employee", "gold_py": "pd.Series(employee.shape[0])"}}
{"db_id": "flight_1", "query": "SELECT count(*) FROM Employee", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Employee"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employee"], "question": "What is the number of employees?", "question_toks": ["What", "is", "the", "number", "of", "employees", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(employee.shape[0])", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [[31]], "results": {"generated_sql": "SELECT count(*) FROM employee", "generated_py": "employee.shape[0]", "sql_exec_result": "[(31,)]", "py_exec_result": "31", "gold_answer": [[31]], "gold_sql": "SELECT count(*) FROM Employee", "gold_py": "pd.Series(employee.shape[0])"}}
{"db_id": "flight_1", "query": "SELECT eid FROM Employee WHERE salary  >  100000", "query_toks": ["SELECT", "eid", "FROM", "Employee", "WHERE", "salary", ">", "100000"], "query_toks_no_value": ["select", "eid", "from", "employee", "where", "salary", ">", "value"], "question": "Show ids for all employees with at least 100000 salary.", "question_toks": ["Show", "ids", "for", "all", "employees", "with", "at", "least", "100000", "salary", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 3, [0, [0, 14, false], null], 100000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "employee[employee['salary'] > 100000]['eid']", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [[242518965], [141582651], [11564812], [567354612], [552455318], [550156548], [390487451], [355548984], [310454876], [142519864], [269734834], [552455348], [556784565], [573284895], [574489456]], "results": {"generated_sql": "SELECT eid FROM employee WHERE salary >= 100000", "generated_py": "employee[employee['salary'] >= 100000]['eid']", "sql_exec_result": "[(242518965,), (141582651,), (11564812,), (567354612,), (552455318,), (550156548,), (390487451,), (355548984,), (310454876,), (142519864,), (269734834,), (552455348,), (556784565,), (573284895,), (574489456,)]", "py_exec_result": "0     242518965\n1     141582651\n2      11564812\n3     567354612\n4     552455318\n5     550156548\n6     390487451\n10    355548984\n11    310454876\n16    142519864\n17    269734834\n19    552455348\n27    556784565\n28    573284895\n29    574489456\nName: eid, dtype: int64", "gold_answer": [[242518965], [141582651], [11564812], [567354612], [552455318], [550156548], [390487451], [355548984], [310454876], [142519864], [269734834], [552455348], [556784565], [573284895], [574489456]], "gold_sql": "SELECT eid FROM Employee WHERE salary  >  100000", "gold_py": "employee[employee['salary'] > 100000]['eid']"}}
{"db_id": "flight_1", "query": "SELECT eid FROM Employee WHERE salary  >  100000", "query_toks": ["SELECT", "eid", "FROM", "Employee", "WHERE", "salary", ">", "100000"], "query_toks_no_value": ["select", "eid", "from", "employee", "where", "salary", ">", "value"], "question": "What is the id of every employee who has at least a salary of  100000?", "question_toks": ["What", "is", "the", "id", "of", "every", "employee", "who", "has", "at", "least", "a", "salary", "of", "100000", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 3, [0, [0, 14, false], null], 100000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "employee[employee['salary'] > 100000]['eid']", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [[242518965], [141582651], [11564812], [567354612], [552455318], [550156548], [390487451], [355548984], [310454876], [142519864], [269734834], [552455348], [556784565], [573284895], [574489456]], "results": {"generated_sql": "SELECT eid FROM employee WHERE salary >= 100000", "generated_py": "employee[employee['salary'] >= 100000]['eid']", "sql_exec_result": "[(242518965,), (141582651,), (11564812,), (567354612,), (552455318,), (550156548,), (390487451,), (355548984,), (310454876,), (142519864,), (269734834,), (552455348,), (556784565,), (573284895,), (574489456,)]", "py_exec_result": "0     242518965\n1     141582651\n2      11564812\n3     567354612\n4     552455318\n5     550156548\n6     390487451\n10    355548984\n11    310454876\n16    142519864\n17    269734834\n19    552455348\n27    556784565\n28    573284895\n29    574489456\nName: eid, dtype: int64", "gold_answer": [[242518965], [141582651], [11564812], [567354612], [552455318], [550156548], [390487451], [355548984], [310454876], [142519864], [269734834], [552455348], [556784565], [573284895], [574489456]], "gold_sql": "SELECT eid FROM Employee WHERE salary  >  100000", "gold_py": "employee[employee['salary'] > 100000]['eid']"}}
{"db_id": "flight_1", "query": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Employee", "WHERE", "salary", "BETWEEN", "100000", "AND", "200000"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employee", "where", "salary", "between", "value", "and", "value"], "question": "How many employees have salary between 100000 and 200000?", "question_toks": ["How", "many", "employees", "have", "salary", "between", "100000", "and", "200000", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 1, [0, [0, 14, false], null], 100000.0, 200000.0]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(employee[(employee['salary'] >= 100000) & (employee['salary'] <= 200000)].shape[0])", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [[7]], "results": {"generated_sql": "SELECT count(*) FROM employee WHERE salary BETWEEN 100000 AND 200000", "generated_py": "pd.Series(employee[(employee['salary'] >= 100000) & (employee['salary'] <= 200000)].shape[0])", "sql_exec_result": "[(7,)]", "py_exec_result": "0    7\ndtype: int64", "gold_answer": [[7]], "gold_sql": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000", "gold_py": "pd.Series(employee[(employee['salary'] >= 100000) & (employee['salary'] <= 200000)].shape[0])"}}
{"db_id": "flight_1", "query": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Employee", "WHERE", "salary", "BETWEEN", "100000", "AND", "200000"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employee", "where", "salary", "between", "value", "and", "value"], "question": "What is the number of employees that have a salary between 100000 and 200000?", "question_toks": ["What", "is", "the", "number", "of", "employees", "that", "have", "a", "salary", "between", "100000", "and", "200000", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 1, [0, [0, 14, false], null], 100000.0, 200000.0]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(employee[(employee['salary'] >= 100000) & (employee['salary'] <= 200000)].shape[0])", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [[7]], "results": {"generated_sql": "SELECT count(*) FROM employee WHERE salary BETWEEN 100000 AND 200000", "generated_py": "employee[(employee['salary'] >= 100000) & (employee['salary'] <= 200000)].shape[0]", "sql_exec_result": "[(7,)]", "py_exec_result": "7", "gold_answer": [[7]], "gold_sql": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000", "gold_py": "pd.Series(employee[(employee['salary'] >= 100000) & (employee['salary'] <= 200000)].shape[0])"}}
{"db_id": "flight_1", "query": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965", "query_toks": ["SELECT", "name", ",", "salary", "FROM", "Employee", "WHERE", "eid", "=", "242518965"], "query_toks_no_value": ["select", "name", ",", "salary", "from", "employee", "where", "eid", "=", "value"], "question": "What is the name and salary for employee with id 242518965?", "question_toks": ["What", "is", "the", "name", "and", "salary", "for", "employee", "with", "id", "242518965", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 13, false], null]], [0, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], 242518965.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "employee[employee['eid'] == 242518965][['name', 'salary']]", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [["James Smith", 120433]], "results": {"generated_sql": "SELECT name ,  salary FROM employee WHERE eid = 242518965", "generated_py": "employee[employee['eid'] == 242518965][['name', 'salary']]", "sql_exec_result": "[('James Smith', 120433)]", "py_exec_result": "          name  salary\n0  James Smith  120433", "gold_answer": [["James Smith", 120433]], "gold_sql": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965", "gold_py": "employee[employee['eid'] == 242518965][['name', 'salary']]"}}
{"db_id": "flight_1", "query": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965", "query_toks": ["SELECT", "name", ",", "salary", "FROM", "Employee", "WHERE", "eid", "=", "242518965"], "query_toks_no_value": ["select", "name", ",", "salary", "from", "employee", "where", "eid", "=", "value"], "question": "What is the name and salary of the employee with the id 242518965?", "question_toks": ["What", "is", "the", "name", "and", "salary", "of", "the", "employee", "with", "the", "id", "242518965", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 13, false], null]], [0, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], 242518965.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "employee[employee['eid'] == 242518965][['name', 'salary']]", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [["James Smith", 120433]], "results": {"generated_sql": "SELECT name, salary FROM employee WHERE eid = 242518965", "generated_py": "employee[employee['eid'] == 242518965][['name', 'salary']]", "sql_exec_result": "[('James Smith', 120433)]", "py_exec_result": "          name  salary\n0  James Smith  120433", "gold_answer": [["James Smith", 120433]], "gold_sql": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965", "gold_py": "employee[employee['eid'] == 242518965][['name', 'salary']]"}}
{"db_id": "flight_1", "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'", "query_toks": ["SELECT", "eid", ",", "salary", "FROM", "Employee", "WHERE", "name", "=", "'Mark", "Young", "'"], "query_toks_no_value": ["select", "eid", ",", "salary", "from", "employee", "where", "name", "=", "value"], "question": "Show the id and salary of Mark Young.", "question_toks": ["Show", "the", "id", "and", "salary", "of", "Mark", "Young", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]], [0, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], "\"Mark Young\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "employee[employee['name'] == 'Mark Young'][['eid', 'salary']]", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [[556784565, 205187]], "results": {"generated_sql": "SELECT eid, salary FROM employee WHERE name = 'Mark Young'", "generated_py": "employee[employee['name'] == 'Mark Young'][['eid', 'salary']]", "sql_exec_result": "[(556784565, 205187)]", "py_exec_result": "          eid  salary\n27  556784565  205187", "gold_answer": [[556784565, 205187]], "gold_sql": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'", "gold_py": "employee[employee['name'] == 'Mark Young'][['eid', 'salary']]"}}
{"db_id": "flight_1", "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'", "query_toks": ["SELECT", "eid", ",", "salary", "FROM", "Employee", "WHERE", "name", "=", "'Mark", "Young", "'"], "query_toks_no_value": ["select", "eid", ",", "salary", "from", "employee", "where", "name", "=", "value"], "question": "What is the id and salary of the employee named Mark Young?", "question_toks": ["What", "is", "the", "id", "and", "salary", "of", "the", "employee", "named", "Mark", "Young", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]], [0, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], "\"Mark Young\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "employee[employee['name'] == 'Mark Young'][['eid', 'salary']]", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [[556784565, 205187]], "results": {"generated_sql": "SELECT eid, salary FROM employee WHERE name = 'Mark Young'", "generated_py": "employee[employee['name'] == 'Mark Young'][['eid', 'salary']]", "sql_exec_result": "[(556784565, 205187)]", "py_exec_result": "          eid  salary\n27  556784565  205187", "gold_answer": [[556784565, 205187]], "gold_sql": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'", "gold_py": "employee[employee['name'] == 'Mark Young'][['eid', 'salary']]"}}
{"db_id": "flight_1", "query": "SELECT count(*) FROM Flight", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Flight"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flight"], "question": "How many flights do we have?", "question_toks": ["How", "many", "flights", "do", "we", "have", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(flight.shape[0])", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [[10]], "results": {"generated_sql": "SELECT count(*) FROM flight", "generated_py": "flight.shape[0]", "sql_exec_result": "[(10,)]", "py_exec_result": "10", "gold_answer": [[10]], "gold_sql": "SELECT count(*) FROM Flight", "gold_py": "pd.Series(flight.shape[0])"}}
{"db_id": "flight_1", "query": "SELECT count(*) FROM Flight", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Flight"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flight"], "question": "What is the number of flights?", "question_toks": ["What", "is", "the", "number", "of", "flights", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(flight.shape[0])", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [[10]], "results": {"generated_sql": "SELECT count(*) FROM flight", "generated_py": "pd.Series(flight.shape[0])", "sql_exec_result": "[(10,)]", "py_exec_result": "0    10\ndtype: int64", "gold_answer": [[10]], "gold_sql": "SELECT count(*) FROM Flight", "gold_py": "pd.Series(flight.shape[0])"}}
{"db_id": "flight_1", "query": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin", "query_toks": ["SELECT", "flno", ",", "origin", ",", "destination", "FROM", "Flight", "ORDER", "BY", "origin"], "query_toks_no_value": ["select", "flno", ",", "origin", ",", "destination", "from", "flight", "order", "by", "origin"], "question": "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.", "question_toks": ["Show", "flight", "number", ",", "origin", ",", "destination", "of", "all", "flights", "in", "the", "alphabetical", "order", "of", "the", "departure", "cities", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 2, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "flight[['flno', 'origin', 'destination']].sort_values('origin', ascending = True)", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [[76, "Chicago", "Los Angeles"], [68, "Chicago", "New York"], [99, "Los Angeles", "Washington D.C."], [13, "Los Angeles", "Chicago"], [346, "Los Angeles", "Dallas"], [387, "Los Angeles", "Boston"], [7, "Los Angeles", "Sydney"], [2, "Los Angeles", "Tokyo"], [33, "Los Angeles", "Honolulu"], [34, "Los Angeles", "Honolulu"]], "results": {"generated_sql": "SELECT flno, origin, destination FROM flight ORDER BY origin", "generated_py": "flight[['flno', 'origin', 'destination']].sort_values('origin')", "sql_exec_result": "[(76, 'Chicago', 'Los Angeles'), (68, 'Chicago', 'New York'), (99, 'Los Angeles', 'Washington D.C.'), (13, 'Los Angeles', 'Chicago'), (346, 'Los Angeles', 'Dallas'), (387, 'Los Angeles', 'Boston'), (7, 'Los Angeles', 'Sydney'), (2, 'Los Angeles', 'Tokyo'), (33, 'Los Angeles', 'Honolulu'), (34, 'Los Angeles', 'Honolulu')]", "py_exec_result": "   flno       origin      destination\n8    76      Chicago      Los Angeles\n9    68      Chicago         New York\n0    99  Los Angeles  Washington D.C.\n1    13  Los Angeles          Chicago\n2   346  Los Angeles           Dallas\n3   387  Los Angeles           Boston\n4     7  Los Angeles           Sydney\n5     2  Los Angeles            Tokyo\n6    33  Los Angeles         Honolulu\n7    34  Los Angeles         Honolulu", "gold_answer": [[76, "Chicago", "Los Angeles"], [68, "Chicago", "New York"], [99, "Los Angeles", "Washington D.C."], [13, "Los Angeles", "Chicago"], [346, "Los Angeles", "Dallas"], [387, "Los Angeles", "Boston"], [7, "Los Angeles", "Sydney"], [2, "Los Angeles", "Tokyo"], [33, "Los Angeles", "Honolulu"], [34, "Los Angeles", "Honolulu"]], "gold_sql": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin", "gold_py": "flight[['flno', 'origin', 'destination']].sort_values('origin', ascending = True)"}}
{"db_id": "flight_1", "query": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin", "query_toks": ["SELECT", "flno", ",", "origin", ",", "destination", "FROM", "Flight", "ORDER", "BY", "origin"], "query_toks_no_value": ["select", "flno", ",", "origin", ",", "destination", "from", "flight", "order", "by", "origin"], "question": "What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?", "question_toks": ["What", "is", "the", "flight", "number", ",", "origin", ",", "and", "destination", "for", "all", "flights", "in", "alphabetical", "order", "by", "departure", "cities", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 2, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "flight[['flno', 'origin', 'destination']].sort_values('origin', ascending = True)", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [[76, "Chicago", "Los Angeles"], [68, "Chicago", "New York"], [99, "Los Angeles", "Washington D.C."], [13, "Los Angeles", "Chicago"], [346, "Los Angeles", "Dallas"], [387, "Los Angeles", "Boston"], [7, "Los Angeles", "Sydney"], [2, "Los Angeles", "Tokyo"], [33, "Los Angeles", "Honolulu"], [34, "Los Angeles", "Honolulu"]], "results": {"generated_sql": "SELECT flno, origin, destination FROM flight ORDER BY origin", "generated_py": "flight[['flno', 'origin', 'destination']].sort_values('origin')", "sql_exec_result": "[(76, 'Chicago', 'Los Angeles'), (68, 'Chicago', 'New York'), (99, 'Los Angeles', 'Washington D.C.'), (13, 'Los Angeles', 'Chicago'), (346, 'Los Angeles', 'Dallas'), (387, 'Los Angeles', 'Boston'), (7, 'Los Angeles', 'Sydney'), (2, 'Los Angeles', 'Tokyo'), (33, 'Los Angeles', 'Honolulu'), (34, 'Los Angeles', 'Honolulu')]", "py_exec_result": "   flno       origin      destination\n8    76      Chicago      Los Angeles\n9    68      Chicago         New York\n0    99  Los Angeles  Washington D.C.\n1    13  Los Angeles          Chicago\n2   346  Los Angeles           Dallas\n3   387  Los Angeles           Boston\n4     7  Los Angeles           Sydney\n5     2  Los Angeles            Tokyo\n6    33  Los Angeles         Honolulu\n7    34  Los Angeles         Honolulu", "gold_answer": [[76, "Chicago", "Los Angeles"], [68, "Chicago", "New York"], [99, "Los Angeles", "Washington D.C."], [13, "Los Angeles", "Chicago"], [346, "Los Angeles", "Dallas"], [387, "Los Angeles", "Boston"], [7, "Los Angeles", "Sydney"], [2, "Los Angeles", "Tokyo"], [33, "Los Angeles", "Honolulu"], [34, "Los Angeles", "Honolulu"]], "gold_sql": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin", "gold_py": "flight[['flno', 'origin', 'destination']].sort_values('origin', ascending = True)"}}
{"db_id": "flight_1", "query": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"", "query_toks": ["SELECT", "origin", "FROM", "Flight", "WHERE", "destination", "=", "``", "Honolulu", "''"], "query_toks_no_value": ["select", "origin", "from", "flight", "where", "destination", "=", "value"], "question": "Show origins of all flights with destination Honolulu.", "question_toks": ["Show", "origins", "of", "all", "flights", "with", "destination", "Honolulu", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], "\"Honolulu\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "flight[flight['destination'] == 'Honolulu']['origin']", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [["Los Angeles"], ["Los Angeles"]], "results": {"generated_sql": "SELECT origin FROM flight WHERE destination = 'Honolulu'", "generated_py": "flight[flight['destination'] == 'Honolulu']['origin']", "sql_exec_result": "[('Los Angeles',), ('Los Angeles',)]", "py_exec_result": "6    Los Angeles\n7    Los Angeles\nName: origin, dtype: object", "gold_answer": [["Los Angeles"], ["Los Angeles"]], "gold_sql": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"", "gold_py": "flight[flight['destination'] == 'Honolulu']['origin']"}}
{"db_id": "flight_1", "query": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"", "query_toks": ["SELECT", "origin", "FROM", "Flight", "WHERE", "destination", "=", "``", "Honolulu", "''"], "query_toks_no_value": ["select", "origin", "from", "flight", "where", "destination", "=", "value"], "question": "What are the origins of all flights that are headed to Honolulu?", "question_toks": ["What", "are", "the", "origins", "of", "all", "flights", "that", "are", "headed", "to", "Honolulu", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], "\"Honolulu\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "flight[flight['destination'] == 'Honolulu']['origin']", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [["Los Angeles"], ["Los Angeles"]], "results": {"generated_sql": "SELECT origin FROM flight WHERE destination = 'Honolulu'", "generated_py": "flight[flight['destination'] == 'Honolulu']['origin']", "sql_exec_result": "[('Los Angeles',), ('Los Angeles',)]", "py_exec_result": "6    Los Angeles\n7    Los Angeles\nName: origin, dtype: object", "gold_answer": [["Los Angeles"], ["Los Angeles"]], "gold_sql": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"", "gold_py": "flight[flight['destination'] == 'Honolulu']['origin']"}}
{"db_id": "flight_1", "query": "SELECT flno FROM Flight WHERE distance  >  2000", "query_toks": ["SELECT", "flno", "FROM", "Flight", "WHERE", "distance", ">", "2000"], "query_toks_no_value": ["select", "flno", "from", "flight", "where", "distance", ">", "value"], "question": "Show flight number for all flights with more than 2000 distance.", "question_toks": ["Show", "flight", "number", "for", "all", "flights", "with", "more", "than", "2000", "distance", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], 2000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "flight[flight['distance'] > 2000]['flno']", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [[99], [387], [7], [2], [33], [34]], "results": {"generated_sql": "SELECT flno FROM flight WHERE distance > 2000", "generated_py": "flight[flight['distance'] > 2000]['flno']", "sql_exec_result": "[(99,), (387,), (7,), (2,), (33,), (34,)]", "py_exec_result": "0     99\n3    387\n4      7\n5      2\n6     33\n7     34\nName: flno, dtype: int64", "gold_answer": [[99], [387], [7], [2], [33], [34]], "gold_sql": "SELECT flno FROM Flight WHERE distance  >  2000", "gold_py": "flight[flight['distance'] > 2000]['flno']"}}
{"db_id": "flight_1", "query": "SELECT flno FROM Flight WHERE distance  >  2000", "query_toks": ["SELECT", "flno", "FROM", "Flight", "WHERE", "distance", ">", "2000"], "query_toks_no_value": ["select", "flno", "from", "flight", "where", "distance", ">", "value"], "question": "What are the numbers of all flights that can cover a distance of more than 2000?", "question_toks": ["What", "are", "the", "numbers", "of", "all", "flights", "that", "can", "cover", "a", "distance", "of", "more", "than", "2000", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], 2000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "flight[flight['distance'] > 2000]['flno']", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [[99], [387], [7], [2], [33], [34]], "results": {"generated_sql": "SELECT flno FROM flight WHERE distance > 2000", "generated_py": "pd.Series(flight[flight['distance'] > 2000]['flno'].unique().shape[0])", "sql_exec_result": "[(99,), (387,), (7,), (2,), (33,), (34,)]", "py_exec_result": "0    6\ndtype: int64", "gold_answer": [[99], [387], [7], [2], [33], [34]], "gold_sql": "SELECT flno FROM Flight WHERE distance  >  2000", "gold_py": "flight[flight['distance'] > 2000]['flno']"}}
{"db_id": "flight_1", "query": "SELECT origin ,  destination FROM Flight WHERE price  >  300", "query_toks": ["SELECT", "origin", ",", "destination", "FROM", "Flight", "WHERE", "price", ">", "300"], "query_toks_no_value": ["select", "origin", ",", "destination", "from", "flight", "where", "price", ">", "value"], "question": "Show origin and destination for flights with price higher than 300.", "question_toks": ["Show", "origin", "and", "destination", "for", "flights", "with", "price", "higher", "than", "300", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 3, [0, [0, 7, false], null], 300.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "flight[flight['price'] > 300][['origin', 'destination']]", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [["Los Angeles", "Tokyo"], ["Los Angeles", "Honolulu"], ["Los Angeles", "Honolulu"]], "results": {"generated_sql": "SELECT origin ,  destination FROM flight WHERE price > 300", "generated_py": "flight[flight['price'] > 300][['origin', 'destination']]", "sql_exec_result": "[('Los Angeles', 'Tokyo'), ('Los Angeles', 'Honolulu'), ('Los Angeles', 'Honolulu')]", "py_exec_result": "        origin destination\n5  Los Angeles       Tokyo\n6  Los Angeles    Honolulu\n7  Los Angeles    Honolulu", "gold_answer": [["Los Angeles", "Tokyo"], ["Los Angeles", "Honolulu"], ["Los Angeles", "Honolulu"]], "gold_sql": "SELECT origin ,  destination FROM Flight WHERE price  >  300", "gold_py": "flight[flight['price'] > 300][['origin', 'destination']]"}}
{"db_id": "flight_1", "query": "SELECT origin ,  destination FROM Flight WHERE price  >  300", "query_toks": ["SELECT", "origin", ",", "destination", "FROM", "Flight", "WHERE", "price", ">", "300"], "query_toks_no_value": ["select", "origin", ",", "destination", "from", "flight", "where", "price", ">", "value"], "question": "What is the origin and destination for all flights whose price is higher than 300?", "question_toks": ["What", "is", "the", "origin", "and", "destination", "for", "all", "flights", "whose", "price", "is", "higher", "than", "300", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 3, [0, [0, 7, false], null], 300.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "flight[flight['price'] > 300][['origin', 'destination']]", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [["Los Angeles", "Tokyo"], ["Los Angeles", "Honolulu"], ["Los Angeles", "Honolulu"]], "results": {"generated_sql": "SELECT origin ,  destination FROM flight WHERE price > 300", "generated_py": "flight[flight['price'] > 300][['origin', 'destination']]", "sql_exec_result": "[('Los Angeles', 'Tokyo'), ('Los Angeles', 'Honolulu'), ('Los Angeles', 'Honolulu')]", "py_exec_result": "        origin destination\n5  Los Angeles       Tokyo\n6  Los Angeles    Honolulu\n7  Los Angeles    Honolulu", "gold_answer": [["Los Angeles", "Tokyo"], ["Los Angeles", "Honolulu"], ["Los Angeles", "Honolulu"]], "gold_sql": "SELECT origin ,  destination FROM Flight WHERE price  >  300", "gold_py": "flight[flight['price'] > 300][['origin', 'destination']]"}}
{"db_id": "flight_1", "query": "SELECT count(DISTINCT eid) FROM Certificate", "query_toks": ["SELECT", "count", "(", "DISTINCT", "eid", ")", "FROM", "Certificate"], "query_toks_no_value": ["select", "count", "(", "distinct", "eid", ")", "from", "certificate"], "question": "How many employees have certificate.", "question_toks": ["How", "many", "employees", "have", "certificate", "."], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 15, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(certificate['eid'].drop_duplicates().size)", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [[20]], "results": {"generated_sql": "SELECT count(*) FROM certificate", "generated_py": "pd.Series(certificate.shape[0])", "sql_exec_result": "[(69,)]", "py_exec_result": "0    69\ndtype: int64", "gold_answer": [[20]], "gold_sql": "SELECT count(DISTINCT eid) FROM Certificate", "gold_py": "pd.Series(certificate['eid'].drop_duplicates().size)"}}
{"db_id": "flight_1", "query": "SELECT count(DISTINCT eid) FROM Certificate", "query_toks": ["SELECT", "count", "(", "DISTINCT", "eid", ")", "FROM", "Certificate"], "query_toks_no_value": ["select", "count", "(", "distinct", "eid", ")", "from", "certificate"], "question": "What is the count of distinct employees with certificates?", "question_toks": ["What", "is", "the", "count", "of", "distinct", "employees", "with", "certificates", "?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 15, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(certificate['eid'].drop_duplicates().size)", "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [[20]], "results": {"generated_sql": "SELECT count(distinct eid) FROM certificate", "generated_py": "certificate['eid'].nunique()", "sql_exec_result": "[(20,)]", "py_exec_result": "20", "gold_answer": [[20]], "gold_sql": "SELECT count(DISTINCT eid) FROM Certificate", "gold_py": "pd.Series(certificate['eid'].drop_duplicates().size)"}}
{"db_id": "store_1", "query": "SELECT title FROM albums;", "query_toks": ["SELECT", "title", "FROM", "albums", ";"], "query_toks_no_value": ["select", "title", "from", "albums"], "question": "List every album's title.", "question_toks": ["List", "every", "album", "'s", "title", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "albums['title']", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [["For Those About To Rock We Salute You"], ["Balls to the Wall"], ["Restless and Wild"], ["Let There Be Rock"], ["Big Ones"], ["Jagged Little Pill"], ["Facelift"], ["Warner 25 Anos"], ["Plays Metallica By Four Cellos"], ["Audioslave"], ["Out Of Exile"], ["BackBeat Soundtrack"], ["The Best Of Billy Cobham"], ["Alcohol Fueled Brewtality Live! [Disc 1]"], ["Alcohol Fueled Brewtality Live! [Disc 2]"], ["Black Sabbath"], ["Black Sabbath Vol. 4 (Remaster)"], ["Body Count"], ["Chemical Wedding"], ["The Best Of Buddy Guy - The Millenium Collection"], ["Prenda Minha"], ["Sozinho Remix Ao Vivo"], ["Minha Historia"], ["Afrociberdelia"], ["Da Lama Ao Caos"], ["Ac\u00fastico MTV live"], ["Cidade Negra - Hits"], ["Na Pista"], ["Ax\u00e9 Bahia 2001"], ["BBC Sessions [Disc 1] live"], ["Bongo Fury"], ["Carnaval 2001"], ["Chill: Brazil (Disc 1)"], ["Chill: Brazil (Disc 2)"], ["Garage Inc. (Disc 1)"], ["Greatest Hits II"], ["Greatest Kiss"], ["Heart of the Night"], ["International Superhits"], ["Into The Light"], ["Meus Momentos"], ["Minha Hist\u00f3ria"], ["MK III The Final Concerts [Disc 1]"], ["Physical Graffiti [Disc 1]"], ["Sambas De Enredo 2001"], ["Supernatural"], ["The Best of Ed Motta"], ["The Essential Miles Davis [Disc 1]"], ["The Essential Miles Davis [Disc 2]"], ["The Final Concerts (Disc 2)"], ["Up An' Atom"], ["Vin\u00edcius De Moraes - Sem Limite"], ["Vozes do MPB"], ["Chronicle, Vol. 1"], ["Chronicle, Vol. 2"], ["C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]"], ["C\u00e1ssia Eller - Sem Limite [Disc 1]"], ["Come Taste The Band"], ["Deep Purple In Rock"], ["Fireball"], ["Knocking at Your Back Door: The Best Of Deep Purple in the 80's"], ["Machine Head"], ["Purpendicular"], ["Slaves And Masters"], ["Stormbringer"], ["The Battle Rages On"], ["Vault: Def Leppard's Greatest Hits"], ["Outbreak"], ["Djavan Ao Vivo - Vol. 02"], ["Djavan Ao Vivo - Vol. 1"], ["Elis Regina-Minha Hist\u00f3ria"], ["The Cream Of Clapton"], ["Unplugged"], ["Album Of The Year"], ["Angel Dust"], ["King For A Day Fool For A Lifetime"], ["The Real Thing"], ["Deixa Entrar"], ["In Your Honor [Disc 1]"], ["In Your Honor [Disc 2]"], ["One By One"], ["The Colour And The Shape"], ["My Way: The Best Of Frank Sinatra [Disc 1]"], ["Roda De Funk"], ["As Can\u00e7\u00f5es de Eu Tu Eles"], ["Quanta Gente Veio Ver (Live)"], ["Quanta Gente Veio ver--B\u00f4nus De Carnaval"], ["Faceless"], ["American Idiot"], ["Appetite for Destruction"], ["Use Your Illusion I"], ["Use Your Illusion II"], ["Blue Moods"], ["A Matter of Life and Death"], ["A Real Dead One"], ["A Real Live One"], ["Brave New World"], ["Dance Of Death"], ["Fear Of The Dark"], ["Iron Maiden"], ["Killers"], ["Live After Death"], ["Live At Donington 1992 (Disc 1)"], ["Live At Donington 1992 (Disc 2)"], ["No Prayer For The Dying"], ["Piece Of Mind"], ["Powerslave"], ["Rock In Rio CD1"], ["Rock In Rio CD2"], ["Seventh Son of a Seventh Son"], ["Somewhere in Time"], ["The Number of The Beast"], ["The X Factor"], ["Virtual XI"], ["Sex Machine"], ["Emergency On Planet Earth"], ["Synkronized"], ["The Return Of The Space Cowboy"], ["Get Born"], ["Are You Experienced?"], ["Surfing with the Alien (Remastered)"], ["Jorge Ben Jor 25 Anos"], ["Jota Quest-1995"], ["Cafezinho"], ["Living After Midnight"], ["Unplugged live"], ["BBC Sessions [Disc 2] live"], ["Coda"], ["Houses Of The Holy"], ["In Through The Out Door"], ["IV"], ["Led Zeppelin I"], ["Led Zeppelin II"], ["Led Zeppelin III"], ["Physical Graffiti [Disc 2]"], ["Presence"], ["The Song Remains The Same (Disc 1)"], ["The Song Remains The Same (Disc 2)"], ["A TempestadeTempestade Ou O Livro Dos Dias"], ["Mais Do Mesmo"], ["Greatest Hits"], ["Lulu Santos - RCA 100 Anos De M\u00fasica - \u00c1lbum 01"], ["Lulu Santos - RCA 100 Anos De M\u00fasica - \u00c1lbum 02"], ["Misplaced Childhood"], ["Barulhinho Bom"], ["Seek And Shall Find: More Of The Best (1963-1981)"], ["The Best Of Men At Work"], ["Black Album"], ["Garage Inc. (Disc 2)"], ["Kill 'Em All"], ["Load"], ["Master Of Puppets"], ["ReLoad"], ["Ride The Lightning"], ["St. Anger"], ["...And Justice For All"], ["Miles Ahead"], ["Milton Nascimento Ao Vivo"], ["Minas"], ["Ace Of Spades"], ["Demorou..."], ["Motley Crue Greatest Hits"], ["From The Muddy Banks Of The Wishkah live"], ["Nevermind"], ["Compositores"], ["Olodum"], ["Ac\u00fastico MTV"], ["Arquivo II"], ["Arquivo Os Paralamas Do Sucesso"], ["Bark at the Moon (Remastered)"], ["Blizzard of Ozz"], ["Diary of a Madman (Remastered)"], ["No More Tears (Remastered)"], ["Tribute"], ["Walking Into Clarksdale"], ["Original Soundtracks 1"], ["The Beast Live"], ["Live On Two Legs live"], ["Pearl Jam"], ["Riot Act"], ["Ten"], ["Vs."], ["Dark Side Of The Moon"], ["Os C\u00e3es Ladram Mas A Caravana N\u00e3o P\u00e1ra"], ["Greatest Hits I"], ["News Of The World"], ["Out Of Time"], ["Green"], ["New Adventures In Hi-Fi"], ["The Best Of R.E.M.: The IRS Years"], ["Cesta B\u00e1sica"], ["Raul Seixas"], ["Blood Sugar Sex Magik"], ["By The Way"], ["Californication"], ["Retrospective I (1974-1980)"], ["Santana - As Years Go By"], ["Santana Live"], ["Maquinarama"], ["O Samba Pocon\u00e9"], ["Judas 0: B-Sides and Rarities"], ["Rotten Apples: Greatest Hits"], ["A-Sides"], ["Morning Dance"], ["In Step"], ["Core"], ["Mezmerize"], ["1997 Black Light Syndrome"], ["Live [Disc 1]"], ["Live [Disc 2]"], ["The Singles"], ["Beyond Good And Evil"], ["Pure Cult: The Best Of The Cult (For Rockers, Ravers, Lovers & Sinners) UK"], ["The Doors"], ["The Police Greatest Hits"], ["Hot Rocks, 1964-1971 (Disc 1)"], ["No Security"], ["Voodoo Lounge"], ["Tangents"], ["Transmission"], ["My Generation - The Very Best Of The Who"], ["Serie Sem Limite (Disc 1)"], ["Serie Sem Limite (Disc 2)"], ["Ac\u00fastico"], ["Volume Dois"], ["Battlestar Galactica: The Story So Far"], ["Battlestar Galactica, Season 3"], ["Heroes, Season 1"], ["Lost, Season 3"], ["Lost, Season 1"], ["Lost, Season 2"], ["Achtung Baby"], ["All That You Can't Leave Behind"], ["B-Sides 1980-1990"], ["How To Dismantle An Atomic Bomb"], ["Pop"], ["Rattle And Hum"], ["The Best Of 1980-1990"], ["War"], ["Zooropa"], ["UB40 The Best Of - Volume Two UK"], ["Diver Down"], ["The Best Of Van Halen, Vol. I"], ["Van Halen"], ["Van Halen III"], ["Contraband"], ["Vinicius De Moraes"], ["Ao Vivo IMPORT"], ["The Office, Season 1"], ["The Office, Season 2"], ["The Office, Season 3"], ["Un-Led-Ed"], ["Battlestar Galactica (Classic), Season 1"], ["Aquaman"], ["Instant Karma: The Amnesty International Campaign to Save Darfur"], ["Speak of the Devil"], ["20th Century Masters - The Millennium Collection: The Best of Scorpions"], ["House of Pain"], ["Radio Brasil (O Som da Jovem Vanguarda) - Seleccao de Henrique Amaro"], ["Cake: B-Sides and Rarities"], ["LOST, Season 4"], ["Quiet Songs"], ["Muso Ko"], ["Realize"], ["Every Kind of Light"], ["Duos II"], ["Worlds"], ["The Best of Beethoven"], ["Temple of the Dog"], ["Carry On"], ["Revelations"], ["Adorate Deum: Gregorian Chant from the Proper of the Mass"], ["Allegri: Miserere"], ["Pachelbel: Canon & Gigue"], ["Vivaldi: The Four Seasons"], ["Bach: Violin Concertos"], ["Bach: Goldberg Variations"], ["Bach: The Cello Suites"], ["Handel: The Messiah (Highlights)"], ["The World of Classical Favourites"], ["Sir Neville Marriner: A Celebration"], ["Mozart: Wind Concertos"], ["Haydn: Symphonies 99 - 104"], ["Beethoven: Symhonies Nos. 5 & 6"], ["A Soprano Inspired"], ["Great Opera Choruses"], ["Wagner: Favourite Overtures"], ["Faur\u00e9: Requiem, Ravel: Pavane & Others"], ["Tchaikovsky: The Nutcracker"], ["The Last Night of the Proms"], ["Puccini: Madama Butterfly - Highlights"], ["Holst: The Planets, Op. 32 & Vaughan Williams: Fantasies"], ["Pavarotti's Opera Made Easy"], ["Great Performances - Barber's Adagio and Other Romantic Favorites for Strings"], ["Carmina Burana"], ["A Copland Celebration, Vol. I"], ["Bach: Toccata & Fugue in D Minor"], ["Prokofiev: Symphony No.1"], ["Scheherazade"], ["Bach: The Brandenburg Concertos"], ["Chopin: Piano Concertos Nos. 1 & 2"], ["Mascagni: Cavalleria Rusticana"], ["Sibelius: Finlandia"], ["Beethoven Piano Sonatas: Moonlight & Pastorale"], ["Great Recordings of the Century - Mahler: Das Lied von der Erde"], ["Elgar: Cello Concerto & Vaughan Williams: Fantasias"], ["Adams, John: The Chairman Dances"], ["Tchaikovsky: 1812 Festival Overture, Op.49, Capriccio Italien & Beethoven: Wellington's Victory"], ["Palestrina: Missa Papae Marcelli & Allegri: Miserere"], ["Prokofiev: Romeo & Juliet"], ["Strauss: Waltzes"], ["Berlioz: Symphonie Fantastique"], ["Bizet: Carmen Highlights"], ["English Renaissance"], ["Handel: Music for the Royal Fireworks (Original Version 1749)"], ["Grieg: Peer Gynt Suites & Sibelius: Pell\u00e9as et M\u00e9lisande"], ["Mozart Gala: Famous Arias"], ["SCRIABIN: Vers la flamme"], ["Armada: Music from the Courts of England and Spain"], ["Mozart: Symphonies Nos. 40 & 41"], ["Back to Black"], ["Frank"], ["Carried to Dust (Bonus Track Version)"], ["Beethoven: Symphony No. 6 'Pastoral' Etc."], ["Bartok: Violin & Viola Concertos"], ["Mendelssohn: A Midsummer Night's Dream"], ["Bach: Orchestral Suites Nos. 1 - 4"], ["Charpentier: Divertissements, Airs & Concerts"], ["South American Getaway"], ["G\u00f3recki: Symphony No. 3"], ["Purcell: The Fairy Queen"], ["The Ultimate Relexation Album"], ["Purcell: Music for the Queen Mary"], ["Weill: The Seven Deadly Sins"], ["J.S. Bach: Chaconne, Suite in E Minor, Partita in E Major & Prelude, Fugue and Allegro"], ["Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps"], ["Szymanowski: Piano Works, Vol. 1"], ["Nielsen: The Six Symphonies"], ["Great Recordings of the Century: Paganini's 24 Caprices"], ["Liszt - 12 \u00c9tudes D'Execution Transcendante"], ["Great Recordings of the Century - Shubert: Schwanengesang, 4 Lieder"], ["Locatelli: Concertos for Violin, Strings and Continuo, Vol. 3"], ["Respighi:Pines of Rome"], ["Schubert: The Late String Quartets & String Quintet (3 CD's)"], ["Monteverdi: L'Orfeo"], ["Mozart: Chamber Music"], ["Koyaanisqatsi (Soundtrack from the Motion Picture)"]], "results": {"generated_sql": "SELECT title FROM albums", "generated_py": "albums[['title']]", "sql_exec_result": "[('For Those About To Rock We Salute You',), ('Balls to the Wall',), ('Restless and Wild',), ('Let There Be Rock',), ('Big Ones',), ('Jagged Little Pill',), ('Facelift',), ('Warner 25 Anos',), ('Plays Metallica By Four Cellos',), ('Audioslave',), ('Out Of Exile',), ('BackBeat Soundtrack',), ('The Best Of Billy Cobham',), ('Alcohol Fueled Brewtality Live! [Disc 1]',), ('Alcohol Fueled Brewtality Live! [Disc 2]',), ('Black Sabbath',), ('Black Sabbath Vol. 4 (Remaster)',), ('Body Count',), ('Chemical Wedding',), ('The Best Of Buddy Guy - The Millenium Collection',), ('Prenda Minha',), ('Sozinho Remix Ao Vivo',), ('Minha Historia',), ('Afrociberdelia',), ('Da Lama Ao Caos',), ('Ac\u00fastico MTV live',), ('Cidade Negra - Hits',), ('Na Pista',), ('Ax\u00e9 Bahia 2001',), ('BBC Sessions [Disc 1] live',), ('Bongo Fury',), ('Carnaval 2001',), ('Chill: Brazil (Disc 1)',), ('Chill: Brazil (Disc 2)',), ('Garage Inc. (Disc 1)',), ('Greatest Hits II',), ('Greatest Kiss',), ('Heart of the Night',), ('International Superhits',), ('Into The Light',), ('Meus Momentos',), ('Minha Hist\u00f3ria',), ('MK III The Final Concerts [Disc 1]',), ('Physical Graffiti [Disc 1]',), ('Sambas De Enredo 2001',), ('Supernatural',), ('The Best of Ed Motta',), ('The Essential Miles Davis [Disc 1]',), ('The Essential Miles Davis [Disc 2]',), ('The Final Concerts (Disc 2)',), (\"Up An' Atom\",), ('Vin\u00edcius De Moraes - Sem Limite',), ('Vozes do MPB',), ('Chronicle, Vol. 1',), ('Chronicle, Vol. 2',), ('C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]',), ('C\u00e1ssia Eller - Sem Limite [Disc 1]',), ('Come Taste The Band',), ('Deep Purple In Rock',), ('Fireball',), (\"Knocking at Your Back Door: The Best Of Deep Purple in the 80's\",), ('Machine Head',), ('Purpendicular',), ('Slaves And Masters',), ('Stormbringer',), ('The Battle Rages On',), (\"Vault: Def Leppard's Greatest Hits\",), ('Outbreak',), ('Djavan Ao Vivo - Vol. 02',), ('Djavan Ao Vivo - Vol. 1',), ('Elis Regina-Minha Hist\u00f3ria',), ('The Cream Of Clapton',), ('Unplugged',), ('Album Of The Year',), ('Angel Dust',), ('King For A Day Fool For A Lifetime',), ('The Real Thing',), ('Deixa Entrar',), ('In Your Honor [Disc 1]',), ('In Your Honor [Disc 2]',), ('One By One',), ('The Colour And The Shape',), ('My Way: The Best Of Frank Sinatra [Disc 1]',), ('Roda De Funk',), ('As Can\u00e7\u00f5es de Eu Tu Eles',), ('Quanta Gente Veio Ver (Live)',), ('Quanta Gente Veio ver--B\u00f4nus De Carnaval',), ('Faceless',), ('American Idiot',), ('Appetite for Destruction',), ('Use Your Illusion I',), ('Use Your Illusion II',), ('Blue Moods',), ('A Matter of Life and Death',), ('A Real Dead One',), ('A Real Live One',), ('Brave New World',), ('Dance Of Death',), ('Fear Of The Dark',), ('Iron Maiden',), ('Killers',), ('Live After Death',), ('Live At Donington 1992 (Disc 1)',), ('Live At Donington 1992 (Disc 2)',), ('No Prayer For The Dying',), ('Piece Of Mind',), ('Powerslave',), ('Rock In Rio CD1',), ('Rock In Rio CD2',), ('Seventh Son of a Seventh Son',), ('Somewhere in Time',), ('The Number of The Beast',), ('The X Factor',), ('Virtual XI',), ('Sex Machine',), ('Emergency On Planet Earth',), ('Synkronized',), ('The Return Of The Space Cowboy',), ('Get Born',), ('Are You Experienced?',), ('Surfing with the Alien (Remastered)',), ('Jorge Ben Jor 25 Anos',), ('Jota Quest-1995',), ('Cafezinho',), ('Living After Midnight',), ('Unplugged live',), ('BBC Sessions [Disc 2] live',), ('Coda',), ('Houses Of The Holy',), ('In Through The Out Door',), ('IV',), ('Led Zeppelin I',), ('Led Zeppelin II',), ('Led Zeppelin III',), ('Physical Graffiti [Disc 2]',), ('Presence',), ('The Song Remains The Same (Disc 1)',), ('The Song Remains The Same (Disc 2)',), ('A TempestadeTempestade Ou O Livro Dos Dias',), ('Mais Do Mesmo',), ('Greatest Hits',), ('Lulu Santos - RCA 100 Anos De M\u00fasica - \u00c1lbum 01',), ('Lulu Santos - RCA 100 Anos De M\u00fasica - \u00c1lbum 02',), ('Misplaced Childhood',), ('Barulhinho Bom',), ('Seek And Shall Find: More Of The Best (1963-1981)',), ('The Best Of Men At Work',), ('Black Album',), ('Garage Inc. (Disc 2)',), (\"Kill 'Em All\",), ('Load',), ('Master Of Puppets',), ('ReLoad',), ('Ride The Lightning',), ('St. Anger',), ('...And Justice For All',), ('Miles Ahead',), ('Milton Nascimento Ao Vivo',), ('Minas',), ('Ace Of Spades',), ('Demorou...',), ('Motley Crue Greatest Hits',), ('From The Muddy Banks Of The Wishkah live',), ('Nevermind',), ('Compositores',), ('Olodum',), ('Ac\u00fastico MTV',), ('Arquivo II',), ('Arquivo Os Paralamas Do Sucesso',), ('Bark at the Moon (Remastered)',), ('Blizzard of Ozz',), ('Diary of a Madman (Remastered)',), ('No More Tears (Remastered)',), ('Tribute',), ('Walking Into Clarksdale',), ('Original Soundtracks 1',), ('The Beast Live',), ('Live On Two Legs live',), ('Pearl Jam',), ('Riot Act',), ('Ten',), ('Vs.',), ('Dark Side Of The Moon',), ('Os C\u00e3es Ladram Mas A Caravana N\u00e3o P\u00e1ra',), ('Greatest Hits I',), ('News Of The World',), ('Out Of Time',), ('Green',), ('New Adventures In Hi-Fi',), ('The Best Of R.E.M.: The IRS Years',), ('Cesta B\u00e1sica',), ('Raul Seixas',), ('Blood Sugar Sex Magik',), ('By The Way',), ('Californication',), ('Retrospective I (1974-1980)',), ('Santana - As Years Go By',), ('Santana Live',), ('Maquinarama',), ('O Samba Pocon\u00e9',), ('Judas 0: B-Sides and Rarities',), ('Rotten Apples: Greatest Hits',), ('A-Sides',), ('Morning Dance',), ('In Step',), ('Core',), ('Mezmerize',), ('1997 Black Light Syndrome',), ('Live [Disc 1]',), ('Live [Disc 2]',), ('The Singles',), ('Beyond Good And Evil',), ('Pure Cult: The Best Of The Cult (For Rockers, Ravers, Lovers & Sinners) UK',), ('The Doors',), ('The Police Greatest Hits',), ('Hot Rocks, 1964-1971 (Disc 1)',), ('No Security',), ('Voodoo Lounge',), ('Tangents',), ('Transmission',), ('My Generation - The Very Best Of The Who',), ('Serie Sem Limite (Disc 1)',), ('Serie Sem Limite (Disc 2)',), ('Ac\u00fastico',), ('Volume Dois',), ('Battlestar Galactica: The Story So Far',), ('Battlestar Galactica, Season 3',), ('Heroes, Season 1',), ('Lost, Season 3',), ('Lost, Season 1',), ('Lost, Season 2',), ('Achtung Baby',), (\"All That You Can't Leave Behind\",), ('B-Sides 1980-1990',), ('How To Dismantle An Atomic Bomb',), ('Pop',), ('Rattle And Hum',), ('The Best Of 1980-1990',), ('War',), ('Zooropa',), ('UB40 The Best Of - Volume Two UK',), ('Diver Down',), ('The Best Of Van Halen, Vol. I',), ('Van Halen',), ('Van Halen III',), ('Contraband',), ('Vinicius De Moraes',), ('Ao Vivo IMPORT',), ('The Office, Season 1',), ('The Office, Season 2',), ('The Office, Season 3',), ('Un-Led-Ed',), ('Battlestar Galactica (Classic), Season 1',), ('Aquaman',), ('Instant Karma: The Amnesty International Campaign to Save Darfur',), ('Speak of the Devil',), ('20th Century Masters - The Millennium Collection: The Best of Scorpions',), ('House of Pain',), ('Radio Brasil (O Som da Jovem Vanguarda) - Seleccao de Henrique Amaro',), ('Cake: B-Sides and Rarities',), ('LOST, Season 4',), ('Quiet Songs',), ('Muso Ko',), ('Realize',), ('Every Kind of Light',), ('Duos II',), ('Worlds',), ('The Best of Beethoven',), ('Temple of the Dog',), ('Carry On',), ('Revelations',), ('Adorate Deum: Gregorian Chant from the Proper of the Mass',), ('Allegri: Miserere',), ('Pachelbel: Canon & Gigue',), ('Vivaldi: The Four Seasons',), ('Bach: Violin Concertos',), ('Bach: Goldberg Variations',), ('Bach: The Cello Suites',), ('Handel: The Messiah (Highlights)',), ('The World of Classical Favourites',), ('Sir Neville Marriner: A Celebration',), ('Mozart: Wind Concertos',), ('Haydn: Symphonies 99 - 104',), ('Beethoven: Symhonies Nos. 5 & 6',), ('A Soprano Inspired',), ('Great Opera Choruses',), ('Wagner: Favourite Overtures',), ('Faur\u00e9: Requiem, Ravel: Pavane & Others',), ('Tchaikovsky: The Nutcracker',), ('The Last Night of the Proms',), ('Puccini: Madama Butterfly - Highlights',), ('Holst: The Planets, Op. 32 & Vaughan Williams: Fantasies',), (\"Pavarotti's Opera Made Easy\",), (\"Great Performances - Barber's Adagio and Other Romantic Favorites for Strings\",), ('Carmina Burana',), ('A Copland Celebration, Vol. I',), ('Bach: Toccata & Fugue in D Minor',), ('Prokofiev: Symphony No.1',), ('Scheherazade',), ('Bach: The Brandenburg Concertos',), ('Chopin: Piano Concertos Nos. 1 & 2',), ('Mascagni: Cavalleria Rusticana',), ('Sibelius: Finlandia',), ('Beethoven Piano Sonatas: Moonlight & Pastorale',), ('Great Recordings of the Century - Mahler: Das Lied von der Erde',), ('Elgar: Cello Concerto & Vaughan Williams: Fantasias',), ('Adams, John: The Chairman Dances',), (\"Tchaikovsky: 1812 Festival Overture, Op.49, Capriccio Italien & Beethoven: Wellington's Victory\",), ('Palestrina: Missa Papae Marcelli & Allegri: Miserere',), ('Prokofiev: Romeo & Juliet',), ('Strauss: Waltzes',), ('Berlioz: Symphonie Fantastique',), ('Bizet: Carmen Highlights',), ('English Renaissance',), ('Handel: Music for the Royal Fireworks (Original Version 1749)',), ('Grieg: Peer Gynt Suites & Sibelius: Pell\u00e9as et M\u00e9lisande',), ('Mozart Gala: Famous Arias',), ('SCRIABIN: Vers la flamme',), ('Armada: Music from the Courts of England and Spain',), ('Mozart: Symphonies Nos. 40 & 41',), ('Back to Black',), ('Frank',), ('Carried to Dust (Bonus Track Version)',), (\"Beethoven: Symphony No. 6 'Pastoral' Etc.\",), ('Bartok: Violin & Viola Concertos',), (\"Mendelssohn: A Midsummer Night's Dream\",), ('Bach: Orchestral Suites Nos. 1 - 4',), ('Charpentier: Divertissements, Airs & Concerts',), ('South American Getaway',), ('G\u00f3recki: Symphony No. 3',), ('Purcell: The Fairy Queen',), ('The Ultimate Relexation Album',), ('Purcell: Music for the Queen Mary',), ('Weill: The Seven Deadly Sins',), ('J.S. Bach: Chaconne, Suite in E Minor, Partita in E Major & Prelude, Fugue and Allegro',), ('Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps',), ('Szymanowski: Piano Works, Vol. 1',), ('Nielsen: The Six Symphonies',), (\"Great Recordings of the Century: Paganini's 24 Caprices\",), (\"Liszt - 12 \u00c9tudes D'Execution Transcendante\",), ('Great Recordings of the Century - Shubert: Schwanengesang, 4 Lieder',), ('Locatelli: Concertos for Violin, Strings and Continuo, Vol. 3',), ('Respighi:Pines of Rome',), (\"Schubert: The Late String Quartets & String Quintet (3 CD's)\",), (\"Monteverdi: L'Orfeo\",), ('Mozart: Chamber Music',), ('Koyaanisqatsi (Soundtrack from the Motion Picture)',)]", "py_exec_result": "                                                 title\n0                For Those About To Rock We Salute You\n1                                    Balls to the Wall\n2                                    Restless and Wild\n3                                    Let There Be Rock\n4                                             Big Ones\n..                                                 ...\n342                             Respighi:Pines of Rome\n343  Schubert: The Late String Quartets & String Qu...\n344                                Monteverdi: L'Orfeo\n345                              Mozart: Chamber Music\n346  Koyaanisqatsi (Soundtrack from the Motion Pict...\n\n[347 rows x 1 columns]", "gold_answer": [["For Those About To Rock We Salute You"], ["Balls to the Wall"], ["Restless and Wild"], ["Let There Be Rock"], ["Big Ones"], ["Jagged Little Pill"], ["Facelift"], ["Warner 25 Anos"], ["Plays Metallica By Four Cellos"], ["Audioslave"], ["Out Of Exile"], ["BackBeat Soundtrack"], ["The Best Of Billy Cobham"], ["Alcohol Fueled Brewtality Live! [Disc 1]"], ["Alcohol Fueled Brewtality Live! [Disc 2]"], ["Black Sabbath"], ["Black Sabbath Vol. 4 (Remaster)"], ["Body Count"], ["Chemical Wedding"], ["The Best Of Buddy Guy - The Millenium Collection"], ["Prenda Minha"], ["Sozinho Remix Ao Vivo"], ["Minha Historia"], ["Afrociberdelia"], ["Da Lama Ao Caos"], ["Ac\u00fastico MTV live"], ["Cidade Negra - Hits"], ["Na Pista"], ["Ax\u00e9 Bahia 2001"], ["BBC Sessions [Disc 1] live"], ["Bongo Fury"], ["Carnaval 2001"], ["Chill: Brazil (Disc 1)"], ["Chill: Brazil (Disc 2)"], ["Garage Inc. (Disc 1)"], ["Greatest Hits II"], ["Greatest Kiss"], ["Heart of the Night"], ["International Superhits"], ["Into The Light"], ["Meus Momentos"], ["Minha Hist\u00f3ria"], ["MK III The Final Concerts [Disc 1]"], ["Physical Graffiti [Disc 1]"], ["Sambas De Enredo 2001"], ["Supernatural"], ["The Best of Ed Motta"], ["The Essential Miles Davis [Disc 1]"], ["The Essential Miles Davis [Disc 2]"], ["The Final Concerts (Disc 2)"], ["Up An' Atom"], ["Vin\u00edcius De Moraes - Sem Limite"], ["Vozes do MPB"], ["Chronicle, Vol. 1"], ["Chronicle, Vol. 2"], ["C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]"], ["C\u00e1ssia Eller - Sem Limite [Disc 1]"], ["Come Taste The Band"], ["Deep Purple In Rock"], ["Fireball"], ["Knocking at Your Back Door: The Best Of Deep Purple in the 80's"], ["Machine Head"], ["Purpendicular"], ["Slaves And Masters"], ["Stormbringer"], ["The Battle Rages On"], ["Vault: Def Leppard's Greatest Hits"], ["Outbreak"], ["Djavan Ao Vivo - Vol. 02"], ["Djavan Ao Vivo - Vol. 1"], ["Elis Regina-Minha Hist\u00f3ria"], ["The Cream Of Clapton"], ["Unplugged"], ["Album Of The Year"], ["Angel Dust"], ["King For A Day Fool For A Lifetime"], ["The Real Thing"], ["Deixa Entrar"], ["In Your Honor [Disc 1]"], ["In Your Honor [Disc 2]"], ["One By One"], ["The Colour And The Shape"], ["My Way: The Best Of Frank Sinatra [Disc 1]"], ["Roda De Funk"], ["As Can\u00e7\u00f5es de Eu Tu Eles"], ["Quanta Gente Veio Ver (Live)"], ["Quanta Gente Veio ver--B\u00f4nus De Carnaval"], ["Faceless"], ["American Idiot"], ["Appetite for Destruction"], ["Use Your Illusion I"], ["Use Your Illusion II"], ["Blue Moods"], ["A Matter of Life and Death"], ["A Real Dead One"], ["A Real Live One"], ["Brave New World"], ["Dance Of Death"], ["Fear Of The Dark"], ["Iron Maiden"], ["Killers"], ["Live After Death"], ["Live At Donington 1992 (Disc 1)"], ["Live At Donington 1992 (Disc 2)"], ["No Prayer For The Dying"], ["Piece Of Mind"], ["Powerslave"], ["Rock In Rio CD1"], ["Rock In Rio CD2"], ["Seventh Son of a Seventh Son"], ["Somewhere in Time"], ["The Number of The Beast"], ["The X Factor"], ["Virtual XI"], ["Sex Machine"], ["Emergency On Planet Earth"], ["Synkronized"], ["The Return Of The Space Cowboy"], ["Get Born"], ["Are You Experienced?"], ["Surfing with the Alien (Remastered)"], ["Jorge Ben Jor 25 Anos"], ["Jota Quest-1995"], ["Cafezinho"], ["Living After Midnight"], ["Unplugged live"], ["BBC Sessions [Disc 2] live"], ["Coda"], ["Houses Of The Holy"], ["In Through The Out Door"], ["IV"], ["Led Zeppelin I"], ["Led Zeppelin II"], ["Led Zeppelin III"], ["Physical Graffiti [Disc 2]"], ["Presence"], ["The Song Remains The Same (Disc 1)"], ["The Song Remains The Same (Disc 2)"], ["A TempestadeTempestade Ou O Livro Dos Dias"], ["Mais Do Mesmo"], ["Greatest Hits"], ["Lulu Santos - RCA 100 Anos De M\u00fasica - \u00c1lbum 01"], ["Lulu Santos - RCA 100 Anos De M\u00fasica - \u00c1lbum 02"], ["Misplaced Childhood"], ["Barulhinho Bom"], ["Seek And Shall Find: More Of The Best (1963-1981)"], ["The Best Of Men At Work"], ["Black Album"], ["Garage Inc. (Disc 2)"], ["Kill 'Em All"], ["Load"], ["Master Of Puppets"], ["ReLoad"], ["Ride The Lightning"], ["St. Anger"], ["...And Justice For All"], ["Miles Ahead"], ["Milton Nascimento Ao Vivo"], ["Minas"], ["Ace Of Spades"], ["Demorou..."], ["Motley Crue Greatest Hits"], ["From The Muddy Banks Of The Wishkah live"], ["Nevermind"], ["Compositores"], ["Olodum"], ["Ac\u00fastico MTV"], ["Arquivo II"], ["Arquivo Os Paralamas Do Sucesso"], ["Bark at the Moon (Remastered)"], ["Blizzard of Ozz"], ["Diary of a Madman (Remastered)"], ["No More Tears (Remastered)"], ["Tribute"], ["Walking Into Clarksdale"], ["Original Soundtracks 1"], ["The Beast Live"], ["Live On Two Legs live"], ["Pearl Jam"], ["Riot Act"], ["Ten"], ["Vs."], ["Dark Side Of The Moon"], ["Os C\u00e3es Ladram Mas A Caravana N\u00e3o P\u00e1ra"], ["Greatest Hits I"], ["News Of The World"], ["Out Of Time"], ["Green"], ["New Adventures In Hi-Fi"], ["The Best Of R.E.M.: The IRS Years"], ["Cesta B\u00e1sica"], ["Raul Seixas"], ["Blood Sugar Sex Magik"], ["By The Way"], ["Californication"], ["Retrospective I (1974-1980)"], ["Santana - As Years Go By"], ["Santana Live"], ["Maquinarama"], ["O Samba Pocon\u00e9"], ["Judas 0: B-Sides and Rarities"], ["Rotten Apples: Greatest Hits"], ["A-Sides"], ["Morning Dance"], ["In Step"], ["Core"], ["Mezmerize"], ["1997 Black Light Syndrome"], ["Live [Disc 1]"], ["Live [Disc 2]"], ["The Singles"], ["Beyond Good And Evil"], ["Pure Cult: The Best Of The Cult (For Rockers, Ravers, Lovers & Sinners) UK"], ["The Doors"], ["The Police Greatest Hits"], ["Hot Rocks, 1964-1971 (Disc 1)"], ["No Security"], ["Voodoo Lounge"], ["Tangents"], ["Transmission"], ["My Generation - The Very Best Of The Who"], ["Serie Sem Limite (Disc 1)"], ["Serie Sem Limite (Disc 2)"], ["Ac\u00fastico"], ["Volume Dois"], ["Battlestar Galactica: The Story So Far"], ["Battlestar Galactica, Season 3"], ["Heroes, Season 1"], ["Lost, Season 3"], ["Lost, Season 1"], ["Lost, Season 2"], ["Achtung Baby"], ["All That You Can't Leave Behind"], ["B-Sides 1980-1990"], ["How To Dismantle An Atomic Bomb"], ["Pop"], ["Rattle And Hum"], ["The Best Of 1980-1990"], ["War"], ["Zooropa"], ["UB40 The Best Of - Volume Two UK"], ["Diver Down"], ["The Best Of Van Halen, Vol. I"], ["Van Halen"], ["Van Halen III"], ["Contraband"], ["Vinicius De Moraes"], ["Ao Vivo IMPORT"], ["The Office, Season 1"], ["The Office, Season 2"], ["The Office, Season 3"], ["Un-Led-Ed"], ["Battlestar Galactica (Classic), Season 1"], ["Aquaman"], ["Instant Karma: The Amnesty International Campaign to Save Darfur"], ["Speak of the Devil"], ["20th Century Masters - The Millennium Collection: The Best of Scorpions"], ["House of Pain"], ["Radio Brasil (O Som da Jovem Vanguarda) - Seleccao de Henrique Amaro"], ["Cake: B-Sides and Rarities"], ["LOST, Season 4"], ["Quiet Songs"], ["Muso Ko"], ["Realize"], ["Every Kind of Light"], ["Duos II"], ["Worlds"], ["The Best of Beethoven"], ["Temple of the Dog"], ["Carry On"], ["Revelations"], ["Adorate Deum: Gregorian Chant from the Proper of the Mass"], ["Allegri: Miserere"], ["Pachelbel: Canon & Gigue"], ["Vivaldi: The Four Seasons"], ["Bach: Violin Concertos"], ["Bach: Goldberg Variations"], ["Bach: The Cello Suites"], ["Handel: The Messiah (Highlights)"], ["The World of Classical Favourites"], ["Sir Neville Marriner: A Celebration"], ["Mozart: Wind Concertos"], ["Haydn: Symphonies 99 - 104"], ["Beethoven: Symhonies Nos. 5 & 6"], ["A Soprano Inspired"], ["Great Opera Choruses"], ["Wagner: Favourite Overtures"], ["Faur\u00e9: Requiem, Ravel: Pavane & Others"], ["Tchaikovsky: The Nutcracker"], ["The Last Night of the Proms"], ["Puccini: Madama Butterfly - Highlights"], ["Holst: The Planets, Op. 32 & Vaughan Williams: Fantasies"], ["Pavarotti's Opera Made Easy"], ["Great Performances - Barber's Adagio and Other Romantic Favorites for Strings"], ["Carmina Burana"], ["A Copland Celebration, Vol. I"], ["Bach: Toccata & Fugue in D Minor"], ["Prokofiev: Symphony No.1"], ["Scheherazade"], ["Bach: The Brandenburg Concertos"], ["Chopin: Piano Concertos Nos. 1 & 2"], ["Mascagni: Cavalleria Rusticana"], ["Sibelius: Finlandia"], ["Beethoven Piano Sonatas: Moonlight & Pastorale"], ["Great Recordings of the Century - Mahler: Das Lied von der Erde"], ["Elgar: Cello Concerto & Vaughan Williams: Fantasias"], ["Adams, John: The Chairman Dances"], ["Tchaikovsky: 1812 Festival Overture, Op.49, Capriccio Italien & Beethoven: Wellington's Victory"], ["Palestrina: Missa Papae Marcelli & Allegri: Miserere"], ["Prokofiev: Romeo & Juliet"], ["Strauss: Waltzes"], ["Berlioz: Symphonie Fantastique"], ["Bizet: Carmen Highlights"], ["English Renaissance"], ["Handel: Music for the Royal Fireworks (Original Version 1749)"], ["Grieg: Peer Gynt Suites & Sibelius: Pell\u00e9as et M\u00e9lisande"], ["Mozart Gala: Famous Arias"], ["SCRIABIN: Vers la flamme"], ["Armada: Music from the Courts of England and Spain"], ["Mozart: Symphonies Nos. 40 & 41"], ["Back to Black"], ["Frank"], ["Carried to Dust (Bonus Track Version)"], ["Beethoven: Symphony No. 6 'Pastoral' Etc."], ["Bartok: Violin & Viola Concertos"], ["Mendelssohn: A Midsummer Night's Dream"], ["Bach: Orchestral Suites Nos. 1 - 4"], ["Charpentier: Divertissements, Airs & Concerts"], ["South American Getaway"], ["G\u00f3recki: Symphony No. 3"], ["Purcell: The Fairy Queen"], ["The Ultimate Relexation Album"], ["Purcell: Music for the Queen Mary"], ["Weill: The Seven Deadly Sins"], ["J.S. Bach: Chaconne, Suite in E Minor, Partita in E Major & Prelude, Fugue and Allegro"], ["Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps"], ["Szymanowski: Piano Works, Vol. 1"], ["Nielsen: The Six Symphonies"], ["Great Recordings of the Century: Paganini's 24 Caprices"], ["Liszt - 12 \u00c9tudes D'Execution Transcendante"], ["Great Recordings of the Century - Shubert: Schwanengesang, 4 Lieder"], ["Locatelli: Concertos for Violin, Strings and Continuo, Vol. 3"], ["Respighi:Pines of Rome"], ["Schubert: The Late String Quartets & String Quintet (3 CD's)"], ["Monteverdi: L'Orfeo"], ["Mozart: Chamber Music"], ["Koyaanisqatsi (Soundtrack from the Motion Picture)"]], "gold_sql": "SELECT title FROM albums;", "gold_py": "albums['title']"}}
{"db_id": "store_1", "query": "SELECT title FROM albums;", "query_toks": ["SELECT", "title", "FROM", "albums", ";"], "query_toks_no_value": ["select", "title", "from", "albums"], "question": "What are the titles of all the albums?", "question_toks": ["What", "are", "the", "titles", "of", "all", "the", "albums", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "albums['title']", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [["For Those About To Rock We Salute You"], ["Balls to the Wall"], ["Restless and Wild"], ["Let There Be Rock"], ["Big Ones"], ["Jagged Little Pill"], ["Facelift"], ["Warner 25 Anos"], ["Plays Metallica By Four Cellos"], ["Audioslave"], ["Out Of Exile"], ["BackBeat Soundtrack"], ["The Best Of Billy Cobham"], ["Alcohol Fueled Brewtality Live! [Disc 1]"], ["Alcohol Fueled Brewtality Live! [Disc 2]"], ["Black Sabbath"], ["Black Sabbath Vol. 4 (Remaster)"], ["Body Count"], ["Chemical Wedding"], ["The Best Of Buddy Guy - The Millenium Collection"], ["Prenda Minha"], ["Sozinho Remix Ao Vivo"], ["Minha Historia"], ["Afrociberdelia"], ["Da Lama Ao Caos"], ["Ac\u00fastico MTV live"], ["Cidade Negra - Hits"], ["Na Pista"], ["Ax\u00e9 Bahia 2001"], ["BBC Sessions [Disc 1] live"], ["Bongo Fury"], ["Carnaval 2001"], ["Chill: Brazil (Disc 1)"], ["Chill: Brazil (Disc 2)"], ["Garage Inc. (Disc 1)"], ["Greatest Hits II"], ["Greatest Kiss"], ["Heart of the Night"], ["International Superhits"], ["Into The Light"], ["Meus Momentos"], ["Minha Hist\u00f3ria"], ["MK III The Final Concerts [Disc 1]"], ["Physical Graffiti [Disc 1]"], ["Sambas De Enredo 2001"], ["Supernatural"], ["The Best of Ed Motta"], ["The Essential Miles Davis [Disc 1]"], ["The Essential Miles Davis [Disc 2]"], ["The Final Concerts (Disc 2)"], ["Up An' Atom"], ["Vin\u00edcius De Moraes - Sem Limite"], ["Vozes do MPB"], ["Chronicle, Vol. 1"], ["Chronicle, Vol. 2"], ["C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]"], ["C\u00e1ssia Eller - Sem Limite [Disc 1]"], ["Come Taste The Band"], ["Deep Purple In Rock"], ["Fireball"], ["Knocking at Your Back Door: The Best Of Deep Purple in the 80's"], ["Machine Head"], ["Purpendicular"], ["Slaves And Masters"], ["Stormbringer"], ["The Battle Rages On"], ["Vault: Def Leppard's Greatest Hits"], ["Outbreak"], ["Djavan Ao Vivo - Vol. 02"], ["Djavan Ao Vivo - Vol. 1"], ["Elis Regina-Minha Hist\u00f3ria"], ["The Cream Of Clapton"], ["Unplugged"], ["Album Of The Year"], ["Angel Dust"], ["King For A Day Fool For A Lifetime"], ["The Real Thing"], ["Deixa Entrar"], ["In Your Honor [Disc 1]"], ["In Your Honor [Disc 2]"], ["One By One"], ["The Colour And The Shape"], ["My Way: The Best Of Frank Sinatra [Disc 1]"], ["Roda De Funk"], ["As Can\u00e7\u00f5es de Eu Tu Eles"], ["Quanta Gente Veio Ver (Live)"], ["Quanta Gente Veio ver--B\u00f4nus De Carnaval"], ["Faceless"], ["American Idiot"], ["Appetite for Destruction"], ["Use Your Illusion I"], ["Use Your Illusion II"], ["Blue Moods"], ["A Matter of Life and Death"], ["A Real Dead One"], ["A Real Live One"], ["Brave New World"], ["Dance Of Death"], ["Fear Of The Dark"], ["Iron Maiden"], ["Killers"], ["Live After Death"], ["Live At Donington 1992 (Disc 1)"], ["Live At Donington 1992 (Disc 2)"], ["No Prayer For The Dying"], ["Piece Of Mind"], ["Powerslave"], ["Rock In Rio CD1"], ["Rock In Rio CD2"], ["Seventh Son of a Seventh Son"], ["Somewhere in Time"], ["The Number of The Beast"], ["The X Factor"], ["Virtual XI"], ["Sex Machine"], ["Emergency On Planet Earth"], ["Synkronized"], ["The Return Of The Space Cowboy"], ["Get Born"], ["Are You Experienced?"], ["Surfing with the Alien (Remastered)"], ["Jorge Ben Jor 25 Anos"], ["Jota Quest-1995"], ["Cafezinho"], ["Living After Midnight"], ["Unplugged live"], ["BBC Sessions [Disc 2] live"], ["Coda"], ["Houses Of The Holy"], ["In Through The Out Door"], ["IV"], ["Led Zeppelin I"], ["Led Zeppelin II"], ["Led Zeppelin III"], ["Physical Graffiti [Disc 2]"], ["Presence"], ["The Song Remains The Same (Disc 1)"], ["The Song Remains The Same (Disc 2)"], ["A TempestadeTempestade Ou O Livro Dos Dias"], ["Mais Do Mesmo"], ["Greatest Hits"], ["Lulu Santos - RCA 100 Anos De M\u00fasica - \u00c1lbum 01"], ["Lulu Santos - RCA 100 Anos De M\u00fasica - \u00c1lbum 02"], ["Misplaced Childhood"], ["Barulhinho Bom"], ["Seek And Shall Find: More Of The Best (1963-1981)"], ["The Best Of Men At Work"], ["Black Album"], ["Garage Inc. (Disc 2)"], ["Kill 'Em All"], ["Load"], ["Master Of Puppets"], ["ReLoad"], ["Ride The Lightning"], ["St. Anger"], ["...And Justice For All"], ["Miles Ahead"], ["Milton Nascimento Ao Vivo"], ["Minas"], ["Ace Of Spades"], ["Demorou..."], ["Motley Crue Greatest Hits"], ["From The Muddy Banks Of The Wishkah live"], ["Nevermind"], ["Compositores"], ["Olodum"], ["Ac\u00fastico MTV"], ["Arquivo II"], ["Arquivo Os Paralamas Do Sucesso"], ["Bark at the Moon (Remastered)"], ["Blizzard of Ozz"], ["Diary of a Madman (Remastered)"], ["No More Tears (Remastered)"], ["Tribute"], ["Walking Into Clarksdale"], ["Original Soundtracks 1"], ["The Beast Live"], ["Live On Two Legs live"], ["Pearl Jam"], ["Riot Act"], ["Ten"], ["Vs."], ["Dark Side Of The Moon"], ["Os C\u00e3es Ladram Mas A Caravana N\u00e3o P\u00e1ra"], ["Greatest Hits I"], ["News Of The World"], ["Out Of Time"], ["Green"], ["New Adventures In Hi-Fi"], ["The Best Of R.E.M.: The IRS Years"], ["Cesta B\u00e1sica"], ["Raul Seixas"], ["Blood Sugar Sex Magik"], ["By The Way"], ["Californication"], ["Retrospective I (1974-1980)"], ["Santana - As Years Go By"], ["Santana Live"], ["Maquinarama"], ["O Samba Pocon\u00e9"], ["Judas 0: B-Sides and Rarities"], ["Rotten Apples: Greatest Hits"], ["A-Sides"], ["Morning Dance"], ["In Step"], ["Core"], ["Mezmerize"], ["1997 Black Light Syndrome"], ["Live [Disc 1]"], ["Live [Disc 2]"], ["The Singles"], ["Beyond Good And Evil"], ["Pure Cult: The Best Of The Cult (For Rockers, Ravers, Lovers & Sinners) UK"], ["The Doors"], ["The Police Greatest Hits"], ["Hot Rocks, 1964-1971 (Disc 1)"], ["No Security"], ["Voodoo Lounge"], ["Tangents"], ["Transmission"], ["My Generation - The Very Best Of The Who"], ["Serie Sem Limite (Disc 1)"], ["Serie Sem Limite (Disc 2)"], ["Ac\u00fastico"], ["Volume Dois"], ["Battlestar Galactica: The Story So Far"], ["Battlestar Galactica, Season 3"], ["Heroes, Season 1"], ["Lost, Season 3"], ["Lost, Season 1"], ["Lost, Season 2"], ["Achtung Baby"], ["All That You Can't Leave Behind"], ["B-Sides 1980-1990"], ["How To Dismantle An Atomic Bomb"], ["Pop"], ["Rattle And Hum"], ["The Best Of 1980-1990"], ["War"], ["Zooropa"], ["UB40 The Best Of - Volume Two UK"], ["Diver Down"], ["The Best Of Van Halen, Vol. I"], ["Van Halen"], ["Van Halen III"], ["Contraband"], ["Vinicius De Moraes"], ["Ao Vivo IMPORT"], ["The Office, Season 1"], ["The Office, Season 2"], ["The Office, Season 3"], ["Un-Led-Ed"], ["Battlestar Galactica (Classic), Season 1"], ["Aquaman"], ["Instant Karma: The Amnesty International Campaign to Save Darfur"], ["Speak of the Devil"], ["20th Century Masters - The Millennium Collection: The Best of Scorpions"], ["House of Pain"], ["Radio Brasil (O Som da Jovem Vanguarda) - Seleccao de Henrique Amaro"], ["Cake: B-Sides and Rarities"], ["LOST, Season 4"], ["Quiet Songs"], ["Muso Ko"], ["Realize"], ["Every Kind of Light"], ["Duos II"], ["Worlds"], ["The Best of Beethoven"], ["Temple of the Dog"], ["Carry On"], ["Revelations"], ["Adorate Deum: Gregorian Chant from the Proper of the Mass"], ["Allegri: Miserere"], ["Pachelbel: Canon & Gigue"], ["Vivaldi: The Four Seasons"], ["Bach: Violin Concertos"], ["Bach: Goldberg Variations"], ["Bach: The Cello Suites"], ["Handel: The Messiah (Highlights)"], ["The World of Classical Favourites"], ["Sir Neville Marriner: A Celebration"], ["Mozart: Wind Concertos"], ["Haydn: Symphonies 99 - 104"], ["Beethoven: Symhonies Nos. 5 & 6"], ["A Soprano Inspired"], ["Great Opera Choruses"], ["Wagner: Favourite Overtures"], ["Faur\u00e9: Requiem, Ravel: Pavane & Others"], ["Tchaikovsky: The Nutcracker"], ["The Last Night of the Proms"], ["Puccini: Madama Butterfly - Highlights"], ["Holst: The Planets, Op. 32 & Vaughan Williams: Fantasies"], ["Pavarotti's Opera Made Easy"], ["Great Performances - Barber's Adagio and Other Romantic Favorites for Strings"], ["Carmina Burana"], ["A Copland Celebration, Vol. I"], ["Bach: Toccata & Fugue in D Minor"], ["Prokofiev: Symphony No.1"], ["Scheherazade"], ["Bach: The Brandenburg Concertos"], ["Chopin: Piano Concertos Nos. 1 & 2"], ["Mascagni: Cavalleria Rusticana"], ["Sibelius: Finlandia"], ["Beethoven Piano Sonatas: Moonlight & Pastorale"], ["Great Recordings of the Century - Mahler: Das Lied von der Erde"], ["Elgar: Cello Concerto & Vaughan Williams: Fantasias"], ["Adams, John: The Chairman Dances"], ["Tchaikovsky: 1812 Festival Overture, Op.49, Capriccio Italien & Beethoven: Wellington's Victory"], ["Palestrina: Missa Papae Marcelli & Allegri: Miserere"], ["Prokofiev: Romeo & Juliet"], ["Strauss: Waltzes"], ["Berlioz: Symphonie Fantastique"], ["Bizet: Carmen Highlights"], ["English Renaissance"], ["Handel: Music for the Royal Fireworks (Original Version 1749)"], ["Grieg: Peer Gynt Suites & Sibelius: Pell\u00e9as et M\u00e9lisande"], ["Mozart Gala: Famous Arias"], ["SCRIABIN: Vers la flamme"], ["Armada: Music from the Courts of England and Spain"], ["Mozart: Symphonies Nos. 40 & 41"], ["Back to Black"], ["Frank"], ["Carried to Dust (Bonus Track Version)"], ["Beethoven: Symphony No. 6 'Pastoral' Etc."], ["Bartok: Violin & Viola Concertos"], ["Mendelssohn: A Midsummer Night's Dream"], ["Bach: Orchestral Suites Nos. 1 - 4"], ["Charpentier: Divertissements, Airs & Concerts"], ["South American Getaway"], ["G\u00f3recki: Symphony No. 3"], ["Purcell: The Fairy Queen"], ["The Ultimate Relexation Album"], ["Purcell: Music for the Queen Mary"], ["Weill: The Seven Deadly Sins"], ["J.S. Bach: Chaconne, Suite in E Minor, Partita in E Major & Prelude, Fugue and Allegro"], ["Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps"], ["Szymanowski: Piano Works, Vol. 1"], ["Nielsen: The Six Symphonies"], ["Great Recordings of the Century: Paganini's 24 Caprices"], ["Liszt - 12 \u00c9tudes D'Execution Transcendante"], ["Great Recordings of the Century - Shubert: Schwanengesang, 4 Lieder"], ["Locatelli: Concertos for Violin, Strings and Continuo, Vol. 3"], ["Respighi:Pines of Rome"], ["Schubert: The Late String Quartets & String Quintet (3 CD's)"], ["Monteverdi: L'Orfeo"], ["Mozart: Chamber Music"], ["Koyaanisqatsi (Soundtrack from the Motion Picture)"]], "results": {"generated_sql": "SELECT title FROM albums", "generated_py": "albums[['title']]", "sql_exec_result": "[('For Those About To Rock We Salute You',), ('Balls to the Wall',), ('Restless and Wild',), ('Let There Be Rock',), ('Big Ones',), ('Jagged Little Pill',), ('Facelift',), ('Warner 25 Anos',), ('Plays Metallica By Four Cellos',), ('Audioslave',), ('Out Of Exile',), ('BackBeat Soundtrack',), ('The Best Of Billy Cobham',), ('Alcohol Fueled Brewtality Live! [Disc 1]',), ('Alcohol Fueled Brewtality Live! [Disc 2]',), ('Black Sabbath',), ('Black Sabbath Vol. 4 (Remaster)',), ('Body Count',), ('Chemical Wedding',), ('The Best Of Buddy Guy - The Millenium Collection',), ('Prenda Minha',), ('Sozinho Remix Ao Vivo',), ('Minha Historia',), ('Afrociberdelia',), ('Da Lama Ao Caos',), ('Ac\u00fastico MTV live',), ('Cidade Negra - Hits',), ('Na Pista',), ('Ax\u00e9 Bahia 2001',), ('BBC Sessions [Disc 1] live',), ('Bongo Fury',), ('Carnaval 2001',), ('Chill: Brazil (Disc 1)',), ('Chill: Brazil (Disc 2)',), ('Garage Inc. (Disc 1)',), ('Greatest Hits II',), ('Greatest Kiss',), ('Heart of the Night',), ('International Superhits',), ('Into The Light',), ('Meus Momentos',), ('Minha Hist\u00f3ria',), ('MK III The Final Concerts [Disc 1]',), ('Physical Graffiti [Disc 1]',), ('Sambas De Enredo 2001',), ('Supernatural',), ('The Best of Ed Motta',), ('The Essential Miles Davis [Disc 1]',), ('The Essential Miles Davis [Disc 2]',), ('The Final Concerts (Disc 2)',), (\"Up An' Atom\",), ('Vin\u00edcius De Moraes - Sem Limite',), ('Vozes do MPB',), ('Chronicle, Vol. 1',), ('Chronicle, Vol. 2',), ('C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]',), ('C\u00e1ssia Eller - Sem Limite [Disc 1]',), ('Come Taste The Band',), ('Deep Purple In Rock',), ('Fireball',), (\"Knocking at Your Back Door: The Best Of Deep Purple in the 80's\",), ('Machine Head',), ('Purpendicular',), ('Slaves And Masters',), ('Stormbringer',), ('The Battle Rages On',), (\"Vault: Def Leppard's Greatest Hits\",), ('Outbreak',), ('Djavan Ao Vivo - Vol. 02',), ('Djavan Ao Vivo - Vol. 1',), ('Elis Regina-Minha Hist\u00f3ria',), ('The Cream Of Clapton',), ('Unplugged',), ('Album Of The Year',), ('Angel Dust',), ('King For A Day Fool For A Lifetime',), ('The Real Thing',), ('Deixa Entrar',), ('In Your Honor [Disc 1]',), ('In Your Honor [Disc 2]',), ('One By One',), ('The Colour And The Shape',), ('My Way: The Best Of Frank Sinatra [Disc 1]',), ('Roda De Funk',), ('As Can\u00e7\u00f5es de Eu Tu Eles',), ('Quanta Gente Veio Ver (Live)',), ('Quanta Gente Veio ver--B\u00f4nus De Carnaval',), ('Faceless',), ('American Idiot',), ('Appetite for Destruction',), ('Use Your Illusion I',), ('Use Your Illusion II',), ('Blue Moods',), ('A Matter of Life and Death',), ('A Real Dead One',), ('A Real Live One',), ('Brave New World',), ('Dance Of Death',), ('Fear Of The Dark',), ('Iron Maiden',), ('Killers',), ('Live After Death',), ('Live At Donington 1992 (Disc 1)',), ('Live At Donington 1992 (Disc 2)',), ('No Prayer For The Dying',), ('Piece Of Mind',), ('Powerslave',), ('Rock In Rio CD1',), ('Rock In Rio CD2',), ('Seventh Son of a Seventh Son',), ('Somewhere in Time',), ('The Number of The Beast',), ('The X Factor',), ('Virtual XI',), ('Sex Machine',), ('Emergency On Planet Earth',), ('Synkronized',), ('The Return Of The Space Cowboy',), ('Get Born',), ('Are You Experienced?',), ('Surfing with the Alien (Remastered)',), ('Jorge Ben Jor 25 Anos',), ('Jota Quest-1995',), ('Cafezinho',), ('Living After Midnight',), ('Unplugged live',), ('BBC Sessions [Disc 2] live',), ('Coda',), ('Houses Of The Holy',), ('In Through The Out Door',), ('IV',), ('Led Zeppelin I',), ('Led Zeppelin II',), ('Led Zeppelin III',), ('Physical Graffiti [Disc 2]',), ('Presence',), ('The Song Remains The Same (Disc 1)',), ('The Song Remains The Same (Disc 2)',), ('A TempestadeTempestade Ou O Livro Dos Dias',), ('Mais Do Mesmo',), ('Greatest Hits',), ('Lulu Santos - RCA 100 Anos De M\u00fasica - \u00c1lbum 01',), ('Lulu Santos - RCA 100 Anos De M\u00fasica - \u00c1lbum 02',), ('Misplaced Childhood',), ('Barulhinho Bom',), ('Seek And Shall Find: More Of The Best (1963-1981)',), ('The Best Of Men At Work',), ('Black Album',), ('Garage Inc. (Disc 2)',), (\"Kill 'Em All\",), ('Load',), ('Master Of Puppets',), ('ReLoad',), ('Ride The Lightning',), ('St. Anger',), ('...And Justice For All',), ('Miles Ahead',), ('Milton Nascimento Ao Vivo',), ('Minas',), ('Ace Of Spades',), ('Demorou...',), ('Motley Crue Greatest Hits',), ('From The Muddy Banks Of The Wishkah live',), ('Nevermind',), ('Compositores',), ('Olodum',), ('Ac\u00fastico MTV',), ('Arquivo II',), ('Arquivo Os Paralamas Do Sucesso',), ('Bark at the Moon (Remastered)',), ('Blizzard of Ozz',), ('Diary of a Madman (Remastered)',), ('No More Tears (Remastered)',), ('Tribute',), ('Walking Into Clarksdale',), ('Original Soundtracks 1',), ('The Beast Live',), ('Live On Two Legs live',), ('Pearl Jam',), ('Riot Act',), ('Ten',), ('Vs.',), ('Dark Side Of The Moon',), ('Os C\u00e3es Ladram Mas A Caravana N\u00e3o P\u00e1ra',), ('Greatest Hits I',), ('News Of The World',), ('Out Of Time',), ('Green',), ('New Adventures In Hi-Fi',), ('The Best Of R.E.M.: The IRS Years',), ('Cesta B\u00e1sica',), ('Raul Seixas',), ('Blood Sugar Sex Magik',), ('By The Way',), ('Californication',), ('Retrospective I (1974-1980)',), ('Santana - As Years Go By',), ('Santana Live',), ('Maquinarama',), ('O Samba Pocon\u00e9',), ('Judas 0: B-Sides and Rarities',), ('Rotten Apples: Greatest Hits',), ('A-Sides',), ('Morning Dance',), ('In Step',), ('Core',), ('Mezmerize',), ('1997 Black Light Syndrome',), ('Live [Disc 1]',), ('Live [Disc 2]',), ('The Singles',), ('Beyond Good And Evil',), ('Pure Cult: The Best Of The Cult (For Rockers, Ravers, Lovers & Sinners) UK',), ('The Doors',), ('The Police Greatest Hits',), ('Hot Rocks, 1964-1971 (Disc 1)',), ('No Security',), ('Voodoo Lounge',), ('Tangents',), ('Transmission',), ('My Generation - The Very Best Of The Who',), ('Serie Sem Limite (Disc 1)',), ('Serie Sem Limite (Disc 2)',), ('Ac\u00fastico',), ('Volume Dois',), ('Battlestar Galactica: The Story So Far',), ('Battlestar Galactica, Season 3',), ('Heroes, Season 1',), ('Lost, Season 3',), ('Lost, Season 1',), ('Lost, Season 2',), ('Achtung Baby',), (\"All That You Can't Leave Behind\",), ('B-Sides 1980-1990',), ('How To Dismantle An Atomic Bomb',), ('Pop',), ('Rattle And Hum',), ('The Best Of 1980-1990',), ('War',), ('Zooropa',), ('UB40 The Best Of - Volume Two UK',), ('Diver Down',), ('The Best Of Van Halen, Vol. I',), ('Van Halen',), ('Van Halen III',), ('Contraband',), ('Vinicius De Moraes',), ('Ao Vivo IMPORT',), ('The Office, Season 1',), ('The Office, Season 2',), ('The Office, Season 3',), ('Un-Led-Ed',), ('Battlestar Galactica (Classic), Season 1',), ('Aquaman',), ('Instant Karma: The Amnesty International Campaign to Save Darfur',), ('Speak of the Devil',), ('20th Century Masters - The Millennium Collection: The Best of Scorpions',), ('House of Pain',), ('Radio Brasil (O Som da Jovem Vanguarda) - Seleccao de Henrique Amaro',), ('Cake: B-Sides and Rarities',), ('LOST, Season 4',), ('Quiet Songs',), ('Muso Ko',), ('Realize',), ('Every Kind of Light',), ('Duos II',), ('Worlds',), ('The Best of Beethoven',), ('Temple of the Dog',), ('Carry On',), ('Revelations',), ('Adorate Deum: Gregorian Chant from the Proper of the Mass',), ('Allegri: Miserere',), ('Pachelbel: Canon & Gigue',), ('Vivaldi: The Four Seasons',), ('Bach: Violin Concertos',), ('Bach: Goldberg Variations',), ('Bach: The Cello Suites',), ('Handel: The Messiah (Highlights)',), ('The World of Classical Favourites',), ('Sir Neville Marriner: A Celebration',), ('Mozart: Wind Concertos',), ('Haydn: Symphonies 99 - 104',), ('Beethoven: Symhonies Nos. 5 & 6',), ('A Soprano Inspired',), ('Great Opera Choruses',), ('Wagner: Favourite Overtures',), ('Faur\u00e9: Requiem, Ravel: Pavane & Others',), ('Tchaikovsky: The Nutcracker',), ('The Last Night of the Proms',), ('Puccini: Madama Butterfly - Highlights',), ('Holst: The Planets, Op. 32 & Vaughan Williams: Fantasies',), (\"Pavarotti's Opera Made Easy\",), (\"Great Performances - Barber's Adagio and Other Romantic Favorites for Strings\",), ('Carmina Burana',), ('A Copland Celebration, Vol. I',), ('Bach: Toccata & Fugue in D Minor',), ('Prokofiev: Symphony No.1',), ('Scheherazade',), ('Bach: The Brandenburg Concertos',), ('Chopin: Piano Concertos Nos. 1 & 2',), ('Mascagni: Cavalleria Rusticana',), ('Sibelius: Finlandia',), ('Beethoven Piano Sonatas: Moonlight & Pastorale',), ('Great Recordings of the Century - Mahler: Das Lied von der Erde',), ('Elgar: Cello Concerto & Vaughan Williams: Fantasias',), ('Adams, John: The Chairman Dances',), (\"Tchaikovsky: 1812 Festival Overture, Op.49, Capriccio Italien & Beethoven: Wellington's Victory\",), ('Palestrina: Missa Papae Marcelli & Allegri: Miserere',), ('Prokofiev: Romeo & Juliet',), ('Strauss: Waltzes',), ('Berlioz: Symphonie Fantastique',), ('Bizet: Carmen Highlights',), ('English Renaissance',), ('Handel: Music for the Royal Fireworks (Original Version 1749)',), ('Grieg: Peer Gynt Suites & Sibelius: Pell\u00e9as et M\u00e9lisande',), ('Mozart Gala: Famous Arias',), ('SCRIABIN: Vers la flamme',), ('Armada: Music from the Courts of England and Spain',), ('Mozart: Symphonies Nos. 40 & 41',), ('Back to Black',), ('Frank',), ('Carried to Dust (Bonus Track Version)',), (\"Beethoven: Symphony No. 6 'Pastoral' Etc.\",), ('Bartok: Violin & Viola Concertos',), (\"Mendelssohn: A Midsummer Night's Dream\",), ('Bach: Orchestral Suites Nos. 1 - 4',), ('Charpentier: Divertissements, Airs & Concerts',), ('South American Getaway',), ('G\u00f3recki: Symphony No. 3',), ('Purcell: The Fairy Queen',), ('The Ultimate Relexation Album',), ('Purcell: Music for the Queen Mary',), ('Weill: The Seven Deadly Sins',), ('J.S. Bach: Chaconne, Suite in E Minor, Partita in E Major & Prelude, Fugue and Allegro',), ('Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps',), ('Szymanowski: Piano Works, Vol. 1',), ('Nielsen: The Six Symphonies',), (\"Great Recordings of the Century: Paganini's 24 Caprices\",), (\"Liszt - 12 \u00c9tudes D'Execution Transcendante\",), ('Great Recordings of the Century - Shubert: Schwanengesang, 4 Lieder',), ('Locatelli: Concertos for Violin, Strings and Continuo, Vol. 3',), ('Respighi:Pines of Rome',), (\"Schubert: The Late String Quartets & String Quintet (3 CD's)\",), (\"Monteverdi: L'Orfeo\",), ('Mozart: Chamber Music',), ('Koyaanisqatsi (Soundtrack from the Motion Picture)',)]", "py_exec_result": "                                                 title\n0                For Those About To Rock We Salute You\n1                                    Balls to the Wall\n2                                    Restless and Wild\n3                                    Let There Be Rock\n4                                             Big Ones\n..                                                 ...\n342                             Respighi:Pines of Rome\n343  Schubert: The Late String Quartets & String Qu...\n344                                Monteverdi: L'Orfeo\n345                              Mozart: Chamber Music\n346  Koyaanisqatsi (Soundtrack from the Motion Pict...\n\n[347 rows x 1 columns]", "gold_answer": [["For Those About To Rock We Salute You"], ["Balls to the Wall"], ["Restless and Wild"], ["Let There Be Rock"], ["Big Ones"], ["Jagged Little Pill"], ["Facelift"], ["Warner 25 Anos"], ["Plays Metallica By Four Cellos"], ["Audioslave"], ["Out Of Exile"], ["BackBeat Soundtrack"], ["The Best Of Billy Cobham"], ["Alcohol Fueled Brewtality Live! [Disc 1]"], ["Alcohol Fueled Brewtality Live! [Disc 2]"], ["Black Sabbath"], ["Black Sabbath Vol. 4 (Remaster)"], ["Body Count"], ["Chemical Wedding"], ["The Best Of Buddy Guy - The Millenium Collection"], ["Prenda Minha"], ["Sozinho Remix Ao Vivo"], ["Minha Historia"], ["Afrociberdelia"], ["Da Lama Ao Caos"], ["Ac\u00fastico MTV live"], ["Cidade Negra - Hits"], ["Na Pista"], ["Ax\u00e9 Bahia 2001"], ["BBC Sessions [Disc 1] live"], ["Bongo Fury"], ["Carnaval 2001"], ["Chill: Brazil (Disc 1)"], ["Chill: Brazil (Disc 2)"], ["Garage Inc. (Disc 1)"], ["Greatest Hits II"], ["Greatest Kiss"], ["Heart of the Night"], ["International Superhits"], ["Into The Light"], ["Meus Momentos"], ["Minha Hist\u00f3ria"], ["MK III The Final Concerts [Disc 1]"], ["Physical Graffiti [Disc 1]"], ["Sambas De Enredo 2001"], ["Supernatural"], ["The Best of Ed Motta"], ["The Essential Miles Davis [Disc 1]"], ["The Essential Miles Davis [Disc 2]"], ["The Final Concerts (Disc 2)"], ["Up An' Atom"], ["Vin\u00edcius De Moraes - Sem Limite"], ["Vozes do MPB"], ["Chronicle, Vol. 1"], ["Chronicle, Vol. 2"], ["C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]"], ["C\u00e1ssia Eller - Sem Limite [Disc 1]"], ["Come Taste The Band"], ["Deep Purple In Rock"], ["Fireball"], ["Knocking at Your Back Door: The Best Of Deep Purple in the 80's"], ["Machine Head"], ["Purpendicular"], ["Slaves And Masters"], ["Stormbringer"], ["The Battle Rages On"], ["Vault: Def Leppard's Greatest Hits"], ["Outbreak"], ["Djavan Ao Vivo - Vol. 02"], ["Djavan Ao Vivo - Vol. 1"], ["Elis Regina-Minha Hist\u00f3ria"], ["The Cream Of Clapton"], ["Unplugged"], ["Album Of The Year"], ["Angel Dust"], ["King For A Day Fool For A Lifetime"], ["The Real Thing"], ["Deixa Entrar"], ["In Your Honor [Disc 1]"], ["In Your Honor [Disc 2]"], ["One By One"], ["The Colour And The Shape"], ["My Way: The Best Of Frank Sinatra [Disc 1]"], ["Roda De Funk"], ["As Can\u00e7\u00f5es de Eu Tu Eles"], ["Quanta Gente Veio Ver (Live)"], ["Quanta Gente Veio ver--B\u00f4nus De Carnaval"], ["Faceless"], ["American Idiot"], ["Appetite for Destruction"], ["Use Your Illusion I"], ["Use Your Illusion II"], ["Blue Moods"], ["A Matter of Life and Death"], ["A Real Dead One"], ["A Real Live One"], ["Brave New World"], ["Dance Of Death"], ["Fear Of The Dark"], ["Iron Maiden"], ["Killers"], ["Live After Death"], ["Live At Donington 1992 (Disc 1)"], ["Live At Donington 1992 (Disc 2)"], ["No Prayer For The Dying"], ["Piece Of Mind"], ["Powerslave"], ["Rock In Rio CD1"], ["Rock In Rio CD2"], ["Seventh Son of a Seventh Son"], ["Somewhere in Time"], ["The Number of The Beast"], ["The X Factor"], ["Virtual XI"], ["Sex Machine"], ["Emergency On Planet Earth"], ["Synkronized"], ["The Return Of The Space Cowboy"], ["Get Born"], ["Are You Experienced?"], ["Surfing with the Alien (Remastered)"], ["Jorge Ben Jor 25 Anos"], ["Jota Quest-1995"], ["Cafezinho"], ["Living After Midnight"], ["Unplugged live"], ["BBC Sessions [Disc 2] live"], ["Coda"], ["Houses Of The Holy"], ["In Through The Out Door"], ["IV"], ["Led Zeppelin I"], ["Led Zeppelin II"], ["Led Zeppelin III"], ["Physical Graffiti [Disc 2]"], ["Presence"], ["The Song Remains The Same (Disc 1)"], ["The Song Remains The Same (Disc 2)"], ["A TempestadeTempestade Ou O Livro Dos Dias"], ["Mais Do Mesmo"], ["Greatest Hits"], ["Lulu Santos - RCA 100 Anos De M\u00fasica - \u00c1lbum 01"], ["Lulu Santos - RCA 100 Anos De M\u00fasica - \u00c1lbum 02"], ["Misplaced Childhood"], ["Barulhinho Bom"], ["Seek And Shall Find: More Of The Best (1963-1981)"], ["The Best Of Men At Work"], ["Black Album"], ["Garage Inc. (Disc 2)"], ["Kill 'Em All"], ["Load"], ["Master Of Puppets"], ["ReLoad"], ["Ride The Lightning"], ["St. Anger"], ["...And Justice For All"], ["Miles Ahead"], ["Milton Nascimento Ao Vivo"], ["Minas"], ["Ace Of Spades"], ["Demorou..."], ["Motley Crue Greatest Hits"], ["From The Muddy Banks Of The Wishkah live"], ["Nevermind"], ["Compositores"], ["Olodum"], ["Ac\u00fastico MTV"], ["Arquivo II"], ["Arquivo Os Paralamas Do Sucesso"], ["Bark at the Moon (Remastered)"], ["Blizzard of Ozz"], ["Diary of a Madman (Remastered)"], ["No More Tears (Remastered)"], ["Tribute"], ["Walking Into Clarksdale"], ["Original Soundtracks 1"], ["The Beast Live"], ["Live On Two Legs live"], ["Pearl Jam"], ["Riot Act"], ["Ten"], ["Vs."], ["Dark Side Of The Moon"], ["Os C\u00e3es Ladram Mas A Caravana N\u00e3o P\u00e1ra"], ["Greatest Hits I"], ["News Of The World"], ["Out Of Time"], ["Green"], ["New Adventures In Hi-Fi"], ["The Best Of R.E.M.: The IRS Years"], ["Cesta B\u00e1sica"], ["Raul Seixas"], ["Blood Sugar Sex Magik"], ["By The Way"], ["Californication"], ["Retrospective I (1974-1980)"], ["Santana - As Years Go By"], ["Santana Live"], ["Maquinarama"], ["O Samba Pocon\u00e9"], ["Judas 0: B-Sides and Rarities"], ["Rotten Apples: Greatest Hits"], ["A-Sides"], ["Morning Dance"], ["In Step"], ["Core"], ["Mezmerize"], ["1997 Black Light Syndrome"], ["Live [Disc 1]"], ["Live [Disc 2]"], ["The Singles"], ["Beyond Good And Evil"], ["Pure Cult: The Best Of The Cult (For Rockers, Ravers, Lovers & Sinners) UK"], ["The Doors"], ["The Police Greatest Hits"], ["Hot Rocks, 1964-1971 (Disc 1)"], ["No Security"], ["Voodoo Lounge"], ["Tangents"], ["Transmission"], ["My Generation - The Very Best Of The Who"], ["Serie Sem Limite (Disc 1)"], ["Serie Sem Limite (Disc 2)"], ["Ac\u00fastico"], ["Volume Dois"], ["Battlestar Galactica: The Story So Far"], ["Battlestar Galactica, Season 3"], ["Heroes, Season 1"], ["Lost, Season 3"], ["Lost, Season 1"], ["Lost, Season 2"], ["Achtung Baby"], ["All That You Can't Leave Behind"], ["B-Sides 1980-1990"], ["How To Dismantle An Atomic Bomb"], ["Pop"], ["Rattle And Hum"], ["The Best Of 1980-1990"], ["War"], ["Zooropa"], ["UB40 The Best Of - Volume Two UK"], ["Diver Down"], ["The Best Of Van Halen, Vol. I"], ["Van Halen"], ["Van Halen III"], ["Contraband"], ["Vinicius De Moraes"], ["Ao Vivo IMPORT"], ["The Office, Season 1"], ["The Office, Season 2"], ["The Office, Season 3"], ["Un-Led-Ed"], ["Battlestar Galactica (Classic), Season 1"], ["Aquaman"], ["Instant Karma: The Amnesty International Campaign to Save Darfur"], ["Speak of the Devil"], ["20th Century Masters - The Millennium Collection: The Best of Scorpions"], ["House of Pain"], ["Radio Brasil (O Som da Jovem Vanguarda) - Seleccao de Henrique Amaro"], ["Cake: B-Sides and Rarities"], ["LOST, Season 4"], ["Quiet Songs"], ["Muso Ko"], ["Realize"], ["Every Kind of Light"], ["Duos II"], ["Worlds"], ["The Best of Beethoven"], ["Temple of the Dog"], ["Carry On"], ["Revelations"], ["Adorate Deum: Gregorian Chant from the Proper of the Mass"], ["Allegri: Miserere"], ["Pachelbel: Canon & Gigue"], ["Vivaldi: The Four Seasons"], ["Bach: Violin Concertos"], ["Bach: Goldberg Variations"], ["Bach: The Cello Suites"], ["Handel: The Messiah (Highlights)"], ["The World of Classical Favourites"], ["Sir Neville Marriner: A Celebration"], ["Mozart: Wind Concertos"], ["Haydn: Symphonies 99 - 104"], ["Beethoven: Symhonies Nos. 5 & 6"], ["A Soprano Inspired"], ["Great Opera Choruses"], ["Wagner: Favourite Overtures"], ["Faur\u00e9: Requiem, Ravel: Pavane & Others"], ["Tchaikovsky: The Nutcracker"], ["The Last Night of the Proms"], ["Puccini: Madama Butterfly - Highlights"], ["Holst: The Planets, Op. 32 & Vaughan Williams: Fantasies"], ["Pavarotti's Opera Made Easy"], ["Great Performances - Barber's Adagio and Other Romantic Favorites for Strings"], ["Carmina Burana"], ["A Copland Celebration, Vol. I"], ["Bach: Toccata & Fugue in D Minor"], ["Prokofiev: Symphony No.1"], ["Scheherazade"], ["Bach: The Brandenburg Concertos"], ["Chopin: Piano Concertos Nos. 1 & 2"], ["Mascagni: Cavalleria Rusticana"], ["Sibelius: Finlandia"], ["Beethoven Piano Sonatas: Moonlight & Pastorale"], ["Great Recordings of the Century - Mahler: Das Lied von der Erde"], ["Elgar: Cello Concerto & Vaughan Williams: Fantasias"], ["Adams, John: The Chairman Dances"], ["Tchaikovsky: 1812 Festival Overture, Op.49, Capriccio Italien & Beethoven: Wellington's Victory"], ["Palestrina: Missa Papae Marcelli & Allegri: Miserere"], ["Prokofiev: Romeo & Juliet"], ["Strauss: Waltzes"], ["Berlioz: Symphonie Fantastique"], ["Bizet: Carmen Highlights"], ["English Renaissance"], ["Handel: Music for the Royal Fireworks (Original Version 1749)"], ["Grieg: Peer Gynt Suites & Sibelius: Pell\u00e9as et M\u00e9lisande"], ["Mozart Gala: Famous Arias"], ["SCRIABIN: Vers la flamme"], ["Armada: Music from the Courts of England and Spain"], ["Mozart: Symphonies Nos. 40 & 41"], ["Back to Black"], ["Frank"], ["Carried to Dust (Bonus Track Version)"], ["Beethoven: Symphony No. 6 'Pastoral' Etc."], ["Bartok: Violin & Viola Concertos"], ["Mendelssohn: A Midsummer Night's Dream"], ["Bach: Orchestral Suites Nos. 1 - 4"], ["Charpentier: Divertissements, Airs & Concerts"], ["South American Getaway"], ["G\u00f3recki: Symphony No. 3"], ["Purcell: The Fairy Queen"], ["The Ultimate Relexation Album"], ["Purcell: Music for the Queen Mary"], ["Weill: The Seven Deadly Sins"], ["J.S. Bach: Chaconne, Suite in E Minor, Partita in E Major & Prelude, Fugue and Allegro"], ["Prokofiev: Symphony No.5 & Stravinksy: Le Sacre Du Printemps"], ["Szymanowski: Piano Works, Vol. 1"], ["Nielsen: The Six Symphonies"], ["Great Recordings of the Century: Paganini's 24 Caprices"], ["Liszt - 12 \u00c9tudes D'Execution Transcendante"], ["Great Recordings of the Century - Shubert: Schwanengesang, 4 Lieder"], ["Locatelli: Concertos for Violin, Strings and Continuo, Vol. 3"], ["Respighi:Pines of Rome"], ["Schubert: The Late String Quartets & String Quintet (3 CD's)"], ["Monteverdi: L'Orfeo"], ["Mozart: Chamber Music"], ["Koyaanisqatsi (Soundtrack from the Motion Picture)"]], "gold_sql": "SELECT title FROM albums;", "gold_py": "albums['title']"}}
{"db_id": "store_1", "query": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";", "query_toks": ["SELECT", "sum", "(", "total", ")", "FROM", "invoices", "WHERE", "billing_city", "=", "``", "Chicago", "''", "AND", "billing_state", "=", "``", "IL", "''", ";"], "query_toks_no_value": ["select", "sum", "(", "total", ")", "from", "invoices", "where", "billing_city", "=", "value", "and", "billing_state", "=", "value"], "question": "List total amount of  invoice from Chicago, IL.", "question_toks": ["List", "total", "amount", "of", "invoice", "from", "Chicago", ",", "IL", "."], "sql": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[4, [0, [0, 46, false], null]]]], "where": [[false, 2, [0, [0, 42, false], null], "\"Chicago\"", null], "and", [false, 2, [0, [0, 43, false], null], "\"IL\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(invoices[(invoices['billing_city'] == 'Chicago') & (invoices['billing_state'] == 'IL')]['total'].sum())", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [[43.62]], "results": {"generated_sql": "SELECT sum(total) FROM invoices WHERE city = 'Chicago' AND state = 'IL'", "generated_py": "invoices[(invoices['billing_city'] == 'Chicago') & (invoices['billing_state'] == 'IL')]['total'].sum()", "sql_exec_result": "None", "py_exec_result": "43.62", "gold_answer": [[43.62]], "gold_sql": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";", "gold_py": "pd.Series(invoices[(invoices['billing_city'] == 'Chicago') & (invoices['billing_state'] == 'IL')]['total'].sum())"}}
{"db_id": "store_1", "query": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";", "query_toks": ["SELECT", "sum", "(", "total", ")", "FROM", "invoices", "WHERE", "billing_city", "=", "``", "Chicago", "''", "AND", "billing_state", "=", "``", "IL", "''", ";"], "query_toks_no_value": ["select", "sum", "(", "total", ")", "from", "invoices", "where", "billing_city", "=", "value", "and", "billing_state", "=", "value"], "question": "What are the total amount of money in the invoices billed from Chicago, Illinois?", "question_toks": ["What", "are", "the", "total", "amount", "of", "money", "in", "the", "invoices", "billed", "from", "Chicago", ",", "Illinois", "?"], "sql": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[4, [0, [0, 46, false], null]]]], "where": [[false, 2, [0, [0, 42, false], null], "\"Chicago\"", null], "and", [false, 2, [0, [0, 43, false], null], "\"IL\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(invoices[(invoices['billing_city'] == 'Chicago') & (invoices['billing_state'] == 'IL')]['total'].sum())", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [[43.62]], "results": {"generated_sql": "SELECT sum(total) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'Illinois'", "generated_py": "invoices[(invoices['billing_city'] == 'Chicago') & (invoices['billing_state'] == 'Illinois')]['total'].sum()", "sql_exec_result": "[(None,)]", "py_exec_result": "0.0", "gold_answer": [[43.62]], "gold_sql": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";", "gold_py": "pd.Series(invoices[(invoices['billing_city'] == 'Chicago') & (invoices['billing_state'] == 'IL')]['total'].sum())"}}
{"db_id": "store_1", "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "invoices", "WHERE", "billing_city", "=", "``", "Chicago", "''", "AND", "billing_state", "=", "``", "IL", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "invoices", "where", "billing_city", "=", "value", "and", "billing_state", "=", "value"], "question": "List the number of invoices from Chicago, IL.", "question_toks": ["List", "the", "number", "of", "invoices", "from", "Chicago", ",", "IL", "."], "sql": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 42, false], null], "\"Chicago\"", null], "and", [false, 2, [0, [0, 43, false], null], "\"IL\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(invoices[(invoices['billing_city'] == 'Chicago') & (invoices['billing_state'] == 'IL')].shape[0])", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [[7]], "results": {"generated_sql": "SELECT count(*) FROM invoices WHERE city = 'Chicago' AND state = 'IL'", "generated_py": "invoices[(invoices['billing_city'] == 'Chicago') & (invoices['billing_state'] == 'IL')].shape[0]", "sql_exec_result": "None", "py_exec_result": "7", "gold_answer": [[7]], "gold_sql": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";", "gold_py": "pd.Series(invoices[(invoices['billing_city'] == 'Chicago') & (invoices['billing_state'] == 'IL')].shape[0])"}}
{"db_id": "store_1", "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "invoices", "WHERE", "billing_city", "=", "``", "Chicago", "''", "AND", "billing_state", "=", "``", "IL", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "invoices", "where", "billing_city", "=", "value", "and", "billing_state", "=", "value"], "question": "How many invoices were billed from Chicago, IL?", "question_toks": ["How", "many", "invoices", "were", "billed", "from", "Chicago", ",", "IL", "?"], "sql": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 42, false], null], "\"Chicago\"", null], "and", [false, 2, [0, [0, 43, false], null], "\"IL\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(invoices[(invoices['billing_city'] == 'Chicago') & (invoices['billing_state'] == 'IL')].shape[0])", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [[7]], "results": {"generated_sql": "SELECT count(*) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL'", "generated_py": "invoices[invoices['billing_city'] == 'Chicago'].shape[0]", "sql_exec_result": "[(7,)]", "py_exec_result": "7", "gold_answer": [[7]], "gold_sql": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";", "gold_py": "pd.Series(invoices[(invoices['billing_city'] == 'Chicago') & (invoices['billing_state'] == 'IL')].shape[0])"}}
{"db_id": "store_1", "query": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";", "query_toks": ["SELECT", "company", "FROM", "customers", "WHERE", "first_name", "=", "``", "Eduardo", "''", "AND", "last_name", "=", "``", "Martins", "''", ";"], "query_toks_no_value": ["select", "company", "from", "customers", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "Eduardo Martins is a customer at which company?", "question_toks": ["Eduardo", "Martins", "is", "a", "customer", "at", "which", "company", "?"], "sql": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 26, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"Eduardo\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"Martins\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "customers[(customers['first_name'] == 'Eduardo') & (customers['last_name'] == 'Martins')]['company']", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [["Woodstock Discos"]], "results": {"generated_sql": "SELECT company FROM customers WHERE first_name = 'Eduardo' AND last_name = 'Martins'", "generated_py": "customers[customers['first_name'] == 'Eduardo']['company']", "sql_exec_result": "[('Woodstock Discos',)]", "py_exec_result": "9    Woodstock Discos\nName: company, dtype: object", "gold_answer": [["Woodstock Discos"]], "gold_sql": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";", "gold_py": "customers[(customers['first_name'] == 'Eduardo') & (customers['last_name'] == 'Martins')]['company']"}}
{"db_id": "store_1", "query": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";", "query_toks": ["SELECT", "company", "FROM", "customers", "WHERE", "first_name", "=", "``", "Eduardo", "''", "AND", "last_name", "=", "``", "Martins", "''", ";"], "query_toks_no_value": ["select", "company", "from", "customers", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is the company where Eduardo Martins is a customer?", "question_toks": ["What", "is", "the", "company", "where", "Eduardo", "Martins", "is", "a", "customer", "?"], "sql": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 26, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"Eduardo\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"Martins\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "customers[(customers['first_name'] == 'Eduardo') & (customers['last_name'] == 'Martins')]['company']", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [["Woodstock Discos"]], "results": {"generated_sql": "SELECT company FROM customers WHERE id = (SELECT customer_id FROM employees WHERE first_name = 'Eduardo' AND last_name = 'Martins')", "generated_py": "customers[customers['first_name'] == 'Eduardo']['company']", "sql_exec_result": "None", "py_exec_result": "9    Woodstock Discos\nName: company, dtype: object", "gold_answer": [["Woodstock Discos"]], "gold_sql": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";", "gold_py": "customers[(customers['first_name'] == 'Eduardo') & (customers['last_name'] == 'Martins')]['company']"}}
{"db_id": "store_1", "query": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";", "query_toks": ["SELECT", "email", ",", "phone", "FROM", "customers", "WHERE", "first_name", "=", "``", "Astrid", "''", "AND", "last_name", "=", "``", "Gruber", "''", ";"], "query_toks_no_value": ["select", "email", ",", "phone", "from", "customers", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is Astrid Gruber's email and phone number?", "question_toks": ["What", "is", "Astrid", "Gruber", "'s", "email", "and", "phone", "number", "?"], "sql": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 32, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"Astrid\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"Gruber\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "customers[(customers['first_name'] == 'Astrid') & (customers['last_name'] == 'Gruber')][['email', 'phone']]", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [["astrid.gruber@apple.at", "+43 01 5134505"]], "results": {"generated_sql": "SELECT email, phone FROM customers WHERE first_name = 'Astrid' AND last_name = 'Gruber'", "generated_py": "customers[customers['first_name'] == 'Astrid'][['email', 'phone']]", "sql_exec_result": "[('astrid.gruber@apple.at', '+43 01 5134505')]", "py_exec_result": "                    email           phone\n6  astrid.gruber@apple.at  +43 01 5134505", "gold_answer": [["astrid.gruber@apple.at", "+43 01 5134505"]], "gold_sql": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";", "gold_py": "customers[(customers['first_name'] == 'Astrid') & (customers['last_name'] == 'Gruber')][['email', 'phone']]"}}
{"db_id": "store_1", "query": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";", "query_toks": ["SELECT", "email", ",", "phone", "FROM", "customers", "WHERE", "first_name", "=", "``", "Astrid", "''", "AND", "last_name", "=", "``", "Gruber", "''", ";"], "query_toks_no_value": ["select", "email", ",", "phone", "from", "customers", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is the email and phone number of Astrid Gruber the customer?", "question_toks": ["What", "is", "the", "email", "and", "phone", "number", "of", "Astrid", "Gruber", "the", "customer", "?"], "sql": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 32, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"Astrid\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"Gruber\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "customers[(customers['first_name'] == 'Astrid') & (customers['last_name'] == 'Gruber')][['email', 'phone']]", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [["astrid.gruber@apple.at", "+43 01 5134505"]], "results": {"generated_sql": "SELECT email, phone FROM customers WHERE last_name = 'Gruber'", "generated_py": "pd.Series(customers[customers['first_name'] == 'Astrid'][['email', 'phone']])", "sql_exec_result": "[('astrid.gruber@apple.at', '+43 01 5134505')]", "py_exec_result": "None", "gold_answer": [["astrid.gruber@apple.at", "+43 01 5134505"]], "gold_sql": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";", "gold_py": "customers[(customers['first_name'] == 'Astrid') & (customers['last_name'] == 'Gruber')][['email', 'phone']]"}}
{"db_id": "store_1", "query": "SELECT count(*) FROM customers WHERE city = \"Prague\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customers", "WHERE", "city", "=", "``", "Prague", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers", "where", "city", "=", "value"], "question": "How many customers live in Prague city?", "question_toks": ["How", "many", "customers", "live", "in", "Prague", "city", "?"], "sql": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 28, false], null], "\"Prague\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(customers[customers['city'] == 'Prague'].shape[0])", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [[2]], "results": {"generated_sql": "SELECT count(*) FROM customers WHERE city = 'Prague'", "generated_py": "pd.Series(customers[customers['city'] == 'Prague'].shape[0])", "sql_exec_result": "[(2,)]", "py_exec_result": "0    2\ndtype: int64", "gold_answer": [[2]], "gold_sql": "SELECT count(*) FROM customers WHERE city = \"Prague\";", "gold_py": "pd.Series(customers[customers['city'] == 'Prague'].shape[0])"}}
{"db_id": "store_1", "query": "SELECT count(*) FROM customers WHERE city = \"Prague\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customers", "WHERE", "city", "=", "``", "Prague", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers", "where", "city", "=", "value"], "question": "How many customers live in the city of Prague?", "question_toks": ["How", "many", "customers", "live", "in", "the", "city", "of", "Prague", "?"], "sql": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 28, false], null], "\"Prague\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(customers[customers['city'] == 'Prague'].shape[0])", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [[2]], "results": {"generated_sql": "SELECT count(*) FROM customers WHERE city = 'Prague'", "generated_py": "pd.Series(customers[customers['city'] == 'Prague'].shape[0])", "sql_exec_result": "[(2,)]", "py_exec_result": "0    2\ndtype: int64", "gold_answer": [[2]], "gold_sql": "SELECT count(*) FROM customers WHERE city = \"Prague\";", "gold_py": "pd.Series(customers[customers['city'] == 'Prague'].shape[0])"}}
{"db_id": "store_1", "query": "SELECT count(*) FROM customers WHERE state = \"CA\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customers", "WHERE", "state", "=", "``", "CA", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers", "where", "state", "=", "value"], "question": "How many customers in state of CA?", "question_toks": ["How", "many", "customers", "in", "state", "of", "CA", "?"], "sql": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 29, false], null], "\"CA\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(customers[customers['state'] == 'CA'].shape[0])", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [[3]], "results": {"generated_sql": "SELECT count(*) FROM customers WHERE state = 'CA'", "generated_py": "customers[customers['state'] == 'CA'].shape[0]", "sql_exec_result": "[(3,)]", "py_exec_result": "3", "gold_answer": [[3]], "gold_sql": "SELECT count(*) FROM customers WHERE state = \"CA\";", "gold_py": "pd.Series(customers[customers['state'] == 'CA'].shape[0])"}}
{"db_id": "store_1", "query": "SELECT count(*) FROM customers WHERE state = \"CA\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customers", "WHERE", "state", "=", "``", "CA", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers", "where", "state", "=", "value"], "question": "How many customers are from California?", "question_toks": ["How", "many", "customers", "are", "from", "California", "?"], "sql": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 29, false], null], "\"CA\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(customers[customers['state'] == 'CA'].shape[0])", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [[3]], "results": {"generated_sql": "SELECT count(*) FROM customers WHERE state = 'California'", "generated_py": "customers[customers['state'] == 'California'].shape[0]", "sql_exec_result": "[(0,)]", "py_exec_result": "0", "gold_answer": [[3]], "gold_sql": "SELECT count(*) FROM customers WHERE state = \"CA\";", "gold_py": "pd.Series(customers[customers['state'] == 'CA'].shape[0])"}}
{"db_id": "store_1", "query": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "query_toks": ["SELECT", "title", ",", "phone", ",", "hire_date", "FROM", "employees", "WHERE", "first_name", "=", "``", "Nancy", "''", "AND", "last_name", "=", "``", "Edwards", "''", ";"], "query_toks_no_value": ["select", "title", ",", "phone", ",", "hire_date", "from", "employees", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is the title, phone and hire date of Nancy Edwards?", "question_toks": ["What", "is", "the", "title", ",", "phone", "and", "hire", "date", "of", "Nancy", "Edwards", "?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 20, false], null]], [0, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Nancy\"", null], "and", [false, 2, [0, [0, 9, false], null], "\"Edwards\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "employees[(employees['first_name'] == 'Nancy') & (employees['last_name'] == 'Edwards')][['title', 'phone', 'hire_date']]", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [["Sales Manager", "+1 (403) 262-3443", "2002-05-01 00:00:00"]], "results": {"generated_sql": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'", "generated_py": "employees[employees['last_name'] == 'Edwards'][['title', 'phone', 'hire_date']]", "sql_exec_result": "[('Sales Manager', '+1 (403) 262-3443', '2002-05-01 00:00:00')]", "py_exec_result": "           title              phone            hire_date\n1  Sales Manager  +1 (403) 262-3443  2002-05-01 00:00:00", "gold_answer": [["Sales Manager", "+1 (403) 262-3443", "2002-05-01 00:00:00"]], "gold_sql": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "gold_py": "employees[(employees['first_name'] == 'Nancy') & (employees['last_name'] == 'Edwards')][['title', 'phone', 'hire_date']]"}}
{"db_id": "store_1", "query": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "query_toks": ["SELECT", "title", ",", "phone", ",", "hire_date", "FROM", "employees", "WHERE", "first_name", "=", "``", "Nancy", "''", "AND", "last_name", "=", "``", "Edwards", "''", ";"], "query_toks_no_value": ["select", "title", ",", "phone", ",", "hire_date", "from", "employees", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is the title, phone number and hire date for the employee named Nancy Edwards?", "question_toks": ["What", "is", "the", "title", ",", "phone", "number", "and", "hire", "date", "for", "the", "employee", "named", "Nancy", "Edwards", "?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 20, false], null]], [0, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Nancy\"", null], "and", [false, 2, [0, [0, 9, false], null], "\"Edwards\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "employees[(employees['first_name'] == 'Nancy') & (employees['last_name'] == 'Edwards')][['title', 'phone', 'hire_date']]", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [["Sales Manager", "+1 (403) 262-3443", "2002-05-01 00:00:00"]], "results": {"generated_sql": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'", "generated_py": "employees[employees['first_name'] == 'Nancy'][['title', 'phone', 'hire_date']]", "sql_exec_result": "[('Sales Manager', '+1 (403) 262-3443', '2002-05-01 00:00:00')]", "py_exec_result": "           title              phone            hire_date\n1  Sales Manager  +1 (403) 262-3443  2002-05-01 00:00:00", "gold_answer": [["Sales Manager", "+1 (403) 262-3443", "2002-05-01 00:00:00"]], "gold_sql": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "gold_py": "employees[(employees['first_name'] == 'Nancy') & (employees['last_name'] == 'Edwards')][['title', 'phone', 'hire_date']]"}}
{"db_id": "store_1", "query": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "query_toks": ["SELECT", "address", "FROM", "employees", "WHERE", "first_name", "=", "``", "Nancy", "''", "AND", "last_name", "=", "``", "Edwards", "''", ";"], "query_toks_no_value": ["select", "address", "from", "employees", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is the address of employee Nancy Edwards?", "question_toks": ["What", "is", "the", "address", "of", "employee", "Nancy", "Edwards", "?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Nancy\"", null], "and", [false, 2, [0, [0, 9, false], null], "\"Edwards\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "employees[(employees['first_name'] == 'Nancy') & (employees['last_name'] == 'Edwards')]['address']", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [["825 8 Ave SW"]], "results": {"generated_sql": "SELECT address FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'", "generated_py": "employees[employees['first_name'] == 'Nancy']['address']", "sql_exec_result": "[('825 8 Ave SW',)]", "py_exec_result": "1    825 8 Ave SW\nName: address, dtype: object", "gold_answer": [["825 8 Ave SW"]], "gold_sql": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "gold_py": "employees[(employees['first_name'] == 'Nancy') & (employees['last_name'] == 'Edwards')]['address']"}}
{"db_id": "store_1", "query": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "query_toks": ["SELECT", "address", "FROM", "employees", "WHERE", "first_name", "=", "``", "Nancy", "''", "AND", "last_name", "=", "``", "Edwards", "''", ";"], "query_toks_no_value": ["select", "address", "from", "employees", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is Nancy Edwards's address?", "question_toks": ["What", "is", "Nancy", "Edwards", "'s", "address", "?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Nancy\"", null], "and", [false, 2, [0, [0, 9, false], null], "\"Edwards\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "employees[(employees['first_name'] == 'Nancy') & (employees['last_name'] == 'Edwards')]['address']", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [["825 8 Ave SW"]], "results": {"generated_sql": "SELECT address FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'", "generated_py": "employees[employees['first_name'] == 'Nancy']['address']", "sql_exec_result": "[('825 8 Ave SW',)]", "py_exec_result": "1    825 8 Ave SW\nName: address, dtype: object", "gold_answer": [["825 8 Ave SW"]], "gold_sql": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "gold_py": "employees[(employees['first_name'] == 'Nancy') & (employees['last_name'] == 'Edwards')]['address']"}}
{"db_id": "store_1", "query": "SELECT count(*) FROM employees WHERE country = \"Canada\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "employees", "WHERE", "country", "=", "``", "Canada", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employees", "where", "country", "=", "value"], "question": "How many employees are living in Canada?", "question_toks": ["How", "many", "employees", "are", "living", "in", "Canada", "?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], "\"Canada\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(employees[employees['country'] == 'Canada'].shape[0])", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [[8]], "results": {"generated_sql": "SELECT count(*) FROM employees WHERE country = 'Canada'", "generated_py": "employees[employees['country'] == 'Canada'].shape[0]", "sql_exec_result": "[(8,)]", "py_exec_result": "8", "gold_answer": [[8]], "gold_sql": "SELECT count(*) FROM employees WHERE country = \"Canada\";", "gold_py": "pd.Series(employees[employees['country'] == 'Canada'].shape[0])"}}
{"db_id": "store_1", "query": "SELECT count(*) FROM employees WHERE country = \"Canada\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "employees", "WHERE", "country", "=", "``", "Canada", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employees", "where", "country", "=", "value"], "question": "How many employees live in Canada?", "question_toks": ["How", "many", "employees", "live", "in", "Canada", "?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], "\"Canada\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "pd.Series(employees[employees['country'] == 'Canada'].shape[0])", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [[8]], "results": {"generated_sql": "SELECT count(*) FROM employees WHERE country = 'Canada'", "generated_py": "employees[employees['country'] == 'Canada'].shape[0]", "sql_exec_result": "[(8,)]", "py_exec_result": "8", "gold_answer": [[8]], "gold_sql": "SELECT count(*) FROM employees WHERE country = \"Canada\";", "gold_py": "pd.Series(employees[employees['country'] == 'Canada'].shape[0])"}}
{"db_id": "store_1", "query": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "query_toks": ["SELECT", "phone", "FROM", "employees", "WHERE", "first_name", "=", "``", "Nancy", "''", "AND", "last_name", "=", "``", "Edwards", "''", ";"], "query_toks_no_value": ["select", "phone", "from", "employees", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is employee Nancy Edwards's phone number?", "question_toks": ["What", "is", "employee", "Nancy", "Edwards", "'s", "phone", "number", "?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Nancy\"", null], "and", [false, 2, [0, [0, 9, false], null], "\"Edwards\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "employees[(employees['first_name'] == 'Nancy') & (employees['last_name'] == 'Edwards')]['phone']", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [["+1 (403) 262-3443"]], "results": {"generated_sql": "SELECT phone FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'", "generated_py": "employees[employees['first_name'] == 'Nancy']['phone']", "sql_exec_result": "[('+1 (403) 262-3443',)]", "py_exec_result": "1    +1 (403) 262-3443\nName: phone, dtype: object", "gold_answer": [["+1 (403) 262-3443"]], "gold_sql": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "gold_py": "employees[(employees['first_name'] == 'Nancy') & (employees['last_name'] == 'Edwards')]['phone']"}}
{"db_id": "store_1", "query": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "query_toks": ["SELECT", "phone", "FROM", "employees", "WHERE", "first_name", "=", "``", "Nancy", "''", "AND", "last_name", "=", "``", "Edwards", "''", ";"], "query_toks_no_value": ["select", "phone", "from", "employees", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is the the phone number of Nancy Edwards?", "question_toks": ["What", "is", "the", "the", "phone", "number", "of", "Nancy", "Edwards", "?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Nancy\"", null], "and", [false, 2, [0, [0, 9, false], null], "\"Edwards\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "employees[(employees['first_name'] == 'Nancy') & (employees['last_name'] == 'Edwards')]['phone']", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [["+1 (403) 262-3443"]], "results": {"generated_sql": "SELECT phone FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards'", "generated_py": "pd.Series(customers[customers['first_name'] == 'Nancy']['phone'])", "sql_exec_result": "[('+1 (403) 262-3443',)]", "py_exec_result": "Series([], Name: phone, dtype: object)", "gold_answer": [["+1 (403) 262-3443"]], "gold_sql": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "gold_py": "employees[(employees['first_name'] == 'Nancy') & (employees['last_name'] == 'Edwards')]['phone']"}}
{"db_id": "store_1", "query": "SELECT name FROM media_types;", "query_toks": ["SELECT", "name", "FROM", "media_types", ";"], "query_toks_no_value": ["select", "name", "from", "media_types"], "question": "List all media types.", "question_toks": ["List", "all", "media", "types", "."], "sql": {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 48, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "media_types['name']", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [["MPEG audio file"], ["Protected AAC audio file"], ["Protected MPEG-4 video file"], ["Purchased AAC audio file"], ["AAC audio file"]], "results": {"generated_sql": "SELECT * FROM media_types", "generated_py": "media_types", "sql_exec_result": "[(1, 'MPEG audio file'), (2, 'Protected AAC audio file'), (3, 'Protected MPEG-4 video file'), (4, 'Purchased AAC audio file'), (5, 'AAC audio file')]", "py_exec_result": "   id                         name\n0   1              MPEG audio file\n1   2     Protected AAC audio file\n2   3  Protected MPEG-4 video file\n3   4     Purchased AAC audio file\n4   5               AAC audio file", "gold_answer": [["MPEG audio file"], ["Protected AAC audio file"], ["Protected MPEG-4 video file"], ["Purchased AAC audio file"], ["AAC audio file"]], "gold_sql": "SELECT name FROM media_types;", "gold_py": "media_types['name']"}}
{"db_id": "store_1", "query": "SELECT name FROM media_types;", "query_toks": ["SELECT", "name", "FROM", "media_types", ";"], "query_toks_no_value": ["select", "name", "from", "media_types"], "question": "What are the names of all the media types?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "media", "types", "?"], "sql": {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 48, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "media_types['name']", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [["MPEG audio file"], ["Protected AAC audio file"], ["Protected MPEG-4 video file"], ["Purchased AAC audio file"], ["AAC audio file"]], "results": {"generated_sql": "SELECT name FROM media_types", "generated_py": "media_types['name']", "sql_exec_result": "[('MPEG audio file',), ('Protected AAC audio file',), ('Protected MPEG-4 video file',), ('Purchased AAC audio file',), ('AAC audio file',)]", "py_exec_result": "0                MPEG audio file\n1       Protected AAC audio file\n2    Protected MPEG-4 video file\n3       Purchased AAC audio file\n4                 AAC audio file\nName: name, dtype: object", "gold_answer": [["MPEG audio file"], ["Protected AAC audio file"], ["Protected MPEG-4 video file"], ["Purchased AAC audio file"], ["AAC audio file"]], "gold_sql": "SELECT name FROM media_types;", "gold_py": "media_types['name']"}}
{"db_id": "store_1", "query": "SELECT DISTINCT name FROM genres;", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "genres", ";"], "query_toks_no_value": ["select", "distinct", "name", "from", "genres"], "question": "List all different genre types.", "question_toks": ["List", "all", "different", "genre", "types", "."], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [true, [[0, [0, [0, 37, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "genres['name'].drop_duplicates().reset_index(drop=True)", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [["Rock"], ["Jazz"], ["Metal"], ["Alternative & Punk"], ["Rock And Roll"], ["Blues"], ["Latin"], ["Reggae"], ["Pop"], ["Soundtrack"], ["Bossa Nova"], ["Easy Listening"], ["Heavy Metal"], ["R&B/Soul"], ["Electronica/Dance"], ["World"], ["Hip Hop/Rap"], ["Science Fiction"], ["TV Shows"], ["Sci Fi & Fantasy"], ["Drama"], ["Comedy"], ["Alternative"], ["Classical"], ["Opera"]], "results": {"generated_sql": "SELECT DISTINCT genre_id FROM tracks", "generated_py": "pd.Series(genres['name'].unique())", "sql_exec_result": "[(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,), (13,), (14,), (15,), (16,), (17,), (18,), (19,), (20,), (21,), (22,), (23,), (24,), (25,)]", "py_exec_result": "0                   Rock\n1                   Jazz\n2                  Metal\n3     Alternative & Punk\n4          Rock And Roll\n5                  Blues\n6                  Latin\n7                 Reggae\n8                    Pop\n9             Soundtrack\n10            Bossa Nova\n11        Easy Listening\n12           Heavy Metal\n13              R&B/Soul\n14     Electronica/Dance\n15                 World\n16           Hip Hop/Rap\n17       Science Fiction\n18              TV Shows\n19      Sci Fi & Fantasy\n20                 Drama\n21                Comedy\n22           Alternative\n23             Classical\n24                 Opera\ndtype: object", "gold_answer": [["Rock"], ["Jazz"], ["Metal"], ["Alternative & Punk"], ["Rock And Roll"], ["Blues"], ["Latin"], ["Reggae"], ["Pop"], ["Soundtrack"], ["Bossa Nova"], ["Easy Listening"], ["Heavy Metal"], ["R&B/Soul"], ["Electronica/Dance"], ["World"], ["Hip Hop/Rap"], ["Science Fiction"], ["TV Shows"], ["Sci Fi & Fantasy"], ["Drama"], ["Comedy"], ["Alternative"], ["Classical"], ["Opera"]], "gold_sql": "SELECT DISTINCT name FROM genres;", "gold_py": "genres['name'].drop_duplicates().reset_index(drop=True)"}}
{"db_id": "store_1", "query": "SELECT DISTINCT name FROM genres;", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "genres", ";"], "query_toks_no_value": ["select", "distinct", "name", "from", "genres"], "question": "What are the different names of the genres?", "question_toks": ["What", "are", "the", "different", "names", "of", "the", "genres", "?"], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [true, [[0, [0, [0, 37, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "genres['name'].drop_duplicates().reset_index(drop=True)", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [["Rock"], ["Jazz"], ["Metal"], ["Alternative & Punk"], ["Rock And Roll"], ["Blues"], ["Latin"], ["Reggae"], ["Pop"], ["Soundtrack"], ["Bossa Nova"], ["Easy Listening"], ["Heavy Metal"], ["R&B/Soul"], ["Electronica/Dance"], ["World"], ["Hip Hop/Rap"], ["Science Fiction"], ["TV Shows"], ["Sci Fi & Fantasy"], ["Drama"], ["Comedy"], ["Alternative"], ["Classical"], ["Opera"]], "results": {"generated_sql": "SELECT DISTINCT name FROM genres", "generated_py": "pd.Series(genres['name'].unique())", "sql_exec_result": "[('Rock',), ('Jazz',), ('Metal',), ('Alternative & Punk',), ('Rock And Roll',), ('Blues',), ('Latin',), ('Reggae',), ('Pop',), ('Soundtrack',), ('Bossa Nova',), ('Easy Listening',), ('Heavy Metal',), ('R&B/Soul',), ('Electronica/Dance',), ('World',), ('Hip Hop/Rap',), ('Science Fiction',), ('TV Shows',), ('Sci Fi & Fantasy',), ('Drama',), ('Comedy',), ('Alternative',), ('Classical',), ('Opera',)]", "py_exec_result": "0                   Rock\n1                   Jazz\n2                  Metal\n3     Alternative & Punk\n4          Rock And Roll\n5                  Blues\n6                  Latin\n7                 Reggae\n8                    Pop\n9             Soundtrack\n10            Bossa Nova\n11        Easy Listening\n12           Heavy Metal\n13              R&B/Soul\n14     Electronica/Dance\n15                 World\n16           Hip Hop/Rap\n17       Science Fiction\n18              TV Shows\n19      Sci Fi & Fantasy\n20                 Drama\n21                Comedy\n22           Alternative\n23             Classical\n24                 Opera\ndtype: object", "gold_answer": [["Rock"], ["Jazz"], ["Metal"], ["Alternative & Punk"], ["Rock And Roll"], ["Blues"], ["Latin"], ["Reggae"], ["Pop"], ["Soundtrack"], ["Bossa Nova"], ["Easy Listening"], ["Heavy Metal"], ["R&B/Soul"], ["Electronica/Dance"], ["World"], ["Hip Hop/Rap"], ["Science Fiction"], ["TV Shows"], ["Sci Fi & Fantasy"], ["Drama"], ["Comedy"], ["Alternative"], ["Classical"], ["Opera"]], "gold_sql": "SELECT DISTINCT name FROM genres;", "gold_py": "genres['name'].drop_duplicates().reset_index(drop=True)"}}
{"db_id": "store_1", "query": "SELECT name FROM playlists;", "query_toks": ["SELECT", "name", "FROM", "playlists", ";"], "query_toks_no_value": ["select", "name", "from", "playlists"], "question": "List the name of all playlist.", "question_toks": ["List", "the", "name", "of", "all", "playlist", "."], "sql": {"from": {"table_units": [["table_unit", 10]], "conds": []}, "select": [false, [[0, [0, [0, 64, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "playlists['name']", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [["Music"], ["Movies"], ["TV Shows"], ["Audiobooks"], ["90\u2019s Music"], ["Audiobooks"], ["Movies"], ["Music"], ["Music Videos"], ["TV Shows"], ["Brazilian Music"], ["Classical"], ["Classical 101 - Deep Cuts"], ["Classical 101 - Next Steps"], ["Classical 101 - The Basics"], ["Grunge"], ["Heavy Metal Classic"], ["On-The-Go 1"]], "results": {"generated_sql": "SELECT name FROM playlists", "generated_py": "playlists['name']", "sql_exec_result": "[('Music',), ('Movies',), ('TV Shows',), ('Audiobooks',), ('90\u2019s Music',), ('Audiobooks',), ('Movies',), ('Music',), ('Music Videos',), ('TV Shows',), ('Brazilian Music',), ('Classical',), ('Classical 101 - Deep Cuts',), ('Classical 101 - Next Steps',), ('Classical 101 - The Basics',), ('Grunge',), ('Heavy Metal Classic',), ('On-The-Go 1',)]", "py_exec_result": "0                          Music\n1                         Movies\n2                       TV Shows\n3                     Audiobooks\n4                     90\u2019s Music\n5                     Audiobooks\n6                         Movies\n7                          Music\n8                   Music Videos\n9                       TV Shows\n10               Brazilian Music\n11                     Classical\n12     Classical 101 - Deep Cuts\n13    Classical 101 - Next Steps\n14    Classical 101 - The Basics\n15                        Grunge\n16           Heavy Metal Classic\n17                   On-The-Go 1\nName: name, dtype: object", "gold_answer": [["Music"], ["Movies"], ["TV Shows"], ["Audiobooks"], ["90\u2019s Music"], ["Audiobooks"], ["Movies"], ["Music"], ["Music Videos"], ["TV Shows"], ["Brazilian Music"], ["Classical"], ["Classical 101 - Deep Cuts"], ["Classical 101 - Next Steps"], ["Classical 101 - The Basics"], ["Grunge"], ["Heavy Metal Classic"], ["On-The-Go 1"]], "gold_sql": "SELECT name FROM playlists;", "gold_py": "playlists['name']"}}
{"db_id": "store_1", "query": "SELECT name FROM playlists;", "query_toks": ["SELECT", "name", "FROM", "playlists", ";"], "query_toks_no_value": ["select", "name", "from", "playlists"], "question": "What are the names of all the playlists?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "playlists", "?"], "sql": {"from": {"table_units": [["table_unit", 10]], "conds": []}, "select": [false, [[0, [0, [0, 64, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "playlists['name']", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [["Music"], ["Movies"], ["TV Shows"], ["Audiobooks"], ["90\u2019s Music"], ["Audiobooks"], ["Movies"], ["Music"], ["Music Videos"], ["TV Shows"], ["Brazilian Music"], ["Classical"], ["Classical 101 - Deep Cuts"], ["Classical 101 - Next Steps"], ["Classical 101 - The Basics"], ["Grunge"], ["Heavy Metal Classic"], ["On-The-Go 1"]], "results": {"generated_sql": "SELECT name FROM playlists", "generated_py": "playlists['name']", "sql_exec_result": "[('Music',), ('Movies',), ('TV Shows',), ('Audiobooks',), ('90\u2019s Music',), ('Audiobooks',), ('Movies',), ('Music',), ('Music Videos',), ('TV Shows',), ('Brazilian Music',), ('Classical',), ('Classical 101 - Deep Cuts',), ('Classical 101 - Next Steps',), ('Classical 101 - The Basics',), ('Grunge',), ('Heavy Metal Classic',), ('On-The-Go 1',)]", "py_exec_result": "0                          Music\n1                         Movies\n2                       TV Shows\n3                     Audiobooks\n4                     90\u2019s Music\n5                     Audiobooks\n6                         Movies\n7                          Music\n8                   Music Videos\n9                       TV Shows\n10               Brazilian Music\n11                     Classical\n12     Classical 101 - Deep Cuts\n13    Classical 101 - Next Steps\n14    Classical 101 - The Basics\n15                        Grunge\n16           Heavy Metal Classic\n17                   On-The-Go 1\nName: name, dtype: object", "gold_answer": [["Music"], ["Movies"], ["TV Shows"], ["Audiobooks"], ["90\u2019s Music"], ["Audiobooks"], ["Movies"], ["Music"], ["Music Videos"], ["TV Shows"], ["Brazilian Music"], ["Classical"], ["Classical 101 - Deep Cuts"], ["Classical 101 - Next Steps"], ["Classical 101 - The Basics"], ["Grunge"], ["Heavy Metal Classic"], ["On-The-Go 1"]], "gold_sql": "SELECT name FROM playlists;", "gold_py": "playlists['name']"}}
{"db_id": "store_1", "query": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";", "query_toks": ["SELECT", "composer", "FROM", "tracks", "WHERE", "name", "=", "``", "Fast", "As", "a", "Shark", "''", ";"], "query_toks_no_value": ["select", "composer", "from", "tracks", "where", "name", "=", "value"], "question": "Who is the composer of track Fast As a Shark?", "question_toks": ["Who", "is", "the", "composer", "of", "track", "Fast", "As", "a", "Shark", "?"], "sql": {"from": {"table_units": [["table_unit", 8]], "conds": []}, "select": [false, [[0, [0, [0, 54, false], null]]]], "where": [[false, 2, [0, [0, 50, false], null], "\"Fast As a Shark\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "tracks[tracks['name'] == 'Fast As a Shark']['composer']", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [["F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman"]], "results": {"generated_sql": "SELECT composer FROM tracks WHERE name = 'Fast As a Shark'", "generated_py": "tracks[tracks['name'] == 'Fast As a Shark']['composer']", "sql_exec_result": "[('F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman',)]", "py_exec_result": "2    F. Baltes, S. Kaufman, U. Dirkscneider & W. Ho...\nName: composer, dtype: object", "gold_answer": [["F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman"]], "gold_sql": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";", "gold_py": "tracks[tracks['name'] == 'Fast As a Shark']['composer']"}}
{"db_id": "store_1", "query": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";", "query_toks": ["SELECT", "composer", "FROM", "tracks", "WHERE", "name", "=", "``", "Fast", "As", "a", "Shark", "''", ";"], "query_toks_no_value": ["select", "composer", "from", "tracks", "where", "name", "=", "value"], "question": "What is the composer who created the track \"Fast As a Shark\"?", "question_toks": ["What", "is", "the", "composer", "who", "created", "the", "track", "``", "Fast", "As", "a", "Shark", "''", "?"], "sql": {"from": {"table_units": [["table_unit", 8]], "conds": []}, "select": [false, [[0, [0, [0, 54, false], null]]]], "where": [[false, 2, [0, [0, 50, false], null], "\"Fast As a Shark\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "pandas_converted": "tracks[tracks['name'] == 'Fast As a Shark']['composer']", "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [["F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman"]], "results": {"generated_sql": "SELECT composer FROM tracks WHERE name = 'Fast As a Shark'", "generated_py": "tracks[tracks['name'] == 'Fast As a Shark']['composer']", "sql_exec_result": "[('F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman',)]", "py_exec_result": "2    F. Baltes, S. Kaufman, U. Dirkscneider & W. Ho...\nName: composer, dtype: object", "gold_answer": [["F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman"]], "gold_sql": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";", "gold_py": "tracks[tracks['name'] == 'Fast As a Shark']['composer']"}}
