{"data_file": "data/spider/train_spider_processed_v2.jsonl", "total_num_examples": 6997, "annotation_indices": [840, 38, 6781, 2630, 4973, 1958, 3702, 4578, 2661, 2410, 749, 59, 6185, 4039, 5441, 5697, 2550, 482, 5657, 4034, 6301, 6888, 3996, 538, 5597, 328, 1967, 1841, 2725, 6218, 5937, 6095, 2668, 1389, 2685, 6000, 2906, 6456, 4265, 6259, 649, 5164, 3853, 1348, 2480, 2158, 3213, 1930, 1183, 3877, 6194, 5064, 2286, 624, 2397, 4923, 148, 1729, 4350, 2798, 5283, 1198, 2108, 1965, 1563, 648, 1240, 5979, 3598, 463, 5807, 4217, 5343, 5708, 5783, 552, 2345, 2990, 3495, 6226, 2794, 2159, 1231, 5378, 2988, 4932, 311, 3254, 4478, 3740, 6368, 1979, 507, 3353, 4281, 3460, 2143, 2808, 1111, 168]}
{"metadata": {"db_id": "chinook_1", "query": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID", "query_toks": ["SELECT", "T1.Title", ",", "T2.AlbumID", "FROM", "ALBUM", "AS", "T1", "JOIN", "TRACK", "AS", "T2", "ON", "T1.AlbumId", "=", "T2.AlbumId", "WHERE", "T2.UnitPrice", ">", "1", "GROUP", "BY", "T2.AlbumID"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t2", ".", "albumid", "from", "album", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "albumid", "=", "t2", ".", "albumid", "where", "t2", ".", "unitprice", ">", "value", "group", "by", "t2", ".", "albumid"], "question": "What are the titles and ids for albums containing tracks with unit price greater than 1?", "question_toks": ["What", "are", "the", "titles", "and", "ids", "for", "albums", "containing", "tracks", "with", "unit", "price", "greater", "than", "1", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 10]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 58, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 58, false], null]]]], "where": [[false, 3, [0, [0, 64, false], null], 1.0, null]], "groupBy": [[0, 58, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Album": ["AlbumId", "Title", "ArtistId"], "Artist": ["ArtistId", "Name"], "Customer": ["CustomerId", "FirstName", "LastName", "Company", "Address", "City", "State", "Country", "PostalCode", "Phone", "Fax", "Email", "SupportRepId"], "Employee": ["EmployeeId", "LastName", "FirstName", "Title", "ReportsTo", "BirthDate", "HireDate", "Address", "City", "State", "Country", "PostalCode", "Phone", "Fax", "Email"], "Genre": ["GenreId", "Name"], "Invoice": ["InvoiceId", "CustomerId", "InvoiceDate", "BillingAddress", "BillingCity", "BillingState", "BillingCountry", "BillingPostalCode", "Total"], "InvoiceLine": ["InvoiceLineId", "InvoiceId", "TrackId", "UnitPrice", "Quantity"], "MediaType": ["MediaTypeId", "Name"], "Playlist": ["PlaylistId", "Name"], "PlaylistTrack": ["PlaylistId", "TrackId"], "Track": ["TrackId", "Name", "AlbumId", "MediaTypeId", "GenreId", "Composer", "Milliseconds", "Bytes", "UnitPrice"]}, "answer": [["Battlestar Galactica: The Story So Far", 226], ["Battlestar Galactica, Season 3", 227], ["Heroes, Season 1", 228], ["Lost, Season 3", 229], ["Lost, Season 1", 230], ["Lost, Season 2", 231], ["The Office, Season 1", 249], ["The Office, Season 2", 250], ["The Office, Season 3", 251], ["Battlestar Galactica (Classic), Season 1", 253], ["Aquaman", 254], ["LOST, Season 4", 261]], "db_path": "data/spider/database/chinook_1/chinook_1.sqlite"}, "annotation": "t1 = pd.merge(Album, Track, left_on='albumid', right_on='albumid', how='left'); t1 = t1[t1['unitprice'] > 1]; answer = t1.groupby('albumid', as_index=False).first()[['title', 'albumid']]", "exec_result": "                                       title  albumid\n0     Battlestar Galactica: The Story So Far      226\n1             Battlestar Galactica, Season 3      227\n2                           Heroes, Season 1      228\n3                             Lost, Season 3      229\n4                             Lost, Season 1      230\n5                             Lost, Season 2      231\n6                       The Office, Season 1      249\n7                       The Office, Season 2      250\n8                       The Office, Season 3      251\n9   Battlestar Galactica (Classic), Season 1      253\n10                                   Aquaman      254\n11                            LOST, Season 4      261"}
{"metadata": {"db_id": "farm", "query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Status", "FROM", "city", "AS", "T1", "JOIN", "farm_competition", "AS", "T2", "ON", "T1.City_ID", "=", "T2.Host_city_ID", "GROUP", "BY", "T2.Host_city_ID", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "status", "from", "city", "as", "t1", "join", "farm_competition", "as", "t2", "on", "t1", ".", "city_id", "=", "t2", ".", "host_city_id", "group", "by", "t2", ".", "host_city_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the status of the city that has hosted the greatest number of competitions.", "question_toks": ["Show", "the", "status", "of", "the", "city", "that", "has", "hosted", "the", "greatest", "number", "of", "competitions", "."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 20, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 20, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"city": ["City_ID", "Official_Name", "Status", "Area_km_2", "Population", "Census_Ranking"], "farm": ["Farm_ID", "Year", "Total_Horses", "Working_Horses", "Total_Cattle", "Oxen", "Bulls", "Cows", "Pigs", "Sheep_and_Goats"], "farm_competition": ["Competition_ID", "Year", "Theme", "Host_city_ID", "Hosts"], "competition_record": ["Competition_ID", "Farm_ID", "Rank"]}, "answer": [["Village"]], "db_path": "data/spider/database/farm/farm.sqlite"}, "annotation": "t1 = pd.merge(city, farm_competition, left_on='city_id', right_on='host_city_id', how='left'); idx = t1.groupby('host_city_id').size().sort_values(ascending=False).index[0]; answer = city[city['city_id'] == idx]['status']", "exec_result": "4    Village\nName: status, dtype: object"}
{"metadata": {"db_id": "activity_1", "query": "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.fname", ",", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "GROUP", "BY", "T1.FacID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "group", "by", "t1", ".", "facid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the first and last name of the faculty who is involved in the largest number of activities.", "question_toks": ["Find", "the", "first", "and", "last", "name", "of", "the", "faculty", "who", "is", "involved", "in", "the", "largest", "number", "of", "activities", "."], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 5, false], null]]}, "select": [false, [[0, [0, [0, 17, false], null]], [0, [0, [0, 16, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Activity": ["actid", "activity_name"], "Participates_in": ["stuid", "actid"], "Faculty_Participates_in": ["FacID", "actid"], "Student": ["StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code"], "Faculty": ["FacID", "Lname", "Fname", "Rank", "Sex", "Phone", "Room", "Building"]}, "answer": [["Yair", "Amir"]], "db_path": "data/spider/database/activity_1/activity_1.sqlite"}, "annotation": "t1 = pd.merge(Faculty, Faculty_Participates_in, left_on='facid', right_on='facid', how='left'); idx = t1.groupby('facid').size().sort_index(ascending=False).sort_values(ascending=False, kind='mergesort').index[0]; answer = Faculty[Faculty['facid'] == idx][['fname', 'lname']]", "exec_result": "   fname lname\n43  Yair  Amir"}
{"metadata": {"db_id": "inn_1", "query": "SELECT count(DISTINCT bedType) FROM Rooms;", "query_toks": ["SELECT", "count", "(", "DISTINCT", "bedType", ")", "FROM", "Rooms", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "bedtype", ")", "from", "rooms"], "question": "How many different types of beds are there?", "question_toks": ["How", "many", "different", "types", "of", "beds", "are", "there", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 4, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Rooms": ["RoomId", "roomName", "beds", "bedType", "maxOccupancy", "basePrice", "decor"], "Reservations": ["Code", "Room", "CheckIn", "CheckOut", "Rate", "LastName", "FirstName", "Adults", "Kids"]}, "answer": [[3]], "db_path": "data/spider/database/inn_1/inn_1.sqlite"}, "annotation": "answer = Rooms['bedtype'].nunique()", "exec_result": "3"}
{"metadata": {"db_id": "soccer_2", "query": "SELECT * FROM College ORDER BY enr", "query_toks": ["SELECT", "*", "FROM", "College", "ORDER", "BY", "enr"], "query_toks_no_value": ["select", "*", "from", "college", "order", "by", "enr"], "question": "List all information about college sorted by enrollment number in the ascending order.", "question_toks": ["List", "all", "information", "about", "college", "sorted", "by", "enrollment", "number", "in", "the", "ascending", "order", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 3, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"College": ["cName", "state", "enr"], "Player": ["pID", "pName", "yCard", "HS"], "Tryout": ["pID", "cName", "pPos", "decision"]}, "answer": [["ASU", "AZ", 12000], ["LSU", "LA", 18000], ["FSU", "FL", 19000], ["OU", "OK", 22000]], "db_path": "data/spider/database/soccer_2/soccer_2.sqlite"}, "annotation": "answer = College.sort_values(by='enr', ascending=True)", "exec_result": "  cname state    enr\n1   ASU    AZ  12000\n0   LSU    LA  18000\n3   FSU    FL  19000\n2    OU    OK  22000"}
{"metadata": {"db_id": "cinema", "query": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "film", "WHERE", "title", "LIKE", "``", "%", "Dummy", "%", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "film", "where", "title", "like", "value"], "question": "How many films have the word 'Dummy' in their titles?", "question_toks": ["How", "many", "films", "have", "the", "word", "'Dummy", "'", "in", "their", "titles", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 9, [0, [0, 4, false], null], "\"%Dummy%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"film": ["Film_ID", "Rank_in_series", "Number_in_season", "Title", "Directed_by", "Original_air_date", "Production_code"], "cinema": ["Cinema_ID", "Name", "Openning_year", "Capacity", "Location"], "schedule": ["Cinema_ID", "Film_ID", "Date", "Show_times_per_day", "Price"]}, "answer": [[1]], "pandas_converted": "pd.Series(film[film['title'].str.contains('Dummy')].shape[0])", "db_path": "data/spider/database/cinema/cinema.sqlite"}, "annotation": "answer = film[film['title'].str.contains('Dummy', na=False)].shape[0]", "exec_result": "1"}
{"metadata": {"db_id": "baseball_1", "query": "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;", "query_toks": ["SELECT", "state", "FROM", "park", "GROUP", "BY", "state", "HAVING", "count", "(", "*", ")", ">", "2", ";"], "query_toks_no_value": ["select", "state", "from", "park", "group", "by", "state", "having", "count", "(", "*", ")", ">", "value"], "question": "List the names of states that have more than 2 parks.", "question_toks": ["List", "the", "names", "of", "states", "that", "have", "more", "than", "2", "parks", "."], "sql": {"from": {"table_units": [["table_unit", 17]], "conds": []}, "select": [false, [[0, [0, [0, 210, false], null]]]], "where": [], "groupBy": [[0, 210, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"all_star": ["player_id", "year", "game_num", "game_id", "team_id", "league_id", "gp", "starting_pos"], "appearances": ["year", "team_id", "league_id", "player_id", "g_all", "gs", "g_batting", "g_defense", "g_p", "g_c", "g_1b", "g_2b", "g_3b", "g_ss", "g_lf", "g_cf", "g_rf", "g_of", "g_dh", "g_ph", "g_pr"], "manager_award": ["player_id", "award_id", "year", "league_id", "tie", "notes"], "player_award": ["player_id", "award_id", "year", "league_id", "tie", "notes"], "manager_award_vote": ["award_id", "year", "league_id", "player_id", "points_won", "points_max", "votes_first"], "player_award_vote": ["award_id", "year", "league_id", "player_id", "points_won", "points_max", "votes_first"], "batting": ["player_id", "year", "stint", "team_id", "league_id", "g", "ab", "r", "h", "double", "triple", "hr", "rbi", "sb", "cs", "bb", "so", "ibb", "hbp", "sh", "sf", "g_idp"], "batting_postseason": ["year", "round", "player_id", "team_id", "league_id", "g", "ab", "r", "h", "double", "triple", "hr", "rbi", "sb", "cs", "bb", "so", "ibb", "hbp", "sh", "sf", "g_idp"], "player_college": ["player_id", "college_id", "year"], "fielding": ["player_id", "year", "stint", "team_id", "league_id", "pos", "g", "gs", "inn_outs", "po", "a", "e", "dp", "pb", "wp", "sb", "cs", "zr"], "fielding_outfield": ["player_id", "year", "stint", "glf", "gcf", "grf"], "fielding_postseason": ["player_id", "year", "team_id", "league_id", "round", "pos", "g", "gs", "inn_outs", "po", "a", "e", "dp", "tp", "pb", "sb", "cs"], "hall_of_fame": ["player_id", "yearid", "votedby", "ballots", "needed", "votes", "inducted", "category", "needed_note"], "home_game": ["year", "league_id", "team_id", "park_id", "span_first", "span_last", "games", "openings", "attendance"], "manager": ["player_id", "year", "team_id", "league_id", "inseason", "g", "w", "l", "rank", "plyr_mgr"], "manager_half": ["player_id", "year", "team_id", "league_id", "inseason", "half", "g", "w", "l", "rank"], "player": ["player_id", "birth_year", "birth_month", "birth_day", "birth_country", "birth_state", "birth_city", "death_year", "death_month", "death_day", "death_country", "death_state", "death_city", "name_first", "name_last", "name_given", "weight", "height", "bats", "throws", "debut", "final_game", "retro_id", "bbref_id"], "park": ["park_id", "park_name", "park_alias", "city", "state", "country"], "pitching": ["player_id", "year", "stint", "team_id", "league_id", "w", "l", "g", "gs", "cg", "sho", "sv", "ipouts", "h", "er", "hr", "bb", "so", "baopp", "era", "ibb", "wp", "hbp", "bk", "bfp", "gf", "r", "sh", "sf", "g_idp"], "pitching_postseason": ["player_id", "year", "round", "team_id", "league_id", "w", "l", "g", "gs", "cg", "sho", "sv", "ipouts", "h", "er", "hr", "bb", "so", "baopp", "era", "ibb", "wp", "hbp", "bk", "bfp", "gf", "r", "sh", "sf", "g_idp"], "salary": ["year", "team_id", "league_id", "player_id", "salary"], "college": ["college_id", "name_full", "city", "state", "country"], "postseason": ["year", "round", "team_id_winner", "league_id_winner", "team_id_loser", "league_id_loser", "wins", "losses", "ties"], "team": ["year", "league_id", "team_id", "franchise_id", "div_id", "rank", "g", "ghome", "w", "l", "div_win", "wc_win", "lg_win", "ws_win", "r", "ab", "h", "double", "triple", "hr", "bb", "so", "sb", "cs", "hbp", "sf", "ra", "er", "era", "cg", "sho", "sv", "ipouts", "ha", "hra", "bba", "soa", "e", "dp", "fp", "name", "park", "attendance", "bpf", "ppf", "team_id_br", "team_id_lahman45", "team_id_retro"], "team_franchise": ["franchise_id", "franchise_name", "active", "na_assoc"], "team_half": ["year", "league_id", "team_id", "half", "div_id", "div_win", "rank", "g", "w", "l"]}, "answer": [["CA"], ["CT"], ["DC"], ["FL"], ["IL"], ["IN"], ["KY"], ["MA"], ["MD"], ["MI"], ["MN"], ["MO"], ["NJ"], ["NY"], ["OH"], ["PA"], ["RI"], ["TX"], ["WA"], ["WI"]], "db_path": "data/spider/database/baseball_1/baseball_1.sqlite"}, "annotation": "answer = list(park.groupby('state').filter(lambda x: len(x) > 2).groupby('state').groups.keys())", "exec_result": "['CA', 'CT', 'DC', 'FL', 'IL', 'IN', 'KY', 'MA', 'MD', 'MI', 'MN', 'MO', 'NJ', 'NY', 'OH', 'PA', 'RI', 'TX', 'WA', 'WI']"}
{"metadata": {"db_id": "company_office", "query": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2", "query_toks": ["SELECT", "Headquarters", "FROM", "Companies", "GROUP", "BY", "Headquarters", "HAVING", "COUNT", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "headquarters", "from", "companies", "group", "by", "headquarters", "having", "count", "(", "*", ")", ">", "value"], "question": "Show the headquarters shared by more than two companies.", "question_toks": ["Show", "the", "headquarters", "shared", "by", "more", "than", "two", "companies", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"buildings": ["id", "name", "City", "Height", "Stories", "Status"], "Companies": ["id", "name", "Headquarters", "Industry", "Sales_billion", "Profits_billion", "Assets_billion", "Market_Value_billion"], "Office_locations": ["building_id", "company_id", "move_in_year"]}, "answer": [["China"], ["USA"]], "db_path": "data/spider/database/company_office/company_office.sqlite"}, "annotation": "answer = list(Companies.groupby('headquarters').filter(lambda x: len(x) > 2).groupby('headquarters').groups.keys())", "exec_result": "['China', 'USA']"}
{"metadata": {"db_id": "party_host", "query": "SELECT count(*) FROM party", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "party"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "party"], "question": "Count the number of parties.", "question_toks": ["Count", "the", "number", "of", "parties", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"party": ["Party_ID", "Party_Theme", "Location", "First_year", "Last_year", "Number_of_hosts"], "host": ["Host_ID", "Name", "Nationality", "Age"], "party_host": ["Party_ID", "Host_ID", "Is_Main_in_Charge"]}, "answer": [[8]], "pandas_converted": "pd.Series(party.shape[0])", "db_path": "data/spider/database/party_host/party_host.sqlite"}, "annotation": "answer = party.shape[0]", "exec_result": "8"}
{"metadata": {"db_id": "candidate_poll", "query": "SELECT name FROM people WHERE height  >  200 OR height  <  190", "query_toks": ["SELECT", "name", "FROM", "people", "WHERE", "height", ">", "200", "OR", "height", "<", "190"], "query_toks_no_value": ["select", "name", "from", "people", "where", "height", ">", "value", "or", "height", "<", "value"], "question": "find the names of people who are taller than 200 or lower than 190.", "question_toks": ["find", "the", "names", "of", "people", "who", "are", "taller", "than", "200", "or", "lower", "than", "190", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], 200.0, null], "or", [false, 4, [0, [0, 13, false], null], 190.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"candidate": ["Candidate_ID", "People_ID", "Poll_Source", "Date", "Support_rate", "Consider_rate", "Oppose_rate", "Unsure_rate"], "people": ["People_ID", "Sex", "Name", "Date_of_Birth", "Height", "Weight"]}, "answer": [["Hubert Henno"], ["Laurent Capet"]], "pandas_converted": "people[(people['height'] > 200) | (people['height'] < 190)]['name']", "db_path": "data/spider/database/candidate_poll/candidate_poll.sqlite"}, "annotation": "answer = people[(people['height'] > 200) | (people['height'] < 190)]['name']", "exec_result": "0     Hubert Henno\n3    Laurent Capet\nName: name, dtype: object"}
{"metadata": {"db_id": "race_track", "query": "SELECT name ,  LOCATION FROM track", "query_toks": ["SELECT", "name", ",", "LOCATION", "FROM", "track"], "query_toks_no_value": ["select", "name", ",", "location", "from", "track"], "question": "Show the name and location for all tracks.", "question_toks": ["Show", "the", "name", "and", "location", "for", "all", "tracks", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]], [0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"race": ["Race_ID", "Name", "Class", "Date", "Track_ID"], "track": ["Track_ID", "Name", "Location", "Seating", "Year_Opened"]}, "answer": [["Auto Club Speedway", "Fontana, CA"], ["Chicagoland Speedway", "Joliet, IL"], ["Darlington Raceway", "Darlington, SC"], ["Daytona International Speedway", "Daytona Beach, FL"], ["Homestead-Miami Speedway", "Homestead, FL"], ["Kansas Speedway", "Kansas City, KS"], ["Martinsville Speedway", "Ridgeway, VA"], ["Michigan International Speedway", "Brooklyn, MI"], ["Phoenix International Raceway", "Avondale, AZ"]], "pandas_converted": "track[['name', 'location']]", "db_path": "data/spider/database/race_track/race_track.sqlite"}, "annotation": "answer = track[['name', 'location']]", "exec_result": "                              name           location\n0               Auto Club Speedway        Fontana, CA\n1             Chicagoland Speedway         Joliet, IL\n2               Darlington Raceway     Darlington, SC\n3   Daytona International Speedway  Daytona Beach, FL\n4         Homestead-Miami Speedway      Homestead, FL\n5                  Kansas Speedway    Kansas City, KS\n6            Martinsville Speedway       Ridgeway, VA\n7  Michigan International Speedway       Brooklyn, MI\n8    Phoenix International Raceway       Avondale, AZ"}
{"metadata": {"db_id": "student_assessment", "query": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "student_id", "FROM", "student_course_registrations", "GROUP", "BY", "student_id", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "student_id", "from", "student_course_registrations", "group", "by", "student_id", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "What are the ids of the students who registered for some courses but had the least number of courses for all students?", "question_toks": ["What", "are", "the", "ids", "of", "the", "students", "who", "registered", "for", "some", "courses", "but", "had", "the", "least", "number", "of", "courses", "for", "all", "students", "?"], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 27, false], null]]]], "where": [], "groupBy": [[0, 27, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1", "line_2", "city", "zip_postcode", "state_province_county", "country"], "People": ["person_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "login_name", "password"], "Students": ["student_id", "student_details"], "Courses": ["course_id", "course_name", "course_description", "other_details"], "People_Addresses": ["person_address_id", "person_id", "address_id", "date_from", "date_to"], "Student_Course_Registrations": ["student_id", "course_id", "registration_date"], "Student_Course_Attendance": ["student_id", "course_id", "date_of_attendance"], "Candidates": ["candidate_id", "candidate_details"], "Candidate_Assessments": ["candidate_id", "qualification", "assessment_date", "asessment_outcome_code"]}, "answer": [[111]], "db_path": "data/spider/database/student_assessment/student_assessment.sqlite"}, "annotation": "answer = student_course_registrations.groupby('student_id').size().sort_values(ascending=True, kind='mergesort').index[0]", "exec_result": "111"}
