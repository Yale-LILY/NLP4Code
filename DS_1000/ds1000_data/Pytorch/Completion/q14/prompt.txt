Problem:

I want to use a logical index to slice a torch tensor. Which means, I want to select the columns that get a '0' in the logical index.
I tried but got some errors:
TypeError: indexing a tensor with an object of type ByteTensor. The only supported types are integers, slices, numpy scalars and torch.LongTensor or torch.ByteTensor as the only argument.

Desired Output like
import torch
C = torch.LongTensor([[999, 777], [9999, 7777]])

And Logical indexing on the columns:
A_log = torch.ByteTensor([0, 0, 1]) # the logical index
B = torch.LongTensor([[999, 777, 114514], [9999, 7777, 1919810]])
C = B[:, A_log] # Throws error

However, if the vectors are of the same size, logical indexing works:
B_truncated = torch.LongTensor([114514, 1919, 810])
C = B_truncated[A_log]

I'm confused about this, can you help me about this?


A:

<code>
import numpy as np
import pandas as pd
import torch
A_log, B = load_data()
</code>
C = ... # put solution in this variable
BEGIN SOLUTION
<code>
