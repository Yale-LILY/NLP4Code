import pickle

import argparse
import shutil
import os

if os.path.exists('my_model'):
    shutil.rmtree('my_model')
parser = argparse.ArgumentParser()
parser.add_argument("--test_case", type=int, default=1)
args = parser.parse_args()
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

FLAG = pickle.load(open(f"input/input{args.test_case}.pkl", "rb"))

network_layout = []
for i in range(3):
    network_layout.append(8)

model = Sequential()

inputdim = 4
activation = 'relu'
outputdim = 2
opt='rmsprop'
epochs = 50
#Adding input layer and first hidden layer
model.add(Dense(network_layout[0],
                name="Input",
                input_dim=inputdim,
                kernel_initializer='he_normal',
                activation=activation))

#Adding the rest of hidden layer
for numneurons in network_layout[1:]:
    model.add(Dense(numneurons,
                    kernel_initializer = 'he_normal',
                    activation=activation))

#Adding the output layer
model.add(Dense(outputdim,
                name="Output",
                kernel_initializer="he_normal",
                activation="relu"))

#Compiling the model
model.compile(optimizer=opt,loss='mse',metrics=['mse','mae','mape'])

#Save the model in "export/1"

###BEGIN SOLUTION
[insert]
###END SOLUTION

try:
    assert os.path.exists("export")
    p = os.path.join("export", "1")
    assert os.path.exists(p)
    assert os.path.exists(os.path.join(p, "assets"))
    assert os.path.exists(os.path.join(p, "saved_model.pb"))
    p = os.path.join(p, "variables")
    assert os.path.exists(p)
    assert os.path.exists(os.path.join(p, "variables.data-00000-of-00001"))
    assert os.path.exists(os.path.join(p, "variables.index"))
    result = 1
except:
    result = 0

with open('result/result_{}.pkl'.format(args.test_case), 'wb') as f:
    pickle.dump(result, f)