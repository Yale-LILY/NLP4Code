import pickle
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("--test_case", type=int, default=1)
args = parser.parse_args()


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = sns.load_dataset("penguins")[
    ["bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"]
]

# Make 2 subplots.
# In the first subplot, plot a seaborn regression plot of "bill_depth_mm" over "bill_length_mm"
# In the second subplot, plot a seaborn regression plot of "flipper_length_mm" over "bill_length_mm"
# Do not share y axix for the subplots
# SOLUTION START
[insert]
# SOLUTION END
plt.savefig('result/plot.png', bbox_inches ='tight')

#Image Testing
from PIL import Image
import numpy as np
code_img = np.array(Image.open('result/plot.png'))
oracle_img = np.array(Image.open('ans/oracle_plot.png'))
sample_image_stat = (
    code_img.shape == oracle_img.shape
    and np.allclose(code_img, oracle_img)
)
if sample_image_stat:
    with open('result/result_1.pkl', 'wb') as file:
        # if image test passed, we save True to the result file
        pickle.dump(True, file)    
        


# Testing
f = plt.gcf()
assert len(f.axes) == 2
assert len(f.axes[0]._shared_axes["x"].get_siblings(f.axes[0])) == 1
for ax in f.axes:
    assert len(ax.collections) == 2
    assert len(ax.get_lines()) == 1
    assert ax.get_xlabel() == "bill_length_mm"
with open('result/result_1.pkl', 'wb') as file:
    # or if execution-based test passed, we save True to the result file
    pickle.dump(True, file)     
