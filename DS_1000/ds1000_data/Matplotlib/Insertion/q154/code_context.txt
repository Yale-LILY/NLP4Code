import pickle
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("--test_case", type=int, default=1)
args = parser.parse_args()


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

x = np.random.random((10, 10))
from matplotlib import gridspec

nrow = 2
ncol = 2

fig = plt.figure(figsize=(ncol + 1, nrow + 1))

# Make a 2x2 subplots with fig and plot x in each subplot as an image
# Remove the space between each subplot and make the subplot adjacent to each other
# Remove the axis ticks from each subplot
# SOLUTION START
[insert]
# SOLUTION END
plt.savefig('result/plot.png', bbox_inches ='tight')

#Image Testing
from PIL import Image
import numpy as np
code_img = np.array(Image.open('result/plot.png'))
oracle_img = np.array(Image.open('ans/oracle_plot.png'))
sample_image_stat = (
    code_img.shape == oracle_img.shape
    and np.allclose(code_img, oracle_img)
)
if sample_image_stat:
    with open('result/result_1.pkl', 'wb') as file:
        # if image test passed, we save True to the result file
        pickle.dump(True, file)    
        


# Testing
f = plt.gcf()
assert len(f.axes) == 4
for ax in f.axes:
    assert len(ax.images) == 1
    assert ax.get_subplotspec()._gridspec.hspace == 0.0
    assert ax.get_subplotspec()._gridspec.wspace == 0.0
with open('result/result_1.pkl', 'wb') as file:
    # or if execution-based test passed, we save True to the result file
    pickle.dump(True, file)     
