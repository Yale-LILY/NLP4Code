import pickle
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("--test_case", type=int, default=1)
args = parser.parse_args()


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

x = np.random.rand(10)
y = np.random.rand(10)

# Plot a grouped histograms of x and y on a single chart with matplotlib
# Use grouped histograms so that the histograms don't overlap with each other
# SOLUTION START
[insert]
# SOLUTION END
plt.savefig('result/plot.png', bbox_inches ='tight')

#Image Testing
from PIL import Image
import numpy as np
code_img = np.array(Image.open('result/plot.png'))
oracle_img = np.array(Image.open('ans/oracle_plot.png'))
sample_image_stat = (
    code_img.shape == oracle_img.shape
    and np.allclose(code_img, oracle_img)
)
if sample_image_stat:
    with open('result/result_1.pkl', 'wb') as file:
        # if image test passed, we save True to the result file
        pickle.dump(True, file)    
        


# Testing
ax = plt.gca()
all_xs = []
all_widths = []
assert len(ax.patches) > 0
for p in ax.patches:
    all_xs.append(p.get_x())
    all_widths.append(p.get_width())
all_xs = np.array(all_xs)
all_widths = np.array(all_widths)
sort_ids = all_xs.argsort()
all_xs = all_xs[sort_ids]
all_widths = all_widths[sort_ids]
assert np.all(all_xs[1:] - (all_xs + all_widths)[:-1] > -0.001)
with open('result/result_1.pkl', 'wb') as file:
    # or if execution-based test passed, we save True to the result file
    pickle.dump(True, file)     
