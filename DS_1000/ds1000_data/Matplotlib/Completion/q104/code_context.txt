import pickle
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("--test_case", type=int, default=1)
args = parser.parse_args()


import matplotlib.pyplot as plt

d = {"a": 4, "b": 5, "c": 7}
c = {"a": "red", "c": "green", "b": "blue"}

# Make a bar plot using data in `d`. Use the keys as x axis labels and the values as the bar heights.
# Color each bar in the plot by looking up the color in colors
# SOLUTION START
[insert]
# SOLUTION END
plt.savefig('result/plot.png', bbox_inches ='tight')

#Image Testing
from PIL import Image
import numpy as np
code_img = np.array(Image.open('result/plot.png'))
oracle_img = np.array(Image.open('ans/oracle_plot.png'))
sample_image_stat = (
    code_img.shape == oracle_img.shape
    and np.allclose(code_img, oracle_img)
)
if sample_image_stat:
    with open('result/result_1.pkl', 'wb') as file:
        # if image test passed, we save True to the result file
        pickle.dump(True, file)    
        


# Testing
ax = plt.gca()
import matplotlib

plt.show()
count = 0
x_to_color = dict()
for rec in ax.get_children():
    if isinstance(rec, matplotlib.patches.Rectangle):
        count += 1
        x_to_color[rec.get_x() + rec.get_width() / 2] = rec.get_facecolor()
label_to_x = dict()
for label in ax.get_xticklabels():
    label_to_x[label._text] = label._x
assert (
    x_to_color[label_to_x["a"]] == (1.0, 0.0, 0.0, 1.0)
    or x_to_color[label_to_x["a"]] == "red"
)
assert (
    x_to_color[label_to_x["b"]] == (0.0, 0.0, 1.0, 1.0)
    or x_to_color[label_to_x["a"]] == "blue"
)
assert (
    x_to_color[label_to_x["c"]] == (0.0, 0.5019607843137255, 0.0, 1.0)
    or x_to_color[label_to_x["a"]] == "green"
)
with open('result/result_1.pkl', 'wb') as file:
    # or if execution-based test passed, we save True to the result file
    pickle.dump(True, file)     
