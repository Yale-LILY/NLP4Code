{"data_file": "data/spider/train_spider_processed_v2.jsonl", "total_num_examples": 6997, "annotation_indices": [2387, 5555, 3621, 6940, 5157, 2108, 5366,  6543, 2704, 142, 1978, 5282, 6132, 2096, 1827, 809, 646, 6669, 1256, 6918, 75, 5088, 3726, 6320, 2098, 6537, 3633, 899, 4008, 3641, 451, 5446, 3218, 6846, 604, 3203, 1675, 5965, 93, 5173, 433, 5427, 2503, 1668, 4522, 5590, 4513, 664, 5449, 4043, 6578, 4366, 5075, 1155, 5219, 3662, 4444, 5195, 245, 3474, 443, 3532, 1677, 3480, 1452, 3862, 4093, 6911, 3055, 3643, 1654, 2077, 5073, 980, 2629, 3422, 4695, 5578, 6284, 367, 5754, 5208, 4252, 1797, 4846, 868, 2005, 3438, 5147, 1329, 6141, 5958, 2015, 6277, 706, 6619, 3580, 4610, 6987, 1869]}
{"metadata": {"db_id": "csu_1", "query": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\"", "query_toks": ["SELECT", "sum", "(", "t1.graduate", ")", "FROM", "discipline_enrollments", "AS", "t1", "JOIN", "campuses", "AS", "t2", "ON", "t1.campus", "=", "t2.id", "WHERE", "t1.year", "=", "2004", "AND", "t2.campus", "=", "``", "San", "Francisco", "State", "University", "''"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "graduate", ")", "from", "discipline_enrollments", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "campus", "=", "value"], "question": "How many people graduated from San Francisco State University in 2004?", "question_toks": ["How", "many", "people", "graduated", "from", "San", "Francisco", "State", "University", "in", "2004", "?"], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 1, false], null]]}, "select": [false, [[4, [0, [0, 16, false], null]]]], "where": [[false, 2, [0, [0, 14, false], null], 2004.0, null], "and", [false, 2, [0, [0, 2, false], null], "\"San Francisco State University\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Campuses": ["Id", "Campus", "Location", "County", "Year"], "csu_fees": ["Campus", "Year", "CampusFee"], "degrees": ["Year", "Campus", "Degrees"], "discipline_enrollments": ["Campus", "Discipline", "Year", "Undergraduate", "Graduate"], "enrollments": ["Campus", "Year", "TotalEnrollment_AY", "FTE_AY"], "faculty": ["Campus", "Year", "Faculty"]}, "answer": [[5017]], "db_path": "data/spider/database/csu_1/csu_1.sqlite"}, "annotation": "id = Campuses[Campuses['campus'] == 'San Francisco State University']['id'].tolist()[0]; answer = discipline_enrollments[discipline_enrollments['campus'] == id]['graduate'].sum();", "exec_result": "Expected: [[5017]] but got 5017"}
{"metadata": {"db_id": "products_gen_characteristics", "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"", "query_toks": ["SELECT", "t3.characteristic_name", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "WHERE", "t1.product_name", "=", "``", "sesame", "''"], "query_toks_no_value": ["select", "t3", ".", "characteristic_name", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "where", "t1", ".", "product_name", "=", "value"], "question": "What are all the characteristic names of product \"sesame\"?", "question_toks": ["What", "are", "all", "the", "characteristic", "names", "of", "product", "``", "sesame", "''", "?"], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 21, false], null], "and", [false, 2, [0, [0, 22, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 16, false], null], "\"sesame\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Ref_Characteristic_Types": ["characteristic_type_code", "characteristic_type_description"], "Ref_Colors": ["color_code", "color_description"], "Ref_Product_Categories": ["product_category_code", "product_category_description", "unit_of_measure"], "Characteristics": ["characteristic_id", "characteristic_type_code", "characteristic_data_type", "characteristic_name", "other_characteristic_details"], "Products": ["product_id", "color_code", "product_category_code", "product_name", "typical_buying_price", "typical_selling_price", "product_description", "other_product_details"], "Product_Characteristics": ["product_id", "characteristic_id", "product_characteristic_value"]}, "answer": [["error"], ["fast"]], "db_path": "data/spider/database/products_gen_characteristics/products_gen_characteristics.sqlite"}, "annotation": "product_id = Products[Products['product_name'] == 'sesame']['product_id'].tolist()[0]; characteristic_id = Product_Characteristics[Product_Characteristics['product_id'] == product_id]['characteristic_id'].tolist(); answer = Characteristics[Characteristics['characteristic_id'].isin(characteristic_id)]['characteristic_name'].tolist();", "exec_result": "Expected: [['error'], ['fast']] but got ['fast', 'error']"}
{"metadata": {"db_id": "music_1", "query": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating", "query_toks": ["SELECT", "f_id", ",", "genre_is", ",", "artist_name", "FROM", "song", "WHERE", "languages", "=", "``", "english", "''", "ORDER", "BY", "rating"], "query_toks_no_value": ["select", "f_id", ",", "genre_is", ",", "artist_name", "from", "song", "where", "languages", "=", "value", "order", "by", "rating"], "question": "What is the id, genre, and name of the artist for every English song ordered by ascending rating?", "question_toks": ["What", "is", "the", "id", ",", "genre", ",", "and", "name", "of", "the", "artist", "for", "every", "English", "song", "ordered", "by", "ascending", "rating", "?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 16, false], null]], [0, [0, [0, 17, false], null]], [0, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], "\"english\"", null]], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 18, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"genre": ["g_name", "rating", "most_popular_in"], "artist": ["artist_name", "country", "gender", "preferred_genre"], "files": ["f_id", "artist_name", "file_size", "duration", "formats"], "song": ["song_name", "artist_name", "country", "f_id", "genre_is", "rating", "languages", "releasedate", "resolution"]}, "answer": [[4, "blues", "Enrique"], [5, "pop", "Michel"]], "db_path": "data/spider/database/music_1/music_1.sqlite"}, "annotation": "ordered = song[song['languages'] == 'english'].sort_values(by = ['rating']); answer = ordered.loc[:,['f_id', 'genre_is', 'artist_name']];", "exec_result": "   f_id genre_is artist_name\n3     4    blues     Enrique\n4     5      pop      Michel"}
{"metadata": {"db_id": "tracking_orders", "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1", "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "JOIN", "order_items", "AS", "T3", "JOIN", "products", "AS", "T4", "ON", "T1.customer_id", "=", "T2.customer_id", "AND", "T2.order_id", "=", "T3.order_id", "AND", "T3.product_id", "=", "T4.product_id", "WHERE", "T3.order_item_status", "=", "``", "Cancel", "''", "AND", "T4.product_name", "=", "``", "food", "''", "GROUP", "BY", "T1.customer_id", "HAVING", "count", "(", "*", ")", ">", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "join", "order_items", "as", "t3", "join", "products", "as", "t4", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "and", "t2", ".", "order_id", "=", "t3", ".", "order_id", "and", "t3", ".", "product_id", "=", "t4", ".", "product_id", "where", "t3", ".", "order_item_status", "=", "value", "and", "t4", ".", "product_name", "=", "value", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "List the names of customers who have once canceled the purchase of the product \"food\" (the item status is \"Cancel\").", "question_toks": ["List", "the", "names", "of", "customers", "who", "have", "once", "canceled", "the", "purchase", "of", "the", "product", "``", "food", "''", "(", "the", "item", "status", "is", "``", "Cancel", "''", ")", "."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2], ["table_unit", 4], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null], "and", [false, 2, [0, [0, 7, false], null], [0, 17, false], null], "and", [false, 2, [0, [0, 16, false], null], [0, 12, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], "\"Cancel\"", null], "and", [false, 2, [0, [0, 13, false], null], "\"food\"", null]], "groupBy": [[0, 1, false]], "having": [[false, 5, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Customers": ["customer_id", "customer_name", "customer_details"], "Invoices": ["invoice_number", "invoice_date", "invoice_details"], "Orders": ["order_id", "customer_id", "order_status", "date_order_placed", "order_details"], "Products": ["product_id", "product_name", "product_details"], "Order_Items": ["order_item_id", "product_id", "order_id", "order_item_status", "order_item_details"], "Shipments": ["shipment_id", "order_id", "invoice_number", "shipment_tracking_number", "shipment_date", "other_shipment_details"], "Shipment_Items": ["shipment_id", "order_item_id"]}, "answer": [["George"], ["Devan"]], "db_path": "data/spider/database/tracking_orders/tracking_orders.sqlite"}, "annotation": "food_ids = products[products['product_name'] == 'food']['product_id'].tolist(); food_orders = order_items[order_items['product_id'].isin(food_ids)]; canceled_food_order_ids = food_orders[food_orders['order_item_status'] == 'Cancel']['order_id'].tolist(); customer_ids = orders[orders['order_id'].isin(canceled_food_order_ids)]['customer_id'].tolist(); answer = customers[customers['customer_id'].isin(customer_ids)]['customer_name'].tolist();", "exec_result": "['george', 'devan']"}
{"metadata": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "Status_Code", "FROM", "BOOKINGS", "GROUP", "BY", "Status_Code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "status_code", "from", "bookings", "group", "by", "status_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most frequent status of bookings?", "question_toks": ["What", "is", "the", "most", "frequent", "status", "of", "bookings", "?"], "sql": {"from": {"table_units": [["table_unit", 10]], "conds": []}, "select": [false, [[0, [0, [0, 57, false], null]]]], "where": [], "groupBy": [[0, 57, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Ref_Payment_Methods": ["payment_method_code", "payment_method_description"], "Ref_Service_Types": ["Service_Type_Code", "Parent_Service_Type_Code", "Service_Type_Description"], "Addresses": ["Address_ID", "Line_1", "Line_2", "City_Town", "State_County", "Other_Details"], "Products": ["Product_ID", "Product_Name", "Product_Price", "Product_Description", "Other_Product_Service_Details"], "Marketing_Regions": ["Marketing_Region_Code", "Marketing_Region_Name", "Marketing_Region_Descriptrion", "Other_Details"], "Clients": ["Client_ID", "Address_ID", "Customer_Email_Address", "Customer_Name", "Customer_Phone", "Other_Details"], "Drama_Workshop_Groups": ["Workshop_Group_ID", "Address_ID", "Currency_Code", "Marketing_Region_Code", "Store_Name", "Store_Phone", "Store_Email_Address", "Other_Details"], "Performers": ["Performer_ID", "Address_ID", "Customer_Name", "Customer_Phone", "Customer_Email_Address", "Other_Details"], "Customers": ["Customer_ID", "Address_ID", "Customer_Name", "Customer_Phone", "Customer_Email_Address", "Other_Details"], "Stores": ["Store_ID", "Address_ID", "Marketing_Region_Code", "Store_Name", "Store_Phone", "Store_Email_Address", "Other_Details"], "Bookings": ["Booking_ID", "Customer_ID", "Workshop_Group_ID", "Status_Code", "Store_ID", "Order_Date", "Planned_Delivery_Date", "Actual_Delivery_Date", "Other_Order_Details"], "Performers_in_Bookings": ["Order_ID", "Performer_ID"], "Customer_Orders": ["Order_ID", "Customer_ID", "Store_ID", "Order_Date", "Planned_Delivery_Date", "Actual_Delivery_Date", "Other_Order_Details"], "Order_Items": ["Order_Item_ID", "Order_ID", "Product_ID", "Order_Quantity", "Other_Item_Details"], "Invoices": ["Invoice_ID", "Order_ID", "payment_method_code", "Product_ID", "Order_Quantity", "Other_Item_Details", "Order_Item_ID"], "Services": ["Service_ID", "Service_Type_Code", "Workshop_Group_ID", "Product_Description", "Product_Name", "Product_Price", "Other_Product_Service_Details"], "Bookings_Services": ["Order_ID", "Product_ID"], "Invoice_Items": ["Invoice_Item_ID", "Invoice_ID", "Order_ID", "Order_Item_ID", "Product_ID", "Order_Quantity", "Other_Item_Details"]}, "answer": [["good"]], "db_path": "data/spider/database/cre_Drama_Workshop_Groups/cre_Drama_Workshop_Groups.sqlite"}, "annotation": "answer = bookings['Status_Code'].mode();", "exec_result": "0    good\nName: status_code, dtype: object"}
{"metadata": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT document_id ,  receipt_date FROM Documents;", "query_toks": ["SELECT", "document_id", ",", "receipt_date", "FROM", "Documents", ";"], "query_toks_no_value": ["select", "document_id", ",", "receipt_date", "from", "documents"], "question": "List all document ids and receipt dates of documents.", "question_toks": ["List", "all", "document", "ids", "and", "receipt", "dates", "of", "documents", "."], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]], [0, [0, [0, 16, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Ref_Document_Types": ["document_type_code", "document_type_description"], "Roles": ["role_code", "role_description"], "Addresses": ["address_id", "address_details"], "Ref_Document_Status": ["document_status_code", "document_status_description"], "Ref_Shipping_Agents": ["shipping_agent_code", "shipping_agent_name", "shipping_agent_description"], "Documents": ["document_id", "document_status_code", "document_type_code", "shipping_agent_code", "receipt_date", "receipt_number", "other_details"], "Employees": ["employee_id", "role_code", "employee_name", "other_details"], "Document_Drafts": ["document_id", "draft_number", "draft_details"], "Draft_Copies": ["document_id", "draft_number", "copy_number"], "Circulation_History": ["document_id", "draft_number", "copy_number", "employee_id"], "Documents_Mailed": ["document_id", "mailed_to_address_id", "mailing_date"]}, "answer": [[1, "2008-04-21 20:42:25"], [2, "1974-05-08 00:00:46"], [3, "2014-12-25 17:22:44"], [4, "1973-11-05 21:48:53"], [7, "1982-09-27 14:52:15"], [10, "1976-09-15 19:24:17"], [12, "1996-05-31 06:51:58"], [13, "2015-04-03 09:36:19"], [14, "2017-07-02 17:39:09"], [15, "1986-12-14 14:18:59"], [17, "1983-09-26 09:32:56"], [20, "1996-07-27 03:30:40"], [23, "1999-04-17 14:19:32"], [24, "2005-09-30 00:10:02"], [25, "1985-11-05 17:59:34"]], "db_path": "data/spider/database/cre_Doc_Control_Systems/cre_Doc_Control_Systems.sqlite"}, "annotation": "answer = documents[['document_id', 'receipt_date']];", "exec_result": "    document_id         receipt_date\n0             1  2008-04-21 20:42:25\n1             2  1974-05-08 00:00:46\n2             3  2014-12-25 17:22:44\n3             4  1973-11-05 21:48:53\n4             7  1982-09-27 14:52:15\n5            10  1976-09-15 19:24:17\n6            12  1996-05-31 06:51:58\n7            13  2015-04-03 09:36:19\n8            14  2017-07-02 17:39:09\n9            15  1986-12-14 14:18:59\n10           17  1983-09-26 09:32:56\n11           20  1996-07-27 03:30:40\n12           23  1999-04-17 14:19:32\n13           24  2005-09-30 00:10:02\n14           25  1985-11-05 17:59:34"}
{"metadata": {"db_id": "tracking_software_problems", "query": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\"", "query_toks": ["SELECT", "T1.problem_description", "FROM", "problems", "AS", "T1", "JOIN", "staff", "AS", "T2", "ON", "T1.reported_by_staff_id", "=", "T2.staff_id", "WHERE", "T2.staff_first_name", "=", "``", "Christop", "''"], "query_toks_no_value": ["select", "t1", ".", "problem_description", "from", "problems", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "reported_by_staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "staff_first_name", "=", "value"], "question": "Which problems are reported by the staff with first name \"Christop\"? Show the descriptions of the problems.", "question_toks": ["Which", "problems", "are", "reported", "by", "the", "staff", "with", "first", "name", "``", "Christop", "''", "?", "Show", "the", "descriptions", "of", "the", "problems", "."], "sql": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 24, false], null], [0, 17, false], null]]}, "select": [false, [[0, [0, [0, 27, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], "\"Christop\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Problem_Category_Codes": ["problem_category_code", "problem_category_description"], "Problem_Log": ["problem_log_id", "assigned_to_staff_id", "problem_id", "problem_category_code", "problem_status_code", "log_entry_date", "log_entry_description", "log_entry_fix", "other_log_details"], "Problem_Status_Codes": ["problem_status_code", "problem_status_description"], "Product": ["product_id", "product_name", "product_details"], "Staff": ["staff_id", "staff_first_name", "staff_last_name", "other_staff_details"], "Problems": ["problem_id", "product_id", "closure_authorised_by_staff_id", "reported_by_staff_id", "date_problem_reported", "date_problem_closed", "problem_description", "other_problem_details"]}, "answer": [["w"], ["d"], ["r"]], "db_path": "data/spider/database/tracking_software_problems/tracking_software_problems.sqlite"}, "annotation": "staff_id = staff[staff['staff_first_name'] == 'Christop']['staff_id'].tolist(); answer = problems[problems['reported_by_staff_id'].isin(staff_id)]['problem_description'];", "exec_result": "1     w\n9     d\n14    r\nName: problem_description, dtype: object"}
{"metadata": {"db_id": "wine_1", "query": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005", "query_toks": ["SELECT", "max", "(", "T2.Price", ")", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "WHERE", "T1.Area", "=", "``", "Central", "Coast", "''", "AND", "T2.year", "<", "2005"], "query_toks_no_value": ["select", "max", "(", "t2", ".", "price", ")", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "where", "t1", ".", "area", "=", "value", "and", "t2", ".", "year", "<", "value"], "question": "What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005?", "question_toks": ["What", "is", "the", "maximum", "price", "of", "wines", "from", "the", "appelation", "in", "the", "Central", "Coast", "area", ",", "which", "was", "produced", "before", "2005", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 13, false], null]]}, "select": [false, [[1, [0, [0, 17, false], null]]]], "where": [[false, 2, [0, [0, 8, false], null], "\"Central Coast\"", null], "and", [false, 4, [0, [0, 16, false], null], 2005.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"grapes": ["ID", "Grape", "Color"], "appellations": ["No", "Appelation", "County", "State", "Area", "isAVA"], "wine": ["No", "Grape", "Winery", "Appelation", "State", "Name", "Year", "Price", "Score", "Cases", "Drink"]}, "answer": [[60]], "db_path": "data/spider/database/wine_1/wine_1.sqlite"}, "annotation": "appellations = appellations[appellations['Area'] == 'Central Coast']['Appelation']; wines = wine[(wine['Appelation'].isin(appellations)) & (wine['Year'] < 2005)]; answer = wines['price'].max()", "exec_result": "60"}
{"metadata": {"db_id": "storm_record", "query": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)", "query_toks": ["SELECT", "sum", "(", "number_deaths", ")", ",", "sum", "(", "damage_millions_USD", ")", "FROM", "storm", "WHERE", "max_speed", ">", "(", "SELECT", "avg", "(", "max_speed", ")", "FROM", "storm", ")"], "query_toks_no_value": ["select", "sum", "(", "number_deaths", ")", ",", "sum", "(", "damage_millions_usd", ")", "from", "storm", "where", "max_speed", ">", "(", "select", "avg", "(", "max_speed", ")", "from", "storm", ")"], "question": "What is the total number of deaths and damage for all storms with a max speed greater than the average?", "question_toks": ["What", "is", "the", "total", "number", "of", "deaths", "and", "damage", "for", "all", "storms", "with", "a", "max", "speed", "greater", "than", "the", "average", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[4, [0, [0, 6, false], null]], [4, [0, [0, 5, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"storm": ["Storm_ID", "Name", "Dates_active", "Max_speed", "Damage_millions_USD", "Number_Deaths"], "region": ["Region_id", "Region_code", "Region_name"], "affected_region": ["Region_id", "Storm_ID", "Number_city_affected"]}, "answer": [[5, 40.528999999999996]], "db_path": "data/spider/database/storm_record/storm_record.sqlite"}, "annotation": "average_speed = storm['Max_speed'].mean(); answer = [storm[storm['Max_speed'] > average_speed]['Number_Deaths'].sum(), storm[storm['Max_speed'] > average_speed]['Damage_millions_USD'].sum()]", "exec_result": "[5, 40.528999999999996]"}
{"metadata": {"db_id": "bike_1", "query": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10", "query_toks": ["SELECT", "id", "FROM", "station", "WHERE", "city", "=", "``", "San", "Francisco", "''", "INTERSECT", "SELECT", "station_id", "FROM", "status", "GROUP", "BY", "station_id", "HAVING", "avg", "(", "bikes_available", ")", ">", "10"], "query_toks_no_value": ["select", "id", "from", "station", "where", "city", "=", "value", "intersect", "select", "station_id", "from", "status", "group", "by", "station_id", "having", "avg", "(", "bikes_available", ")", ">", "value"], "question": "What are the ids of the stations in San Francisco that normally have more than 10 bikes available?", "question_toks": ["What", "are", "the", "ids", "of", "the", "stations", "in", "San", "Francisco", "that", "normally", "have", "more", "than", "10", "bikes", "available", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], "\"San Francisco\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [[false, 3, [0, [5, 9, false], null], 10.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "db_table_headers": {"station": ["id", "name", "lat", "long", "dock_count", "city", "installation_date"], "status": ["station_id", "bikes_available", "docks_available", "time"], "trip": ["id", "duration", "start_date", "start_station_name", "start_station_id", "end_date", "end_station_name", "end_station_id", "bike_id", "subscription_type", "zip_code"], "weather": ["date", "max_temperature_f", "mean_temperature_f", "min_temperature_f", "max_dew_point_f", "mean_dew_point_f", "min_dew_point_f", "max_humidity", "mean_humidity", "min_humidity", "max_sea_level_pressure_inches", "mean_sea_level_pressure_inches", "min_sea_level_pressure_inches", "max_visibility_miles", "mean_visibility_miles", "min_visibility_miles", "max_wind_Speed_mph", "mean_wind_speed_mph", "max_gust_speed_mph", "precipitation_inches", "cloud_cover", "events", "wind_dir_degrees", "zip_code"]}, "answer": [[45], [48], [51], [56], [57], [62], [64], [65], [68], [71], [72], [73], [75], [77]], "db_path": "data/spider/database/bike_1/bike_1.sqlite"}, "annotation": "station_ids = station[station['city'] == 'San Francisco']['id']; bike_average = status[status['station_id'].isin(station_ids)].groupby(['station_id']).mean(); answer = bike_average[bike_average['bikes_available'] > 10].index.values;", "exec_result": "[45 48 51 56 57 62 64 65 68 71 72 73 75 77]"}
{"metadata": {"db_id": "phone_market", "query": "SELECT count(*) FROM phone", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "phone"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "phone"], "question": "How many phones are there?", "question_toks": ["How", "many", "phones", "are", "there", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"phone": ["Name", "Phone_ID", "Memory_in_G", "Carrier", "Price"], "market": ["Market_ID", "District", "Num_of_employees", "Num_of_shops", "Ranking"], "phone_market": ["Market_ID", "Phone_ID", "Num_of_stock"]}, "answer": [[5]], "pandas_converted": "pd.Series(phone.shape[0])", "db_path": "data/spider/database/phone_market/phone_market.sqlite"}, "annotation": "answer = len(phone);", "exec_result": "5"}
{"metadata": {"db_id": "manufactory_1", "query": "SELECT DISTINCT headquarter FROM manufacturers", "query_toks": ["SELECT", "DISTINCT", "headquarter", "FROM", "manufacturers"], "query_toks_no_value": ["select", "distinct", "headquarter", "from", "manufacturers"], "question": "Give the distinct headquarters of manufacturers.", "question_toks": ["Give", "the", "distinct", "headquarters", "of", "manufacturers", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [true, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Manufacturers": ["Code", "Name", "Headquarter", "Founder", "Revenue"], "Products": ["Code", "Name", "Price", "Manufacturer"]}, "answer": [["Tokyo"], ["Austin"], ["Los Angeles"], ["Beijing"], ["Taiwan"], ["Paris"]], "db_path": "data/spider/database/manufactory_1/manufactory_1.sqlite"}, "annotation": "answer = manufacturers['Headquarter'].unique();", "exec_result": "['tokyo' 'austin' 'los angeles' 'beijing' 'taiwan' 'paris']"}
{"metadata": {"db_id": "customers_and_addresses", "query": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'", "query_toks": ["SELECT", "customer_name", "FROM", "customers", "WHERE", "payment_method", "!", "=", "'Cash", "'"], "query_toks_no_value": ["select", "customer_name", "from", "customers", "where", "payment_method", "!", "=", "value"], "question": "Find the name of customers who did not pay with Cash.", "question_toks": ["Find", "the", "name", "of", "customers", "who", "did", "not", "pay", "with", "Cash", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 7, [0, [0, 11, false], null], "\"Cash\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "address_content", "city", "zip_postcode", "state_province_county", "country", "other_address_details"], "Products": ["product_id", "product_details"], "Customers": ["customer_id", "payment_method", "customer_name", "date_became_customer", "other_customer_details"], "Customer_Addresses": ["customer_id", "address_id", "date_address_from", "address_type", "date_address_to"], "Customer_Contact_Channels": ["customer_id", "channel_code", "active_from_date", "active_to_date", "contact_number"], "Customer_Orders": ["order_id", "customer_id", "order_status", "order_date", "order_details"], "Order_Items": ["order_id", "product_id", "order_quantity"]}, "answer": [["Tillman Ernser"], ["Rodrick Heaney"], ["Prof. Alexzander Hamill"], ["Prof. Reyes Berge II"], ["Mozell Morissette"], ["Eunice Morar"], ["Devin Mills"], ["Salvatore Tillman"], ["Clifford Pagac"], ["Miss Aliyah Witting"], ["Alexane Kilback"]], "db_path": "data/spider/database/customers_and_addresses/customers_and_addresses.sqlite"}, "annotation": "answer = customers[customers['payment_method'] != 'Cash']['customer_name'];", "exec_result": "1              tillman ernser\n2              rodrick heaney\n3     prof. alexzander hamill\n4        prof. reyes berge ii\n6           mozell morissette\n7                eunice morar\n8                 devin mills\n10          salvatore tillman\n11             clifford pagac\n12        miss aliyah witting\n13            alexane kilback\nName: customer_name, dtype: object"}
{"metadata": {"db_id": "pilot_record", "query": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "T2.Pilot_name", ",", "COUNT", "(", "*", ")", "FROM", "pilot_record", "AS", "T1", "JOIN", "pilot", "AS", "T2", "ON", "T1.pilot_ID", "=", "T2.pilot_ID", "GROUP", "BY", "T2.Pilot_name", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t2", ".", "pilot_name", ",", "count", "(", "*", ")", "from", "pilot_record", "as", "t1", "join", "pilot", "as", "t2", "on", "t1", ".", "pilot_id", "=", "t2", ".", "pilot_id", "group", "by", "t2", ".", "pilot_name", "having", "count", "(", "*", ")", ">", "value"], "question": "Show names of pilots that have more than one record.", "question_toks": ["Show", "names", "of", "pilots", "that", "have", "more", "than", "one", "record", "."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 17, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"aircraft": ["Aircraft_ID", "Order_Year", "Manufacturer", "Model", "Fleet_Series", "Powertrain", "Fuel_Propulsion"], "pilot": ["Pilot_ID", "Pilot_name", "Rank", "Age", "Nationality", "Position", "Join_Year", "Team"], "pilot_record": ["Record_ID", "Pilot_ID", "Aircraft_ID", "Date"]}, "answer": [["Patrick O'Bryant", 3]], "db_path": "data/spider/database/pilot_record/pilot_record.sqlite"}, "annotation": "records = pilot_record['Pilot_ID'].value_counts(); pilot_ids = records[records > 1].index.tolist(); answer = pilot[pilot['Pilot_ID'].isin(pilot_ids)]['Pilot_name'].tolist();", "exec_result": "Expected: [[\"Patrick O'Bryant\", 3]] but got [\"patrick o'bryant\"]"}
{"metadata": {"db_id": "browser_web", "query": "SELECT name FROM browser ORDER BY market_share DESC", "query_toks": ["SELECT", "name", "FROM", "browser", "ORDER", "BY", "market_share", "DESC"], "query_toks_no_value": ["select", "name", "from", "browser", "order", "by", "market_share", "desc"], "question": "List the name of browsers in descending order by market share.", "question_toks": ["List", "the", "name", "of", "browsers", "in", "descending", "order", "by", "market", "share", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 8, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Web_client_accelerator": ["id", "name", "Operating_system", "Client", "Connection"], "browser": ["id", "name", "market_share"], "accelerator_compatible_browser": ["accelerator_id", "browser_id", "compatible_since_year"]}, "answer": [["Internet Explorer"], ["Firefox"], ["Safari"], ["Opera"]], "db_path": "data/spider/database/browser_web/browser_web.sqlite"}, "annotation": "answer = browser.sort_values(by = ['market_share'], ascending = False)['name'].tolist()", "exec_result": "['internet explorer', 'firefox', 'safari', 'opera']"}
{"metadata": {"db_id": "chinook_1", "query": "SELECT Name FROM GENRE", "query_toks": ["SELECT", "Name", "FROM", "GENRE"], "query_toks_no_value": ["select", "name", "from", "genre"], "question": "List the names of all music genres.", "question_toks": ["List", "the", "names", "of", "all", "music", "genres", "."], "sql": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 35, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Album": ["AlbumId", "Title", "ArtistId"], "Artist": ["ArtistId", "Name"], "Customer": ["CustomerId", "FirstName", "LastName", "Company", "Address", "City", "State", "Country", "PostalCode", "Phone", "Fax", "Email", "SupportRepId"], "Employee": ["EmployeeId", "LastName", "FirstName", "Title", "ReportsTo", "BirthDate", "HireDate", "Address", "City", "State", "Country", "PostalCode", "Phone", "Fax", "Email"], "Genre": ["GenreId", "Name"], "Invoice": ["InvoiceId", "CustomerId", "InvoiceDate", "BillingAddress", "BillingCity", "BillingState", "BillingCountry", "BillingPostalCode", "Total"], "InvoiceLine": ["InvoiceLineId", "InvoiceId", "TrackId", "UnitPrice", "Quantity"], "MediaType": ["MediaTypeId", "Name"], "Playlist": ["PlaylistId", "Name"], "PlaylistTrack": ["PlaylistId", "TrackId"], "Track": ["TrackId", "Name", "AlbumId", "MediaTypeId", "GenreId", "Composer", "Milliseconds", "Bytes", "UnitPrice"]}, "answer": [["Rock"], ["Jazz"], ["Metal"], ["Alternative & Punk"], ["Rock And Roll"], ["Blues"], ["Latin"], ["Reggae"], ["Pop"], ["Soundtrack"], ["Bossa Nova"], ["Easy Listening"], ["Heavy Metal"], ["R&B/Soul"], ["Electronica/Dance"], ["World"], ["Hip Hop/Rap"], ["Science Fiction"], ["TV Shows"], ["Sci Fi & Fantasy"], ["Drama"], ["Comedy"], ["Alternative"], ["Classical"], ["Opera"]], "db_path": "data/spider/database/chinook_1/chinook_1.sqlite"}, "annotation": "answer = genre['Name'].tolist();", "exec_result": "['rock', 'jazz', 'metal', 'alternative & punk', 'rock and roll', 'blues', 'latin', 'reggae', 'pop', 'soundtrack', 'bossa nova', 'easy listening', 'heavy metal', 'r&b/soul', 'electronica/dance', 'world', 'hip hop/rap', 'science fiction', 'tv shows', 'sci fi & fantasy', 'drama', 'comedy', 'alternative', 'classical', 'opera']"}
{"metadata": {"db_id": "store_1", "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'", "query_toks": ["SELECT", "T1.name", "FROM", "tracks", "AS", "T1", "JOIN", "playlist_tracks", "AS", "T2", "ON", "T1.id", "=", "T2.track_id", "JOIN", "playlists", "AS", "T3", "ON", "T2.playlist_id", "=", "T3.id", "WHERE", "T3.name", "=", "'Movies", "'", "INTERSECT", "SELECT", "T1.name", "FROM", "tracks", "AS", "T1", "JOIN", "playlist_tracks", "AS", "T2", "ON", "T1.id", "=", "T2.track_id", "JOIN", "playlists", "AS", "T3", "ON", "T2.playlist_id", "=", "T3.id", "WHERE", "T3.name", "=", "'Music", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "tracks", "as", "t1", "join", "playlist_tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "track_id", "join", "playlists", "as", "t3", "on", "t2", ".", "playlist_id", "=", "t3", ".", "id", "where", "t3", ".", "name", "=", "value", "intersect", "select", "t1", ".", "name", "from", "tracks", "as", "t1", "join", "playlist_tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "track_id", "join", "playlists", "as", "t3", "on", "t2", ".", "playlist_id", "=", "t3", ".", "id", "where", "t3", ".", "name", "=", "value"], "question": "What are the names of all the tracks that are in both the Movies and music playlists?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "tracks", "that", "are", "in", "both", "the", "Movies", "and", "music", "playlists", "?"], "sql": {"from": {"table_units": [["table_unit", 8], ["table_unit", 11], ["table_unit", 10]], "conds": [[false, 2, [0, [0, 49, false], null], [0, 66, false], null], "and", [false, 2, [0, [0, 65, false], null], [0, 63, false], null]]}, "select": [false, [[0, [0, [0, 50, false], null]]]], "where": [[false, 2, [0, [0, 64, false], null], "\"Movies\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 8], ["table_unit", 11], ["table_unit", 10]], "conds": [[false, 2, [0, [0, 49, false], null], [0, 66, false], null], "and", [false, 2, [0, [0, 65, false], null], [0, 63, false], null]]}, "select": [false, [[0, [0, [0, 50, false], null]]]], "where": [[false, 2, [0, [0, 64, false], null], "\"Music\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [], "db_path": "data/spider/database/store_1/store_1.sqlite"}, "annotation": "music_ids = playlists[(playlists['name'] == 'Music')]['id'].tolist(); movie_ids =playlists[(playlists['name'] == 'Movies')]['id'].tolist(); music_tracks = playlist_tracks[playlist_tracks['playlist_id'].isin(music_ids)]; movie_tracks = playlist_tracks[playlist_tracks['playlist_id'].isin(movie_ids)]; track_ids = movie_tracks[movie_tracks['playlist_id'].isin(music_tracks['playlist_id'])]; answer = tracks[tracks['id'].isin(track_ids)]['name'].tolist();", "exec_result": "[]"}
{"metadata": {"db_id": "driving_school", "query": "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;", "query_toks": ["SELECT", "customer_status_code", ",", "count", "(", "*", ")", "FROM", "Customers", "GROUP", "BY", "customer_status_code", ";"], "query_toks_no_value": ["select", "customer_status_code", ",", "count", "(", "*", ")", "from", "customers", "group", "by", "customer_status_code"], "question": "List all customer status codes and the number of customers having each status code.", "question_toks": ["List", "all", "customer", "status", "codes", "and", "the", "number", "of", "customers", "having", "each", "status", "code", "."], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 20, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1_number_building", "city", "zip_postcode", "state_province_county", "country"], "Staff": ["staff_id", "staff_address_id", "nickname", "first_name", "middle_name", "last_name", "date_of_birth", "date_joined_staff", "date_left_staff"], "Vehicles": ["vehicle_id", "vehicle_details"], "Customers": ["customer_id", "customer_address_id", "customer_status_code", "date_became_customer", "date_of_birth", "first_name", "last_name", "amount_outstanding", "email_address", "phone_number", "cell_mobile_phone_number"], "Customer_Payments": ["customer_id", "datetime_payment", "payment_method_code", "amount_payment"], "Lessons": ["lesson_id", "customer_id", "lesson_status_code", "staff_id", "vehicle_id", "lesson_date", "lesson_time", "price"]}, "answer": [["Bad Customer", 9], ["Good Customer", 6]], "db_path": "data/spider/database/driving_school/driving_school.sqlite"}, "annotation": "answer = customers['customer_status_code'].value_counts();", "exec_result": "Expected: [['Bad Customer', 9], ['Good Customer', 6]] but got bad customer     9\ngood customer    6\nName: customer_status_code, dtype: int64"}
{"metadata": {"db_id": "apartment_rentals", "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3", "query_toks": ["SELECT", "apt_type_code", "FROM", "Apartments", "GROUP", "BY", "apt_type_code", "ORDER", "BY", "avg", "(", "room_count", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "apt_type_code", "from", "apartments", "group", "by", "apt_type_code", "order", "by", "avg", "(", "room_count", ")", "desc", "limit", "value"], "question": "Show the top 3 apartment type codes sorted by the average number of rooms in descending order.", "question_toks": ["Show", "the", "top", "3", "apartment", "type", "codes", "sorted", "by", "the", "average", "number", "of", "rooms", "in", "descending", "order", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [5, 14, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Apartment_Buildings": ["building_id", "building_short_name", "building_full_name", "building_description", "building_address", "building_manager", "building_phone"], "Apartments": ["apt_id", "building_id", "apt_type_code", "apt_number", "bathroom_count", "bedroom_count", "room_count"], "Apartment_Facilities": ["apt_id", "facility_code"], "Guests": ["guest_id", "gender_code", "guest_first_name", "guest_last_name", "date_of_birth"], "Apartment_Bookings": ["apt_booking_id", "apt_id", "guest_id", "booking_status_code", "booking_start_date", "booking_end_date"], "View_Unit_Status": ["apt_id", "apt_booking_id", "status_date", "available_yn"]}, "answer": [["Studio"], ["Flat"], ["Duplex"]], "db_path": "data/spider/database/apartment_rentals/apartment_rentals.sqlite"}, "annotation": "mean_rooms = apartments.groupby(['apt_type_code']).mean(); answer = mean_rooms.sort_values(by = ['room_count'], ascending = False).head(3).index.values;", "exec_result": "Expected: [['Studio'], ['Flat'], ['Duplex']] but got None"}
{"metadata": {"db_id": "tracking_orders", "query": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"", "query_toks": ["SELECT", "order_id", "FROM", "shipments", "WHERE", "shipment_date", ">", "``", "2000-01-01", "''"], "query_toks_no_value": ["select", "order_id", "from", "shipments", "where", "shipment_date", ">", "value"], "question": "Find the ids of orders which are shipped after 2000-01-01.", "question_toks": ["Find", "the", "ids", "of", "orders", "which", "are", "shipped", "after", "2000-01-01", "."], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 21, false], null]]]], "where": [[false, 3, [0, [0, 24, false], null], "\"2000-01-01\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Customers": ["customer_id", "customer_name", "customer_details"], "Invoices": ["invoice_number", "invoice_date", "invoice_details"], "Orders": ["order_id", "customer_id", "order_status", "date_order_placed", "order_details"], "Products": ["product_id", "product_name", "product_details"], "Order_Items": ["order_item_id", "product_id", "order_id", "order_item_status", "order_item_details"], "Shipments": ["shipment_id", "order_id", "invoice_number", "shipment_tracking_number", "shipment_date", "other_shipment_details"], "Shipment_Items": ["shipment_id", "order_item_id"]}, "answer": [[10], [12]], "db_path": "data/spider/database/tracking_orders/tracking_orders.sqlite"}, "annotation": "answer = shipments[shipments['shipment_date'] > '2000-01-01']['order_id'].tolist();", "exec_result": "[10, 12]"}
{"metadata": {"db_id": "student_assessment", "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1", "query_toks": ["SELECT", "candidate_id", "FROM", "candidate_assessments", "ORDER", "BY", "assessment_date", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "candidate_id", "from", "candidate_assessments", "order", "by", "assessment_date", "desc", "limit", "value"], "question": "Find id of the candidate who most recently accessed the course?", "question_toks": ["Find", "id", "of", "the", "candidate", "who", "most", "recently", "accessed", "the", "course", "?"], "sql": {"from": {"table_units": [["table_unit", 8]], "conds": []}, "select": [false, [[0, [0, [0, 35, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 37, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1", "line_2", "city", "zip_postcode", "state_province_county", "country"], "People": ["person_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "login_name", "password"], "Students": ["student_id", "student_details"], "Courses": ["course_id", "course_name", "course_description", "other_details"], "People_Addresses": ["person_address_id", "person_id", "address_id", "date_from", "date_to"], "Student_Course_Registrations": ["student_id", "course_id", "registration_date"], "Student_Course_Attendance": ["student_id", "course_id", "date_of_attendance"], "Candidates": ["candidate_id", "candidate_details"], "Candidate_Assessments": ["candidate_id", "qualification", "assessment_date", "asessment_outcome_code"]}, "answer": [[121]], "db_path": "data/spider/database/student_assessment/student_assessment.sqlite"}, "annotation": "answer = candidate_assessments.sort_values(by = 'assessment_date', ascending = False)['candidate_id'].head(1);", "exec_result": "1    121\nName: candidate_id, dtype: int64"}
{"metadata": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT count(*) FROM BOOKINGS", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "BOOKINGS"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "bookings"], "question": "Count the total number of bookings made.", "question_toks": ["Count", "the", "total", "number", "of", "bookings", "made", "."], "sql": {"from": {"table_units": [["table_unit", 10]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Ref_Payment_Methods": ["payment_method_code", "payment_method_description"], "Ref_Service_Types": ["Service_Type_Code", "Parent_Service_Type_Code", "Service_Type_Description"], "Addresses": ["Address_ID", "Line_1", "Line_2", "City_Town", "State_County", "Other_Details"], "Products": ["Product_ID", "Product_Name", "Product_Price", "Product_Description", "Other_Product_Service_Details"], "Marketing_Regions": ["Marketing_Region_Code", "Marketing_Region_Name", "Marketing_Region_Descriptrion", "Other_Details"], "Clients": ["Client_ID", "Address_ID", "Customer_Email_Address", "Customer_Name", "Customer_Phone", "Other_Details"], "Drama_Workshop_Groups": ["Workshop_Group_ID", "Address_ID", "Currency_Code", "Marketing_Region_Code", "Store_Name", "Store_Phone", "Store_Email_Address", "Other_Details"], "Performers": ["Performer_ID", "Address_ID", "Customer_Name", "Customer_Phone", "Customer_Email_Address", "Other_Details"], "Customers": ["Customer_ID", "Address_ID", "Customer_Name", "Customer_Phone", "Customer_Email_Address", "Other_Details"], "Stores": ["Store_ID", "Address_ID", "Marketing_Region_Code", "Store_Name", "Store_Phone", "Store_Email_Address", "Other_Details"], "Bookings": ["Booking_ID", "Customer_ID", "Workshop_Group_ID", "Status_Code", "Store_ID", "Order_Date", "Planned_Delivery_Date", "Actual_Delivery_Date", "Other_Order_Details"], "Performers_in_Bookings": ["Order_ID", "Performer_ID"], "Customer_Orders": ["Order_ID", "Customer_ID", "Store_ID", "Order_Date", "Planned_Delivery_Date", "Actual_Delivery_Date", "Other_Order_Details"], "Order_Items": ["Order_Item_ID", "Order_ID", "Product_ID", "Order_Quantity", "Other_Item_Details"], "Invoices": ["Invoice_ID", "Order_ID", "payment_method_code", "Product_ID", "Order_Quantity", "Other_Item_Details", "Order_Item_ID"], "Services": ["Service_ID", "Service_Type_Code", "Workshop_Group_ID", "Product_Description", "Product_Name", "Product_Price", "Other_Product_Service_Details"], "Bookings_Services": ["Order_ID", "Product_ID"], "Invoice_Items": ["Invoice_Item_ID", "Invoice_ID", "Order_ID", "Order_Item_ID", "Product_ID", "Order_Quantity", "Other_Item_Details"]}, "answer": [[15]], "db_path": "data/spider/database/cre_Drama_Workshop_Groups/cre_Drama_Workshop_Groups.sqlite"}, "annotation": "answer = len(bookings);", "exec_result": "15"}
{"metadata": {"db_id": "mountain_photos", "query": "SELECT T1.name ,  count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id  =  T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)", "query_toks": ["SELECT", "T1.name", ",", "count", "(", "*", ")", "FROM", "camera_lens", "AS", "T1", "JOIN", "photos", "AS", "T2", "ON", "T1.id", "=", "T2.camera_lens_id", "GROUP", "BY", "T1.id", "ORDER", "BY", "count", "(", "*", ")"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "count", "(", "*", ")", "from", "camera_lens", "as", "t1", "join", "photos", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "camera_lens_id", "group", "by", "t1", ".", "id", "order", "by", "count", "(", "*", ")"], "question": "What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos.", "question_toks": ["What", "is", "the", "name", "of", "each", "camera", "lens", "and", "the", "number", "of", "photos", "taken", "by", "it", "?", "Order", "the", "result", "by", "the", "count", "of", "photos", "."], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 7, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"mountain": ["id", "name", "Height", "Prominence", "Range", "Country"], "camera_lens": ["id", "brand", "name", "focal_length_mm", "max_aperture"], "photos": ["id", "camera_lens_id", "mountain_id", "color", "name"]}, "answer": [["Panasonic Leica DG Nocticron 42.5mm f /1.2", 1], ["Panasonic Lumix G 150mm f /2.8", 1], ["Olympus 15mm f/8.0 Body Cap", 2], ["Schneider Kreuznach Super Angulon 14mm f /2.0", 2], ["Sigma 19mm f2.8 EX DN", 4]], "db_path": "data/spider/database/mountain_photos/mountain_photos.sqlite"}, "annotation": "photos['camera_lens_id'] = photos['camera_lens_id'].map(camera_lens.set_index('id')['name']); answer = photos['camera_lens_id'].value_counts();", "exec_result": "Expected: [['Panasonic Leica DG Nocticron 42.5mm f /1.2', 1], ['Panasonic Lumix G 150mm f /2.8', 1], ['Olympus 15mm f/8.0 Body Cap', 2], ['Schneider Kreuznach Super Angulon 14mm f /2.0', 2], ['Sigma 19mm f2.8 EX DN', 4]] but got sigma 19mm f2.8 ex dn                            4\nolympus 15mm f/8.0 body cap                      2\nschneider kreuznach super angulon 14mm f /2.0    2\npanasonic leica dg nocticron 42.5mm f /1.2       1\npanasonic lumix g 150mm f /2.8                   1\nName: camera_lens_id, dtype: int64"}
{"metadata": {"db_id": "e_government", "query": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1", "query_toks": ["SELECT", "t3.individual_last_name", "FROM", "organizations", "AS", "t1", "JOIN", "organization_contact_individuals", "AS", "t2", "ON", "t1.organization_id", "=", "t2.organization_id", "JOIN", "individuals", "AS", "t3", "ON", "t2.individual_id", "=", "t3.individual_id", "WHERE", "t1.organization_name", "=", "``", "Labour", "Party", "''", "ORDER", "BY", "t2.date_contact_to", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t3", ".", "individual_last_name", "from", "organizations", "as", "t1", "join", "organization_contact_individuals", "as", "t2", "on", "t1", ".", "organization_id", "=", "t2", ".", "organization_id", "join", "individuals", "as", "t3", "on", "t2", ".", "individual_id", "=", "t3", ".", "individual_id", "where", "t1", ".", "organization_name", "=", "value", "order", "by", "t2", ".", "date_contact_to", "desc", "limit", "value"], "question": "What is the last name of the contact individual from the Labour party organization who was contacted most recently?", "question_toks": ["What", "is", "the", "last", "name", "of", "the", "contact", "individual", "from", "the", "Labour", "party", "organization", "who", "was", "contacted", "most", "recently", "?"], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 6], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 24, false], null], [0, 33, false], null], "and", [false, 2, [0, [0, 32, false], null], [0, 17, false], null]]}, "select": [false, [[0, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 26, false], null], "\"Labour Party\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 35, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1_number_building", "town_city", "zip_postcode", "state_province_county", "country"], "Services": ["service_id", "service_type_code", "service_name", "service_descriptio"], "Forms": ["form_id", "form_type_code", "service_id", "form_number", "form_name", "form_description"], "Individuals": ["individual_id", "individual_first_name", "individual_middle_name", "inidividual_phone", "individual_email", "individual_address", "individual_last_name"], "Organizations": ["organization_id", "date_formed", "organization_name", "uk_vat_number"], "Parties": ["party_id", "payment_method_code", "party_phone", "party_email"], "Organization_Contact_Individuals": ["individual_id", "organization_id", "date_contact_from", "date_contact_to"], "Party_Addresses": ["party_id", "address_id", "date_address_from", "address_type_code", "date_address_to"], "Party_Forms": ["party_id", "form_id", "date_completion_started", "form_status_code", "date_fully_completed"], "Party_Services": ["booking_id", "customer_id", "service_id", "service_datetime", "booking_made_date"]}, "answer": [["Bradtke"]], "db_path": "data/spider/database/e_government/e_government.sqlite"}, "annotation": "individual_id = organization_contact_individuals.sort_values(by = ['date_contact_from'])['individual_id'][0]; answer = individuals[individuals['individual_id'] == individual_id]['individual_last_name'];", "exec_result": "12    bradtke\nName: individual_last_name, dtype: object"}
{"metadata": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT document_status_code FROM Ref_Document_Status;", "query_toks": ["SELECT", "document_status_code", "FROM", "Ref_Document_Status", ";"], "query_toks_no_value": ["select", "document_status_code", "from", "ref_document_status"], "question": "What document status codes do we have?", "question_toks": ["What", "document", "status", "codes", "do", "we", "have", "?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Ref_Document_Types": ["document_type_code", "document_type_description"], "Roles": ["role_code", "role_description"], "Addresses": ["address_id", "address_details"], "Ref_Document_Status": ["document_status_code", "document_status_description"], "Ref_Shipping_Agents": ["shipping_agent_code", "shipping_agent_name", "shipping_agent_description"], "Documents": ["document_id", "document_status_code", "document_type_code", "shipping_agent_code", "receipt_date", "receipt_number", "other_details"], "Employees": ["employee_id", "role_code", "employee_name", "other_details"], "Document_Drafts": ["document_id", "draft_number", "draft_details"], "Draft_Copies": ["document_id", "draft_number", "copy_number"], "Circulation_History": ["document_id", "draft_number", "copy_number", "employee_id"], "Documents_Mailed": ["document_id", "mailed_to_address_id", "mailing_date"]}, "answer": [["done"], ["overdue"], ["working"]], "db_path": "data/spider/database/cre_Doc_Control_Systems/cre_Doc_Control_Systems.sqlite"}, "annotation": "answer = ref_document_status['document_status_code'];", "exec_result": "0    working\n1       done\n2    overdue\nName: document_status_code, dtype: object"}
{"metadata": {"db_id": "wine_1", "query": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "APPELLATIONS", "WHERE", "County", "=", "``", "Napa", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "appellations", "where", "county", "=", "value"], "question": "Count the number of appelations in Napa County.", "question_toks": ["Count", "the", "number", "of", "appelations", "in", "Napa", "County", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], "\"Napa\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"grapes": ["ID", "Grape", "Color"], "appellations": ["No", "Appelation", "County", "State", "Area", "isAVA"], "wine": ["No", "Grape", "Winery", "Appelation", "State", "Name", "Year", "Price", "Score", "Cases", "Drink"]}, "answer": [[11]], "db_path": "data/spider/database/wine_1/wine_1.sqlite"}, "annotation": "answer = len(appellations[appellations['County'] == 'Napa']);", "exec_result": "11"}
{"metadata": {"db_id": "baseball_1", "query": "SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998", "query_toks": ["SELECT", "name_first", ",", "name_last", "FROM", "player", "AS", "T1", "JOIN", "all_star", "AS", "T2", "ON", "T1.player_id", "=", "T2.player_id", "WHERE", "YEAR", "=", "1998"], "query_toks_no_value": ["select", "name_first", ",", "name_last", "from", "player", "as", "t1", "join", "all_star", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "player_id", "where", "year", "=", "value"], "question": "List the first and last name for players who participated in all star game in 1998.", "question_toks": ["List", "the", "first", "and", "last", "name", "for", "players", "who", "participated", "in", "all", "star", "game", "in", "1998", "."], "sql": {"from": {"table_units": [["table_unit", 16], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 182, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 195, false], null]], [0, [0, [0, 196, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], 1998.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"all_star": ["player_id", "year", "game_num", "game_id", "team_id", "league_id", "gp", "starting_pos"], "appearances": ["year", "team_id", "league_id", "player_id", "g_all", "gs", "g_batting", "g_defense", "g_p", "g_c", "g_1b", "g_2b", "g_3b", "g_ss", "g_lf", "g_cf", "g_rf", "g_of", "g_dh", "g_ph", "g_pr"], "manager_award": ["player_id", "award_id", "year", "league_id", "tie", "notes"], "player_award": ["player_id", "award_id", "year", "league_id", "tie", "notes"], "manager_award_vote": ["award_id", "year", "league_id", "player_id", "points_won", "points_max", "votes_first"], "player_award_vote": ["award_id", "year", "league_id", "player_id", "points_won", "points_max", "votes_first"], "batting": ["player_id", "year", "stint", "team_id", "league_id", "g", "ab", "r", "h", "double", "triple", "hr", "rbi", "sb", "cs", "bb", "so", "ibb", "hbp", "sh", "sf", "g_idp"], "batting_postseason": ["year", "round", "player_id", "team_id", "league_id", "g", "ab", "r", "h", "double", "triple", "hr", "rbi", "sb", "cs", "bb", "so", "ibb", "hbp", "sh", "sf", "g_idp"], "player_college": ["player_id", "college_id", "year"], "fielding": ["player_id", "year", "stint", "team_id", "league_id", "pos", "g", "gs", "inn_outs", "po", "a", "e", "dp", "pb", "wp", "sb", "cs", "zr"], "fielding_outfield": ["player_id", "year", "stint", "glf", "gcf", "grf"], "fielding_postseason": ["player_id", "year", "team_id", "league_id", "round", "pos", "g", "gs", "inn_outs", "po", "a", "e", "dp", "tp", "pb", "sb", "cs"], "hall_of_fame": ["player_id", "yearid", "votedby", "ballots", "needed", "votes", "inducted", "category", "needed_note"], "home_game": ["year", "league_id", "team_id", "park_id", "span_first", "span_last", "games", "openings", "attendance"], "manager": ["player_id", "year", "team_id", "league_id", "inseason", "g", "w", "l", "rank", "plyr_mgr"], "manager_half": ["player_id", "year", "team_id", "league_id", "inseason", "half", "g", "w", "l", "rank"], "player": ["player_id", "birth_year", "birth_month", "birth_day", "birth_country", "birth_state", "birth_city", "death_year", "death_month", "death_day", "death_country", "death_state", "death_city", "name_first", "name_last", "name_given", "weight", "height", "bats", "throws", "debut", "final_game", "retro_id", "bbref_id"], "park": ["park_id", "park_name", "park_alias", "city", "state", "country"], "pitching": ["player_id", "year", "stint", "team_id", "league_id", "w", "l", "g", "gs", "cg", "sho", "sv", "ipouts", "h", "er", "hr", "bb", "so", "baopp", "era", "ibb", "wp", "hbp", "bk", "bfp", "gf", "r", "sh", "sf", "g_idp"], "pitching_postseason": ["player_id", "year", "round", "team_id", "league_id", "w", "l", "g", "gs", "cg", "sho", "sv", "ipouts", "h", "er", "hr", "bb", "so", "baopp", "era", "ibb", "wp", "hbp", "bk", "bfp", "gf", "r", "sh", "sf", "g_idp"], "salary": ["year", "team_id", "league_id", "player_id", "salary"], "college": ["college_id", "name_full", "city", "state", "country"], "postseason": ["year", "round", "team_id_winner", "league_id_winner", "team_id_loser", "league_id_loser", "wins", "losses", "ties"], "team": ["year", "league_id", "team_id", "franchise_id", "div_id", "rank", "g", "ghome", "w", "l", "div_win", "wc_win", "lg_win", "ws_win", "r", "ab", "h", "double", "triple", "hr", "bb", "so", "sb", "cs", "hbp", "sf", "ra", "er", "era", "cg", "sho", "sv", "ipouts", "ha", "hra", "bba", "soa", "e", "dp", "fp", "name", "park", "attendance", "bpf", "ppf", "team_id_br", "team_id_lahman45", "team_id_retro"], "team_franchise": ["franchise_id", "franchise_name", "active", "na_assoc"], "team_half": ["year", "league_id", "team_id", "half", "div_id", "div_win", "rank", "g", "w", "l"]}, "answer": [["David", "Wells"], ["Ivan", "Rodriguez"], ["Jim", "Thome"], ["Roberto", "Alomar"], ["Cal", "Ripken"], ["Alex", "Rodriguez"], ["Kenny", "Lofton"], ["Ken", "Griffey"], ["Juan", "Gonzalez"], ["Sandy", "Alomar"], ["Rolando", "Arrojo"], ["Scott", "Brosius"], ["Roger", "Clemens"], ["Bartolo", "Colon"], ["Ray", "Durham"], ["Damion", "Easley"], ["Darin", "Erstad"], ["Tom", "Gordon"], ["Ben", "Grieve"], ["Derek", "Jeter"], ["Pedro", "Martinez"], ["Paul", "O'Neill"], ["Dean", "Palmer"], ["Rafael", "Palmeiro"], ["Troy", "Percival"], ["Brad", "Radke"], ["Manny", "Ramirez"], ["Aaron", "Sele"], ["Mo", "Vaughn"], ["Omar", "Vizquel"], ["John", "Wetteland"], ["Bernie", "Williams"], ["Greg", "Maddux"], ["Mike", "Piazza"], ["Mark", "McGwire"], ["Craig", "Biggio"], ["Chipper", "Jones"], ["Walt", "Weiss"], ["Barry", "Bonds"], ["Larry", "Walker"], ["Tony", "Gwynn"], ["Moises", "Alou"], ["Andy", "Ashby"], ["Dante", "Bichette"], ["Bret", "Boone"], ["Kevin", "Brown"], ["Vinny", "Castilla"], ["Andres", "Galarraga"], ["Tom", "Glavine"], ["Trevor", "Hoffman"], ["Jason", "Kendall"], ["Javy", "Lopez"], ["Robb", "Nen"], ["Rick", "Reed"], ["Edgar", "Renteria"], ["Curt", "Schilling"], ["Jeff", "Shaw"], ["Gary", "Sheffield"], ["Sammy", "Sosa"], ["Ugueth", "Urbina"], ["Greg", "Vaughn"], ["Fernando", "Vina"], ["Devon", "White"]], "db_path": "data/spider/database/baseball_1/baseball_1.sqlite"}, "annotation": "player_ids = all_star[all_star['year'] == 1998]['player_id']; answer = player[player['player_id'].isin(player_ids)][['name_first', 'name_last']];", "exec_result": "      name_first  name_last\n241      roberto     alomar\n243        sandy     alomar\n248       moises       alou\n456      rolando     arrojo\n472         andy      ashby\n...          ...        ...\n17950       walt      weiss\n17972      david      wells\n18034       john  wetteland\n18088      devon      white\n18222     bernie   williams\n\n[63 rows x 2 columns]"}
{"metadata": {"db_id": "insurance_fnol", "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4", "query_toks": ["SELECT", "policy_type_code", "FROM", "available_policies", "GROUP", "BY", "policy_type_code", "HAVING", "count", "(", "*", ")", ">", "4"], "query_toks_no_value": ["select", "policy_type_code", "from", "available_policies", "group", "by", "policy_type_code", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the policy type used by more than 4 customers.", "question_toks": ["Find", "the", "policy", "type", "used", "by", "more", "than", "4", "customers", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [[false, 3, [0, [3, 0, false], null], 4.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Customers": ["Customer_ID", "Customer_name"], "Services": ["Service_ID", "Service_name"], "Available_Policies": ["Policy_ID", "policy_type_code", "Customer_Phone"], "Customers_Policies": ["Customer_ID", "Policy_ID", "Date_Opened", "Date_Closed"], "First_Notification_of_Loss": ["FNOL_ID", "Customer_ID", "Policy_ID", "Service_ID"], "Claims": ["Claim_ID", "FNOL_ID", "Effective_Date"], "Settlements": ["Settlement_ID", "Claim_ID", "Effective_Date", "Settlement_Amount"]}, "answer": [["Mortgage Insurance"], ["Property Insurance"]], "db_path": "data/spider/database/insurance_fnol/insurance_fnol.sqlite"}, "annotation": "policy_count = available_policies['policy_type_code'].value_counts(); answer = policy_count[policy_count > 4].index.tolist();", "exec_result": "['property insurance', 'mortgage insurance']"}
{"metadata": {"db_id": "ship_mission", "query": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "ship", "ORDER", "BY", "Tonnage", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "ship", "order", "by", "tonnage", "desc", "limit", "value"], "question": "What is the ship with the largest amount of tonnage called?", "question_toks": ["What", "is", "the", "ship", "with", "the", "largest", "amount", "of", "tonnage", "called", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 12, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"mission": ["Mission_ID", "Ship_ID", "Code", "Launched_Year", "Location", "Speed_knots", "Fate"], "ship": ["Ship_ID", "Name", "Type", "Nationality", "Tonnage"]}, "answer": [["Appam"]], "db_path": "data/spider/database/ship_mission/ship_mission.sqlite"}, "annotation": "answer = ship.sort_values(by = ['Tonnage'], ascending = False)['Name'].head(1);", "exec_result": "6    appam\nName: name, dtype: object"}
{"metadata": {"db_id": "baseball_1", "query": "SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;", "query_toks": ["SELECT", "T2.team_id", ",", "T2.rank", "FROM", "home_game", "AS", "T1", "JOIN", "team", "AS", "T2", "ON", "T1.team_id", "=", "T2.team_id", "WHERE", "T1.year", "=", "2014", "GROUP", "BY", "T1.team_id", "ORDER", "BY", "avg", "(", "T1.attendance", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "team_id", ",", "t2", ".", "rank", "from", "home_game", "as", "t1", "join", "team", "as", "t2", "on", "t1", ".", "team_id", "=", "t2", ".", "team_id", "where", "t1", ".", "year", "=", "value", "group", "by", "t1", ".", "team_id", "order", "by", "avg", "(", "t1", ".", "attendance", ")", "desc", "limit", "value"], "question": "Find the id and rank of the team that has the highest average attendance rate in 2014.", "question_toks": ["Find", "the", "id", "and", "rank", "of", "the", "team", "that", "has", "the", "highest", "average", "attendance", "rate", "in", "2014", "."], "sql": {"from": {"table_units": [["table_unit", 13], ["table_unit", 23]], "conds": [[false, 2, [0, [0, 155, false], null], [0, 293, false], null]]}, "select": [false, [[0, [0, [0, 293, false], null]], [0, [0, [0, 296, false], null]]]], "where": [[false, 2, [0, [0, 153, false], null], 2014.0, null]], "groupBy": [[0, 155, false]], "having": [], "orderBy": ["desc", [[0, [5, 161, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"all_star": ["player_id", "year", "game_num", "game_id", "team_id", "league_id", "gp", "starting_pos"], "appearances": ["year", "team_id", "league_id", "player_id", "g_all", "gs", "g_batting", "g_defense", "g_p", "g_c", "g_1b", "g_2b", "g_3b", "g_ss", "g_lf", "g_cf", "g_rf", "g_of", "g_dh", "g_ph", "g_pr"], "manager_award": ["player_id", "award_id", "year", "league_id", "tie", "notes"], "player_award": ["player_id", "award_id", "year", "league_id", "tie", "notes"], "manager_award_vote": ["award_id", "year", "league_id", "player_id", "points_won", "points_max", "votes_first"], "player_award_vote": ["award_id", "year", "league_id", "player_id", "points_won", "points_max", "votes_first"], "batting": ["player_id", "year", "stint", "team_id", "league_id", "g", "ab", "r", "h", "double", "triple", "hr", "rbi", "sb", "cs", "bb", "so", "ibb", "hbp", "sh", "sf", "g_idp"], "batting_postseason": ["year", "round", "player_id", "team_id", "league_id", "g", "ab", "r", "h", "double", "triple", "hr", "rbi", "sb", "cs", "bb", "so", "ibb", "hbp", "sh", "sf", "g_idp"], "player_college": ["player_id", "college_id", "year"], "fielding": ["player_id", "year", "stint", "team_id", "league_id", "pos", "g", "gs", "inn_outs", "po", "a", "e", "dp", "pb", "wp", "sb", "cs", "zr"], "fielding_outfield": ["player_id", "year", "stint", "glf", "gcf", "grf"], "fielding_postseason": ["player_id", "year", "team_id", "league_id", "round", "pos", "g", "gs", "inn_outs", "po", "a", "e", "dp", "tp", "pb", "sb", "cs"], "hall_of_fame": ["player_id", "yearid", "votedby", "ballots", "needed", "votes", "inducted", "category", "needed_note"], "home_game": ["year", "league_id", "team_id", "park_id", "span_first", "span_last", "games", "openings", "attendance"], "manager": ["player_id", "year", "team_id", "league_id", "inseason", "g", "w", "l", "rank", "plyr_mgr"], "manager_half": ["player_id", "year", "team_id", "league_id", "inseason", "half", "g", "w", "l", "rank"], "player": ["player_id", "birth_year", "birth_month", "birth_day", "birth_country", "birth_state", "birth_city", "death_year", "death_month", "death_day", "death_country", "death_state", "death_city", "name_first", "name_last", "name_given", "weight", "height", "bats", "throws", "debut", "final_game", "retro_id", "bbref_id"], "park": ["park_id", "park_name", "park_alias", "city", "state", "country"], "pitching": ["player_id", "year", "stint", "team_id", "league_id", "w", "l", "g", "gs", "cg", "sho", "sv", "ipouts", "h", "er", "hr", "bb", "so", "baopp", "era", "ibb", "wp", "hbp", "bk", "bfp", "gf", "r", "sh", "sf", "g_idp"], "pitching_postseason": ["player_id", "year", "round", "team_id", "league_id", "w", "l", "g", "gs", "cg", "sho", "sv", "ipouts", "h", "er", "hr", "bb", "so", "baopp", "era", "ibb", "wp", "hbp", "bk", "bfp", "gf", "r", "sh", "sf", "g_idp"], "salary": ["year", "team_id", "league_id", "player_id", "salary"], "college": ["college_id", "name_full", "city", "state", "country"], "postseason": ["year", "round", "team_id_winner", "league_id_winner", "team_id_loser", "league_id_loser", "wins", "losses", "ties"], "team": ["year", "league_id", "team_id", "franchise_id", "div_id", "rank", "g", "ghome", "w", "l", "div_win", "wc_win", "lg_win", "ws_win", "r", "ab", "h", "double", "triple", "hr", "bb", "so", "sb", "cs", "hbp", "sf", "ra", "er", "era", "cg", "sho", "sv", "ipouts", "ha", "hra", "bba", "soa", "e", "dp", "fp", "name", "park", "attendance", "bpf", "ppf", "team_id_br", "team_id_lahman45", "team_id_retro"], "team_franchise": ["franchise_id", "franchise_name", "active", "na_assoc"], "team_half": ["year", "league_id", "team_id", "half", "div_id", "div_win", "rank", "g", "w", "l"]}, "answer": [["LAN", 1]], "db_path": "data/spider/database/baseball_1/baseball_1.sqlite"}, "annotation": "id = home_game[home_game['year'] == 2014].groupby(['team_id']).mean().sort_values(by='attendance', ascending = False).index[0]; answer = team[(team['team_id'] == id) & (team['year'] == 2014)][['team_id', 'rank']];", "exec_result": "     team_id  rank\n2758     lan     1"}
{"metadata": {"db_id": "allergy_1", "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Allergy_type", "WHERE", "allergytype", "=", "``", "animal", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "allergy_type", "where", "allergytype", "=", "value"], "question": "How many allergies have type animal?", "question_toks": ["How", "many", "allergies", "have", "type", "animal", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"animal\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Allergy_Type": ["Allergy", "AllergyType"], "Has_Allergy": ["StuID", "Allergy"], "Student": ["StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code"]}, "answer": [[4]], "db_path": "data/spider/database/allergy_1/allergy_1.sqlite"}, "annotation": "answer = len(allergy_type[allergy_type['allergytype'] == 'animal']);", "exec_result": "4"}
{"metadata": {"db_id": "voter_2", "query": "SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD", "query_toks": ["SELECT", "count", "(", "DISTINCT", "President_Vote", ")", "FROM", "VOTING_RECORD"], "query_toks_no_value": ["select", "count", "(", "distinct", "president_vote", ")", "from", "voting_record"], "question": "How many distinct president votes are recorded?", "question_toks": ["How", "many", "distinct", "president", "votes", "are", "recorded", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 12, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Student": ["StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code"], "Voting_record": ["StuID", "Registration_Date", "Election_Cycle", "President_Vote", "Vice_President_Vote", "Secretary_Vote", "Treasurer_Vote", "Class_President_Vote", "Class_Senator_Vote"]}, "answer": [[3]], "db_path": "data/spider/database/voter_2/voter_2.sqlite"}, "annotation": "answer = len(voting_record['president_vote'].unique());", "exec_result": "3"}
{"metadata": {"db_id": "college_1", "query": "SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code", "query_toks": ["SELECT", "sum", "(", "stu_hrs", ")", ",", "dept_code", "FROM", "student", "GROUP", "BY", "dept_code"], "query_toks_no_value": ["select", "sum", "(", "stu_hrs", ")", ",", "dept_code", "from", "student", "group", "by", "dept_code"], "question": "Find the total number of hours have done for all students in each department.", "question_toks": ["Find", "the", "total", "number", "of", "hours", "have", "done", "for", "all", "students", "in", "each", "department", "."], "sql": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[4, [0, [0, 37, false], null]], [0, [0, [0, 41, false], null]]]], "where": [], "groupBy": [[0, 41, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"CLASS": ["CLASS_CODE", "CRS_CODE", "CLASS_SECTION", "CLASS_TIME", "CLASS_ROOM", "PROF_NUM"], "COURSE": ["CRS_CODE", "DEPT_CODE", "CRS_DESCRIPTION", "CRS_CREDIT"], "DEPARTMENT": ["DEPT_CODE", "DEPT_NAME", "SCHOOL_CODE", "EMP_NUM", "DEPT_ADDRESS", "DEPT_EXTENSION"], "EMPLOYEE": ["EMP_NUM", "EMP_LNAME", "EMP_FNAME", "EMP_INITIAL", "EMP_JOBCODE", "EMP_HIREDATE", "EMP_DOB"], "ENROLL": ["CLASS_CODE", "STU_NUM", "ENROLL_GRADE"], "PROFESSOR": ["EMP_NUM", "DEPT_CODE", "PROF_OFFICE", "PROF_EXTENSION", "PROF_HIGH_DEGREE"], "STUDENT": ["STU_NUM", "STU_LNAME", "STU_FNAME", "STU_INIT", "STU_DOB", "STU_HRS", "STU_CLASS", "STU_GPA", "STU_TRANSFER", "DEPT_CODE", "STU_PHONE", "PROF_NUM"]}, "answer": [[165, "ACCT"], [42, "BIOL"], [147, "CIS"], [120, "EDU"], [102, "ENGL"]], "db_path": "data/spider/database/college_1/college_1.sqlite"}, "annotation": "answer = student.groupby(['DEPT_CODE']).sum().reindex()['STU_HRS'];", "exec_result": "dept_code\nacct    165\nbiol     42\ncis     147\nedu     120\nengl    102\nName: stu_hrs, dtype: int64"}
{"metadata": {"db_id": "flight_4", "query": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "city", "FROM", "airports", "WHERE", "country", "=", "'United", "States", "'", "GROUP", "BY", "city", "ORDER", "BY", "count", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "city", "from", "airports", "where", "country", "=", "value", "group", "by", "city", "order", "by", "count", "(", "*", ")", "desc"], "question": "How many airports are there per city in the United States? Order the cities by decreasing number of airports.", "question_toks": ["How", "many", "airports", "are", "there", "per", "city", "in", "the", "United", "States", "?", "Order", "the", "cities", "by", "decreasing", "number", "of", "airports", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"United States\"", null]], "groupBy": [[0, 11, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"routes": ["rid", "dst_apid", "dst_ap", "src_apid", "src_ap", "alid", "airline", "codeshare"], "airports": ["apid", "name", "city", "country", "x", "y", "elevation", "iata", "icao"], "airlines": ["alid", "name", "iata", "icao", "callsign", "country", "active"]}, "answer": [[7, "Columbus"], [6, "Houston"], [5, "Jacksonville"], [5, "Greenville"], [5, "Atlanta"], [4, "Tucson"], [4, "San Antonio"], [4, "Sacramento"], [4, "New York"], [4, "Las Vegas"], [4, "Georgetown"], [4, "Chicago"], [4, "Burlington"], [4, "Anchorage"], [3, "Wilmington"], [3, "Wichita"], [3, "Washington"], [3, "Tampa"], [3, "Springfield"], [3, "Spokane"], [3, "Shreveport"], [3, "San Diego"], [3, "Rochester"], [3, "Riverside"], [3, "Richmond"], [3, "Phoenix"], [3, "Philadelphia"], [3, "Panama City"], [3, "Palm Springs"], [3, "Oxford"], [3, "Oklahoma City"], [3, "New Orleans"], [3, "Mobile"], [3, "Miami"], [3, "Macon"], [3, "Key West"], [3, "Jackson"], [3, "Huntsville"], [3, "Douglas"], [3, "Detroit"], [3, "Denver"], [3, "Dayton"], [3, "Dallas"], [3, "Columbia"], [3, "Cleveland"], [3, "Charleston"], [3, "Brunswick"], [3, "Augusta"], [3, "Athens"], [3, "Alexandria"], [3, "Akron"], [2, "West Palm Beach"], [2, "Watertown"], [2, "Waco"], [2, "Valdosta"], [2, "Uvalde"], [2, "Tulsa"], [2, "Topeka"], [2, "Tonopah"], [2, "Tok"], [2, "Tacoma"], [2, "St. Petersburg"], [2, "Sidney"], [2, "Seattle"], [2, "Scranton"], [2, "Santa Barbara"], [2, "San Jose"], [2, "Salt Lake City"], [2, "Rome"], [2, "Rapid City"], [2, "Portland"], [2, "Port Angeles"], [2, "Pittsburgh"], [2, "Petersburg"], [2, "Peru"], [2, "Perry"], [2, "Pensacola"], [2, "Orlando"], [2, "Ontario"], [2, "Omaha"], [2, "Olathe"], [2, "Ogden"], [2, "Null"], [2, "Norfolk"], [2, "Mountain Home"], [2, "Morristown"], [2, "Montgomery"], [2, "Monroe"], [2, "Molokai"], [2, "Minot"], [2, "Milwaukee"], [2, "Mesa"], [2, "Merced"], [2, "Memphis"], [2, "Marysville"], [2, "Marshfield"], [2, "Marshall"], [2, "Madison"], [2, "Louisville"], [2, "Los Angeles"], [2, "Longview"], [2, "London"], [2, "Lompoc"], [2, "Lincoln"], [2, "Lewiston"], [2, "Leesburg"], [2, "Lawrence"], [2, "Lansing"], [2, "Lancaster"], [2, "Lafayette"], [2, "Knoxville"], [2, "Klawock"], [2, "Kansas City"], [2, "Jasper"], [2, "Jamestown"], [2, "Indianapolis"], [2, "Hillsboro"], [2, "Hayward"], [2, "Harrisburg"], [2, "Hampton"], [2, "Hamilton"], [2, "Glasgow"], [2, "Gainesville"], [2, "Fort Worth"], [2, "Fort Myers"], [2, "Fort Lauderdale"], [2, "Flagler"], [2, "Fayetteville"], [2, "Fairbanks"], [2, "Ely"], [2, "Elkhart"], [2, "El Paso"], [2, "Dillingham"], [2, "Del Rio"], [2, "Danville"], [2, "Crestview"], [2, "Corpus Christi"], [2, "Concord"], [2, "Cold Bay"], [2, "Clovis"], [2, "Clinton"], [2, "Cincinnati"], [2, "Carlsbad"], [2, "Bloomington"], [2, "Bedford"], [2, "Beaumont"], [2, "Baltimore"], [2, "Austin"], [2, "Arlington"], [2, "Albany"], [2, "Alamogordo"], [2, "Abilene"], [2, "Aberdeen"], [1, "Zuni Pueblo"], [1, "Zephyrhills"], [1, "Zelienople"], [1, "Zanesville"], [1, "Yuma"], [1, "Yuba City"], [1, "Youngstown"], [1, "Yankton"], [1, "Yakutat"], [1, "Yakima"], [1, "Yakataga"], [1, "Wuchula"], [1, "Wrightstown"], [1, "Wright"], [1, "Wrangell"], [1, "Worland"], [1, "Worcester"], [1, "Woodward"], [1, "Wolf Point"], [1, "Wisconsin Rapids"], [1, "Winter Haven"], [1, "Winston-salem"], [1, "Winslow"], [1, "Winnsboro"], [1, "Winnemucca"], [1, "Wink"], [1, "Winfield"], [1, "Windsor Locks"], [1, "Windom"], [1, "Winder"], [1, "Willow Grove"], [1, "Willoughby"], [1, "Williston"], [1, "Willimantic"], [1, "Williamsport"], [1, "Williamson"], [1, "Williamsburg"], [1, "Wilkes-Barre"], [1, "Wildwood"], [1, "Wickenburg"], [1, "Wichita Falls"], [1, "Whittier"], [1, "White Sands"], [1, "White Plains"], [1, "White Mountain"], [1, "Whidbey Island"], [1, "Wheeling"], [1, "Weyers Cave"], [1, "Westfield"], [1, "West Yellowstone"], [1, "West Hampton Beach"], [1, "West Goshen Township"], [1, "West Chicago"], [1, "Wendover"], [1, "Wenatchee"], [1, "Wellington"], [1, "Wausau"], [1, "Waupaca"], [1, "Watsonville"], [1, "Waterloo"], [1, "Wassau"], [1, "Wasilla"], [1, "Washington County"], [1, "Warsaw"], [1, "Wallops Island"], [1, "Wallace"], [1, "Walla Walla"], [1, "Wales"], [1, "Wainwright"], [1, "Waikoloa Village"], [1, "Wahoo"], [1, "Wahiawa"], [1, "Visalia"], [1, "Vineyard Haven MA"], [1, "Villa Rica"], [1, "Victorville"], [1, "Victoria"], [1, "Vero Beach"], [1, "Vernal"], [1, "Venice"], [1, "Venetie"], [1, "Van Wert"], [1, "Van Nuys"], [1, "Valparaiso IN"], [1, "Valparaiso"], [1, "Valentine"], [1, "Valdez"], [1, "Vail"], [1, "Upland"], [1, "Unalaska"], [1, "Unalakleet"], [1, "Ulysses"], [1, "Ukiah"], [1, "Tyler"], [1, "Twin Falls"], [1, "Twenty Nine Palms"], [1, "Tuscaloosa AL"], [1, "Tupelo"], [1, "Tunica"], [1, "Tucumcari"], [1, "Truth Or Consequences"], [1, "Truckee"], [1, "Troy"], [1, "Troutdale"], [1, "Trenton"], [1, "Traverse City"], [1, "Torrance"], [1, "Tomah"], [1, "Toledo"], [1, "Toksook Bay"], [1, "Togiak Village"], [1, "Toccoa"], [1, "Titusville"], [1, "Tin City"], [1, "Tillamook"], [1, "Tifton"], [1, "Thomson"], [1, "Thomasville"], [1, "Thief River Falls"], [1, "The Dalles"], [1, "Texarkana"], [1, "Teterboro"], [1, "Terre Haute"], [1, "Temple"], [1, "Telluride"], [1, "Teller"], [1, "Taunton"], [1, "Tatalina"], [1, "Tallahassee"], [1, "Talladega"], [1, "Talkeetna"], [1, "Syracuse"], [1, "Sylvania"], [1, "Sylacauga"], [1, "Sutton"], [1, "Sumter"], [1, "Summit"], [1, "Sugar Land"], [1, "Sublette"], [1, "Stuart"], [1, "Stratford"], [1, "Stockton"], [1, "Stinson"], [1, "Stillwater"], [1, "Stevens Point"], [1, "Sterling"], [1, "Stephenville"], [1, "Steamboat Springs"], [1, "Statesville"], [1, "State College Pennsylvania"], [1, "St. Paul Island"], [1, "St. Paul"], [1, "St. Michael"], [1, "St. Louis"], [1, "St. Augustine Airport"], [1, "St Mary's"], [1, "Spencer"], [1, "Spearfish-South Dakota"], [1, "Sparrevohn"], [1, "South Naknek"], [1, "South Lake Tahoe"], [1, "South Haven"], [1, "South Bend"], [1, "Sonora"], [1, "Somerville"], [1, "Somerset"], [1, "Soldotna"], [1, "Smyrna"], [1, "Smithfield"], [1, "Sleetmute"], [1, "Skagway"], [1, "Sitka"], [1, "Sioux Falls"], [1, "Sioux City"], [1, "Silver Springs"], [1, "Sikeston"], [1, "Shungnak"], [1, "Show Low"], [1, "Shishmaref"], [1, "Sheridan"], [1, "Shelton"], [1, "Shell Knob"], [1, "Shelbyville"], [1, "Sheboygan"], [1, "Shaktoolik"], [1, "Shageluk"], [1, "Seward"], [1, "Sewanee"], [1, "Selma"], [1, "Selawik"], [1, "Sedona"], [1, "Sebring"], [1, "Scottsdale"], [1, "Scottsbluff"], [1, "Scott City"], [1, "Scotia NY"], [1, "Scammon Bay"], [1, "Savoonga"], [1, "Savannah"], [1, "Sault Ste Marie"], [1, "Sarasota"], [1, "Saranac Lake"], [1, "Santa Rosa"], [1, "Santa Monica"], [1, "Santa Maria"], [1, "Santa Fe"], [1, "Santa Ana"], [1, "Sanford"], [1, "Sandusky"], [1, "Sand Point"], [1, "San Nicolas Island"], [1, "San Marcos"], [1, "San Luis Obispo"], [1, "San Luis"], [1, "San Francisco"], [1, "San Clemente Island"], [1, "San Carlos"], [1, "San Bernardino"], [1, "San Angelo"], [1, "Saluda"], [1, "Salmon"], [1, "Sallisaw"], [1, "Salisbury"], [1, "Salinas"], [1, "Salina"], [1, "Salem"], [1, "Saint George"], [1, "Saint Cloud"], [1, "Saginaw"], [1, "Safford"], [1, "Sabetha"], [1, "SARATOGA"], [1, "Rutland"], [1, "Russian Mission"], [1, "Russell"], [1, "Ruidoso"], [1, "Ruby"], [1, "Roxboro"], [1, "Roswell"], [1, "Rosecrans"], [1, "Rocky Mount"], [1, "Rockport"], [1, "Rockland"], [1, "Rockingham"], [1, "Rockford"], [1, "Rock Springs"], [1, "Rock Hill"], [1, "Robinson"], [1, "Roanoke VA"], [1, "Riverton WY"], [1, "Rifle"], [1, "Ridgely"], [1, "Richmond Heights"], [1, "Richfield"], [1, "Rhinelander"], [1, "Rhinebeck"], [1, "Renton"], [1, "Reno"], [1, "Redwood Falls"], [1, "Redstone"], [1, "Redmond-Bend"], [1, "Redlands"], [1, "Redding"], [1, "Red River"], [1, "Red Bluff"], [1, "Reading"], [1, "Rawlins"], [1, "Rancho Murieta"], [1, "Ramona"], [1, "Raleigh-durham"], [1, "Racine"], [1, "Quitman"], [1, "Quinhagak"], [1, "Quincy"], [1, "Queensbury"], [1, "Quantico"], [1, "Quakertown"], [1, "Punta Gorda"], [1, "Pullman"], [1, "Pueblo"], [1, "Provo"], [1, "Provincetown"], [1, "Providence"], [1, "Prosser"], [1, "Prospect Creek"], [1, "Prineville"], [1, "Princeton"], [1, "Price"], [1, "Presque Isle"], [1, "Prescott"], [1, "Pratt"], [1, "Poughkeepsie"], [1, "Poteau"], [1, "Portsmouth"], [1, "Port O\\\\'Connor"], [1, "Port Moller"], [1, "Port Huron"], [1, "Port Heiden"], [1, "Port Clinton"], [1, "Poplar Bluff"], [1, "Pontiac"], [1, "Ponca City"], [1, "Pompano Beach"], [1, "Point Mugu"], [1, "Point Lay"], [1, "Point Barrow"], [1, "Pocatello"], [1, "Plymouth"], [1, "Plattsburgh"], [1, "Placida"], [1, "Pineville"], [1, "Pinehurst-Southern Pines"], [1, "Pinedale"], [1, "Pine Mountain"], [1, "Pine Bluff"], [1, "Pilot Point"], [1, "Pikeville"], [1, "Pierre"], [1, "Phoenix "], [1, "Phillips"], [1, "Perryville"], [1, "Peoria"], [1, "Pendleton"], [1, "Pembina"], [1, "Pellston"], [1, "Pecos"], [1, "Patuxent River"], [1, "Paso Robles"], [1, "Pasco"], [1, "Paris"], [1, "Palo Alto"], [1, "Palmer"], [1, "Palmdale"], [1, "Palacios"], [1, "Pahokee"], [1, "Page"], [1, "PARKERSBURG"], [1, "PADUCAH"], [1, "Ozona"], [1, "Oxnard"], [1, "Owensboro"], [1, "Ottumwa"], [1, "Oshkosh"], [1, "Oscoda"], [1, "Ormond Beach"], [1, "Orangeburg"], [1, "Opolu"], [1, "Olympia"], [1, "Olive Branch"], [1, "Okmulgee"], [1, "Okeechobee"], [1, "Ogdensburg"], [1, "Oconomowoc"], [1, "Oceana"], [1, "Ocean Reef Club Airport"], [1, "Ocala"], [1, "Oakley"], [1, "Oakland"], [1, "Oak Island"], [1, "Nulato"], [1, "Nuiqsut"], [1, "Novato"], [1, "Norwood"], [1, "Northway"], [1, "North Wilkesboro"], [1, "North Platte"], [1, "North Myrtle Beach"], [1, "North Kingstown"], [1, "North Bend"], [1, "Norfolk  Nebraska"], [1, "Noorvik"], [1, "Nondalton"], [1, "Nome"], [1, "Nogales"], [1, "Noatak"], [1, "Nikolai"], [1, "Nightmute"], [1, "Niagara Falls"], [1, "Newton"], [1, "Newport News"], [1, "Newport"], [1, "Newnan"], [1, "Newburgh"], [1, "Newberry"], [1, "Newark"], [1, "New Stuyahok"], [1, "New Richmond"], [1, "New Philadelpha"], [1, "New Haven"], [1, "New Castle"], [1, "New Bern"], [1, "New Bedford"], [1, "Neodesha"], [1, "Nenana"], [1, "Nelson Lagoon"], [1, "Needles"], [1, "Nashville"], [1, "Nashua"], [1, "Nappanee "], [1, "Naples"], [1, "Napaskiak"], [1, "Napakiak"], [1, "Napa"], [1, "Nantucket"], [1, "Myrtle Beach"], [1, "Muskogee"], [1, "Muskegon"], [1, "Muscle Shoals"], [1, "Murrieta-Temecula"], [1, "Muncie"], [1, "Muir"], [1, "Mountain Village"], [1, "Mountain View"], [1, "Mount Sterling"], [1, "Mount Pocono"], [1, "Mount Pleasant"], [1, "Mount Holly"], [1, "Mount Clemens"], [1, "Morrisville"], [1, "Morgantown"], [1, "Morganton"], [1, "Monument Valley"], [1, "Montrose CO"], [1, "Montpelier"], [1, "Monticello"], [1, "Monterey"], [1, "Montauk"], [1, "Moline"], [1, "Mojave"], [1, "Modesto"], [1, "Mobridge"], [1, "Moab"], [1, "Missoula"], [1, "Misquite"], [1, "Miramar"], [1, "Minocqua - Woodruff"], [1, "Minneapolis"], [1, "Mineral Wells"], [1, "Milton"], [1, "Millville"], [1, "Millinocket"], [1, "Millington"], [1, "Milledgeville"], [1, "Miles City"], [1, "Midland"], [1, "Michigan City"], [1, "Metakatla"], [1, "Meridian"], [1, "Meriden"], [1, "Mercury"], [1, "Melbourne"], [1, "Mekoryuk"], [1, "Medford"], [1, "Meade"], [1, "Mcgrath"], [1, "Mcallen"], [1, "Mcalester"], [1, "McKinley Park"], [1, "McCook"], [1, "McCall"], [1, "Mc Pherson"], [1, "Mc Comb"], [1, "Mayport"], [1, "Mattawa"], [1, "Massena"], [1, "Mason City"], [1, "Mary Esther"], [1, "Martinsburg"], [1, "Marquette"], [1, "Mariposa"], [1, "Marion"], [1, "Marietta"], [1, "Marfa"], [1, "Marco Island Airport"], [1, "Marathon"], [1, "Marana"], [1, "Manteo"], [1, "Mansfield"], [1, "Manokotak"], [1, "Manley Hot Springs"], [1, "Mankato"], [1, "Manistee"], [1, "Manhattan"], [1, "Manchester NH"], [1, "Manassas"], [1, "Mammoth Lakes"], [1, "Malad City"], [1, "Madera"], [1, "Mackminnville"], [1, "MONTGOMERY"], [1, "Lynchburg"], [1, "Lumberton"], [1, "Lufkin"], [1, "Ludington"], [1, "Lubbock"], [1, "Lovelock"], [1, "Louisiana"], [1, "Los Alamos"], [1, "Lorain-Elyria"], [1, "Lopez"], [1, "Long Beach"], [1, "Lone Rock"], [1, "Logan"], [1, "Locust Grove"], [1, "Lockport"], [1, "Lock Haven"], [1, "Livingston-Montana"], [1, "Livermore"], [1, "Little Rock"], [1, "Linden"], [1, "Lima"], [1, "Lihue"], [1, "Liberty"], [1, "Liberal"], [1, "Lexington KY"], [1, "Lexington"], [1, "Lewistown"], [1, "Lewisburg"], [1, "Lemoore"], [1, "Lebanon"], [1, "Lawton"], [1, "Lawrenceville"], [1, "Latrobe"], [1, "Las Cruces"], [1, "Larsen Bay"], [1, "Larned"], [1, "Laredo"], [1, "Laramie"], [1, "Lanai"], [1, "Lampasas"], [1, "Lamar"], [1, "Lakeway"], [1, "Lakeview"], [1, "Lakeland"], [1, "Lakehurst"], [1, "Lake Placid"], [1, "Lake Minchumina"], [1, "Lake Havasu City"], [1, "Lake City"], [1, "Lake Charles"], [1, "Lahania-kapalua"], [1, "Lago Vista"], [1, "LaGrange"], [1, "La Verne"], [1, "La Junta"], [1, "La Grande"], [1, "La Crosse"], [1, "Kwigillingok"], [1, "Kwethluk"], [1, "Kuparuk"], [1, "Koyukuk"], [1, "Koyuk"], [1, "Kotzebue"], [1, "Kotlik"], [1, "Kongiganak"], [1, "Kona"], [1, "Koliganek"], [1, "Kokomo"], [1, "Kodiak"], [1, "Kobuk"], [1, "Knobnoster"], [1, "Klamath Falls"], [1, "Kivalina"], [1, "Kissimmee"], [1, "Kirksville"], [1, "Kipnuk"], [1, "Kinston"], [1, "King Salmon"], [1, "King Cove"], [1, "Killeen"], [1, "Kill Devil Hills"], [1, "Kiana"], [1, "Ketchikan"], [1, "Kerrville"], [1, "Keokuk"], [1, "Kenosha"], [1, "Kendall-tamiami"], [1, "Kenai"], [1, "Kelso"], [1, "Keene"], [1, "Kasigluk"], [1, "Karluk"], [1, "Kapolei"], [1, "Kankakee"], [1, "Kaneohe Bay"], [1, "Kamuela"], [1, "Kaltag"], [1, "Kalskag"], [1, "Kalispell"], [1, "Kalamazoo"], [1, "Kake"], [1, "Kaiser Lake Ozark"], [1, "Kahului"], [1, "Juneau"], [1, "Junction"], [1, "Joplin"], [1, "Jonesboro"], [1, "Joliet"], [1, "Johnstown"], [1, "Jesup"], [1, "Jefferson City"], [1, "Janesville"], [1, "Jacksonville NC"], [1, "Jacksn Hole"], [1, "Ithaca"], [1, "Islip"], [1, "Iron Mountain"], [1, "Iraan"], [1, "Iowa City"], [1, "Inyokern"], [1, "International Falls"], [1, "Indian Springs"], [1, "Indian Mountains"], [1, "Independence"], [1, "Imperial"], [1, "Immokalee "], [1, "Iliamna"], [1, "Igiugig"], [1, "Idaho Falls"], [1, "Hydaburg"], [1, "Hutchinson"], [1, "Huslia"], [1, "Huron"], [1, "Huntington"], [1, "Hunter Aaf"], [1, "Hughes"], [1, "Houlton"], [1, "Houghton Lake"], [1, "Hot Springs"], [1, "Hoquiam"], [1, "Hopkinsville"], [1, "Hooper Bay"], [1, "Hoonah"], [1, "Honolulu"], [1, "Hondo"], [1, "Homestead"], [1, "Homer"], [1, "Holy Cross"], [1, "Hollywood"], [1, "Holland"], [1, "Holdredge"], [1, "Hobbs"], [1, "Hobart"], [1, "Hilton Head Island"], [1, "Hilo"], [1, "Hickory"], [1, "Hibbing"], [1, "Henderson"], [1, "Helena"], [1, "Healy"], [1, "Hazleton"], [1, "Hays"], [1, "Hayden"], [1, "Hawthorne"], [1, "Havre"], [1, "Hattiesburg/Laurel"], [1, "Hattiesburg"], [1, "Hartsville"], [1, "Hartford"], [1, "Harrison"], [1, "Harlingen"], [1, "Hancock"], [1, "Hana"], [1, "Half Moon Bay"], [1, "Haines"], [1, "Hailey"], [1, "Hagerstown"], [1, "Gwinn"], [1, "Guymon"], [1, "Gustavus"], [1, "Gunnison"], [1, "Gulkana"], [1, "Gulfport"], [1, "Gulf Shores"], [1, "Grove"], [1, "Groton CT"], [1, "Groom Lake"], [1, "Greenwood"], [1, "Greenvile"], [1, "Greensboro"], [1, "Green Cove Springs"], [1, "Green Bay"], [1, "Greeley"], [1, "Great Falls"], [1, "Great Bend"], [1, "Grants"], [1, "Grant County Airport"], [1, "Grand Rapids MN"], [1, "Grand Rapids"], [1, "Grand Marais"], [1, "Grand Junction"], [1, "Grand Island"], [1, "Grand Forks"], [1, "Grand Canyon"], [1, "Goodyear"], [1, "Goodland"], [1, "Golovin"], [1, "Goldsboro"], [1, "Glendive"], [1, "Glendale"], [1, "Gladwin"], [1, "Gillette"], [1, "Gila Bend"], [1, "Gary"], [1, "Garden City"], [1, "Gambell"], [1, "Galveston"], [1, "Gallup"], [1, "Galion"], [1, "Galesburg"], [1, "Galena"], [1, "Gaithersburg"], [1, "Gadsden"], [1, "Funter Bay"], [1, "Fullerton"], [1, "Fryeburg"], [1, "Friday Harbor"], [1, "Fresno"], [1, "Frenchville"], [1, "Fremont"], [1, "Fredericksburg"], [1, "Franklin"], [1, "Frankfort"], [1, "Fostoria"], [1, "Fort Yukon"], [1, "Fort Wayne IN"], [1, "Fort Wayne"], [1, "Fort Wainwright"], [1, "Fort Stockton"], [1, "Fort Smith"], [1, "Fort Sill"], [1, "Fort Rucker/Ozark"], [1, "Fort Riley"], [1, "Fort Richardson"], [1, "Fort Polk"], [1, "Fort Pierce"], [1, "Fort Ord"], [1, "Fort Meade"], [1, "Fort Lewis"], [1, "Fort Leonardwood"], [1, "Fort Leavenworth"], [1, "Fort Knox"], [1, "Fort Irwin"], [1, "Fort Huachuca"], [1, "Fort Hood"], [1, "Fort Eustis"], [1, "Fort Drum"], [1, "Fort Dodge"], [1, "Fort Collins"], [1, "Fort Carson"], [1, "Fort Bridger"], [1, "Fort Bragg"], [1, "Fort Benning"], [1, "Fort Belvoir"], [1, "Fond du Lac"], [1, "Florence"], [1, "Flint"], [1, "Flagstaff"], [1, "Fitzgerald"], [1, "Fitchburg"], [1, "Findley"], [1, "Farmington"], [1, "Farmingdale"], [1, "Fargo"], [1, "False Pass"], [1, "Fairfield"], [1, "Everett"], [1, "Evansville"], [1, "Evanston"], [1, "Eureka"], [1, "Eugene"], [1, "Eufala"], [1, "Escanaba"], [1, "Erie"], [1, "Enumclaw"], [1, "Enterprise"], [1, "Enid"], [1, "Engelhard"], [1, "Endicott"], [1, "Emporia"], [1, "Emmonak"], [1, "Elmira"], [1, "Ellicott"], [1, "Elko"], [1, "Elkins"], [1, "Elim"], [1, "Elfin Cove"], [1, "El dorado springs"], [1, "El Monte"], [1, "El Dorado"], [1, "El Centro"], [1, "El Cajon"], [1, "Egegik"], [1, "Eek"], [1, "Edwards Afb"], [1, "Eden Prairie"], [1, "Eau Claire"], [1, "Eastsound"], [1, "Eastport"], [1, "Eastover"], [1, "Easton"], [1, "East Troy"], [1, "East Tawas"], [1, "Eagle River"], [1, "Eagle"], [1, "Durango"], [1, "Dunkirk"], [1, "Duncan"], [1, "Duluth"], [1, "Dubuque IA"], [1, "Dublin"], [1, "Du Bois"], [1, "Drummond Island"], [1, "Doylestown"], [1, "Dover"], [1, "Dothan"], [1, "Dodge City"], [1, "Dickinson"], [1, "Devils Lake"], [1, "Destin"], [1, "Des Moines"], [1, "Deridder"], [1, "Denton"], [1, "Deming"], [1, "Delta Junction"], [1, "Delta"], [1, "Dell"], [1, "Deering"], [1, "Decatur"], [1, "Deadhorse"], [1, "DeLand"], [1, "Daytona Beach"], [1, "Davis-Woodland-Winters"], [1, "Darlington"], [1, "Danbury"], [1, "Dalton"], [1, "Dallas-Fort Worth"], [1, "Dalhart"], [1, "Daggett"], [1, "DALLAS"], [1, "Cutbank"], [1, "Cushing"], [1, "Cumberland"], [1, "Crystal River"], [1, "Crystal"], [1, "Crossville"], [1, "Cross City"], [1, "Crescent City"], [1, "Council Bluffs"], [1, "Cotulla"], [1, "Cottonwood"], [1, "Corvallis"], [1, "Cortez"], [1, "Cornelia"], [1, "Cordova"], [1, "Cordele"], [1, "Cooldige"], [1, "Conway"], [1, "Conroe"], [1, "Connellsville"], [1, "Concord NH"], [1, "Columbus Mississippi"], [1, "Colorado Springs"], [1, "Colombus"], [1, "College Station"], [1, "Coldwater"], [1, "Coffeyville"], [1, "Coeur d'Alene"], [1, "Cody"], [1, "Cocoa Beach"], [1, "Coco Beach"], [1, "Coatesville"], [1, "Clemson"], [1, "Clearwater"], [1, "Clear Mews"], [1, "Clarksville"], [1, "Clarksburg"], [1, "Circle"], [1, "Christmas Valley"], [1, "Chino"], [1, "China Lake"], [1, "Childress"], [1, "Chicopee Falls"], [1, "Chico"], [1, "Chicago-Wheeling"], [1, "Cheyenne"], [1, "Chevak"], [1, "Cherry Point"], [1, "Cheraw"], [1, "Chenega"], [1, "Chehalis"], [1, "Chefornak"], [1, "Chattanooga"], [1, "Chatsworth"], [1, "Charlottesville VA"], [1, "Charlotte"], [1, "Charles City"], [1, "Charelvoix"], [1, "Chapel Hill"], [1, "Chanute"], [1, "Chandler"], [1, "Champaign"], [1, "Chalkyitsik"], [1, "Chadron"], [1, "Centre"], [1, "Central"], [1, "Cedar Rapids"], [1, "Cedar City"], [1, "Catalina Island"], [1, "Casper"], [1, "Casa Grande"], [1, "Cartersville"], [1, "Carrollton"], [1, "Caribou"], [1, "Carefree"], [1, "Carbondale/Murphysboro"], [1, "Cape Romanzof"], [1, "Cape Newenham"], [1, "Cape Lisburne"], [1, "Cape Girardeau"], [1, "Camp Springs"], [1, "Camp Douglas"], [1, "Camden"], [1, "Cambria"], [1, "Camarillo - CA"], [1, "Calhoun"], [1, "Calexico"], [1, "Caldwell"], [1, "Butte"], [1, "Bush Field"], [1, "Burns"], [1, "Burley"], [1, "Burbank"], [1, "Buffalo"], [1, "Buckley"], [1, "Buckland"], [1, "Buckeye"], [1, "Bryce Canyon"], [1, "Bryan"], [1, "Brownsville"], [1, "Broomfield-CO"], [1, "Brookneal"], [1, "Brigham City"], [1, "Brevig Mission"], [1, "Brenham"], [1, "Bremerton"], [1, "Breckenridge"], [1, "Brainerd"], [1, "Brady"], [1, "Bradshaw Field"], [1, "Bradford"], [1, "Bozeman"], [1, "Bowling Green"], [1, "Boulder"], [1, "Boston"], [1, "Boise"], [1, "Boca Raton"], [1, "Blytheville"], [1, "Blythe"], [1, "Bluefield"], [1, "Block Island"], [1, "Bismarck"], [1, "Bishop"], [1, "Birmingham"], [1, "Binghamton"], [1, "Biloxi"], [1, "Billings"], [1, "Big Timber"], [1, "Big Piney"], [1, "Big Mountain"], [1, "Beverly"], [1, "Bettles"], [1, "Bethel"], [1, "Bessemer"], [1, "Bentonville"], [1, "Benton"], [1, "Bend"], [1, "Bemidji"], [1, "Bellingham"], [1, "Belleville"], [1, "Beckley"], [1, "Beaver Falls"], [1, "Beaver"], [1, "Beaufort"], [1, "Bay City"], [1, "Baudette"], [1, "Battle Creek"], [1, "Baton Rouge"], [1, "Batavia"], [1, "Bartow"], [1, "Barter Island"], [1, "Barrow"], [1, "Barnstable"], [1, "Barking Sands"], [1, "Baraboo"], [1, "Bar Harbor"], [1, "Banning"], [1, "Bangor"], [1, "Ballston Spa"], [1, "Bakersfield"], [1, "Baker City"], [1, "Bainbridge"], [1, "BRISTOL"], [1, "Avon Park"], [1, "Aurora"], [1, "Auburn"], [1, "Atqasuk"], [1, "Atlantic City"], [1, "Atka"], [1, "Astoria"], [1, "Aspen"], [1, "Asheville"], [1, "Asheboro"], [1, "Ardmore"], [1, "Arctic Village"], [1, "Arcata CA"], [1, "Appleton"], [1, "Apalachicola"], [1, "Anvik"], [1, "Anoka"], [1, "Anniston"], [1, "Annette Island"], [1, "Annapolis"], [1, "Ann Arbor"], [1, "Ankeny"], [1, "Aniak"], [1, "Angoon"], [1, "Angola"], [1, "Angleton"], [1, "Andersen"], [1, "Anaktuvuk Pass"], [1, "Americus"], [1, "Ambler"], [1, "Amarillo"], [1, "Altus"], [1, "Altoona"], [1, "Alton/St Louis"], [1, "Alpine"], [1, "Alpena"], [1, "Alliance"], [1, "Allentown"], [1, "Allakaket"], [1, "Alice"], [1, "Alexander City"], [1, "Aleknagik"], [1, "Albuquerque"], [1, "Alamosa"], [1, "Alakanuk"], [1, "Alabaster"], [1, "Akutan"], [1, "Akiak"], [1, "Akhiok"], [1, "Aiken"], [1, "Addison"], [1, "Adak Island"], [1, "Ada"]], "db_path": "data/spider/database/flight_4/flight_4.sqlite"}, "annotation": "answer = airports[airports['country'] == 'United States']['city'].value_counts().reset_index();", "exec_result": "Expected: [[7, 'Columbus'], [6, 'Houston'], [5, 'Jacksonville'], [5, 'Greenville'], [5, 'Atlanta'], [4, 'Tucson'], [4, 'San Antonio'], [4, 'Sacramento'], [4, 'New York'], [4, 'Las Vegas'], [4, 'Georgetown'], [4, 'Chicago'], [4, 'Burlington'], [4, 'Anchorage'], [3, 'Wilmington'], [3, 'Wichita'], [3, 'Washington'], [3, 'Tampa'], [3, 'Springfield'], [3, 'Spokane'], [3, 'Shreveport'], [3, 'San Diego'], [3, 'Rochester'], [3, 'Riverside'], [3, 'Richmond'], [3, 'Phoenix'], [3, 'Philadelphia'], [3, 'Panama City'], [3, 'Palm Springs'], [3, 'Oxford'], [3, 'Oklahoma City'], [3, 'New Orleans'], [3, 'Mobile'], [3, 'Miami'], [3, 'Macon'], [3, 'Key West'], [3, 'Jackson'], [3, 'Huntsville'], [3, 'Douglas'], [3, 'Detroit'], [3, 'Denver'], [3, 'Dayton'], [3, 'Dallas'], [3, 'Columbia'], [3, 'Cleveland'], [3, 'Charleston'], [3, 'Brunswick'], [3, 'Augusta'], [3, 'Athens'], [3, 'Alexandria'], [3, 'Akron'], [2, 'West Palm Beach'], [2, 'Watertown'], [2, 'Waco'], [2, 'Valdosta'], [2, 'Uvalde'], [2, 'Tulsa'], [2, 'Topeka'], [2, 'Tonopah'], [2, 'Tok'], [2, 'Tacoma'], [2, 'St. Petersburg'], [2, 'Sidney'], [2, 'Seattle'], [2, 'Scranton'], [2, 'Santa Barbara'], [2, 'San Jose'], [2, 'Salt Lake City'], [2, 'Rome'], [2, 'Rapid City'], [2, 'Portland'], [2, 'Port Angeles'], [2, 'Pittsburgh'], [2, 'Petersburg'], [2, 'Peru'], [2, 'Perry'], [2, 'Pensacola'], [2, 'Orlando'], [2, 'Ontario'], [2, 'Omaha'], [2, 'Olathe'], [2, 'Ogden'], [2, 'Null'], [2, 'Norfolk'], [2, 'Mountain Home'], [2, 'Morristown'], [2, 'Montgomery'], [2, 'Monroe'], [2, 'Molokai'], [2, 'Minot'], [2, 'Milwaukee'], [2, 'Mesa'], [2, 'Merced'], [2, 'Memphis'], [2, 'Marysville'], [2, 'Marshfield'], [2, 'Marshall'], [2, 'Madison'], [2, 'Louisville'], [2, 'Los Angeles'], [2, 'Longview'], [2, 'London'], [2, 'Lompoc'], [2, 'Lincoln'], [2, 'Lewiston'], [2, 'Leesburg'], [2, 'Lawrence'], [2, 'Lansing'], [2, 'Lancaster'], [2, 'Lafayette'], [2, 'Knoxville'], [2, 'Klawock'], [2, 'Kansas City'], [2, 'Jasper'], [2, 'Jamestown'], [2, 'Indianapolis'], [2, 'Hillsboro'], [2, 'Hayward'], [2, 'Harrisburg'], [2, 'Hampton'], [2, 'Hamilton'], [2, 'Glasgow'], [2, 'Gainesville'], [2, 'Fort Worth'], [2, 'Fort Myers'], [2, 'Fort Lauderdale'], [2, 'Flagler'], [2, 'Fayetteville'], [2, 'Fairbanks'], [2, 'Ely'], [2, 'Elkhart'], [2, 'El Paso'], [2, 'Dillingham'], [2, 'Del Rio'], [2, 'Danville'], [2, 'Crestview'], [2, 'Corpus Christi'], [2, 'Concord'], [2, 'Cold Bay'], [2, 'Clovis'], [2, 'Clinton'], [2, 'Cincinnati'], [2, 'Carlsbad'], [2, 'Bloomington'], [2, 'Bedford'], [2, 'Beaumont'], [2, 'Baltimore'], [2, 'Austin'], [2, 'Arlington'], [2, 'Albany'], [2, 'Alamogordo'], [2, 'Abilene'], [2, 'Aberdeen'], [1, 'Zuni Pueblo'], [1, 'Zephyrhills'], [1, 'Zelienople'], [1, 'Zanesville'], [1, 'Yuma'], [1, 'Yuba City'], [1, 'Youngstown'], [1, 'Yankton'], [1, 'Yakutat'], [1, 'Yakima'], [1, 'Yakataga'], [1, 'Wuchula'], [1, 'Wrightstown'], [1, 'Wright'], [1, 'Wrangell'], [1, 'Worland'], [1, 'Worcester'], [1, 'Woodward'], [1, 'Wolf Point'], [1, 'Wisconsin Rapids'], [1, 'Winter Haven'], [1, 'Winston-salem'], [1, 'Winslow'], [1, 'Winnsboro'], [1, 'Winnemucca'], [1, 'Wink'], [1, 'Winfield'], [1, 'Windsor Locks'], [1, 'Windom'], [1, 'Winder'], [1, 'Willow Grove'], [1, 'Willoughby'], [1, 'Williston'], [1, 'Willimantic'], [1, 'Williamsport'], [1, 'Williamson'], [1, 'Williamsburg'], [1, 'Wilkes-Barre'], [1, 'Wildwood'], [1, 'Wickenburg'], [1, 'Wichita Falls'], [1, 'Whittier'], [1, 'White Sands'], [1, 'White Plains'], [1, 'White Mountain'], [1, 'Whidbey Island'], [1, 'Wheeling'], [1, 'Weyers Cave'], [1, 'Westfield'], [1, 'West Yellowstone'], [1, 'West Hampton Beach'], [1, 'West Goshen Township'], [1, 'West Chicago'], [1, 'Wendover'], [1, 'Wenatchee'], [1, 'Wellington'], [1, 'Wausau'], [1, 'Waupaca'], [1, 'Watsonville'], [1, 'Waterloo'], [1, 'Wassau'], [1, 'Wasilla'], [1, 'Washington County'], [1, 'Warsaw'], [1, 'Wallops Island'], [1, 'Wallace'], [1, 'Walla Walla'], [1, 'Wales'], [1, 'Wainwright'], [1, 'Waikoloa Village'], [1, 'Wahoo'], [1, 'Wahiawa'], [1, 'Visalia'], [1, 'Vineyard Haven MA'], [1, 'Villa Rica'], [1, 'Victorville'], [1, 'Victoria'], [1, 'Vero Beach'], [1, 'Vernal'], [1, 'Venice'], [1, 'Venetie'], [1, 'Van Wert'], [1, 'Van Nuys'], [1, 'Valparaiso IN'], [1, 'Valparaiso'], [1, 'Valentine'], [1, 'Valdez'], [1, 'Vail'], [1, 'Upland'], [1, 'Unalaska'], [1, 'Unalakleet'], [1, 'Ulysses'], [1, 'Ukiah'], [1, 'Tyler'], [1, 'Twin Falls'], [1, 'Twenty Nine Palms'], [1, 'Tuscaloosa AL'], [1, 'Tupelo'], [1, 'Tunica'], [1, 'Tucumcari'], [1, 'Truth Or Consequences'], [1, 'Truckee'], [1, 'Troy'], [1, 'Troutdale'], [1, 'Trenton'], [1, 'Traverse City'], [1, 'Torrance'], [1, 'Tomah'], [1, 'Toledo'], [1, 'Toksook Bay'], [1, 'Togiak Village'], [1, 'Toccoa'], [1, 'Titusville'], [1, 'Tin City'], [1, 'Tillamook'], [1, 'Tifton'], [1, 'Thomson'], [1, 'Thomasville'], [1, 'Thief River Falls'], [1, 'The Dalles'], [1, 'Texarkana'], [1, 'Teterboro'], [1, 'Terre Haute'], [1, 'Temple'], [1, 'Telluride'], [1, 'Teller'], [1, 'Taunton'], [1, 'Tatalina'], [1, 'Tallahassee'], [1, 'Talladega'], [1, 'Talkeetna'], [1, 'Syracuse'], [1, 'Sylvania'], [1, 'Sylacauga'], [1, 'Sutton'], [1, 'Sumter'], [1, 'Summit'], [1, 'Sugar Land'], [1, 'Sublette'], [1, 'Stuart'], [1, 'Stratford'], [1, 'Stockton'], [1, 'Stinson'], [1, 'Stillwater'], [1, 'Stevens Point'], [1, 'Sterling'], [1, 'Stephenville'], [1, 'Steamboat Springs'], [1, 'Statesville'], [1, 'State College Pennsylvania'], [1, 'St. Paul Island'], [1, 'St. Paul'], [1, 'St. Michael'], [1, 'St. Louis'], [1, 'St. Augustine Airport'], [1, \"St Mary's\"], [1, 'Spencer'], [1, 'Spearfish-South Dakota'], [1, 'Sparrevohn'], [1, 'South Naknek'], [1, 'South Lake Tahoe'], [1, 'South Haven'], [1, 'South Bend'], [1, 'Sonora'], [1, 'Somerville'], [1, 'Somerset'], [1, 'Soldotna'], [1, 'Smyrna'], [1, 'Smithfield'], [1, 'Sleetmute'], [1, 'Skagway'], [1, 'Sitka'], [1, 'Sioux Falls'], [1, 'Sioux City'], [1, 'Silver Springs'], [1, 'Sikeston'], [1, 'Shungnak'], [1, 'Show Low'], [1, 'Shishmaref'], [1, 'Sheridan'], [1, 'Shelton'], [1, 'Shell Knob'], [1, 'Shelbyville'], [1, 'Sheboygan'], [1, 'Shaktoolik'], [1, 'Shageluk'], [1, 'Seward'], [1, 'Sewanee'], [1, 'Selma'], [1, 'Selawik'], [1, 'Sedona'], [1, 'Sebring'], [1, 'Scottsdale'], [1, 'Scottsbluff'], [1, 'Scott City'], [1, 'Scotia NY'], [1, 'Scammon Bay'], [1, 'Savoonga'], [1, 'Savannah'], [1, 'Sault Ste Marie'], [1, 'Sarasota'], [1, 'Saranac Lake'], [1, 'Santa Rosa'], [1, 'Santa Monica'], [1, 'Santa Maria'], [1, 'Santa Fe'], [1, 'Santa Ana'], [1, 'Sanford'], [1, 'Sandusky'], [1, 'Sand Point'], [1, 'San Nicolas Island'], [1, 'San Marcos'], [1, 'San Luis Obispo'], [1, 'San Luis'], [1, 'San Francisco'], [1, 'San Clemente Island'], [1, 'San Carlos'], [1, 'San Bernardino'], [1, 'San Angelo'], [1, 'Saluda'], [1, 'Salmon'], [1, 'Sallisaw'], [1, 'Salisbury'], [1, 'Salinas'], [1, 'Salina'], [1, 'Salem'], [1, 'Saint George'], [1, 'Saint Cloud'], [1, 'Saginaw'], [1, 'Safford'], [1, 'Sabetha'], [1, 'SARATOGA'], [1, 'Rutland'], [1, 'Russian Mission'], [1, 'Russell'], [1, 'Ruidoso'], [1, 'Ruby'], [1, 'Roxboro'], [1, 'Roswell'], [1, 'Rosecrans'], [1, 'Rocky Mount'], [1, 'Rockport'], [1, 'Rockland'], [1, 'Rockingham'], [1, 'Rockford'], [1, 'Rock Springs'], [1, 'Rock Hill'], [1, 'Robinson'], [1, 'Roanoke VA'], [1, 'Riverton WY'], [1, 'Rifle'], [1, 'Ridgely'], [1, 'Richmond Heights'], [1, 'Richfield'], [1, 'Rhinelander'], [1, 'Rhinebeck'], [1, 'Renton'], [1, 'Reno'], [1, 'Redwood Falls'], [1, 'Redstone'], [1, 'Redmond-Bend'], [1, 'Redlands'], [1, 'Redding'], [1, 'Red River'], [1, 'Red Bluff'], [1, 'Reading'], [1, 'Rawlins'], [1, 'Rancho Murieta'], [1, 'Ramona'], [1, 'Raleigh-durham'], [1, 'Racine'], [1, 'Quitman'], [1, 'Quinhagak'], [1, 'Quincy'], [1, 'Queensbury'], [1, 'Quantico'], [1, 'Quakertown'], [1, 'Punta Gorda'], [1, 'Pullman'], [1, 'Pueblo'], [1, 'Provo'], [1, 'Provincetown'], [1, 'Providence'], [1, 'Prosser'], [1, 'Prospect Creek'], [1, 'Prineville'], [1, 'Princeton'], [1, 'Price'], [1, 'Presque Isle'], [1, 'Prescott'], [1, 'Pratt'], [1, 'Poughkeepsie'], [1, 'Poteau'], [1, 'Portsmouth'], [1, \"Port O\\\\\\\\'Connor\"], [1, 'Port Moller'], [1, 'Port Huron'], [1, 'Port Heiden'], [1, 'Port Clinton'], [1, 'Poplar Bluff'], [1, 'Pontiac'], [1, 'Ponca City'], [1, 'Pompano Beach'], [1, 'Point Mugu'], [1, 'Point Lay'], [1, 'Point Barrow'], [1, 'Pocatello'], [1, 'Plymouth'], [1, 'Plattsburgh'], [1, 'Placida'], [1, 'Pineville'], [1, 'Pinehurst-Southern Pines'], [1, 'Pinedale'], [1, 'Pine Mountain'], [1, 'Pine Bluff'], [1, 'Pilot Point'], [1, 'Pikeville'], [1, 'Pierre'], [1, 'Phoenix '], [1, 'Phillips'], [1, 'Perryville'], [1, 'Peoria'], [1, 'Pendleton'], [1, 'Pembina'], [1, 'Pellston'], [1, 'Pecos'], [1, 'Patuxent River'], [1, 'Paso Robles'], [1, 'Pasco'], [1, 'Paris'], [1, 'Palo Alto'], [1, 'Palmer'], [1, 'Palmdale'], [1, 'Palacios'], [1, 'Pahokee'], [1, 'Page'], [1, 'PARKERSBURG'], [1, 'PADUCAH'], [1, 'Ozona'], [1, 'Oxnard'], [1, 'Owensboro'], [1, 'Ottumwa'], [1, 'Oshkosh'], [1, 'Oscoda'], [1, 'Ormond Beach'], [1, 'Orangeburg'], [1, 'Opolu'], [1, 'Olympia'], [1, 'Olive Branch'], [1, 'Okmulgee'], [1, 'Okeechobee'], [1, 'Ogdensburg'], [1, 'Oconomowoc'], [1, 'Oceana'], [1, 'Ocean Reef Club Airport'], [1, 'Ocala'], [1, 'Oakley'], [1, 'Oakland'], [1, 'Oak Island'], [1, 'Nulato'], [1, 'Nuiqsut'], [1, 'Novato'], [1, 'Norwood'], [1, 'Northway'], [1, 'North Wilkesboro'], [1, 'North Platte'], [1, 'North Myrtle Beach'], [1, 'North Kingstown'], [1, 'North Bend'], [1, 'Norfolk  Nebraska'], [1, 'Noorvik'], [1, 'Nondalton'], [1, 'Nome'], [1, 'Nogales'], [1, 'Noatak'], [1, 'Nikolai'], [1, 'Nightmute'], [1, 'Niagara Falls'], [1, 'Newton'], [1, 'Newport News'], [1, 'Newport'], [1, 'Newnan'], [1, 'Newburgh'], [1, 'Newberry'], [1, 'Newark'], [1, 'New Stuyahok'], [1, 'New Richmond'], [1, 'New Philadelpha'], [1, 'New Haven'], [1, 'New Castle'], [1, 'New Bern'], [1, 'New Bedford'], [1, 'Neodesha'], [1, 'Nenana'], [1, 'Nelson Lagoon'], [1, 'Needles'], [1, 'Nashville'], [1, 'Nashua'], [1, 'Nappanee '], [1, 'Naples'], [1, 'Napaskiak'], [1, 'Napakiak'], [1, 'Napa'], [1, 'Nantucket'], [1, 'Myrtle Beach'], [1, 'Muskogee'], [1, 'Muskegon'], [1, 'Muscle Shoals'], [1, 'Murrieta-Temecula'], [1, 'Muncie'], [1, 'Muir'], [1, 'Mountain Village'], [1, 'Mountain View'], [1, 'Mount Sterling'], [1, 'Mount Pocono'], [1, 'Mount Pleasant'], [1, 'Mount Holly'], [1, 'Mount Clemens'], [1, 'Morrisville'], [1, 'Morgantown'], [1, 'Morganton'], [1, 'Monument Valley'], [1, 'Montrose CO'], [1, 'Montpelier'], [1, 'Monticello'], [1, 'Monterey'], [1, 'Montauk'], [1, 'Moline'], [1, 'Mojave'], [1, 'Modesto'], [1, 'Mobridge'], [1, 'Moab'], [1, 'Missoula'], [1, 'Misquite'], [1, 'Miramar'], [1, 'Minocqua - Woodruff'], [1, 'Minneapolis'], [1, 'Mineral Wells'], [1, 'Milton'], [1, 'Millville'], [1, 'Millinocket'], [1, 'Millington'], [1, 'Milledgeville'], [1, 'Miles City'], [1, 'Midland'], [1, 'Michigan City'], [1, 'Metakatla'], [1, 'Meridian'], [1, 'Meriden'], [1, 'Mercury'], [1, 'Melbourne'], [1, 'Mekoryuk'], [1, 'Medford'], [1, 'Meade'], [1, 'Mcgrath'], [1, 'Mcallen'], [1, 'Mcalester'], [1, 'McKinley Park'], [1, 'McCook'], [1, 'McCall'], [1, 'Mc Pherson'], [1, 'Mc Comb'], [1, 'Mayport'], [1, 'Mattawa'], [1, 'Massena'], [1, 'Mason City'], [1, 'Mary Esther'], [1, 'Martinsburg'], [1, 'Marquette'], [1, 'Mariposa'], [1, 'Marion'], [1, 'Marietta'], [1, 'Marfa'], [1, 'Marco Island Airport'], [1, 'Marathon'], [1, 'Marana'], [1, 'Manteo'], [1, 'Mansfield'], [1, 'Manokotak'], [1, 'Manley Hot Springs'], [1, 'Mankato'], [1, 'Manistee'], [1, 'Manhattan'], [1, 'Manchester NH'], [1, 'Manassas'], [1, 'Mammoth Lakes'], [1, 'Malad City'], [1, 'Madera'], [1, 'Mackminnville'], [1, 'MONTGOMERY'], [1, 'Lynchburg'], [1, 'Lumberton'], [1, 'Lufkin'], [1, 'Ludington'], [1, 'Lubbock'], [1, 'Lovelock'], [1, 'Louisiana'], [1, 'Los Alamos'], [1, 'Lorain-Elyria'], [1, 'Lopez'], [1, 'Long Beach'], [1, 'Lone Rock'], [1, 'Logan'], [1, 'Locust Grove'], [1, 'Lockport'], [1, 'Lock Haven'], [1, 'Livingston-Montana'], [1, 'Livermore'], [1, 'Little Rock'], [1, 'Linden'], [1, 'Lima'], [1, 'Lihue'], [1, 'Liberty'], [1, 'Liberal'], [1, 'Lexington KY'], [1, 'Lexington'], [1, 'Lewistown'], [1, 'Lewisburg'], [1, 'Lemoore'], [1, 'Lebanon'], [1, 'Lawton'], [1, 'Lawrenceville'], [1, 'Latrobe'], [1, 'Las Cruces'], [1, 'Larsen Bay'], [1, 'Larned'], [1, 'Laredo'], [1, 'Laramie'], [1, 'Lanai'], [1, 'Lampasas'], [1, 'Lamar'], [1, 'Lakeway'], [1, 'Lakeview'], [1, 'Lakeland'], [1, 'Lakehurst'], [1, 'Lake Placid'], [1, 'Lake Minchumina'], [1, 'Lake Havasu City'], [1, 'Lake City'], [1, 'Lake Charles'], [1, 'Lahania-kapalua'], [1, 'Lago Vista'], [1, 'LaGrange'], [1, 'La Verne'], [1, 'La Junta'], [1, 'La Grande'], [1, 'La Crosse'], [1, 'Kwigillingok'], [1, 'Kwethluk'], [1, 'Kuparuk'], [1, 'Koyukuk'], [1, 'Koyuk'], [1, 'Kotzebue'], [1, 'Kotlik'], [1, 'Kongiganak'], [1, 'Kona'], [1, 'Koliganek'], [1, 'Kokomo'], [1, 'Kodiak'], [1, 'Kobuk'], [1, 'Knobnoster'], [1, 'Klamath Falls'], [1, 'Kivalina'], [1, 'Kissimmee'], [1, 'Kirksville'], [1, 'Kipnuk'], [1, 'Kinston'], [1, 'King Salmon'], [1, 'King Cove'], [1, 'Killeen'], [1, 'Kill Devil Hills'], [1, 'Kiana'], [1, 'Ketchikan'], [1, 'Kerrville'], [1, 'Keokuk'], [1, 'Kenosha'], [1, 'Kendall-tamiami'], [1, 'Kenai'], [1, 'Kelso'], [1, 'Keene'], [1, 'Kasigluk'], [1, 'Karluk'], [1, 'Kapolei'], [1, 'Kankakee'], [1, 'Kaneohe Bay'], [1, 'Kamuela'], [1, 'Kaltag'], [1, 'Kalskag'], [1, 'Kalispell'], [1, 'Kalamazoo'], [1, 'Kake'], [1, 'Kaiser Lake Ozark'], [1, 'Kahului'], [1, 'Juneau'], [1, 'Junction'], [1, 'Joplin'], [1, 'Jonesboro'], [1, 'Joliet'], [1, 'Johnstown'], [1, 'Jesup'], [1, 'Jefferson City'], [1, 'Janesville'], [1, 'Jacksonville NC'], [1, 'Jacksn Hole'], [1, 'Ithaca'], [1, 'Islip'], [1, 'Iron Mountain'], [1, 'Iraan'], [1, 'Iowa City'], [1, 'Inyokern'], [1, 'International Falls'], [1, 'Indian Springs'], [1, 'Indian Mountains'], [1, 'Independence'], [1, 'Imperial'], [1, 'Immokalee '], [1, 'Iliamna'], [1, 'Igiugig'], [1, 'Idaho Falls'], [1, 'Hydaburg'], [1, 'Hutchinson'], [1, 'Huslia'], [1, 'Huron'], [1, 'Huntington'], [1, 'Hunter Aaf'], [1, 'Hughes'], [1, 'Houlton'], [1, 'Houghton Lake'], [1, 'Hot Springs'], [1, 'Hoquiam'], [1, 'Hopkinsville'], [1, 'Hooper Bay'], [1, 'Hoonah'], [1, 'Honolulu'], [1, 'Hondo'], [1, 'Homestead'], [1, 'Homer'], [1, 'Holy Cross'], [1, 'Hollywood'], [1, 'Holland'], [1, 'Holdredge'], [1, 'Hobbs'], [1, 'Hobart'], [1, 'Hilton Head Island'], [1, 'Hilo'], [1, 'Hickory'], [1, 'Hibbing'], [1, 'Henderson'], [1, 'Helena'], [1, 'Healy'], [1, 'Hazleton'], [1, 'Hays'], [1, 'Hayden'], [1, 'Hawthorne'], [1, 'Havre'], [1, 'Hattiesburg/Laurel'], [1, 'Hattiesburg'], [1, 'Hartsville'], [1, 'Hartford'], [1, 'Harrison'], [1, 'Harlingen'], [1, 'Hancock'], [1, 'Hana'], [1, 'Half Moon Bay'], [1, 'Haines'], [1, 'Hailey'], [1, 'Hagerstown'], [1, 'Gwinn'], [1, 'Guymon'], [1, 'Gustavus'], [1, 'Gunnison'], [1, 'Gulkana'], [1, 'Gulfport'], [1, 'Gulf Shores'], [1, 'Grove'], [1, 'Groton CT'], [1, 'Groom Lake'], [1, 'Greenwood'], [1, 'Greenvile'], [1, 'Greensboro'], [1, 'Green Cove Springs'], [1, 'Green Bay'], [1, 'Greeley'], [1, 'Great Falls'], [1, 'Great Bend'], [1, 'Grants'], [1, 'Grant County Airport'], [1, 'Grand Rapids MN'], [1, 'Grand Rapids'], [1, 'Grand Marais'], [1, 'Grand Junction'], [1, 'Grand Island'], [1, 'Grand Forks'], [1, 'Grand Canyon'], [1, 'Goodyear'], [1, 'Goodland'], [1, 'Golovin'], [1, 'Goldsboro'], [1, 'Glendive'], [1, 'Glendale'], [1, 'Gladwin'], [1, 'Gillette'], [1, 'Gila Bend'], [1, 'Gary'], [1, 'Garden City'], [1, 'Gambell'], [1, 'Galveston'], [1, 'Gallup'], [1, 'Galion'], [1, 'Galesburg'], [1, 'Galena'], [1, 'Gaithersburg'], [1, 'Gadsden'], [1, 'Funter Bay'], [1, 'Fullerton'], [1, 'Fryeburg'], [1, 'Friday Harbor'], [1, 'Fresno'], [1, 'Frenchville'], [1, 'Fremont'], [1, 'Fredericksburg'], [1, 'Franklin'], [1, 'Frankfort'], [1, 'Fostoria'], [1, 'Fort Yukon'], [1, 'Fort Wayne IN'], [1, 'Fort Wayne'], [1, 'Fort Wainwright'], [1, 'Fort Stockton'], [1, 'Fort Smith'], [1, 'Fort Sill'], [1, 'Fort Rucker/Ozark'], [1, 'Fort Riley'], [1, 'Fort Richardson'], [1, 'Fort Polk'], [1, 'Fort Pierce'], [1, 'Fort Ord'], [1, 'Fort Meade'], [1, 'Fort Lewis'], [1, 'Fort Leonardwood'], [1, 'Fort Leavenworth'], [1, 'Fort Knox'], [1, 'Fort Irwin'], [1, 'Fort Huachuca'], [1, 'Fort Hood'], [1, 'Fort Eustis'], [1, 'Fort Drum'], [1, 'Fort Dodge'], [1, 'Fort Collins'], [1, 'Fort Carson'], [1, 'Fort Bridger'], [1, 'Fort Bragg'], [1, 'Fort Benning'], [1, 'Fort Belvoir'], [1, 'Fond du Lac'], [1, 'Florence'], [1, 'Flint'], [1, 'Flagstaff'], [1, 'Fitzgerald'], [1, 'Fitchburg'], [1, 'Findley'], [1, 'Farmington'], [1, 'Farmingdale'], [1, 'Fargo'], [1, 'False Pass'], [1, 'Fairfield'], [1, 'Everett'], [1, 'Evansville'], [1, 'Evanston'], [1, 'Eureka'], [1, 'Eugene'], [1, 'Eufala'], [1, 'Escanaba'], [1, 'Erie'], [1, 'Enumclaw'], [1, 'Enterprise'], [1, 'Enid'], [1, 'Engelhard'], [1, 'Endicott'], [1, 'Emporia'], [1, 'Emmonak'], [1, 'Elmira'], [1, 'Ellicott'], [1, 'Elko'], [1, 'Elkins'], [1, 'Elim'], [1, 'Elfin Cove'], [1, 'El dorado springs'], [1, 'El Monte'], [1, 'El Dorado'], [1, 'El Centro'], [1, 'El Cajon'], [1, 'Egegik'], [1, 'Eek'], [1, 'Edwards Afb'], [1, 'Eden Prairie'], [1, 'Eau Claire'], [1, 'Eastsound'], [1, 'Eastport'], [1, 'Eastover'], [1, 'Easton'], [1, 'East Troy'], [1, 'East Tawas'], [1, 'Eagle River'], [1, 'Eagle'], [1, 'Durango'], [1, 'Dunkirk'], [1, 'Duncan'], [1, 'Duluth'], [1, 'Dubuque IA'], [1, 'Dublin'], [1, 'Du Bois'], [1, 'Drummond Island'], [1, 'Doylestown'], [1, 'Dover'], [1, 'Dothan'], [1, 'Dodge City'], [1, 'Dickinson'], [1, 'Devils Lake'], [1, 'Destin'], [1, 'Des Moines'], [1, 'Deridder'], [1, 'Denton'], [1, 'Deming'], [1, 'Delta Junction'], [1, 'Delta'], [1, 'Dell'], [1, 'Deering'], [1, 'Decatur'], [1, 'Deadhorse'], [1, 'DeLand'], [1, 'Daytona Beach'], [1, 'Davis-Woodland-Winters'], [1, 'Darlington'], [1, 'Danbury'], [1, 'Dalton'], [1, 'Dallas-Fort Worth'], [1, 'Dalhart'], [1, 'Daggett'], [1, 'DALLAS'], [1, 'Cutbank'], [1, 'Cushing'], [1, 'Cumberland'], [1, 'Crystal River'], [1, 'Crystal'], [1, 'Crossville'], [1, 'Cross City'], [1, 'Crescent City'], [1, 'Council Bluffs'], [1, 'Cotulla'], [1, 'Cottonwood'], [1, 'Corvallis'], [1, 'Cortez'], [1, 'Cornelia'], [1, 'Cordova'], [1, 'Cordele'], [1, 'Cooldige'], [1, 'Conway'], [1, 'Conroe'], [1, 'Connellsville'], [1, 'Concord NH'], [1, 'Columbus Mississippi'], [1, 'Colorado Springs'], [1, 'Colombus'], [1, 'College Station'], [1, 'Coldwater'], [1, 'Coffeyville'], [1, \"Coeur d'Alene\"], [1, 'Cody'], [1, 'Cocoa Beach'], [1, 'Coco Beach'], [1, 'Coatesville'], [1, 'Clemson'], [1, 'Clearwater'], [1, 'Clear Mews'], [1, 'Clarksville'], [1, 'Clarksburg'], [1, 'Circle'], [1, 'Christmas Valley'], [1, 'Chino'], [1, 'China Lake'], [1, 'Childress'], [1, 'Chicopee Falls'], [1, 'Chico'], [1, 'Chicago-Wheeling'], [1, 'Cheyenne'], [1, 'Chevak'], [1, 'Cherry Point'], [1, 'Cheraw'], [1, 'Chenega'], [1, 'Chehalis'], [1, 'Chefornak'], [1, 'Chattanooga'], [1, 'Chatsworth'], [1, 'Charlottesville VA'], [1, 'Charlotte'], [1, 'Charles City'], [1, 'Charelvoix'], [1, 'Chapel Hill'], [1, 'Chanute'], [1, 'Chandler'], [1, 'Champaign'], [1, 'Chalkyitsik'], [1, 'Chadron'], [1, 'Centre'], [1, 'Central'], [1, 'Cedar Rapids'], [1, 'Cedar City'], [1, 'Catalina Island'], [1, 'Casper'], [1, 'Casa Grande'], [1, 'Cartersville'], [1, 'Carrollton'], [1, 'Caribou'], [1, 'Carefree'], [1, 'Carbondale/Murphysboro'], [1, 'Cape Romanzof'], [1, 'Cape Newenham'], [1, 'Cape Lisburne'], [1, 'Cape Girardeau'], [1, 'Camp Springs'], [1, 'Camp Douglas'], [1, 'Camden'], [1, 'Cambria'], [1, 'Camarillo - CA'], [1, 'Calhoun'], [1, 'Calexico'], [1, 'Caldwell'], [1, 'Butte'], [1, 'Bush Field'], [1, 'Burns'], [1, 'Burley'], [1, 'Burbank'], [1, 'Buffalo'], [1, 'Buckley'], [1, 'Buckland'], [1, 'Buckeye'], [1, 'Bryce Canyon'], [1, 'Bryan'], [1, 'Brownsville'], [1, 'Broomfield-CO'], [1, 'Brookneal'], [1, 'Brigham City'], [1, 'Brevig Mission'], [1, 'Brenham'], [1, 'Bremerton'], [1, 'Breckenridge'], [1, 'Brainerd'], [1, 'Brady'], [1, 'Bradshaw Field'], [1, 'Bradford'], [1, 'Bozeman'], [1, 'Bowling Green'], [1, 'Boulder'], [1, 'Boston'], [1, 'Boise'], [1, 'Boca Raton'], [1, 'Blytheville'], [1, 'Blythe'], [1, 'Bluefield'], [1, 'Block Island'], [1, 'Bismarck'], [1, 'Bishop'], [1, 'Birmingham'], [1, 'Binghamton'], [1, 'Biloxi'], [1, 'Billings'], [1, 'Big Timber'], [1, 'Big Piney'], [1, 'Big Mountain'], [1, 'Beverly'], [1, 'Bettles'], [1, 'Bethel'], [1, 'Bessemer'], [1, 'Bentonville'], [1, 'Benton'], [1, 'Bend'], [1, 'Bemidji'], [1, 'Bellingham'], [1, 'Belleville'], [1, 'Beckley'], [1, 'Beaver Falls'], [1, 'Beaver'], [1, 'Beaufort'], [1, 'Bay City'], [1, 'Baudette'], [1, 'Battle Creek'], [1, 'Baton Rouge'], [1, 'Batavia'], [1, 'Bartow'], [1, 'Barter Island'], [1, 'Barrow'], [1, 'Barnstable'], [1, 'Barking Sands'], [1, 'Baraboo'], [1, 'Bar Harbor'], [1, 'Banning'], [1, 'Bangor'], [1, 'Ballston Spa'], [1, 'Bakersfield'], [1, 'Baker City'], [1, 'Bainbridge'], [1, 'BRISTOL'], [1, 'Avon Park'], [1, 'Aurora'], [1, 'Auburn'], [1, 'Atqasuk'], [1, 'Atlantic City'], [1, 'Atka'], [1, 'Astoria'], [1, 'Aspen'], [1, 'Asheville'], [1, 'Asheboro'], [1, 'Ardmore'], [1, 'Arctic Village'], [1, 'Arcata CA'], [1, 'Appleton'], [1, 'Apalachicola'], [1, 'Anvik'], [1, 'Anoka'], [1, 'Anniston'], [1, 'Annette Island'], [1, 'Annapolis'], [1, 'Ann Arbor'], [1, 'Ankeny'], [1, 'Aniak'], [1, 'Angoon'], [1, 'Angola'], [1, 'Angleton'], [1, 'Andersen'], [1, 'Anaktuvuk Pass'], [1, 'Americus'], [1, 'Ambler'], [1, 'Amarillo'], [1, 'Altus'], [1, 'Altoona'], [1, 'Alton/St Louis'], [1, 'Alpine'], [1, 'Alpena'], [1, 'Alliance'], [1, 'Allentown'], [1, 'Allakaket'], [1, 'Alice'], [1, 'Alexander City'], [1, 'Aleknagik'], [1, 'Albuquerque'], [1, 'Alamosa'], [1, 'Alakanuk'], [1, 'Alabaster'], [1, 'Akutan'], [1, 'Akiak'], [1, 'Akhiok'], [1, 'Aiken'], [1, 'Addison'], [1, 'Adak Island'], [1, 'Ada']] but got              index  city\n0         columbus     7\n1          houston     6\n2     jacksonville     5\n3          atlanta     5\n4       greenville     5\n...            ...   ...\n1202     mansfield     1\n1203        lawton     1\n1204  fort collins     1\n1205     flagstaff     1\n1206       wasilla     1\n\n[1207 rows x 2 columns]"}
{"metadata": {"db_id": "store_1", "query": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "city", "FROM", "employees", "WHERE", "title", "=", "'IT", "Staff", "'", "GROUP", "BY", "city"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "city", "from", "employees", "where", "title", "=", "value", "group", "by", "city"], "question": "How many employees who are IT staff are from each city?", "question_toks": ["How", "many", "employees", "who", "are", "IT", "staff", "are", "from", "each", "city", "?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 16, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"IT Staff\"", null]], "groupBy": [[0, 16, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"artists": ["id", "name"], "sqlite_sequence": ["name", "seq"], "albums": ["id", "title", "artist_id"], "employees": ["id", "last_name", "first_name", "title", "reports_to", "birth_date", "hire_date", "address", "city", "state", "country", "postal_code", "phone", "fax", "email"], "customers": ["id", "first_name", "last_name", "company", "address", "city", "state", "country", "postal_code", "phone", "fax", "email", "support_rep_id"], "genres": ["id", "name"], "invoices": ["id", "customer_id", "invoice_date", "billing_address", "billing_city", "billing_state", "billing_country", "billing_postal_code", "total"], "media_types": ["id", "name"], "tracks": ["id", "name", "album_id", "media_type_id", "genre_id", "composer", "milliseconds", "bytes", "unit_price"], "invoice_lines": ["id", "invoice_id", "track_id", "unit_price", "quantity"], "playlists": ["id", "name"], "playlist_tracks": ["playlist_id", "track_id"]}, "answer": [[2, "Lethbridge"]], "db_path": "data/spider/database/store_1/store_1.sqlite"}, "annotation": "answer = employees[employees['title'] == 'IT Staff']['city'].value_counts().reset_index();", "exec_result": "        index  city\n0  lethbridge     2"}
{"metadata": {"db_id": "college_1", "query": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "class_room", "FROM", "CLASS", "GROUP", "BY", "class_room", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "class_room", "from", "class", "group", "by", "class_room", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "For each classroom with at least 2 classes, how many classes are offered?", "question_toks": ["For", "each", "classroom", "with", "at", "least", "2", "classes", ",", "how", "many", "classes", "are", "offered", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"CLASS": ["CLASS_CODE", "CRS_CODE", "CLASS_SECTION", "CLASS_TIME", "CLASS_ROOM", "PROF_NUM"], "COURSE": ["CRS_CODE", "DEPT_CODE", "CRS_DESCRIPTION", "CRS_CREDIT"], "DEPARTMENT": ["DEPT_CODE", "DEPT_NAME", "SCHOOL_CODE", "EMP_NUM", "DEPT_ADDRESS", "DEPT_EXTENSION"], "EMPLOYEE": ["EMP_NUM", "EMP_LNAME", "EMP_FNAME", "EMP_INITIAL", "EMP_JOBCODE", "EMP_HIREDATE", "EMP_DOB"], "ENROLL": ["CLASS_CODE", "STU_NUM", "ENROLL_GRADE"], "PROFESSOR": ["EMP_NUM", "DEPT_CODE", "PROF_OFFICE", "PROF_EXTENSION", "PROF_HIGH_DEGREE"], "STUDENT": ["STU_NUM", "STU_LNAME", "STU_FNAME", "STU_INIT", "STU_DOB", "STU_HRS", "STU_CLASS", "STU_GPA", "STU_TRANSFER", "DEPT_CODE", "STU_PHONE", "PROF_NUM"]}, "answer": [[2, "BUS252"], [2, "BUS311"], [4, "KLR200"], [3, "KLR209"]], "db_path": "data/spider/database/college_1/college_1.sqlite"}, "annotation": "class_count = class['class_room'].value_counts().reset_index(); answer = class_count[class_count['class_room'] >= 2];", "exec_result": "    index  class_room\n0  klr200           4\n1  klr209           3\n2  bus311           2\n3  bus252           2"}
{"metadata": {"db_id": "theme_gallery", "query": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009", "query_toks": ["SELECT", "avg", "(", "ticket_price", ")", ",", "min", "(", "ticket_price", ")", ",", "max", "(", "ticket_price", ")", "FROM", "exhibition", "WHERE", "YEAR", "<", "2009"], "query_toks_no_value": ["select", "avg", "(", "ticket_price", ")", ",", "min", "(", "ticket_price", ")", ",", "max", "(", "ticket_price", ")", "from", "exhibition", "where", "year", "<", "value"], "question": "Show the average, minimum, and maximum ticket prices for exhibitions for all years before 2009.", "question_toks": ["Show", "the", "average", ",", "minimum", ",", "and", "maximum", "ticket", "prices", "for", "exhibitions", "for", "all", "years", "before", "2009", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 10, false], null]], [2, [0, [0, 10, false], null]], [1, [0, [0, 10, false], null]]]], "where": [[false, 4, [0, [0, 7, false], null], 2009.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"artist": ["Artist_ID", "Name", "Country", "Year_Join", "Age"], "exhibition": ["Exhibition_ID", "Year", "Theme", "Artist_ID", "Ticket_Price"], "exhibition_record": ["Exhibition_ID", "Date", "Attendance"]}, "answer": [[20.35, 14.95, 29.95]], "db_path": "data/spider/database/theme_gallery/theme_gallery.sqlite"}, "annotation": "tickets = exhibition[exhibition['YEAR'] < 2009]['Ticket_Price']; answer = [tickets.mean(), tickets.min(), tickets.max()];", "exec_result": "[20.35, 14.95, 29.95]"}
{"metadata": {"db_id": "cre_Theme_park", "query": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Visitors", "WHERE", "Tourist_ID", "NOT", "IN", "(", "SELECT", "Tourist_ID", "FROM", "Visits", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "visitors", "where", "tourist_id", "not", "in", "(", "select", "tourist_id", "from", "visits", ")"], "question": "Count the number of tourists who did not visit any place.", "question_toks": ["Count", "the", "number", "of", "tourists", "who", "did", "not", "visit", "any", "place", "."], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[true, 8, [0, [0, 9, false], null], {"from": {"table_units": [["table_unit", 12]], "conds": []}, "select": [false, [[0, [0, [0, 38, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Ref_Hotel_Star_Ratings": ["star_rating_code", "star_rating_description"], "Locations": ["Location_ID", "Location_Name", "Address", "Other_Details"], "Ref_Attraction_Types": ["Attraction_Type_Code", "Attraction_Type_Description"], "Visitors": ["Tourist_ID", "Tourist_Details"], "Features": ["Feature_ID", "Feature_Details"], "Hotels": ["hotel_id", "star_rating_code", "pets_allowed_yn", "price_range", "other_hotel_details"], "Tourist_Attractions": ["Tourist_Attraction_ID", "Attraction_Type_Code", "Location_ID", "How_to_Get_There", "Name", "Description", "Opening_Hours", "Other_Details"], "Street_Markets": ["Market_ID", "Market_Details"], "Shops": ["Shop_ID", "Shop_Details"], "Museums": ["Museum_ID", "Museum_Details"], "Royal_Family": ["Royal_Family_ID", "Royal_Family_Details"], "Theme_Parks": ["Theme_Park_ID", "Theme_Park_Details"], "Visits": ["Visit_ID", "Tourist_Attraction_ID", "Tourist_ID", "Visit_Date", "Visit_Details"], "Photos": ["Photo_ID", "Tourist_Attraction_ID", "Name", "Description", "Filename", "Other_Details"], "Staff": ["Staff_ID", "Tourist_Attraction_ID", "Name", "Other_Details"], "Tourist_Attraction_Features": ["Tourist_Attraction_ID", "Feature_ID"]}, "answer": [[9]], "db_path": "data/spider/database/cre_Theme_park/cre_Theme_park.sqlite"}, "annotation": "answer = len(visitors[~visitors['Tourist_ID'].isin(visits['Tourist_ID'])]);", "exec_result": "9"}
{"metadata": {"db_id": "student_assessment", "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id", "query_toks": ["SELECT", "DISTINCT", "T1.city", "FROM", "addresses", "AS", "T1", "JOIN", "people_addresses", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "JOIN", "students", "AS", "T3", "ON", "T2.person_id", "=", "T3.student_id"], "query_toks_no_value": ["select", "distinct", "t1", ".", "city", "from", "addresses", "as", "t1", "join", "people_addresses", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "join", "students", "as", "t3", "on", "t2", ".", "person_id", "=", "t3", ".", "student_id"], "question": "Find distinct cities of address of students?", "question_toks": ["Find", "distinct", "cities", "of", "address", "of", "students", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 4], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 24, false], null], "and", [false, 2, [0, [0, 23, false], null], [0, 16, false], null]]}, "select": [true, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1", "line_2", "city", "zip_postcode", "state_province_county", "country"], "People": ["person_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "login_name", "password"], "Students": ["student_id", "student_details"], "Courses": ["course_id", "course_name", "course_description", "other_details"], "People_Addresses": ["person_address_id", "person_id", "address_id", "date_from", "date_to"], "Student_Course_Registrations": ["student_id", "course_id", "registration_date"], "Student_Course_Attendance": ["student_id", "course_id", "date_of_attendance"], "Candidates": ["candidate_id", "candidate_details"], "Candidate_Assessments": ["candidate_id", "qualification", "assessment_date", "asessment_outcome_code"]}, "answer": [["South Minnie"], ["Linnealand"], ["East Tavaresburgh"], ["Terencetown"], ["Lake Devon"], ["O'Connellview"], ["New Alta"], ["South Naomibury"]], "db_path": "data/spider/database/student_assessment/student_assessment.sqlite"}, "annotation": "ids = people_addresses[people_addresses['person_id'].isin(students['student_id'])]['address_id']; answer = addresses[addresses['address_id'].isin(ids)]['city'];", "exec_result": "0            linnealand\n1          south minnie\n5         o'connellview\n6              new alta\n10      south naomibury\n11    east tavaresburgh\n12           lake devon\n14          terencetown\nName: city, dtype: object"}
{"metadata": {"db_id": "music_2", "query": "SELECT * FROM Albums WHERE YEAR  =  2012", "query_toks": ["SELECT", "*", "FROM", "Albums", "WHERE", "YEAR", "=", "2012"], "query_toks_no_value": ["select", "*", "from", "albums", "where", "year", "=", "value"], "question": "Find all the albums in 2012.", "question_toks": ["Find", "all", "the", "albums", "in", "2012", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], 2012.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Songs": ["SongId", "Title"], "Albums": ["AId", "Title", "Year", "Label", "Type"], "Band": ["Id", "Firstname", "Lastname"], "Instruments": ["SongId", "BandmateId", "Instrument"], "Performance": ["SongId", "Bandmate", "StagePosition"], "Tracklists": ["AlbumId", "Position", "SongId"], "Vocals": ["SongId", "Bandmate", "Type"]}, "answer": [], "db_path": "data/spider/database/music_2/music_2.sqlite"}, "annotation": "answer = albums[albums['YEAR'] == 2012];", "exec_result": "Empty DataFrame\nColumns: [aid, title, year, label, type]\nIndex: []"}
{"metadata": {"db_id": "flight_1", "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5", "query_toks": ["SELECT", "T2.name", "FROM", "Certificate", "AS", "T1", "JOIN", "Aircraft", "AS", "T2", "ON", "T2.aid", "=", "T1.aid", "WHERE", "T2.distance", ">", "5000", "GROUP", "BY", "T1.aid", "ORDER", "BY", "count", "(", "*", ")", ">", "=", "5"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "certificate", "as", "t1", "join", "aircraft", "as", "t2", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "where", "t2", ".", "distance", ">", "value", "group", "by", "t1", ".", "aid", "order", "by", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.", "question_toks": ["Show", "the", "name", "and", "distance", "of", "the", "aircrafts", "with", "more", "than", "5000", "distance", "and", "which", "at", "least", "5", "people", "have", "its", "certificate", "."], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [[false, 3, [0, [0, 11, false], null], 5000.0, null]], "groupBy": [[0, 16, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"flight": ["flno", "origin", "destination", "distance", "departure_date", "arrival_date", "price", "aid"], "aircraft": ["aid", "name", "distance"], "employee": ["eid", "name", "salary"], "certificate": ["eid", "aid"]}, "answer": [["Boeing 747-400"], ["Lockheed L1011"], ["Boeing 777-300"], ["Airbus A340-300"], ["Boeing 767-400ER"]], "db_path": "data/spider/database/flight_1/flight_1.sqlite"}, "annotation": "aircrafts = aircraft[aircraft['distance'] > 5000]; certificates = certificate['aid'].value_counts(); answer = aircrafts[aircrafts['aid'].isin(certificates[certificates >= 5].index)];", "exec_result": "Expected: [['Boeing 747-400'], ['Lockheed L1011'], ['Boeing 777-300'], ['Airbus A340-300'], ['Boeing 767-400ER']] but got     aid              name  distance\n2     3   airbus a340-300      7120\n12   12  boeing 767-400er      6475"}
{"metadata": {"db_id": "shop_membership", "query": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016", "query_toks": ["SELECT", "T2.name", ",", "T2.hometown", "FROM", "membership_register_branch", "AS", "T1", "JOIN", "member", "AS", "T2", "ON", "T1.member_id", "=", "T2.member_id", "WHERE", "T1.register_year", "=", "2016"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "hometown", "from", "membership_register_branch", "as", "t1", "join", "member", "as", "t2", "on", "t1", ".", "member_id", "=", "t2", ".", "member_id", "where", "t1", ".", "register_year", "=", "value"], "question": "Show the member name and hometown who registered a branch in 2016.", "question_toks": ["Show", "the", "member", "name", "and", "hometown", "who", "registered", "a", "branch", "in", "2016", "."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 14, false], null], 2016.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"member": ["Member_ID", "Card_Number", "Name", "Hometown", "Level"], "branch": ["Branch_ID", "Name", "Open_year", "Address_road", "City", "membership_amount"], "membership_register_branch": ["Member_ID", "Branch_ID", "Register_Year"], "purchase": ["Member_ID", "Branch_ID", "Year", "Total_pounds"]}, "answer": [["Jeremy Jarmon", "Collierville, Tennessee"], ["Myron Pryor", "Louisville, Kentucky"], ["Ventrell Jenkins", "Columbia, South Carolina"], ["Braxton Kelley", "LaGrange, Georgia"], ["Johnny Williams", "Jacksonville, Florida"], ["Trevard Lindley", "Hiram, Georgia"]], "db_path": "data/spider/database/shop_membership/shop_membership.sqlite"}, "annotation": "member_ids = membership_register_branch[membership_register_branch['Register_Year'] == \"2016\"]['Member_ID'].tolist(); answer = member[member['Member_ID'].isin(member_ids)][['Name', 'Hometown']];", "exec_result": "               name                  hometown\n0     jeremy jarmon   collierville, tennessee\n1       myron pryor      louisville, kentucky\n3  ventrell jenkins  columbia, south carolina\n4    braxton kelley         lagrange, georgia\n6   johnny williams     jacksonville, florida\n7   trevard lindley            hiram, georgia"}
{"metadata": {"db_id": "movie_1", "query": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director", "query_toks": ["SELECT", "T2.title", ",", "T1.stars", ",", "T2.director", ",", "max", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "director", "!", "=", "``", "null", "''", "GROUP", "BY", "director"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t1", ".", "stars", ",", "t2", ".", "director", ",", "max", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "director", "!", "=", "value", "group", "by", "director"], "question": "For each director, what are the titles and ratings for all the movies they reviewed?", "question_toks": ["For", "each", "director", ",", "what", "are", "the", "titles", "and", "ratings", "for", "all", "the", "movies", "they", "reviewed", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 9, false], null]], [0, [0, [0, 4, false], null]], [1, [0, [0, 9, false], null]]]], "where": [[false, 7, [0, [0, 4, false], null], "\"null\"", null]], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Movie": ["mID", "title", "year", "director"], "Reviewer": ["rID", "name"], "Rating": ["rID", "mID", "stars", "ratingDate"]}, "answer": [["Avatar", 5, "James Cameron", 5], ["The Sound of Music", 3, "Robert Wise", 3], ["Raiders of the Lost Ark", 4, "Steven Spielberg", 4], ["Gone with the Wind", 4, "Victor Fleming", 4]], "db_path": "data/spider/database/movie_1/movie_1.sqlite"}, "annotation": "reviewers_merged = pd.merge(rating, reviewer, on='rID'); movies_merged = pd.merge(reviewers_merged, movie, on='mID'); answer = movies_merged[movies_merged['name'].isin(movie['director'].tolist())][['title', 'stars', 'director']]", "exec_result": "Expected: [['Avatar', 5, 'James Cameron', 5], ['The Sound of Music', 3, 'Robert Wise', 3], ['Raiders of the Lost Ark', 4, 'Steven Spielberg', 4], ['Gone with the Wind', 4, 'Victor Fleming', 4]] but got      title  stars       director\n13  avatar      5  james cameron"}
{"metadata": {"db_id": "theme_gallery", "query": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id", "query_toks": ["SELECT", "T2.name", ",", "count", "(", "*", ")", "FROM", "exhibition", "AS", "T1", "JOIN", "artist", "AS", "T2", "ON", "T1.artist_id", "=", "T2.artist_id", "GROUP", "BY", "T1.artist_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "exhibition", "as", "t1", "join", "artist", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "artist_id", "group", "by", "t1", ".", "artist_id"], "question": "How many exhibitions has each artist had?", "question_toks": ["How", "many", "exhibitions", "has", "each", "artist", "had", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"artist": ["Artist_ID", "Name", "Country", "Year_Join", "Age"], "exhibition": ["Exhibition_ID", "Year", "Theme", "Artist_ID", "Ticket_Price"], "exhibition_record": ["Exhibition_ID", "Date", "Attendance"]}, "answer": [["Vijay Singh", 2], ["John Daly", 1], ["Paul Azinger", 1], ["Jeff Sluman", 1], ["Nick Price", 1]], "db_path": "data/spider/database/theme_gallery/theme_gallery.sqlite"}, "annotation": "artists_merged = pd.merge(artist, exhibition, on='Artist_ID'); answer = artists_merged['name'].value_counts().reset_index();", "exec_result": "          index  name\n0   vijay singh     2\n1     john daly     1\n2  paul azinger     1\n3   jeff sluman     1\n4    nick price     1"}
{"metadata": {"db_id": "document_management", "query": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id", "query_toks": ["SELECT", "document_name", "FROM", "documents", "EXCEPT", "SELECT", "t1.document_name", "FROM", "documents", "AS", "t1", "JOIN", "document_sections", "AS", "t2", "ON", "t1.document_code", "=", "t2.document_code", "JOIN", "document_sections_images", "AS", "t3", "ON", "t2.section_id", "=", "t3.section_id"], "query_toks_no_value": ["select", "document_name", "from", "documents", "except", "select", "t1", ".", "document_name", "from", "documents", "as", "t1", "join", "document_sections", "as", "t2", "on", "t1", ".", "document_code", "=", "t2", ".", "document_code", "join", "document_sections_images", "as", "t3", "on", "t2", ".", "section_id", "=", "t3", ".", "section_id"], "question": "Find names of the document without any images.", "question_toks": ["Find", "names", "of", "the", "document", "without", "any", "images", "."], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 22, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 5], ["table_unit", 7], ["table_unit", 8]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 26, false], null], "and", [false, 2, [0, [0, 25, false], null], [0, 30, false], null]]}, "select": [false, [[0, [0, [0, 22, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "db_table_headers": {"Roles": ["role_code", "role_description"], "Users": ["user_id", "role_code", "user_name", "user_login", "password"], "Document_Structures": ["document_structure_code", "parent_document_structure_code", "document_structure_description"], "Functional_Areas": ["functional_area_code", "parent_functional_area_code", "functional_area_description"], "Images": ["image_id", "image_alt_text", "image_name", "image_url"], "Documents": ["document_code", "document_structure_code", "document_type_code", "access_count", "document_name"], "Document_Functional_Areas": ["document_code", "functional_area_code"], "Document_Sections": ["section_id", "document_code", "section_sequence", "section_code", "section_title"], "Document_Sections_Images": ["section_id", "image_id"]}, "answer": [["How to cook pasta"], ["Humanity: a fact"], ["Learning Database"], ["Learning Japanese"], ["Life about Claude Monet"]], "db_path": "data/spider/database/document_management/document_management.sqlite"}, "annotation": "document_codes = document_sections[document_sections['section_id'].isin(document_sections_images['section_id'].tolist())]['document_code'].tolist(); answer = documents[~documents['document_code'].isin(document_codes)]['document_name'];", "exec_result": "2           learning database\n4           learning japanese\n6           how to cook pasta\n7            humanity: a fact\n12    life about claude monet\nName: document_name, dtype: object"}
{"metadata": {"db_id": "products_gen_characteristics", "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "t2.color_description", "FROM", "products", "AS", "t1", "JOIN", "ref_colors", "AS", "t2", "ON", "t1.color_code", "=", "t2.color_code", "GROUP", "BY", "t2.color_description", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "color_description", "from", "products", "as", "t1", "join", "ref_colors", "as", "t2", "on", "t1", ".", "color_code", "=", "t2", ".", "color_code", "group", "by", "t2", ".", "color_description", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Give the color description that is least common across products.", "question_toks": ["Give", "the", "color", "description", "that", "is", "least", "common", "across", "products", "."], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 14, false], null], [0, 3, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Ref_Characteristic_Types": ["characteristic_type_code", "characteristic_type_description"], "Ref_Colors": ["color_code", "color_description"], "Ref_Product_Categories": ["product_category_code", "product_category_description", "unit_of_measure"], "Characteristics": ["characteristic_id", "characteristic_type_code", "characteristic_data_type", "characteristic_name", "other_characteristic_details"], "Products": ["product_id", "color_code", "product_category_code", "product_name", "typical_buying_price", "typical_selling_price", "product_description", "other_product_details"], "Product_Characteristics": ["product_id", "characteristic_id", "product_characteristic_value"]}, "answer": [["black"]], "db_path": "data/spider/database/products_gen_characteristics/products_gen_characteristics.sqlite"}, "annotation": "color_id = products['color_code'].value_counts().index.tolist()[-1]; answer = ref_colors[ref_colors['color_code'] == color_id]['color_description'];", "exec_result": "4    black\nName: color_description, dtype: object"}
{"metadata": {"db_id": "document_management", "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000", "query_toks": ["SELECT", "document_type_code", "FROM", "documents", "GROUP", "BY", "document_type_code", "HAVING", "sum", "(", "access_count", ")", ">", "10000"], "query_toks_no_value": ["select", "document_type_code", "from", "documents", "group", "by", "document_type_code", "having", "sum", "(", "access_count", ")", ">", "value"], "question": "Return the codes of the document types that do not have a total access count of over 10000.", "question_toks": ["Return", "the", "codes", "of", "the", "document", "types", "that", "do", "not", "have", "a", "total", "access", "count", "of", "over", "10000", "."], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [], "groupBy": [[0, 20, false]], "having": [[false, 3, [0, [4, 21, false], null], 10000.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Roles": ["role_code", "role_description"], "Users": ["user_id", "role_code", "user_name", "user_login", "password"], "Document_Structures": ["document_structure_code", "parent_document_structure_code", "document_structure_description"], "Functional_Areas": ["functional_area_code", "parent_functional_area_code", "functional_area_description"], "Images": ["image_id", "image_alt_text", "image_name", "image_url"], "Documents": ["document_code", "document_structure_code", "document_type_code", "access_count", "document_name"], "Document_Functional_Areas": ["document_code", "functional_area_code"], "Document_Sections": ["section_id", "document_code", "section_sequence", "section_code", "section_title"], "Document_Sections_Images": ["section_id", "image_id"]}, "answer": [["Advertisement"], ["Book"], ["CV"], ["Paper"]], "db_path": "data/spider/database/document_management/document_management.sqlite"}, "annotation": "docs = documents.groupby(['document_type_code']).sum(); answer = docs[docs['access_count'] > 10000].index.tolist()", "exec_result": "['advertisement', 'book', 'cv', 'paper']"}
{"metadata": {"db_id": "journal_committee", "query": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)", "query_toks": ["SELECT", "Name", "FROM", "editor", "WHERE", "editor_id", "NOT", "IN", "(", "SELECT", "editor_id", "FROM", "journal_committee", ")"], "query_toks_no_value": ["select", "name", "from", "editor", "where", "editor_id", "not", "in", "(", "select", "editor_id", "from", "journal_committee", ")"], "question": "List the names of editors that are not on any journal committee.", "question_toks": ["List", "the", "names", "of", "editors", "that", "are", "not", "on", "any", "journal", "committee", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[true, 8, [0, [0, 5, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"journal": ["Journal_ID", "Date", "Theme", "Sales"], "editor": ["Editor_ID", "Name", "Age"], "journal_committee": ["Editor_ID", "Journal_ID", "Work_Type"]}, "answer": [["Anna Powierza"], ["Szymon Wydra"], ["Mariusz Zalejski"]], "db_path": "data/spider/database/journal_committee/journal_committee.sqlite"}, "annotation": "answer = editor[~editor['editor_id'].isin(journal_committee['editor_id'].tolist())]['name'].tolist();", "exec_result": "['anna powierza', 'szymon wydra', 'mariusz zalejski']"}
{"metadata": {"db_id": "voter_2", "query": "SELECT LName FROM STUDENT WHERE Major  =  50", "query_toks": ["SELECT", "LName", "FROM", "STUDENT", "WHERE", "Major", "=", "50"], "query_toks_no_value": ["select", "lname", "from", "student", "where", "major", "=", "value"], "question": "Find the last names of students with major 50.", "question_toks": ["Find", "the", "last", "names", "of", "students", "with", "major", "50", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], 50.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Student": ["StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code"], "Voting_record": ["StuID", "Registration_Date", "Election_Cycle", "President_Vote", "Vice_President_Vote", "Secretary_Vote", "Treasurer_Vote", "Class_President_Vote", "Class_Senator_Vote"]}, "answer": [["Epp"], ["Schmidt"]], "db_path": "data/spider/database/voter_2/voter_2.sqlite"}, "annotation": "answer = student[student['Major'] == 50]['LName'];", "exec_result": "32        epp\n33    schmidt\nName: lname, dtype: object"}
{"metadata": {"db_id": "student_1", "query": "SELECT DISTINCT classroom FROM list WHERE grade  =  5", "query_toks": ["SELECT", "DISTINCT", "classroom", "FROM", "list", "WHERE", "grade", "=", "5"], "query_toks_no_value": ["select", "distinct", "classroom", "from", "list", "where", "grade", "=", "value"], "question": "Which classrooms are used by grade 5?", "question_toks": ["Which", "classrooms", "are", "used", "by", "grade", "5", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [true, [[0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], 5.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"list": ["LastName", "FirstName", "Grade", "Classroom"], "teachers": ["LastName", "FirstName", "Classroom"]}, "answer": [[109]], "pandas_converted": "list[list['grade'] == 5]['classroom'].drop_duplicates().reset_index(drop=True)", "db_path": "data/spider/database/student_1/student_1.sqlite"}, "annotation": "answer = list[list['Grade'] == 5]['Classroom'].unique();", "exec_result": "[109]"}
