{"data_file": "data/spider/spider-codex_davinci-pass_at_50-dev-output_gen_prob_failed.jsonl", "total_num_examples": 255, "annotation_indices": [164, 45, 71, 213, 169, 168, 69, 119, 243, 1, 51, 171, 196, 186, 95, 133, 39, 130, 40, 212, 26, 254, 87, 140, 41, 2, 141, 237, 248, 114, 3, 135, 35, 105, 251, 120, 149, 226, 89, 46, 59, 150, 86, 195, 67, 246, 128, 8, 20, 16, 253, 100, 126, 7, 245, 113, 210, 124, 151, 72, 0, 154, 47, 65, 106, 96, 177, 229, 55, 4, 94, 24, 158, 200, 216, 99, 159, 117, 52, 28, 160, 162, 115, 61, 44, 214, 205, 17, 102, 165, 156, 227, 146, 176, 50, 179, 202, 32, 107, 170]}
{"metadata": {"db_id": "world_1", "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "query_toks": ["SELECT", "T2.Language", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T1.Name", "=", "``", "Aruba", "''", "ORDER", "BY", "Percentage", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t1", ".", "name", "=", "value", "order", "by", "percentage", "desc", "limit", "value"], "question": "What language is predominantly spoken in Aruba?", "question_toks": ["What", "language", "is", "predominantly", "spoken", "in", "Aruba", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Aruba\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 26, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"city": ["ID", "Name", "CountryCode", "District", "Population"], "sqlite_sequence": ["name", "seq"], "country": ["Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2"], "countrylanguage": ["CountryCode", "Language", "IsOfficial", "Percentage"]}, "answer": [["Papiamento"]], "db_path": "data/spider/database/world_1/world_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Language FROM countrylanguage WHERE CountryCode = \"ABW\" AND IsOfficial = 1 ORDER BY Percentage DESC LIMIT 1"}
{"metadata": {"db_id": "car_1", "query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "query_toks": ["select", "count", "(", "*", ")", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "countryid", "=", "t2", ".", "country", "group", "by", "t1", ".", "countryid", "having", "count", "(", "*", ")", ">", "value"], "question": "What is the number of countries with more than 2 car makers ?", "question_toks": ["What", "is", "the", "number", "of", "countries", "with", "more", "than", "2", "car", "makers", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [[4], [4], [3], [5]], "db_path": "data/spider/database/car_1/car_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT COUNT(DISTINCT Country) FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Maker) > 2"}
{"metadata": {"db_id": "flight_2", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "query_toks": ["SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "GROUP", "BY", "T1.Airline", "HAVING", "count", "(", "*", ")", ">", "10"], "query_toks_no_value": ["select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "group", "by", "t1", ".", "airline", "having", "count", "(", "*", ")", ">", "value"], "question": "Find all airlines that have at least 10 flights.", "question_toks": ["Find", "all", "airlines", "that", "have", "at", "least", "10", "flights", "."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [[false, 3, [0, [3, 0, false], null], 10.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"airlines": ["uid", "Airline", "Abbreviation", "Country"], "airports": ["City", "AirportCode", "AirportName", "Country", "CountryAbbrev"], "flights": ["Airline", "FlightNo", "SourceAirport", "DestAirport"]}, "answer": [["AirTran Airways"], ["Allegiant Air"], ["American Airlines"], ["Continental Airlines"], ["Delta Airlines"], ["Frontier Airlines"], ["JetBlue Airways"], ["Northwest Airlines"], ["Southwest Airlines"], ["US Airways"], ["United Airlines"], ["Virgin America"]], "db_path": "data/spider/database/flight_2/flight_2.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Airline FROM flights GROUP BY Airline HAVING count(*) >= 10"}
{"metadata": {"db_id": "network_1", "query": "SELECT grade FROM Highschooler", "query_toks": ["SELECT", "grade", "FROM", "Highschooler"], "query_toks_no_value": ["select", "grade", "from", "highschooler"], "question": "What is the grade of each high schooler?", "question_toks": ["What", "is", "the", "grade", "of", "each", "high", "schooler", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Highschooler": ["ID", "name", "grade"], "Friend": ["student_id", "friend_id"], "Likes": ["student_id", "liked_id"]}, "answer": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]], "db_path": "data/spider/database/network_1/network_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT grade FROM Highschooler"}
{"metadata": {"db_id": "world_1", "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Name", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "GROUP", "BY", "T1.Name", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "group", "by", "t1", ".", "name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is name of the country that speaks the largest number of languages?", "question_toks": ["What", "is", "name", "of", "the", "country", "that", "speaks", "the", "largest", "number", "of", "languages", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"city": ["ID", "Name", "CountryCode", "District", "Population"], "sqlite_sequence": ["name", "seq"], "country": ["Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2"], "countrylanguage": ["CountryCode", "Language", "IsOfficial", "Percentage"]}, "answer": [["United States"]], "db_path": "data/spider/database/world_1/world_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Name FROM country WHERE Code = (SELECT CountryCode FROM countrylanguage GROUP BY CountryCode ORDER BY COUNT(*) DESC LIMIT 1)"}
{"metadata": {"db_id": "world_1", "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T1.Name", "=", "``", "Afghanistan", "''", "AND", "IsOfficial", "=", "``", "T", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t1", ".", "name", "=", "value", "and", "isofficial", "=", "value"], "question": "How many official languages are spoken in Afghanistan?", "question_toks": ["How", "many", "official", "languages", "are", "spoken", "in", "Afghanistan", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Afghanistan\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"city": ["ID", "Name", "CountryCode", "District", "Population"], "sqlite_sequence": ["name", "seq"], "country": ["Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2"], "countrylanguage": ["CountryCode", "Language", "IsOfficial", "Percentage"]}, "answer": [[2]], "db_path": "data/spider/database/world_1/world_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT count(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'"}
{"metadata": {"db_id": "flight_2", "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "T1.Abbreviation", ",", "T1.Country", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "GROUP", "BY", "T1.Airline", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "abbreviation", ",", "t1", ".", "country", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "group", "by", "t1", ".", "airline", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "Find the abbreviation and country of the airline that has fewest number of flights?", "question_toks": ["Find", "the", "abbreviation", "and", "country", "of", "the", "airline", "that", "has", "fewest", "number", "of", "flights", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"airlines": ["uid", "Airline", "Abbreviation", "Country"], "airports": ["City", "AirportCode", "AirportName", "Country", "CountryAbbrev"], "flights": ["Airline", "FlightNo", "SourceAirport", "DestAirport"]}, "answer": [["AirTran", "USA"]], "db_path": "data/spider/database/flight_2/flight_2.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Abbreviation, Country FROM airlines WHERE uid = (SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) ASC LIMIT 1)"}
{"metadata": {"db_id": "student_transcripts_tracking", "query": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.department_name", ",", "T1.department_id", "FROM", "Degree_Programs", "AS", "T1", "JOIN", "Departments", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "GROUP", "BY", "T1.department_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "department_name", ",", "t1", ".", "department_id", "from", "degree_programs", "as", "t1", "join", "departments", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "group", "by", "t1", ".", "department_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which department offers the most number of degrees? List department name and id.", "question_toks": ["Which", "department", "offers", "the", "most", "number", "of", "degrees", "?", "List", "department", "name", "and", "id", "."], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 19, false], null], [0, 14, false], null]]}, "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 19, false], null]]]], "where": [], "groupBy": [[0, 19, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details"], "Courses": ["course_id", "course_name", "course_description", "other_details"], "Departments": ["department_id", "department_name", "department_description", "other_details"], "Degree_Programs": ["degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details"], "Sections": ["section_id", "course_id", "section_name", "section_description", "other_details"], "Semesters": ["semester_id", "semester_name", "semester_description", "other_details"], "Students": ["student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details"], "Student_Enrolment": ["student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details"], "Student_Enrolment_Courses": ["student_course_id", "course_id", "student_enrolment_id"], "Transcripts": ["transcript_id", "transcript_date", "other_details"], "Transcript_Contents": ["student_course_id", "transcript_id"]}, "answer": [["statistics", 8]], "db_path": "data/spider/database/student_transcripts_tracking/student_transcripts_tracking.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT department_name, department_id FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs GROUP BY department_id HAVING COUNT() = (SELECT MAX(count) FROM (SELECT COUNT() AS count FROM Degree_Programs GROUP BY department_id) AS T1))"}
{"metadata": {"db_id": "dog_kennels", "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "query_toks": ["SELECT", "T1.name", ",", "T2.date_of_treatment", "FROM", "Dogs", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.dog_id", "=", "T2.dog_id", "WHERE", "T1.breed_code", "=", "(", "SELECT", "breed_code", "FROM", "Dogs", "GROUP", "BY", "breed_code", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "date_of_treatment", "from", "dogs", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "dog_id", "=", "t2", ".", "dog_id", "where", "t1", ".", "breed_code", "=", "(", "select", "breed_code", "from", "dogs", "group", "by", "breed_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "value", ")"], "question": "List the names of the dogs of the rarest breed and the treatment dates of them.", "question_toks": ["List", "the", "names", "of", "the", "dogs", "of", "the", "rarest", "breed", "and", "the", "treatment", "dates", "of", "them", "."], "sql": {"from": {"table_units": [["table_unit", 5], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 20, false], null], [0, 45, false], null]]}, "select": [false, [[0, [0, [0, 25, false], null]], [0, [0, [0, 48, false], null]]]], "where": [[false, 2, [0, [0, 23, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]]]], "where": [], "groupBy": [[0, 23, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Breeds": ["breed_code", "breed_name"], "Charges": ["charge_id", "charge_type", "charge_amount"], "Sizes": ["size_code", "size_description"], "Treatment_Types": ["treatment_type_code", "treatment_type_description"], "Owners": ["owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number"], "Dogs": ["dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed"], "Professionals": ["professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number"], "Treatments": ["treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "answer": [["Lyric", "2018-03-19 04:39:54"], ["Houston", "2018-03-15 20:25:34"], ["Lyric", "2018-03-08 05:26:23"], ["Lyric", "2018-03-14 19:10:40"], ["Kacey", "2018-03-15 19:10:02"]], "db_path": "data/spider/database/dog_kennels/dog_kennels.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT D.name, T.date_of_treatment\\nFROM Dogs AS D\\nJOIN Breeds AS B ON D.breed_code = B.breed_code\\nJOIN Treatments AS T ON D.dog_id = T.dog_id\\nWHERE B.breed_name = (\\nSELECT breed_name\\nFROM BreedsWHERE breed_code = (\\nSELECT breed_code\\nFROM Dogs\\nGROUP BY breed_code\\nORDER BY COUNT(*) ASC\\nLIMIT 1\\n)\\n)"}
{"metadata": {"db_id": "concert_singer", "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", ",", "T2.capacity", "FROM", "concert", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.stadium_id", "WHERE", "T1.year", ">", "=", "2014", "GROUP", "BY", "T2.stadium_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "capacity", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "stadium_id", "where", "t1", ".", "year", ">", "=", "value", "group", "by", "t2", ".", "stadium_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.", "question_toks": ["Show", "the", "stadium", "name", "and", "capacity", "with", "most", "number", "of", "concerts", "in", "year", "2014", "or", "after", "."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 5, [0, [0, 19, false], null], 2014.0, null]], "groupBy": [[0, 1, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"stadium": ["Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average"], "singer": ["Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male"], "concert": ["concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year"], "singer_in_concert": ["concert_ID", "Singer_ID"]}, "answer": [["Somerset Park", 11998]], "db_path": "data/spider/database/concert_singer/concert_singer.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT stadium.Name, stadium.Capacity FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Name, stadium.Capacity ORDER BY COUNT(*) DESC LIMIT 1"}
{"metadata": {"db_id": "car_1", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "query_toks": ["SELECT", "DISTINCT", "T1.model", "FROM", "MODEL_LIST", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.Model", "=", "T2.Model", "JOIN", "CARS_DATA", "AS", "T3", "ON", "T2.MakeId", "=", "T3.Id", "JOIN", "CAR_MAKERS", "AS", "T4", "ON", "T1.Maker", "=", "T4.Id", "WHERE", "T3.weight", "<", "3500", "AND", "T4.FullName", "!", "=", "'Ford", "Motor", "Company", "'", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "model", "=", "t2", ".", "model", "join", "cars_data", "as", "t3", "on", "t2", ".", "makeid", "=", "t3", ".", "id", "join", "car_makers", "as", "t4", "on", "t1", ".", "maker", "=", "t4", ".", "id", "where", "t3", ".", "weight", "<", "value", "and", "t4", ".", "fullname", "!", "=", "value"], "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "question_toks": ["What", "are", "the", "different", "models", "wthat", "are", "lighter", "than", "3500", "but", "were", "not", "built", "by", "the", "Ford", "Motor", "Company", "?"], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 4], ["table_unit", 5], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 14, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 6, false], null]]}, "select": [true, [[0, [0, [0, 12, false], null]]]], "where": [[false, 4, [0, [0, 21, false], null], 3500.0, null], "and", [false, 7, [0, [0, 8, false], null], "\"Ford Motor Company\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [["plymouth"], ["amc"], ["citroen"], ["buick"], ["toyota"], ["datsun"], ["volkswagen"], ["peugeot"], ["audi"], ["saab"], ["bmw"], ["chevrolet"], ["pontiac"], ["opel"], ["fiat"], ["dodge"], ["mazda"], ["volvo"], ["renault"], ["honda"], ["subaru"], ["oldsmobile"], ["mercedes-benz"], ["triumph"], ["chrysler"], ["nissan"]], "db_path": "data/spider/database/car_1/car_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT DISTINCT T1.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T1.Weight < 3500 AND T3.Maker != 'Ford Motor Company'"}
{"metadata": {"db_id": "world_1", "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Continent", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "GROUP", "BY", "T1.Continent", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "continent", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "group", "by", "t1", ".", "continent", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which continent has the most diverse languages?", "question_toks": ["Which", "continent", "has", "the", "most", "diverse", "languages", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"city": ["ID", "Name", "CountryCode", "District", "Population"], "sqlite_sequence": ["name", "seq"], "country": ["Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2"], "countrylanguage": ["CountryCode", "Language", "IsOfficial", "Percentage"]}, "answer": [["Africa"]], "db_path": "data/spider/database/world_1/world_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Continent FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY Continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1"}
{"metadata": {"db_id": "world_1", "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"", "query_toks": ["SELECT", "DISTINCT", "T3.Name", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "JOIN", "city", "AS", "T3", "ON", "T1.Code", "=", "T3.CountryCode", "WHERE", "T2.IsOfficial", "=", "'T", "'", "AND", "T2.Language", "=", "'Chinese", "'", "AND", "T1.Continent", "=", "``", "Asia", "''"], "query_toks_no_value": ["select", "distinct", "t3", ".", "name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "join", "city", "as", "t3", "on", "t1", ".", "code", "=", "t3", ".", "countrycode", "where", "t2", ".", "isofficial", "=", "value", "and", "t2", ".", "language", "=", "value", "and", "t1", ".", "continent", "=", "value"], "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.", "question_toks": ["Return", "the", "different", "names", "of", "cities", "that", "are", "in", "Asia", "and", "for", "which", "Chinese", "is", "the", "official", "language", "."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null], "and", [false, 2, [0, [0, 8, false], null], [0, 3, false], null]]}, "select": [true, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 25, false], null], "\"T\"", null], "and", [false, 2, [0, [0, 24, false], null], "\"Chinese\"", null], "and", [false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"city": ["ID", "Name", "CountryCode", "District", "Population"], "sqlite_sequence": ["name", "seq"], "country": ["Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2"], "countrylanguage": ["CountryCode", "Language", "IsOfficial", "Percentage"]}, "answer": [["Shanghai"], ["Peking"], ["Chongqing"], ["Tianjin"], ["Wuhan"], ["Harbin"], ["Shenyang"], ["Kanton [Guangzhou]"], ["Chengdu"], ["Nanking [Nanjing]"], ["Changchun"], ["Xi\u00b4an"], ["Dalian"], ["Qingdao"], ["Jinan"], ["Hangzhou"], ["Zhengzhou"], ["Shijiazhuang"], ["Taiyuan"], ["Kunming"], ["Changsha"], ["Nanchang"], ["Fuzhou"], ["Lanzhou"], ["Guiyang"], ["Ningbo"], ["Hefei"], ["Urumt\u0161i [\u00dcr\u00fcmqi]"], ["Anshan"], ["Fushun"], ["Nanning"], ["Zibo"], ["Qiqihar"], ["Jilin"], ["Tangshan"], ["Baotou"], ["Shenzhen"], ["Hohhot"], ["Handan"], ["Wuxi"], ["Xuzhou"], ["Datong"], ["Yichun"], ["Benxi"], ["Luoyang"], ["Suzhou"], ["Xining"], ["Huainan"], ["Jixi"], ["Daqing"], ["Fuxin"], ["Amoy [Xiamen]"], ["Liuzhou"], ["Shantou"], ["Jinzhou"], ["Mudanjiang"], ["Yinchuan"], ["Changzhou"], ["Zhangjiakou"], ["Dandong"], ["Hegang"], ["Kaifeng"], ["Jiamusi"], ["Liaoyang"], ["Hengyang"], ["Baoding"], ["Hunjiang"], ["Xinxiang"], ["Huangshi"], ["Haikou"], ["Yantai"], ["Bengbu"], ["Xiangtan"], ["Weifang"], ["Wuhu"], ["Pingxiang"], ["Yingkou"], ["Anyang"], ["Panzhihua"], ["Pingdingshan"], ["Xiangfan"], ["Zhuzhou"], ["Jiaozuo"], ["Wenzhou"], ["Zhangjiang"], ["Zigong"], ["Shuangyashan"], ["Zaozhuang"], ["Yakeshi"], ["Yichang"], ["Zhenjiang"], ["Huaibei"], ["Qinhuangdao"], ["Guilin"], ["Liupanshui"], ["Panjin"], ["Yangquan"], ["Jinxi"], ["Liaoyuan"], ["Lianyungang"], ["Xianyang"], ["Tai\u00b4an"], ["Chifeng"], ["Shaoguan"], ["Nantong"], ["Leshan"], ["Baoji"], ["Linyi"], ["Tonghua"], ["Siping"], ["Changzhi"], ["Tengzhou"], ["Chaozhou"], ["Yangzhou"], ["Dongwan"], ["Ma\u00b4anshan"], ["Foshan"], ["Yueyang"], ["Xingtai"], ["Changde"], ["Shihezi"], ["Yancheng"], ["Jiujiang"], ["Dongying"], ["Shashi"], ["Xintai"], ["Jingdezhen"], ["Tongchuan"], ["Zhongshan"], ["Shiyan"], ["Tieli"], ["Jining"], ["Wuhai"], ["Mianyang"], ["Luzhou"], ["Zunyi"], ["Shizuishan"], ["Neijiang"], ["Tongliao"], ["Tieling"], ["Wafangdian"], ["Anqing"], ["Shaoyang"], ["Laiwu"], ["Chengde"], ["Tianshui"], ["Nanyang"], ["Cangzhou"], ["Yibin"], ["Huaiyin"], ["Dunhua"], ["Yanji"], ["Jiangmen"], ["Tongling"], ["Suihua"], ["Gongziling"], ["Xiantao"], ["Chaoyang"], ["Ganzhou"], ["Huzhou"], ["Baicheng"], ["Shangzi"], ["Yangjiang"], ["Qitaihe"], ["Gejiu"], ["Jiangyin"], ["Hebi"], ["Jiaxing"], ["Wuzhou"], ["Meihekou"], ["Xuchang"], ["Liaocheng"], ["Haicheng"], ["Qianjiang"], ["Baiyin"], ["Bei\u00b4an"], ["Yixing"], ["Laizhou"], ["Qaramay"], ["Acheng"], ["Dezhou"], ["Nanping"], ["Zhaoqing"], ["Beipiao"], ["Fengcheng"], ["Fuyu"], ["Xinyang"], ["Dongtai"], ["Yuci"], ["Honghu"], ["Ezhou"], ["Heze"], ["Daxian"], ["Linfen"], ["Tianmen"], ["Yiyang"], ["Quanzhou"], ["Rizhao"], ["Deyang"], ["Guangyuan"], ["Changshu"], ["Zhangzhou"], ["Hailar"], ["Nanchong"], ["Jiutai"], ["Zhaodong"], ["Shaoxing"], ["Fuyang"], ["Maoming"], ["Qujing"], ["Ghulja"], ["Jiaohe"], ["Puyang"], ["Huadian"], ["Jiangyou"], ["Qashqar"], ["Anshun"], ["Fuling"], ["Xinyu"], ["Hanzhong"], ["Danyang"], ["Chenzhou"], ["Xiaogan"], ["Shangqiu"], ["Zhuhai"], ["Qingyuan"], ["Aqsu"], ["Xiaoshan"], ["Zaoyang"], ["Xinghua"], ["Hami"], ["Huizhou"], ["Jinmen"], ["Sanming"], ["Ulanhot"], ["Korla"], ["Wanxian"], ["Rui\u00b4an"], ["Zhoushan"], ["Liangcheng"], ["Jiaozhou"], ["Taizhou"], ["Taonan"], ["Pingdu"], ["Ji\u00b4an"], ["Longkou"], ["Langfang"], ["Zhoukou"], ["Suining"], ["Yulin"], ["Jinhua"], ["Liu\u00b4an"], ["Shuangcheng"], ["Suizhou"], ["Ankang"], ["Weinan"], ["Longjing"], ["Da\u00b4an"], ["Lengshuijiang"], ["Laiyang"], ["Xianning"], ["Dali"], ["Anda"], ["Jincheng"], ["Longyan"], ["Xichang"], ["Wendeng"], ["Hailun"], ["Binzhou"], ["Linhe"], ["Wuwei"], ["Duyun"], ["Mishan"], ["Shangrao"], ["Changji"], ["Meixian"], ["Yushu"], ["Tiefa"], ["Huai\u00b4an"], ["Leiyang"], ["Zalantun"], ["Weihai"], ["Loudi"], ["Qingzhou"], ["Qidong"], ["Huaihua"], ["Luohe"], ["Chuzhou"], ["Kaiyuan"], ["Linqing"], ["Chaohu"], ["Laohekou"], ["Dujiangyan"], ["Zhumadian"], ["Linchuan"], ["Jiaonan"], ["Sanmenxia"], ["Heyuan"], ["Manzhouli"], ["Lhasa"], ["Lianyuan"], ["Kuytun"], ["Puqi"], ["Hongjiang"], ["Qinzhou"], ["Renqiu"], ["Yuyao"], ["Guigang"], ["Kaili"], ["Yan\u00b4an"], ["Beihai"], ["Xuangzhou"], ["Quzhou"], ["Yong\u00b4an"], ["Zixing"], ["Liyang"], ["Yizheng"], ["Yumen"], ["Liling"], ["Yuncheng"], ["Shanwei"], ["Cixi"], ["Yuanjiang"], ["Bozhou"], ["Jinchang"], ["Fu\u00b4an"], ["Suqian"], ["Shishou"], ["Hengshui"], ["Danjiangkou"], ["Fujin"], ["Sanya"], ["Guangshui"], ["Huangshan"], ["Xingcheng"], ["Zhucheng"], ["Kunshan"], ["Haining"], ["Pingliang"], ["Fuqing"], ["Xinzhou"], ["Jieyang"], ["Zhangjiagang"], ["Tong Xian"], ["Ya\u00b4an"], ["Emeishan"], ["Enshi"], ["Bose"], ["Yuzhou"], ["Tumen"], ["Putian"], ["Linhai"], ["Xilin Hot"], ["Shaowu"], ["Junan"], ["Huaying"], ["Pingyi"], ["Huangyan"], ["Singapore"]], "db_path": "data/spider/database/world_1/world_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT DISTINCT city.Name FROM city\\nJOIN country ON city.CountryCode = country.Code\\nJOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode\\nWHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'"}
{"metadata": {"db_id": "world_1", "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "query_toks": ["SELECT", "Name", "FROM", "country", "WHERE", "SurfaceArea", ">", "(", "SELECT", "min", "(", "SurfaceArea", ")", "FROM", "country", "WHERE", "Continent", "=", "``", "Europe", "''", ")"], "query_toks_no_value": ["select", "name", "from", "country", "where", "surfacearea", ">", "(", "select", "min", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "value", ")"], "question": "What are the countries that have greater surface area than any country in Europe?", "question_toks": ["What", "are", "the", "countries", "that", "have", "greater", "surface", "area", "than", "any", "country", "in", "Europe", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 3, [0, [0, 12, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[2, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Europe\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"city": ["ID", "Name", "CountryCode", "District", "Population"], "sqlite_sequence": ["name", "seq"], "country": ["Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2"], "countrylanguage": ["CountryCode", "Language", "IsOfficial", "Percentage"]}, "answer": [["Aruba"], ["Afghanistan"], ["Angola"], ["Anguilla"], ["Albania"], ["Andorra"], ["Netherlands Antilles"], ["United Arab Emirates"], ["Argentina"], ["Armenia"], ["American Samoa"], ["Antarctica"], ["French Southern territories"], ["Antigua and Barbuda"], ["Australia"], ["Austria"], ["Azerbaijan"], ["Burundi"], ["Belgium"], ["Benin"], ["Burkina Faso"], ["Bangladesh"], ["Bulgaria"], ["Bahrain"], ["Bahamas"], ["Bosnia and Herzegovina"], ["Belarus"], ["Belize"], ["Bermuda"], ["Bolivia"], ["Brazil"], ["Barbados"], ["Brunei"], ["Bhutan"], ["Bouvet Island"], ["Botswana"], ["Central African Republic"], ["Canada"], ["Cocos (Keeling) Islands"], ["Switzerland"], ["Chile"], ["China"], ["C\u00f4te d\u2019Ivoire"], ["Cameroon"], ["Congo, The Democratic Republic of the"], ["Congo"], ["Cook Islands"], ["Colombia"], ["Comoros"], ["Cape Verde"], ["Costa Rica"], ["Cuba"], ["Christmas Island"], ["Cayman Islands"], ["Cyprus"], ["Czech Republic"], ["Germany"], ["Djibouti"], ["Dominica"], ["Denmark"], ["Dominican Republic"], ["Algeria"], ["Ecuador"], ["Egypt"], ["Eritrea"], ["Western Sahara"], ["Spain"], ["Estonia"], ["Ethiopia"], ["Finland"], ["Fiji Islands"], ["Falkland Islands"], ["France"], ["Faroe Islands"], ["Micronesia, Federated States of"], ["Gabon"], ["United Kingdom"], ["Georgia"], ["Ghana"], ["Gibraltar"], ["Guinea"], ["Guadeloupe"], ["Gambia"], ["Guinea-Bissau"], ["Equatorial Guinea"], ["Greece"], ["Grenada"], ["Greenland"], ["Guatemala"], ["French Guiana"], ["Guam"], ["Guyana"], ["Hong Kong"], ["Heard Island and McDonald Islands"], ["Honduras"], ["Croatia"], ["Haiti"], ["Hungary"], ["Indonesia"], ["India"], ["British Indian Ocean Territory"], ["Ireland"], ["Iran"], ["Iraq"], ["Iceland"], ["Israel"], ["Italy"], ["Jamaica"], ["Jordan"], ["Japan"], ["Kazakstan"], ["Kenya"], ["Kyrgyzstan"], ["Cambodia"], ["Kiribati"], ["Saint Kitts and Nevis"], ["South Korea"], ["Kuwait"], ["Laos"], ["Lebanon"], ["Liberia"], ["Libyan Arab Jamahiriya"], ["Saint Lucia"], ["Liechtenstein"], ["Sri Lanka"], ["Lesotho"], ["Lithuania"], ["Luxembourg"], ["Latvia"], ["Macao"], ["Morocco"], ["Monaco"], ["Moldova"], ["Madagascar"], ["Maldives"], ["Mexico"], ["Marshall Islands"], ["Macedonia"], ["Mali"], ["Malta"], ["Myanmar"], ["Mongolia"], ["Northern Mariana Islands"], ["Mozambique"], ["Mauritania"], ["Montserrat"], ["Martinique"], ["Mauritius"], ["Malawi"], ["Malaysia"], ["Mayotte"], ["Namibia"], ["New Caledonia"], ["Niger"], ["Norfolk Island"], ["Nigeria"], ["Nicaragua"], ["Niue"], ["Netherlands"], ["Norway"], ["Nepal"], ["Nauru"], ["New Zealand"], ["Oman"], ["Pakistan"], ["Panama"], ["Pitcairn"], ["Peru"], ["Philippines"], ["Palau"], ["Papua New Guinea"], ["Poland"], ["Puerto Rico"], ["North Korea"], ["Portugal"], ["Paraguay"], ["Palestine"], ["French Polynesia"], ["Qatar"], ["R\u00e9union"], ["Romania"], ["Russian Federation"], ["Rwanda"], ["Saudi Arabia"], ["Sudan"], ["Senegal"], ["Singapore"], ["South Georgia and the South Sandwich Islands"], ["Saint Helena"], ["Svalbard and Jan Mayen"], ["Solomon Islands"], ["Sierra Leone"], ["El Salvador"], ["San Marino"], ["Somalia"], ["Saint Pierre and Miquelon"], ["Sao Tome and Principe"], ["Suriname"], ["Slovakia"], ["Slovenia"], ["Sweden"], ["Swaziland"], ["Seychelles"], ["Syria"], ["Turks and Caicos Islands"], ["Chad"], ["Togo"], ["Thailand"], ["Tajikistan"], ["Tokelau"], ["Turkmenistan"], ["East Timor"], ["Tonga"], ["Trinidad and Tobago"], ["Tunisia"], ["Turkey"], ["Tuvalu"], ["Taiwan"], ["Tanzania"], ["Uganda"], ["Ukraine"], ["United States Minor Outlying Islands"], ["Uruguay"], ["United States"], ["Uzbekistan"], ["Saint Vincent and the Grenadines"], ["Venezuela"], ["Virgin Islands, British"], ["Virgin Islands, U.S."], ["Vietnam"], ["Vanuatu"], ["Wallis and Futuna"], ["Samoa"], ["Yemen"], ["Yugoslavia"], ["South Africa"], ["Zambia"], ["Zimbabwe"]], "db_path": "data/spider/database/world_1/world_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')"}
{"metadata": {"db_id": "course_teach", "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "query_toks": ["SELECT", "T3.Name", "FROM", "course_arrange", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.Course_ID", "=", "T2.Course_ID", "JOIN", "teacher", "AS", "T3", "ON", "T1.Teacher_ID", "=", "T3.Teacher_ID", "WHERE", "T2.Course", "=", "``", "Math", "''"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "join", "teacher", "as", "t3", "on", "t1", ".", "teacher_id", "=", "t3", ".", "teacher_id", "where", "t2", ".", "course", "=", "value"], "question": "What are the names of the people who teach math courses?", "question_toks": ["What", "are", "the", "names", "of", "the", "people", "who", "teach", "math", "courses", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 9, false], null], [0, 4, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], "\"Math\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"course": ["Course_ID", "Staring_Date", "Course"], "teacher": ["Teacher_ID", "Name", "Age", "Hometown"], "course_arrange": ["Course_ID", "Teacher_ID", "Grade"]}, "answer": [["Kearsley Brown"], ["Vicente Carretero"]], "db_path": "data/spider/database/course_teach/course_teach.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange WHERE Course_ID IN (SELECT Course_ID FROM course WHERE Course = 'Math'))"}
{"metadata": {"db_id": "student_transcripts_tracking", "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "T2.transcript_date", ",", "T1.transcript_id", "FROM", "Transcript_Contents", "AS", "T1", "JOIN", "Transcripts", "AS", "T2", "ON", "T1.transcript_id", "=", "T2.transcript_id", "GROUP", "BY", "T1.transcript_id", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "transcript_date", ",", "t1", ".", "transcript_id", "from", "transcript_contents", "as", "t1", "join", "transcripts", "as", "t2", "on", "t1", ".", "transcript_id", "=", "t2", ".", "transcript_id", "group", "by", "t1", ".", "transcript_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "What is the date and id of the transcript with the least number of results?", "question_toks": ["What", "is", "the", "date", "and", "id", "of", "the", "transcript", "with", "the", "least", "number", "of", "results", "?"], "sql": {"from": {"table_units": [["table_unit", 10], ["table_unit", 9]], "conds": [[false, 2, [0, [0, 56, false], null], [0, 52, false], null]]}, "select": [false, [[0, [0, [0, 53, false], null]], [0, [0, [0, 56, false], null]]]], "where": [], "groupBy": [[0, 56, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details"], "Courses": ["course_id", "course_name", "course_description", "other_details"], "Departments": ["department_id", "department_name", "department_description", "other_details"], "Degree_Programs": ["degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details"], "Sections": ["section_id", "course_id", "section_name", "section_description", "other_details"], "Semesters": ["semester_id", "semester_name", "semester_description", "other_details"], "Students": ["student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details"], "Student_Enrolment": ["student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details"], "Student_Enrolment_Courses": ["student_course_id", "course_id", "student_enrolment_id"], "Transcripts": ["transcript_id", "transcript_date", "other_details"], "Transcript_Contents": ["student_course_id", "transcript_id"]}, "answer": [["1975-10-28 15:16:51", 2]], "db_path": "data/spider/database/student_transcripts_tracking/student_transcripts_tracking.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id = (SELECT student_course_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)"}
{"metadata": {"db_id": "car_1", "query": "select distinct year from cars_data where weight between 3000 and 4000;", "query_toks": ["select", "distinct", "year", "from", "cars_data", "where", "weight", "between", "3000", "and", "4000", ";"], "query_toks_no_value": ["select", "distinct", "year", "from", "cars_data", "where", "weight", "between", "value", "and", "value"], "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "question_toks": ["What", "are", "the", "different", "years", "in", "which", "there", "were", "cars", "produced", "that", "weighed", "less", "than", "4000", "and", "also", "cars", "that", "weighted", "more", "than", "3000", "?"], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [true, [[0, [0, [0, 23, false], null]]]], "where": [[false, 1, [0, [0, 21, false], null], 3000.0, 4000.0]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [[1970], [1971], [1972], [1973], [1974], [1975], [1976], [1977], [1978], [1979], [1980], [1981], [1982]], "db_path": "data/spider/database/car_1/car_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 INTERSECT SELECT DISTINCT Year FROM cars_data WHERE Weight > 3000"}
{"metadata": {"db_id": "student_transcripts_tracking", "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.address_id", ",", "T1.line_1", ",", "T1.line_2", "FROM", "Addresses", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.address_id", "=", "T2.current_address_id", "GROUP", "BY", "T1.address_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "address_id", ",", "t1", ".", "line_1", ",", "t1", ".", "line_2", "from", "addresses", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "current_address_id", "group", "by", "t1", ".", "address_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which address holds the most number of students currently? List the address id and all lines.", "question_toks": ["Which", "address", "holds", "the", "most", "number", "of", "students", "currently", "?", "List", "the", "address", "id", "and", "all", "lines", "."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 6]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 33, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details"], "Courses": ["course_id", "course_name", "course_description", "other_details"], "Departments": ["department_id", "department_name", "department_description", "other_details"], "Degree_Programs": ["degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details"], "Sections": ["section_id", "course_id", "section_name", "section_description", "other_details"], "Semesters": ["semester_id", "semester_name", "semester_description", "other_details"], "Students": ["student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details"], "Student_Enrolment": ["student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details"], "Student_Enrolment_Courses": ["student_course_id", "course_id", "student_enrolment_id"], "Transcripts": ["transcript_id", "transcript_date", "other_details"], "Transcript_Contents": ["student_course_id", "transcript_id"]}, "answer": [[9, "0643 Muller Vista", "Suite 383"]], "db_path": "data/spider/database/student_transcripts_tracking/student_transcripts_tracking.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT T1.current_address_id, T2.line_1, T2.line_2, T2.line_3, T2.city, T2.zip_postcode, T2.state_province_county, T2.country, T2.other_address_details\\nFROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id\\nGROUP BY T1.current_address_id\\nORDER BY COUNT(*) DESC\\nLIMIT 1"}
{"metadata": {"db_id": "car_1", "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "query_toks": ["SELECT", "T1.cylinders", "FROM", "CARS_DATA", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.Id", "=", "T2.MakeId", "WHERE", "T2.Model", "=", "'volvo", "'", "ORDER", "BY", "T1.accelerate", "ASC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "cylinders", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "makeid", "where", "t2", ".", "model", "=", "value", "order", "by", "t1", ".", "accelerate", "asc", "limit", "value"], "question": "For model volvo, how many cylinders does the car with the least accelerate have?", "question_toks": ["For", "model", "volvo", ",", "how", "many", "cylinders", "does", "the", "car", "with", "the", "least", "accelerate", "have", "?"], "sql": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 18, false], null]]]], "where": [[false, 2, [0, [0, 14, false], null], "\"volvo\"", null]], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 22, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [[6]], "db_path": "data/spider/database/car_1/car_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT MIN(Cylinders) FROM cars_data WHERE Id = (SELECT Id FROM car_names JOIN model_list ON car_names.ModelId = model_list.ModelId WHERE Make = 'volvo') AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id = (SELECT Id FROM car_names JOIN model_list ON car_names.ModelId = model_list.ModelId WHERE Make = 'volvo'))"}
{"metadata": {"db_id": "orchestra", "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "query_toks": ["SELECT", "Major_Record_Format", "FROM", "orchestra", "GROUP", "BY", "Major_Record_Format", "ORDER", "BY", "COUNT", "(", "*", ")", "ASC"], "query_toks_no_value": ["select", "major_record_format", "from", "orchestra", "group", "by", "major_record_format", "order", "by", "count", "(", "*", ")", "asc"], "question": "What are the major record formats of orchestras, sorted by their frequency?", "question_toks": ["What", "are", "the", "major", "record", "formats", "of", "orchestras", ",", "sorted", "by", "their", "frequency", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [[0, 11, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"conductor": ["Conductor_ID", "Name", "Age", "Nationality", "Year_of_Work"], "orchestra": ["Orchestra_ID", "Orchestra", "Conductor_ID", "Record_Company", "Year_of_Founded", "Major_Record_Format"], "performance": ["Performance_ID", "Orchestra_ID", "Type", "Date", "Official_ratings_(millions)", "Weekly_rank", "Share"], "show": ["Show_ID", "Performance_ID", "If_first_show", "Result", "Attendance"]}, "answer": [["CD / LP"], ["DVD"], ["CD"]], "db_path": "data/spider/database/orchestra/orchestra.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Major_Record_Format, COUNT(*) AS Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC"}
{"metadata": {"db_id": "car_1", "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "query_toks": ["SELECT", "T1.CountryName", "FROM", "COUNTRIES", "AS", "T1", "JOIN", "CONTINENTS", "AS", "T2", "ON", "T1.Continent", "=", "T2.ContId", "JOIN", "CAR_MAKERS", "AS", "T3", "ON", "T1.CountryId", "=", "T3.Country", "WHERE", "T2.Continent", "=", "'europe", "'", "GROUP", "BY", "T1.CountryName", "HAVING", "count", "(", "*", ")", ">", "=", "3", ";"], "query_toks_no_value": ["select", "t1", ".", "countryname", "from", "countries", "as", "t1", "join", "continents", "as", "t2", "on", "t1", ".", "continent", "=", "t2", ".", "contid", "join", "car_makers", "as", "t3", "on", "t1", ".", "countryid", "=", "t3", ".", "country", "where", "t2", ".", "continent", "=", "value", "group", "by", "t1", ".", "countryname", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Which countries in europe have at least 3 car manufacturers?", "question_toks": ["Which", "countries", "in", "europe", "have", "at", "least", "3", "car", "manufacturers", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"europe\"", null]], "groupBy": [[0, 4, false]], "having": [[false, 5, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [["france"], ["germany"]], "db_path": "data/spider/database/car_1/car_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Continent, CountryName FROM countries WHERE Continent = 'Europe' AND (SELECT COUNT(DISTINCT Country) FROM car_makers WHERE Country = countries.CountryName) >= 3"}
{"metadata": {"db_id": "real_estate_properties", "query": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1", "query_toks": ["SELECT", "property_name", "FROM", "Properties", "WHERE", "property_type_code", "=", "``", "House", "''", "UNION", "SELECT", "property_name", "FROM", "Properties", "WHERE", "property_type_code", "=", "``", "Apartment", "''", "AND", "room_count", ">", "1"], "query_toks_no_value": ["select", "property_name", "from", "properties", "where", "property_type_code", "=", "value", "union", "select", "property_name", "from", "properties", "where", "property_type_code", "=", "value", "and", "room_count", ">", "value"], "question": "What are the names of properties that are either houses or apartments with more than 1 room?", "question_toks": ["What", "are", "the", "names", "of", "properties", "that", "are", "either", "houses", "or", "apartments", "with", "more", "than", "1", "room", "?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 13, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"House\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 13, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Apartment\"", null], "and", [false, 3, [0, [0, 15, false], null], 1.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, "db_table_headers": {"Ref_Feature_Types": ["feature_type_code", "feature_type_name"], "Ref_Property_Types": ["property_type_code", "property_type_description"], "Other_Available_Features": ["feature_id", "feature_type_code", "feature_name", "feature_description"], "Properties": ["property_id", "property_type_code", "date_on_market", "date_sold", "property_name", "property_address", "room_count", "vendor_requested_price", "buyer_offered_price", "agreed_selling_price", "apt_feature_1", "apt_feature_2", "apt_feature_3", "fld_feature_1", "fld_feature_2", "fld_feature_3", "hse_feature_1", "hse_feature_2", "hse_feature_3", "oth_feature_1", "oth_feature_2", "oth_feature_3", "shp_feature_1", "shp_feature_2", "shp_feature_3", "other_property_details"], "Other_Property_Features": ["property_id", "feature_id", "property_feature_description"]}, "answer": [["longacre"], ["parc coliseum"], ["parc east"], ["park"], ["renoir"], ["ten tower"], ["the cole"], ["vogue"]], "db_path": "data/spider/database/real_estate_properties/real_estate_properties.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT property_name FROM Properties WHERE (property_type_code = \"APT\" OR property_type_code = \"HSE\") AND room_count > 1"}
{"metadata": {"db_id": "cre_Doc_Template_Mgt", "query": "select other_details from paragraphs where paragraph_text like 'korea'", "query_toks": ["select", "other_details", "from", "paragraphs", "where", "paragraph_text", "like", "\"korea\""], "query_toks_no_value": ["select", "other_details", "from", "paragraphs", "where", "paragraph_text", "like", "value"], "question": "Show paragraph details for paragraph with text 'Korea ' .", "question_toks": ["Show", "paragraph", "details", "for", "paragraph", "with", "text", "'Korea", "'", "."], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 17, false], null]]]], "where": [[false, 9, [0, [0, 16, false], null], "\"korea\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Ref_Template_Types": ["Template_Type_Code", "Template_Type_Description"], "Templates": ["Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details"], "Documents": ["Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details"], "Paragraphs": ["Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "answer": [[null], [null]], "db_path": "data/spider/database/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'"}
{"metadata": {"db_id": "tvshow", "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "query_toks": ["SELECT", "T1.series_name", "FROM", "TV_Channel", "AS", "T1", "JOIN", "Cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.Title", "=", "``", "The", "Rise", "of", "the", "Blue", "Beetle", "!", "``", ";"], "query_toks_no_value": ["select", "t1", ".", "series_name", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "title", "=", "value"], "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "question_toks": ["What", "is", "the", "series", "name", "of", "the", "TV", "Channel", "that", "shows", "the", "cartoon", "``", "The", "Rise", "of", "the", "Blue", "Beetle", "''", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"The Rise of the Blue Beetle!\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"TV_Channel": ["id", "series_name", "Country", "Language", "Content", "Pixel_aspect_ratio_PAR", "Hight_definition_TV", "Pay_per_view_PPV", "Package_Option"], "TV_series": ["id", "Episode", "Air_Date", "Rating", "Share", "18_49_Rating_Share", "Viewers_m", "Weekly_Rank", "Channel"], "Cartoon": ["id", "Title", "Directed_by", "Written_by", "Original_air_date", "Production_code", "Channel"]}, "answer": [["Sky Radio"]], "db_path": "data/spider/database/tvshow/tvshow.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Title = \"The Rise of the Blue Beetle\")"}
{"metadata": {"db_id": "car_1", "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "query_toks": ["SELECT", "T1.cylinders", "FROM", "CARS_DATA", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.Id", "=", "T2.MakeId", "WHERE", "T2.Model", "=", "'volvo", "'", "ORDER", "BY", "T1.accelerate", "ASC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "cylinders", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "makeid", "where", "t2", ".", "model", "=", "value", "order", "by", "t1", ".", "accelerate", "asc", "limit", "value"], "question": "For a volvo model, how many cylinders does the version with least accelerate have?", "question_toks": ["For", "a", "volvo", "model", ",", "how", "many", "cylinders", "does", "the", "version", "with", "least", "accelerate", "have", "?"], "sql": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 18, false], null]]]], "where": [[false, 2, [0, [0, 14, false], null], "\"volvo\"", null]], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 22, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [[6]], "db_path": "data/spider/database/car_1/car_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT MIN(Cylinders) FROM cars_data WHERE Id IN (SELECT Id FROM car_names WHERE Model = \"volvo\") AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT Id FROM car_names WHERE Model = \"volvo\"))"}
{"metadata": {"db_id": "concert_singer", "query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "query_toks": ["SELECT", "country", "FROM", "singer", "WHERE", "age", ">", "40", "INTERSECT", "SELECT", "country", "FROM", "singer", "WHERE", "age", "<", "30"], "query_toks_no_value": ["select", "country", "from", "singer", "where", "age", ">", "value", "intersect", "select", "country", "from", "singer", "where", "age", "<", "value"], "question": "Show countries where a singer above age 40 and a singer below 30 are from.", "question_toks": ["Show", "countries", "where", "a", "singer", "above", "age", "40", "and", "a", "singer", "below", "30", "are", "from", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], 40.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [[false, 4, [0, [0, 13, false], null], 30.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "db_table_headers": {"stadium": ["Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average"], "singer": ["Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male"], "concert": ["concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year"], "singer_in_concert": ["concert_ID", "Singer_ID"]}, "answer": [["France"]], "db_path": "data/spider/database/concert_singer/concert_singer.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT DISTINCT T1.Country FROM singer AS T1 JOIN singer AS T2 ON T1.Country = T2.Country WHERE T1.Age > 40 AND T2.Age < 30"}
{"metadata": {"db_id": "tvshow", "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "query_toks": ["SELECT", "T2.Title", "FROM", "TV_Channel", "AS", "T1", "JOIN", "Cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T1.series_name", "=", "``", "Sky", "Radio", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t1", ".", "series_name", "=", "value"], "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "question_toks": ["What", "is", "the", "title", "of", "all", "the", "cartools", "that", "are", "on", "the", "TV", "Channel", "with", "the", "series", "name", "``", "Sky", "Radio", "''", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Sky Radio\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"TV_Channel": ["id", "series_name", "Country", "Language", "Content", "Pixel_aspect_ratio_PAR", "Hight_definition_TV", "Pay_per_view_PPV", "Package_Option"], "TV_series": ["id", "Episode", "Air_Date", "Rating", "Share", "18_49_Rating_Share", "Viewers_m", "Weekly_Rank", "Channel"], "Cartoon": ["id", "Title", "Directed_by", "Written_by", "Original_air_date", "Production_code", "Channel"]}, "answer": [["The Rise of the Blue Beetle!"], ["Return of the Fearsome Fangs!"]], "db_path": "data/spider/database/tvshow/tvshow.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Title FROM Cartoon WHERE Channel IN (SELECT id FROM TV_Channel WHERE series_name = \"Sky Radio\")"}
{"metadata": {"db_id": "dog_kennels", "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.professional_id", ",", "T1.cell_number", "FROM", "Professionals", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.professional_id", "=", "T2.professional_id", "GROUP", "BY", "T1.professional_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "professional_id", ",", "t1", ".", "cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "professional_id", "=", "t2", ".", "professional_id", "group", "by", "t1", ".", "professional_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.", "question_toks": ["Which", "professionals", "have", "done", "at", "least", "two", "types", "of", "treatments", "?", "List", "the", "professional", "id", "and", "cell", "phone", "."], "sql": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 43, false], null]]]], "where": [], "groupBy": [[0, 33, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Breeds": ["breed_code", "breed_name"], "Charges": ["charge_id", "charge_type", "charge_amount"], "Sizes": ["size_code", "size_description"], "Treatment_Types": ["treatment_type_code", "treatment_type_description"], "Owners": ["owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number"], "Dogs": ["dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed"], "Professionals": ["professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number"], "Treatments": ["treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "answer": [[4, "00230569697"], [6, "139-321-7313"], [8, "328.842.3792"], [9, "962-983-8109x3509"], [10, "461-801-2600"], [14, "1-185-137-1945x409"]], "db_path": "data/spider/database/dog_kennels/dog_kennels.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)"}
{"metadata": {"db_id": "dog_kennels", "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "query_toks": ["SELECT", "DISTINCT", "T1.first_name", ",", "T3.treatment_type_description", "FROM", "professionals", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.professional_id", "=", "T2.professional_id", "JOIN", "Treatment_types", "AS", "T3", "ON", "T2.treatment_type_code", "=", "T3.treatment_type_code"], "query_toks_no_value": ["select", "distinct", "t1", ".", "first_name", ",", "t3", ".", "treatment_type_description", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "professional_id", "=", "t2", ".", "professional_id", "join", "treatment_types", "as", "t3", "on", "t2", ".", "treatment_type_code", "=", "t3", ".", "treatment_type_code"], "question": "What are each professional's first name and description of the treatment they have performed?", "question_toks": ["What", "are", "each", "professional", "'s", "first", "name", "and", "description", "of", "the", "treatment", "they", "have", "performed", "?"], "sql": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null], "and", [false, 2, [0, [0, 47, false], null], [0, 8, false], null]]}, "select": [true, [[0, [0, [0, 35, false], null]], [0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Breeds": ["breed_code", "breed_name"], "Charges": ["charge_id", "charge_type", "charge_amount"], "Sizes": ["size_code", "size_description"], "Treatment_Types": ["treatment_type_code", "treatment_type_description"], "Owners": ["owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number"], "Dogs": ["dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed"], "Professionals": ["professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number"], "Treatments": ["treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "answer": [["Monte", "Take for a Walk"], ["Domenica", "Vaccination"], ["Vernice", "Physical examination"], ["Karley", "Vaccination"], ["Sigurd", "Vaccination"], ["Sigurd", "Physical examination"], ["Ruben", "Physical examination"], ["Domenica", "Take for a Walk"], ["Velva", "Take for a Walk"], ["Danny", "Vaccination"], ["Monte", "Physical examination"], ["Ruben", "Take for a Walk"]], "db_path": "data/spider/database/dog_kennels/dog_kennels.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code"}
{"metadata": {"db_id": "battle_death", "query": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "query_toks": ["SELECT", "T1.killed", ",", "T1.injured", "FROM", "death", "AS", "T1", "JOIN", "ship", "AS", "t2", "ON", "T1.caused_by_ship_id", "=", "T2.id", "WHERE", "T2.tonnage", "=", "'t", "'"], "query_toks_no_value": ["select", "t1", ".", "killed", ",", "t1", ".", "injured", "from", "death", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "caused_by_ship_id", "=", "t2", ".", "id", "where", "t2", ".", "tonnage", "=", "value"], "question": "What are the death and injury situations caused by the ship with tonnage 't'?", "question_toks": ["What", "are", "the", "death", "and", "injury", "situations", "caused", "by", "the", "ship", "with", "tonnage", "'t", "'", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 14, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 17, false], null]], [0, [0, [0, 18, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"t\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"battle": ["id", "name", "date", "bulgarian_commander", "latin_commander", "result"], "ship": ["lost_in_battle", "id", "name", "tonnage", "ship_type", "location", "disposition_of_ship"], "death": ["caused_by_ship_id", "id", "note", "killed", "injured"]}, "answer": [[8, 0], [3, 0], [25, 0], [2, 0], [0, 0], [4, 5], [0, 0], [29, 0], [0, 0], [0, 0], [14, 0]], "db_path": "data/spider/database/battle_death/battle_death.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT note, killed, injured FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't')"}
{"metadata": {"db_id": "concert_singer", "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "query_toks": ["SELECT", "T2.name", ",", "T2.location", "FROM", "concert", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.stadium_id", "WHERE", "T1.Year", "=", "2014", "INTERSECT", "SELECT", "T2.name", ",", "T2.location", "FROM", "concert", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.stadium_id", "WHERE", "T1.Year", "=", "2015"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "stadium_id", "where", "t1", ".", "year", "=", "value", "intersect", "select", "t2", ".", "name", ",", "t2", ".", "location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "stadium_id", "where", "t1", ".", "year", "=", "value"], "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?", "question_toks": ["What", "are", "the", "names", "and", "locations", "of", "the", "stadiums", "that", "had", "concerts", "that", "occurred", "in", "both", "2014", "and", "2015", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2014.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2015.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "db_table_headers": {"stadium": ["Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average"], "singer": ["Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male"], "concert": ["concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year"], "singer_in_concert": ["concert_ID", "Singer_ID"]}, "answer": [["Somerset Park", "Ayr United"]], "db_path": "data/spider/database/concert_singer/concert_singer.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Name, Location FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = 2014) AND Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = 2015)"}
{"metadata": {"db_id": "student_transcripts_tracking", "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "query_toks": ["SELECT", "DISTINCT", "T2.semester_id", "FROM", "Degree_Programs", "AS", "T1", "JOIN", "Student_Enrolment", "AS", "T2", "ON", "T1.degree_program_id", "=", "T2.degree_program_id", "WHERE", "degree_summary_name", "=", "'Master", "'", "INTERSECT", "SELECT", "DISTINCT", "T2.semester_id", "FROM", "Degree_Programs", "AS", "T1", "JOIN", "Student_Enrolment", "AS", "T2", "ON", "T1.degree_program_id", "=", "T2.degree_program_id", "WHERE", "degree_summary_name", "=", "'Bachelor", "'"], "query_toks_no_value": ["select", "distinct", "t2", ".", "semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1", ".", "degree_program_id", "=", "t2", ".", "degree_program_id", "where", "degree_summary_name", "=", "value", "intersect", "select", "distinct", "t2", ".", "semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1", ".", "degree_program_id", "=", "t2", ".", "degree_program_id", "where", "degree_summary_name", "=", "value"], "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?", "question_toks": ["What", "is", "the", "id", "of", "the", "semester", "that", "had", "both", "Masters", "and", "Bachelors", "students", "enrolled", "?"], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]]}, "select": [true, [[0, [0, [0, 46, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"Master\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]]}, "select": [true, [[0, [0, [0, 46, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"Bachelor\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details"], "Courses": ["course_id", "course_name", "course_description", "other_details"], "Departments": ["department_id", "department_name", "department_description", "other_details"], "Degree_Programs": ["degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details"], "Sections": ["section_id", "course_id", "section_name", "section_description", "other_details"], "Semesters": ["semester_id", "semester_name", "semester_description", "other_details"], "Students": ["student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details"], "Student_Enrolment": ["student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details"], "Student_Enrolment_Courses": ["student_course_id", "course_id", "student_enrolment_id"], "Transcripts": ["transcript_id", "transcript_date", "other_details"], "Transcript_Contents": ["student_course_id", "transcript_id"]}, "answer": [[13]], "db_path": "data/spider/database/student_transcripts_tracking/student_transcripts_tracking.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name IN ('Masters', 'Bachelors')) GROUP BY semester_id HAVING count(DISTINCT degree_program_id) = 2"}
{"metadata": {"db_id": "car_1", "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "MODEL_LIST", "AS", "T2", "ON", "T1.Id", "=", "T2.Maker", "WHERE", "T1.FullName", "=", "'American", "Motor", "Company", "'", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "maker", "where", "t1", ".", "fullname", "=", "value"], "question": "What is the number of car models created by the car maker American Motor Company?", "question_toks": ["What", "is", "the", "number", "of", "car", "models", "created", "by", "the", "car", "maker", "American", "Motor", "Company", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 8, false], null], "\"American Motor Company\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [[1]], "db_path": "data/spider/database/car_1/car_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT COUNT(*) FROM model_list WHERE Maker = 'American Motor Company'"}
{"metadata": {"db_id": "wta_1", "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "query_toks": ["SELECT", "T1.country_code", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "rankings", "AS", "T2", "ON", "T1.player_id", "=", "T2.player_id", "ORDER", "BY", "T2.tours", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "country_code", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "player_id", "order", "by", "t2", ".", "tours", "desc", "limit", "value"], "question": "What is the first name and country code of the player with the most tours?", "question_toks": ["What", "is", "the", "first", "name", "and", "country", "code", "of", "the", "player", "with", "the", "most", "tours", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 41, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 43, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"players": ["player_id", "first_name", "last_name", "hand", "birth_date", "country_code"], "matches": ["best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year"], "rankings": ["ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "answer": [["USA", "Julia"]], "db_path": "data/spider/database/wta_1/wta_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT first_name, country_code FROM players WHERE player_id IN (SELECT player_id FROM rankings GROUP BY player_id ORDER BY SUM(tours) DESC LIMIT 1)"}
{"metadata": {"db_id": "singer", "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "query_toks": ["SELECT", "Citizenship", "FROM", "singer", "WHERE", "Birth_Year", "<", "1945", "INTERSECT", "SELECT", "Citizenship", "FROM", "singer", "WHERE", "Birth_Year", ">", "1955"], "query_toks_no_value": ["select", "citizenship", "from", "singer", "where", "birth_year", "<", "value", "intersect", "select", "citizenship", "from", "singer", "where", "birth_year", ">", "value"], "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.", "question_toks": ["Show", "the", "citizenship", "shared", "by", "singers", "with", "birth", "year", "before", "1945", "and", "after", "1955", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 4, [0, [0, 3, false], null], 1945.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 3, [0, [0, 3, false], null], 1955.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "db_table_headers": {"singer": ["Singer_ID", "Name", "Birth_Year", "Net_Worth_Millions", "Citizenship"], "song": ["Song_ID", "Title", "Singer_ID", "Sales", "Highest_Position"]}, "answer": [["United States"]], "db_path": "data/spider/database/singer/singer.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955 GROUP BY Citizenship HAVING COUNT(DISTINCT Singer_ID) > 1"}
{"metadata": {"db_id": "student_transcripts_tracking", "query": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1", "query_toks": ["select", "t2.department_name", ",", "t1.department_id", "from", "degree_programs", "as", "t1", "join", "departments", "as", "t2", "on", "t1.department_id", "=", "t2.department_id", "group", "by", "t1.department_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "query_toks_no_value": ["select", "t2", ".", "department_name", ",", "t1", ".", "department_id", "from", "degree_programs", "as", "t1", "join", "departments", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "group", "by", "t1", ".", "department_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name and id of the department with the most number of degrees ?", "question_toks": ["What", "is", "the", "name", "and", "id", "of", "the", "department", "with", "the", "most", "number", "of", "degrees", "?"], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 19, false], null], [0, 14, false], null]]}, "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 19, false], null]]]], "where": [], "groupBy": [[0, 19, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details"], "Courses": ["course_id", "course_name", "course_description", "other_details"], "Departments": ["department_id", "department_name", "department_description", "other_details"], "Degree_Programs": ["degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details"], "Sections": ["section_id", "course_id", "section_name", "section_description", "other_details"], "Semesters": ["semester_id", "semester_name", "semester_description", "other_details"], "Students": ["student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details"], "Student_Enrolment": ["student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details"], "Student_Enrolment_Courses": ["student_course_id", "course_id", "student_enrolment_id"], "Transcripts": ["transcript_id", "transcript_date", "other_details"], "Transcript_Contents": ["student_course_id", "transcript_id"]}, "answer": [["statistics", 8]], "db_path": "data/spider/database/student_transcripts_tracking/student_transcripts_tracking.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT department_id, department_name FROM Departments WHERE department_id = (SELECT department_id FROM Degree_Programs GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1)"}
{"metadata": {"db_id": "tvshow", "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "query_toks": ["SELECT", "id", "FROM", "tv_channel", "GROUP", "BY", "country", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "id", "from", "tv_channel", "group", "by", "country", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the ids of all tv channels that have more than 2 TV channels?", "question_toks": ["What", "are", "the", "ids", "of", "all", "tv", "channels", "that", "have", "more", "than", "2", "TV", "channels", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"TV_Channel": ["id", "series_name", "Country", "Language", "Content", "Pixel_aspect_ratio_PAR", "Hight_definition_TV", "Pay_per_view_PPV", "Package_Option"], "TV_series": ["id", "Episode", "Air_Date", "Rating", "Share", "18_49_Rating_Share", "Viewers_m", "Weekly_Rank", "Channel"], "Cartoon": ["id", "Title", "Directed_by", "Written_by", "Original_air_date", "Production_code", "Channel"]}, "answer": [["700"]], "db_path": "data/spider/database/tvshow/tvshow.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2"}
{"metadata": {"db_id": "network_1", "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "query_toks": ["SELECT", "avg", "(", "grade", ")", "FROM", "Highschooler", "WHERE", "id", "IN", "(", "SELECT", "T1.student_id", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", ")"], "query_toks_no_value": ["select", "avg", "(", "grade", ")", "from", "highschooler", "where", "id", "in", "(", "select", "t1", ".", "student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", ")"], "question": "What is the average grade of students who have friends?", "question_toks": ["What", "is", "the", "average", "grade", "of", "students", "who", "have", "friends", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 3, false], null]]]], "where": [[false, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Highschooler": ["ID", "name", "grade"], "Friend": ["student_id", "friend_id"], "Likes": ["student_id", "liked_id"]}, "answer": [[10.428571428571429]], "db_path": "data/spider/database/network_1/network_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)"}
{"metadata": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "query_toks": ["SELECT", "document_id", "FROM", "Paragraphs", "GROUP", "BY", "document_id", "HAVING", "count", "(", "*", ")", "BETWEEN", "1", "AND", "2"], "query_toks_no_value": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "having", "count", "(", "*", ")", "between", "value", "and", "value"], "question": "Give the ids of documents that have between one and two paragraphs.", "question_toks": ["Give", "the", "ids", "of", "documents", "that", "have", "between", "one", "and", "two", "paragraphs", "."], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [[false, 1, [0, [3, 0, false], null], 1.0, 2.0]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Ref_Template_Types": ["Template_Type_Code", "Template_Type_Description"], "Templates": ["Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details"], "Documents": ["Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details"], "Paragraphs": ["Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "answer": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]], "db_path": "data/spider/database/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING count(*) BETWEEN 1 AND 2)"}
{"metadata": {"db_id": "car_1", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "query_toks": ["SELECT", "T1.Model", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "CARS_DATA", "AS", "T2", "ON", "T1.MakeId", "=", "T2.Id", "WHERE", "T2.Cylinders", "=", "4", "ORDER", "BY", "T2.horsepower", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1", ".", "makeid", "=", "t2", ".", "id", "where", "t2", ".", "cylinders", "=", "value", "order", "by", "t2", ".", "horsepower", "desc", "limit", "value"], "question": "For the cars with 4 cylinders, which model has the largest horsepower?", "question_toks": ["For", "the", "cars", "with", "4", "cylinders", ",", "which", "model", "has", "the", "largest", "horsepower", "?"], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [["ford"]], "db_path": "data/spider/database/car_1/car_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Model FROM model_list WHERE ModelId IN (SELECT Id FROM cars_data WHERE Cylinders = 4 AND Horsepower = (SELECT MAX(Horsepower) FROM cars_data WHERE Cylinders = 4))"}
{"metadata": {"db_id": "flight_2", "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "query_toks": ["SELECT", "City", ",", "Country", "FROM", "AIRPORTS", "WHERE", "AirportName", "=", "``", "Alton", "''"], "query_toks_no_value": ["select", "city", ",", "country", "from", "airports", "where", "airportname", "=", "value"], "question": "Give the city and country for the Alton airport.", "question_toks": ["Give", "the", "city", "and", "country", "for", "the", "Alton", "airport", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]], [0, [0, [0, 8, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"Alton\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"airlines": ["uid", "Airline", "Abbreviation", "Country"], "airports": ["City", "AirportCode", "AirportName", "Country", "CountryAbbrev"], "flights": ["Airline", "FlightNo", "SourceAirport", "DestAirport"]}, "answer": [], "db_path": "data/spider/database/flight_2/flight_2.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT City, Country FROM airports WHERE AirportName = 'Alton'"}
{"metadata": {"db_id": "tvshow", "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "query_toks": ["SELECT", "id", "FROM", "TV_Channel", "EXCEPT", "SELECT", "channel", "FROM", "cartoon", "WHERE", "directed_by", "=", "'Ben", "Jones", "'"], "query_toks_no_value": ["select", "id", "from", "tv_channel", "except", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "value"], "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.", "question_toks": ["find", "the", "id", "of", "tv", "channels", "that", "do", "not", "play", "any", "cartoon", "directed", "by", "Ben", "Jones", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Ben Jones\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "db_table_headers": {"TV_Channel": ["id", "series_name", "Country", "Language", "Content", "Pixel_aspect_ratio_PAR", "Hight_definition_TV", "Pay_per_view_PPV", "Package_Option"], "TV_series": ["id", "Episode", "Air_Date", "Rating", "Share", "18_49_Rating_Share", "Viewers_m", "Weekly_Rank", "Channel"], "Cartoon": ["id", "Title", "Directed_by", "Written_by", "Original_air_date", "Production_code", "Channel"]}, "answer": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]], "db_path": "data/spider/database/tvshow/tvshow.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')"}
{"metadata": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "query_toks": ["SELECT", "T2.template_id", "FROM", "Ref_template_types", "AS", "T1", "JOIN", "Templates", "AS", "T2", "ON", "T1.template_type_code", "=", "T2.template_type_code", "WHERE", "T1.template_type_description", "=", "``", "Presentation", "''"], "query_toks_no_value": ["select", "t2", ".", "template_id", "from", "ref_template_types", "as", "t1", "join", "templates", "as", "t2", "on", "t1", ".", "template_type_code", "=", "t2", ".", "template_type_code", "where", "t1", ".", "template_type_description", "=", "value"], "question": "Return the ids corresponding to templates with the description 'Presentation'.", "question_toks": ["Return", "the", "ids", "corresponding", "to", "templates", "with", "the", "description", "'Presentation", "'", "."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 5, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Presentation\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Ref_Template_Types": ["Template_Type_Code", "Template_Type_Description"], "Templates": ["Template_ID", "Version_Number", "Template_Type_Code", "Date_Effective_From", "Date_Effective_To", "Template_Details"], "Documents": ["Document_ID", "Template_ID", "Document_Name", "Document_Description", "Other_Details"], "Paragraphs": ["Paragraph_ID", "Document_ID", "Paragraph_Text", "Other_Details"]}, "answer": [[6], [7], [10]], "db_path": "data/spider/database/cre_Doc_Template_Mgt/cre_Doc_Template_Mgt.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Template_ID FROM Templates WHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation')"}
{"metadata": {"db_id": "world_1", "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "query_toks": ["SELECT", "DISTINCT", "T2.Name", "FROM", "country", "AS", "T1", "JOIN", "city", "AS", "T2", "ON", "T2.CountryCode", "=", "T1.Code", "WHERE", "T1.Continent", "=", "'Europe", "'", "AND", "T1.Name", "NOT", "IN", "(", "SELECT", "T3.Name", "FROM", "country", "AS", "T3", "JOIN", "countrylanguage", "AS", "T4", "ON", "T3.Code", "=", "T4.CountryCode", "WHERE", "T4.IsOfficial", "=", "'T", "'", "AND", "T4.Language", "=", "'English", "'", ")"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "country", "as", "t1", "join", "city", "as", "t2", "on", "t2", ".", "countrycode", "=", "t1", ".", "code", "where", "t1", ".", "continent", "=", "value", "and", "t1", ".", "name", "not", "in", "(", "select", "t3", ".", "name", "from", "country", "as", "t3", "join", "countrylanguage", "as", "t4", "on", "t3", ".", "code", "=", "t4", ".", "countrycode", "where", "t4", ".", "isofficial", "=", "value", "and", "t4", ".", "language", "=", "value", ")"], "question": "What are the names of cities in Europe for which English is not the official language?", "question_toks": ["What", "are", "the", "names", "of", "cities", "in", "Europe", "for", "which", "English", "is", "not", "the", "official", "language", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 8, false], null]]}, "select": [true, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Europe\"", null], "and", [true, 8, [0, [0, 9, false], null], {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 25, false], null], "\"T\"", null], "and", [false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"city": ["ID", "Name", "CountryCode", "District", "Population"], "sqlite_sequence": ["name", "seq"], "country": ["Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2"], "countrylanguage": ["CountryCode", "Language", "IsOfficial", "Percentage"]}, "answer": [["Amsterdam"], ["Rotterdam"], ["Haag"], ["Utrecht"], ["Eindhoven"], ["Tilburg"], ["Groningen"], ["Breda"], ["Apeldoorn"], ["Nijmegen"], ["Enschede"], ["Haarlem"], ["Almere"], ["Arnhem"], ["Zaanstad"], ["\u00b4s-Hertogenbosch"], ["Amersfoort"], ["Maastricht"], ["Dordrecht"], ["Leiden"], ["Haarlemmermeer"], ["Zoetermeer"], ["Emmen"], ["Zwolle"], ["Ede"], ["Delft"], ["Heerlen"], ["Alkmaar"], ["Tirana"], ["Andorra la Vella"], ["Antwerpen"], ["Gent"], ["Charleroi"], ["Li\u00e8ge"], ["Bruxelles [Brussel]"], ["Brugge"], ["Schaerbeek"], ["Namur"], ["Mons"], ["Sarajevo"], ["Banja Luka"], ["Zenica"], ["Sofija"], ["Plovdiv"], ["Varna"], ["Burgas"], ["Ruse"], ["Stara Zagora"], ["Pleven"], ["Sliven"], ["Dobric"], ["\u0160umen"], ["Madrid"], ["Barcelona"], ["Valencia"], ["Sevilla"], ["Zaragoza"], ["M\u00e1laga"], ["Bilbao"], ["Las Palmas de Gran Canaria"], ["Murcia"], ["Palma de Mallorca"], ["Valladolid"], ["C\u00f3rdoba"], ["Vigo"], ["Alicante [Alacant]"], ["Gij\u00f3n"], ["L\u00b4Hospitalet de Llobregat"], ["Granada"], ["A Coru\u00f1a (La Coru\u00f1a)"], ["Vitoria-Gasteiz"], ["Santa Cruz de Tenerife"], ["Badalona"], ["Oviedo"], ["M\u00f3stoles"], ["Elche [Elx]"], ["Sabadell"], ["Santander"], ["Jerez de la Frontera"], ["Pamplona [Iru\u00f1a]"], ["Donostia-San Sebasti\u00e1n"], ["Cartagena"], ["Legan\u00e9s"], ["Fuenlabrada"], ["Almer\u00eda"], ["Terrassa"], ["Alcal\u00e1 de Henares"], ["Burgos"], ["Salamanca"], ["Albacete"], ["Getafe"], ["C\u00e1diz"], ["Alcorc\u00f3n"], ["Huelva"], ["Le\u00f3n"], ["Castell\u00f3n de la Plana [Castell"], ["Badajoz"], ["[San Crist\u00f3bal de] la Laguna"], ["Logro\u00f1o"], ["Santa Coloma de Gramenet"], ["Tarragona"], ["Lleida (L\u00e9rida)"], ["Ja\u00e9n"], ["Ourense (Orense)"], ["Matar\u00f3"], ["Algeciras"], ["Marbella"], ["Barakaldo"], ["Dos Hermanas"], ["Santiago de Compostela"], ["Torrej\u00f3n de Ardoz"], ["T\u00f3rshavn"], ["Longyearbyen"], ["Reykjav\u00edk"], ["Roma"], ["Milano"], ["Napoli"], ["Torino"], ["Palermo"], ["Genova"], ["Bologna"], ["Firenze"], ["Catania"], ["Bari"], ["Venezia"], ["Messina"], ["Verona"], ["Trieste"], ["Padova"], ["Taranto"], ["Brescia"], ["Reggio di Calabria"], ["Modena"], ["Prato"], ["Parma"], ["Cagliari"], ["Livorno"], ["Perugia"], ["Foggia"], ["Reggio nell\u00b4 Emilia"], ["Salerno"], ["Ravenna"], ["Ferrara"], ["Rimini"], ["Syrakusa"], ["Sassari"], ["Monza"], ["Bergamo"], ["Pescara"], ["Latina"], ["Vicenza"], ["Terni"], ["Forl\u00ec"], ["Trento"], ["Novara"], ["Piacenza"], ["Ancona"], ["Lecce"], ["Bolzano"], ["Catanzaro"], ["La Spezia"], ["Udine"], ["Torre del Greco"], ["Andria"], ["Brindisi"], ["Giugliano in Campania"], ["Pisa"], ["Barletta"], ["Arezzo"], ["Alessandria"], ["Cesena"], ["Pesaro"], ["Wien"], ["Graz"], ["Linz"], ["Salzburg"], ["Innsbruck"], ["Klagenfurt"], ["Beograd"], ["Novi Sad"], ["Ni\u0161"], ["Pri\u0161tina"], ["Kragujevac"], ["Podgorica"], ["Subotica"], ["Prizren"], ["Athenai"], ["Thessaloniki"], ["Pireus"], ["Patras"], ["Peristerion"], ["Herakleion"], ["Kallithea"], ["Larisa"], ["Zagreb"], ["Split"], ["Rijeka"], ["Osijek"], ["Riga"], ["Daugavpils"], ["Liepaja"], ["Schaan"], ["Vaduz"], ["Vilnius"], ["Kaunas"], ["Klaipeda"], ["\u0160iauliai"], ["Panevezys"], ["Luxembourg [Luxemburg/L\u00ebtzebuerg]"], ["Skopje"], ["Chisinau"], ["Tiraspol"], ["Balti"], ["Bender (T\u00eeghina)"], ["Monte-Carlo"], ["Monaco-Ville"], ["Oslo"], ["Bergen"], ["Trondheim"], ["Stavanger"], ["B\u00e6rum"], ["Lisboa"], ["Porto"], ["Amadora"], ["Co\u00edmbra"], ["Braga"], ["Warszawa"], ["L\u00f3dz"], ["Krak\u00f3w"], ["Wroclaw"], ["Poznan"], ["Gdansk"], ["Szczecin"], ["Bydgoszcz"], ["Lublin"], ["Katowice"], ["Bialystok"], ["Czestochowa"], ["Gdynia"], ["Sosnowiec"], ["Radom"], ["Kielce"], ["Gliwice"], ["Torun"], ["Bytom"], ["Zabrze"], ["Bielsko-Biala"], ["Olsztyn"], ["Rzesz\u00f3w"], ["Ruda Slaska"], ["Rybnik"], ["Walbrzych"], ["Tychy"], ["Dabrowa G\u00f3rnicza"], ["Plock"], ["Elblag"], ["Opole"], ["Gorz\u00f3w Wielkopolski"], ["Wloclawek"], ["Chorz\u00f3w"], ["Tarn\u00f3w"], ["Zielona G\u00f3ra"], ["Koszalin"], ["Legnica"], ["Kalisz"], ["Grudziadz"], ["Slupsk"], ["Jastrzebie-Zdr\u00f3j"], ["Jaworzno"], ["Jelenia G\u00f3ra"], ["Paris"], ["Marseille"], ["Lyon"], ["Toulouse"], ["Nice"], ["Nantes"], ["Strasbourg"], ["Montpellier"], ["Bordeaux"], ["Rennes"], ["Le Havre"], ["Reims"], ["Lille"], ["St-\u00c9tienne"], ["Toulon"], ["Grenoble"], ["Angers"], ["Dijon"], ["Brest"], ["Le Mans"], ["Clermont-Ferrand"], ["Amiens"], ["Aix-en-Provence"], ["Limoges"], ["N\u00eemes"], ["Tours"], ["Villeurbanne"], ["Metz"], ["Besan\u00e7on"], ["Caen"], ["Orl\u00e9ans"], ["Mulhouse"], ["Rouen"], ["Boulogne-Billancourt"], ["Perpignan"], ["Nancy"], ["Roubaix"], ["Argenteuil"], ["Tourcoing"], ["Montreuil"], ["Bucuresti"], ["Iasi"], ["Constanta"], ["Cluj-Napoca"], ["Galati"], ["Timisoara"], ["Brasov"], ["Craiova"], ["Ploiesti"], ["Braila"], ["Oradea"], ["Bacau"], ["Pitesti"], ["Arad"], ["Sibiu"], ["T\u00e2rgu Mures"], ["Baia Mare"], ["Buzau"], ["Satu Mare"], ["Botosani"], ["Piatra Neamt"], ["R\u00e2mnicu V\u00e2lcea"], ["Suceava"], ["Drobeta-Turnu Severin"], ["T\u00e2rgoviste"], ["Focsani"], ["T\u00e2rgu Jiu"], ["Tulcea"], ["Resita"], ["Stockholm"], ["Gothenburg [G\u00f6teborg]"], ["Malm\u00f6"], ["Uppsala"], ["Link\u00f6ping"], ["V\u00e4ster\u00e5s"], ["\u00d6rebro"], ["Norrk\u00f6ping"], ["Helsingborg"], ["J\u00f6nk\u00f6ping"], ["Ume\u00e5"], ["Lund"], ["Bor\u00e5s"], ["Sundsvall"], ["G\u00e4vle"], ["Berlin"], ["Hamburg"], ["Munich [M\u00fcnchen]"], ["K\u00f6ln"], ["Frankfurt am Main"], ["Essen"], ["Dortmund"], ["Stuttgart"], ["D\u00fcsseldorf"], ["Bremen"], ["Duisburg"], ["Hannover"], ["Leipzig"], ["N\u00fcrnberg"], ["Dresden"], ["Bochum"], ["Wuppertal"], ["Bielefeld"], ["Mannheim"], ["Bonn"], ["Gelsenkirchen"], ["Karlsruhe"], ["Wiesbaden"], ["M\u00fcnster"], ["M\u00f6nchengladbach"], ["Chemnitz"], ["Augsburg"], ["Halle/Saale"], ["Braunschweig"], ["Aachen"], ["Krefeld"], ["Magdeburg"], ["Kiel"], ["Oberhausen"], ["L\u00fcbeck"], ["Hagen"], ["Rostock"], ["Freiburg im Breisgau"], ["Erfurt"], ["Kassel"], ["Saarbr\u00fccken"], ["Mainz"], ["Hamm"], ["Herne"], ["M\u00fclheim an der Ruhr"], ["Solingen"], ["Osnabr\u00fcck"], ["Ludwigshafen am Rhein"], ["Leverkusen"], ["Oldenburg"], ["Neuss"], ["Heidelberg"], ["Darmstadt"], ["Paderborn"], ["Potsdam"], ["W\u00fcrzburg"], ["Regensburg"], ["Recklinghausen"], ["G\u00f6ttingen"], ["Bremerhaven"], ["Wolfsburg"], ["Bottrop"], ["Remscheid"], ["Heilbronn"], ["Pforzheim"], ["Offenbach am Main"], ["Ulm"], ["Ingolstadt"], ["Gera"], ["Salzgitter"], ["Cottbus"], ["Reutlingen"], ["F\u00fcrth"], ["Siegen"], ["Koblenz"], ["Moers"], ["Bergisch Gladbach"], ["Zwickau"], ["Hildesheim"], ["Witten"], ["Schwerin"], ["Erlangen"], ["Kaiserslautern"], ["Trier"], ["Jena"], ["Iserlohn"], ["G\u00fctersloh"], ["Marl"], ["L\u00fcnen"], ["D\u00fcren"], ["Ratingen"], ["Velbert"], ["Esslingen am Neckar"], ["Serravalle"], ["San Marino"], ["Bratislava"], ["Ko\u0161ice"], ["Pre\u0161ov"], ["Ljubljana"], ["Maribor"], ["Helsinki [Helsingfors]"], ["Espoo"], ["Tampere"], ["Vantaa"], ["Turku [\u00c5bo]"], ["Oulu"], ["Lahti"], ["Z\u00fcrich"], ["Geneve"], ["Basel"], ["Bern"], ["Lausanne"], ["K\u00f8benhavn"], ["\u00c5rhus"], ["Odense"], ["Aalborg"], ["Frederiksberg"], ["Praha"], ["Brno"], ["Ostrava"], ["Plzen"], ["Olomouc"], ["Liberec"], ["Cesk\u00e9 Budejovice"], ["Hradec Kr\u00e1lov\u00e9"], ["\u00dast\u00ed nad Labem"], ["Pardubice"], ["Kyiv"], ["Harkova [Harkiv]"], ["Dnipropetrovsk"], ["Donetsk"], ["Odesa"], ["Zaporizzja"], ["Lviv"], ["Kryvyi Rig"], ["Mykolajiv"], ["Mariupol"], ["Lugansk"], ["Vinnytsja"], ["Makijivka"], ["Herson"], ["Sevastopol"], ["Simferopol"], ["Pultava [Poltava]"], ["T\u0161ernigiv"], ["T\u0161erkasy"], ["Gorlivka"], ["Zytomyr"], ["Sumy"], ["Dniprodzerzynsk"], ["Kirovograd"], ["Hmelnytskyi"], ["T\u0161ernivtsi"], ["Rivne"], ["Krement\u0161uk"], ["Ivano-Frankivsk"], ["Ternopil"], ["Lutsk"], ["Bila Tserkva"], ["Kramatorsk"], ["Melitopol"], ["Kert\u0161"], ["Nikopol"], ["Berdjansk"], ["Pavlograd"], ["Sjeverodonetsk"], ["Slovjansk"], ["Uzgorod"], ["Alt\u0161evsk"], ["Lysyt\u0161ansk"], ["Jevpatorija"], ["Kamjanets-Podilskyi"], ["Jenakijeve"], ["Krasnyi Lut\u0161"], ["Stahanov"], ["Oleksandrija"], ["Konotop"], ["Kostjantynivka"], ["Berdyt\u0161iv"], ["Izmajil"], ["\u0160ostka"], ["Uman"], ["Brovary"], ["Mukat\u0161eve"], ["Budapest"], ["Debrecen"], ["Miskolc"], ["Szeged"], ["P\u00e9cs"], ["Gy\u00f6r"], ["Nyiregyh\u00e1za"], ["Kecskem\u00e9t"], ["Sz\u00e9kesfeh\u00e9rv\u00e1r"], ["Minsk"], ["Gomel"], ["Mogiljov"], ["Vitebsk"], ["Grodno"], ["Bobruisk"], ["Baranovit\u0161i"], ["Borisov"], ["Pinsk"], ["Or\u0161a"], ["Mozyr"], ["Novopolotsk"], ["Lida"], ["Soligorsk"], ["Molodet\u0161no"], ["Citt\u00e0 del Vaticano"], ["Moscow"], ["St Petersburg"], ["Novosibirsk"], ["Nizni Novgorod"], ["Jekaterinburg"], ["Samara"], ["Omsk"], ["Kazan"], ["Ufa"], ["T\u0161eljabinsk"], ["Rostov-na-Donu"], ["Perm"], ["Volgograd"], ["Voronez"], ["Krasnojarsk"], ["Saratov"], ["Toljatti"], ["Uljanovsk"], ["Izevsk"], ["Krasnodar"], ["Jaroslavl"], ["Habarovsk"], ["Vladivostok"], ["Irkutsk"], ["Barnaul"], ["Novokuznetsk"], ["Penza"], ["Rjazan"], ["Orenburg"], ["Lipetsk"], ["Nabereznyje T\u0161elny"], ["Tula"], ["Tjumen"], ["Kemerovo"], ["Astrahan"], ["Tomsk"], ["Kirov"], ["Ivanovo"], ["T\u0161eboksary"], ["Brjansk"], ["Tver"], ["Kursk"], ["Magnitogorsk"], ["Kaliningrad"], ["Nizni Tagil"], ["Murmansk"], ["Ulan-Ude"], ["Kurgan"], ["Arkangeli"], ["Sot\u0161i"], ["Smolensk"], ["Orjol"], ["Stavropol"], ["Belgorod"], ["Kaluga"], ["Vladimir"], ["Mahat\u0161kala"], ["T\u0161erepovets"], ["Saransk"], ["Tambov"], ["Vladikavkaz"], ["T\u0161ita"], ["Vologda"], ["Veliki Novgorod"], ["Komsomolsk-na-Amure"], ["Kostroma"], ["Volzski"], ["Taganrog"], ["Petroskoi"], ["Bratsk"], ["Dzerzinsk"], ["Surgut"], ["Orsk"], ["Sterlitamak"], ["Angarsk"], ["Jo\u0161kar-Ola"], ["Rybinsk"], ["Prokopjevsk"], ["Niznevartovsk"], ["Nalt\u0161ik"], ["Syktyvkar"], ["Severodvinsk"], ["Bijsk"], ["Niznekamsk"], ["Blagove\u0161t\u0161ensk"], ["\u0160ahty"], ["Staryi Oskol"], ["Zelenograd"], ["Balakovo"], ["Novorossijsk"], ["Pihkova"], ["Zlatoust"], ["Jakutsk"], ["Podolsk"], ["Petropavlovsk-Kamt\u0161atski"], ["Kamensk-Uralski"], ["Engels"], ["Syzran"], ["Grozny"], ["Novot\u0161erkassk"], ["Berezniki"], ["Juzno-Sahalinsk"], ["Volgodonsk"], ["Abakan"], ["Maikop"], ["Miass"], ["Armavir"], ["Ljubertsy"], ["Rubtsovsk"], ["Kovrov"], ["Nahodka"], ["Ussurijsk"], ["Salavat"], ["Myti\u0161t\u0161i"], ["Kolomna"], ["Elektrostal"], ["Murom"], ["Kolpino"], ["Norilsk"], ["Almetjevsk"], ["Novomoskovsk"], ["Dimitrovgrad"], ["Pervouralsk"], ["Himki"], ["Bala\u0161iha"], ["Nevinnomyssk"], ["Pjatigorsk"], ["Korolev"], ["Serpuhov"], ["Odintsovo"], ["Orehovo-Zujevo"], ["Kamy\u0161in"], ["Novot\u0161eboksarsk"], ["T\u0161erkessk"], ["At\u0161insk"], ["Magadan"], ["Mit\u0161urinsk"], ["Kislovodsk"], ["Jelets"], ["Seversk"], ["Noginsk"], ["Velikije Luki"], ["Novokuiby\u0161evsk"], ["Neftekamsk"], ["Leninsk-Kuznetski"], ["Oktjabrski"], ["Sergijev Posad"], ["Arzamas"], ["Kiseljovsk"], ["Novotroitsk"], ["Obninsk"], ["Kansk"], ["Glazov"], ["Solikamsk"], ["Sarapul"], ["Ust-Ilimsk"], ["\u0160t\u0161olkovo"], ["Mezduret\u0161ensk"], ["Usolje-Sibirskoje"], ["Elista"], ["Novo\u0161ahtinsk"], ["Votkinsk"], ["Kyzyl"], ["Serov"], ["Zelenodolsk"], ["Zeleznodoroznyi"], ["Kine\u0161ma"], ["Kuznetsk"], ["Uhta"], ["Jessentuki"], ["Tobolsk"], ["Neftejugansk"], ["Bataisk"], ["Nojabrsk"], ["Bala\u0161ov"], ["Zeleznogorsk"], ["Zukovski"], ["Anzero-Sudzensk"], ["Bugulma"], ["Novouralsk"], ["Pu\u0161kin"], ["Vorkuta"], ["Derbent"], ["Kirovo-T\u0161epetsk"], ["Krasnogorsk"], ["Klin"], ["T\u0161aikovski"], ["Novyi Urengoi"], ["Tallinn"], ["Tartu"]], "db_path": "data/spider/database/world_1/world_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Europe' AND countrylanguage.Language != 'English' AND countrylanguage.IsOfficial = 0"}
{"metadata": {"db_id": "flight_2", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "GROUP", "BY", "T1.Airline", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "group", "by", "t1", ".", "airline", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which airline has most number of flights?", "question_toks": ["Which", "airline", "has", "most", "number", "of", "flights", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"airlines": ["uid", "Airline", "Abbreviation", "Country"], "airports": ["City", "AirportCode", "AirportName", "Country", "CountryAbbrev"], "flights": ["Airline", "FlightNo", "SourceAirport", "DestAirport"]}, "answer": [["Virgin America"]], "db_path": "data/spider/database/flight_2/flight_2.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1"}
{"metadata": {"db_id": "dog_kennels", "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "query_toks": ["SELECT", "T1.last_name", "FROM", "Owners", "AS", "T1", "JOIN", "Dogs", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id", "WHERE", "T2.age", "=", "(", "SELECT", "max", "(", "age", ")", "FROM", "Dogs", ")"], "query_toks_no_value": ["select", "t1", ".", "last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id", "where", "t2", ".", "age", "=", "(", "select", "max", "(", "age", ")", "from", "dogs", ")"], "question": "Who owns the youngest dog? Give me his or her last name.", "question_toks": ["Who", "owns", "the", "youngest", "dog", "?", "Give", "me", "his", "or", "her", "last", "name", "."], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null]]}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 26, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[1, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Breeds": ["breed_code", "breed_name"], "Charges": ["charge_id", "charge_type", "charge_amount"], "Sizes": ["size_code", "size_description"], "Treatment_Types": ["treatment_type_code", "treatment_type_description"], "Owners": ["owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number"], "Dogs": ["dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed"], "Professionals": ["professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number"], "Treatments": ["treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "answer": [["Feil"], ["Fisher"], ["Rippin"]], "db_path": "data/spider/database/dog_kennels/dog_kennels.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs ORDER BY date_of_birth DESC LIMIT 1)"}
{"metadata": {"db_id": "student_transcripts_tracking", "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T2.transcript_date", ",", "T1.transcript_id", "FROM", "Transcript_Contents", "AS", "T1", "JOIN", "Transcripts", "AS", "T2", "ON", "T1.transcript_id", "=", "T2.transcript_id", "GROUP", "BY", "T1.transcript_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "transcript_date", ",", "t1", ".", "transcript_id", "from", "transcript_contents", "as", "t1", "join", "transcripts", "as", "t2", "on", "t1", ".", "transcript_id", "=", "t2", ".", "transcript_id", "group", "by", "t1", ".", "transcript_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What is the date and id of the transcript with at least 2 courses listed?", "question_toks": ["What", "is", "the", "date", "and", "id", "of", "the", "transcript", "with", "at", "least", "2", "courses", "listed", "?"], "sql": {"from": {"table_units": [["table_unit", 10], ["table_unit", 9]], "conds": [[false, 2, [0, [0, 56, false], null], [0, 52, false], null]]}, "select": [false, [[0, [0, [0, 53, false], null]], [0, [0, [0, 56, false], null]]]], "where": [], "groupBy": [[0, 56, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details"], "Courses": ["course_id", "course_name", "course_description", "other_details"], "Departments": ["department_id", "department_name", "department_description", "other_details"], "Degree_Programs": ["degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details"], "Sections": ["section_id", "course_id", "section_name", "section_description", "other_details"], "Semesters": ["semester_id", "semester_name", "semester_description", "other_details"], "Students": ["student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details"], "Student_Enrolment": ["student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details"], "Student_Enrolment_Courses": ["student_course_id", "course_id", "student_enrolment_id"], "Transcripts": ["transcript_id", "transcript_date", "other_details"], "Transcript_Contents": ["student_course_id", "transcript_id"]}, "answer": [["2013-06-30 13:01:40", 5], ["2010-12-13 10:55:15", 6], ["1975-05-06 12:04:47", 8], ["1998-11-22 12:18:29", 15]], "db_path": "data/spider/database/student_transcripts_tracking/student_transcripts_tracking.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING count(*) >= 2)"}
{"metadata": {"db_id": "pets_1", "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "query_toks": ["SELECT", "T1.fname", ",", "T1.age", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'dog", "'", "AND", "T1.stuid", "NOT", "IN", "(", "SELECT", "T1.stuid", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'cat", "'", ")"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value", "and", "t1", ".", "stuid", "not", "in", "(", "select", "t1", ".", "stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value", ")"], "question": "What is the first name of every student who has a dog but does not have a cat?", "question_toks": ["What", "is", "the", "first", "name", "of", "every", "student", "who", "has", "a", "dog", "but", "does", "not", "have", "a", "cat", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"dog\"", null], "and", [true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"cat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Student": ["StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code"], "Has_Pet": ["StuID", "PetID"], "Pets": ["PetID", "PetType", "pet_age", "weight"]}, "answer": [["Tracy", 19], ["Tracy", 19]], "db_path": "data/spider/database/pets_1/pets_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT DISTINCT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog') AND StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')))"}
{"metadata": {"db_id": "car_1", "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CAR_MAKERS", "AS", "T1", "JOIN", "COUNTRIES", "AS", "T2", "ON", "T1.Country", "=", "T2.CountryId", "WHERE", "T2.CountryName", "=", "'france", "'", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "countries", "as", "t2", "on", "t1", ".", "country", "=", "t2", ".", "countryid", "where", "t2", ".", "countryname", "=", "value"], "question": "How many car makers are there in france?", "question_toks": ["How", "many", "car", "makers", "are", "there", "in", "france", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 3, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"france\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [[3]], "db_path": "data/spider/database/car_1/car_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT count(*) FROM car_makers WHERE Country = 'france'"}
{"metadata": {"db_id": "car_1", "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "query_toks": ["SELECT", "T2.Make", ",", "T1.Year", "FROM", "CARS_DATA", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.Id", "=", "T2.MakeId", "WHERE", "T1.Year", "=", "(", "SELECT", "min", "(", "YEAR", ")", "FROM", "CARS_DATA", ")", ";"], "query_toks_no_value": ["select", "t2", ".", "make", ",", "t1", ".", "year", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "makeid", "where", "t1", ".", "year", "=", "(", "select", "min", "(", "year", ")", "from", "cars_data", ")"], "question": "What is the maker of the carr produced in the earliest year and what year was it?", "question_toks": ["What", "is", "the", "maker", "of", "the", "carr", "produced", "in", "the", "earliest", "year", "and", "what", "year", "was", "it", "?"], "sql": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 23, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[2, [0, [0, 23, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [["chevrolet chevelle malibu", 1970], ["buick skylark 320", 1970], ["plymouth satellite", 1970], ["amc rebel sst", 1970], ["ford torino", 1970], ["ford galaxie 500", 1970], ["chevrolet impala", 1970], ["plymouth fury iii", 1970], ["pontiac catalina", 1970], ["amc ambassador dpl", 1970], ["citroen ds-21 pallas", 1970], ["chevrolet chevelle concours (sw)", 1970], ["ford torino (sw)", 1970], ["plymouth satellite (sw)", 1970], ["amc rebel sst (sw)", 1970], ["dodge challenger se", 1970], ["plymouth cuda 340", 1970], ["ford mustang boss 302", 1970], ["chevrolet monte carlo", 1970], ["buick estate wagon (sw)", 1970], ["toyota corona mark ii", 1970], ["plymouth duster", 1970], ["amc hornet", 1970], ["ford maverick", 1970], ["datsun pl510", 1970], ["volkswagen 1131 deluxe sedan", 1970], ["peugeot 504", 1970], ["audi 100 ls", 1970], ["saab 99e", 1970], ["bmw 2002", 1970], ["amc gremlin", 1970], ["ford f250", 1970], ["chevy c20", 1970], ["dodge d200", 1970], ["hi 1200d", 1970]], "db_path": "data/spider/database/car_1/car_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT car_makers.Maker, MIN(cars_data.Year) FROM car_makers\\nJOIN model_list ON car_makers.Maker = model_list.Maker\\nJOIN car_names ON model_list.Model = car_names.Model\\nJOIN cars_data ON car_names.MakeId = cars_data.Id\\nGROUP BY car_makers.Maker ORDER BY MIN(cars_data.Year) LIMIT 1"}
{"metadata": {"db_id": "real_estate_properties", "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code", "query_toks": ["SELECT", "T2.property_type_description", "FROM", "Properties", "AS", "T1", "JOIN", "Ref_Property_Types", "AS", "T2", "ON", "T1.property_type_code", "=", "T2.property_type_code", "GROUP", "BY", "T1.property_type_code"], "query_toks_no_value": ["select", "t2", ".", "property_type_description", "from", "properties", "as", "t1", "join", "ref_property_types", "as", "t2", "on", "t1", ".", "property_type_code", "=", "t2", ".", "property_type_code", "group", "by", "t1", ".", "property_type_code"], "question": "Show the property type descriptions of properties belonging to that code.", "question_toks": ["Show", "the", "property", "type", "descriptions", "of", "properties", "belonging", "to", "that", "code", "."], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 3, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Ref_Feature_Types": ["feature_type_code", "feature_type_name"], "Ref_Property_Types": ["property_type_code", "property_type_description"], "Other_Available_Features": ["feature_id", "feature_type_code", "feature_name", "feature_description"], "Properties": ["property_id", "property_type_code", "date_on_market", "date_sold", "property_name", "property_address", "room_count", "vendor_requested_price", "buyer_offered_price", "agreed_selling_price", "apt_feature_1", "apt_feature_2", "apt_feature_3", "fld_feature_1", "fld_feature_2", "fld_feature_3", "hse_feature_1", "hse_feature_2", "hse_feature_3", "oth_feature_1", "oth_feature_2", "oth_feature_3", "shp_feature_1", "shp_feature_2", "shp_feature_3", "other_property_details"], "Other_Property_Features": ["property_id", "feature_id", "property_feature_description"]}, "answer": [["Apartment, Flat, Condo, etc."], ["Field, Meadow."], ["House, Bungalow, etc."], ["Other, to be determined."], ["Shop, Retail Outlet."]], "db_path": "data/spider/database/real_estate_properties/real_estate_properties.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code = [desired code]"}
{"metadata": {"db_id": "wta_1", "query": "SELECT min(loser_rank) FROM matches", "query_toks": ["SELECT", "min", "(", "loser_rank", ")", "FROM", "matches"], "query_toks_no_value": ["select", "min", "(", "loser_rank", ")", "from", "matches"], "question": "Find the highest rank of losers in all matches.", "question_toks": ["Find", "the", "highest", "rank", "of", "losers", "in", "all", "matches", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[2, [0, [0, 16, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"players": ["player_id", "first_name", "last_name", "hand", "birth_date", "country_code"], "matches": ["best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year"], "rankings": ["ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "answer": [[1]], "db_path": "data/spider/database/wta_1/wta_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT MAX(loser_rank) FROM matches"}
{"metadata": {"db_id": "student_transcripts_tracking", "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "query_toks": ["SELECT", "T1.last_name", "FROM", "Students", "AS", "T1", "JOIN", "Addresses", "AS", "T2", "ON", "T1.current_address_id", "=", "T2.address_id", "WHERE", "T2.state_province_county", "=", "'NorthCarolina", "'", "EXCEPT", "SELECT", "DISTINCT", "T3.last_name", "FROM", "Students", "AS", "T3", "JOIN", "Student_Enrolment", "AS", "T4", "ON", "T3.student_id", "=", "T4.student_id"], "query_toks_no_value": ["select", "t1", ".", "last_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1", ".", "current_address_id", "=", "t2", ".", "address_id", "where", "t2", ".", "state_province_county", "=", "value", "except", "select", "distinct", "t3", ".", "last_name", "from", "students", "as", "t3", "join", "student_enrolment", "as", "t4", "on", "t3", ".", "student_id", "=", "t4", ".", "student_id"], "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?", "question_toks": ["What", "are", "the", "last", "name", "of", "the", "students", "who", "live", "in", "North", "Carolina", "but", "have", "not", "registered", "in", "any", "degree", "programs", "?"], "sql": {"from": {"table_units": [["table_unit", 6], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 37, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"NorthCarolina\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 47, false], null]]}, "select": [true, [[0, [0, [0, 37, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "db_table_headers": {"Addresses": ["address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details"], "Courses": ["course_id", "course_name", "course_description", "other_details"], "Departments": ["department_id", "department_name", "department_description", "other_details"], "Degree_Programs": ["degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details"], "Sections": ["section_id", "course_id", "section_name", "section_description", "other_details"], "Semesters": ["semester_id", "semester_name", "semester_description", "other_details"], "Students": ["student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details"], "Student_Enrolment": ["student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details"], "Student_Enrolment_Courses": ["student_course_id", "course_id", "student_enrolment_id"], "Transcripts": ["transcript_id", "transcript_date", "other_details"], "Transcript_Contents": ["student_course_id", "transcript_id"]}, "answer": [["Gleichner"], ["Weimann"]], "db_path": "data/spider/database/student_transcripts_tracking/student_transcripts_tracking.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)"}
{"metadata": {"db_id": "pets_1", "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "query_toks": ["SELECT", "T1.fname", ",", "T1.age", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'dog", "'", "AND", "T1.stuid", "NOT", "IN", "(", "SELECT", "T1.stuid", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'cat", "'", ")"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value", "and", "t1", ".", "stuid", "not", "in", "(", "select", "t1", ".", "stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value", ")"], "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.", "question_toks": ["Find", "the", "first", "name", "and", "age", "of", "students", "who", "have", "a", "dog", "but", "do", "not", "have", "a", "cat", "as", "a", "pet", "."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"dog\"", null], "and", [true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"cat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Student": ["StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code"], "Has_Pet": ["StuID", "PetID"], "Pets": ["PetID", "PetType", "pet_age", "weight"]}, "answer": [["Tracy", 19], ["Tracy", 19]], "db_path": "data/spider/database/pets_1/pets_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog')) AND StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))"}
{"metadata": {"db_id": "dog_kennels", "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "query_toks": ["SELECT", "T1.last_name", "FROM", "Owners", "AS", "T1", "JOIN", "Dogs", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id", "WHERE", "T2.age", "=", "(", "SELECT", "max", "(", "age", ")", "FROM", "Dogs", ")"], "query_toks_no_value": ["select", "t1", ".", "last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id", "where", "t2", ".", "age", "=", "(", "select", "max", "(", "age", ")", "from", "dogs", ")"], "question": "List the last name of the owner owning the youngest dog.", "question_toks": ["List", "the", "last", "name", "of", "the", "owner", "owning", "the", "youngest", "dog", "."], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null]]}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 26, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[1, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Breeds": ["breed_code", "breed_name"], "Charges": ["charge_id", "charge_type", "charge_amount"], "Sizes": ["size_code", "size_description"], "Treatment_Types": ["treatment_type_code", "treatment_type_description"], "Owners": ["owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number"], "Dogs": ["dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed"], "Professionals": ["professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number"], "Treatments": ["treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "answer": [["Feil"], ["Fisher"], ["Rippin"]], "db_path": "data/spider/database/dog_kennels/dog_kennels.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs ORDER BY date_of_birth DESC LIMIT 1)"}
{"metadata": {"db_id": "battle_death", "query": "SELECT name ,  date FROM battle", "query_toks": ["SELECT", "name", ",", "date", "FROM", "battle"], "query_toks_no_value": ["select", "name", ",", "date", "from", "battle"], "question": "List the name, date and result of each battle.", "question_toks": ["List", "the", "name", ",", "date", "and", "result", "of", "each", "battle", "."], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"battle": ["id", "name", "date", "bulgarian_commander", "latin_commander", "result"], "ship": ["lost_in_battle", "id", "name", "tonnage", "ship_type", "location", "disposition_of_ship"], "death": ["caused_by_ship_id", "id", "note", "killed", "injured"]}, "answer": [["Battle of Adrianople", "14 April 1205"], ["Battle of Serres", "June 1205"], ["Battle of Rusion", "31 January 1206"], ["Battle of Rodosto", "February 1206"], ["Battle of Messinopolis", "4 September 1207"], ["Battle of Boruy", "June 1205"], ["Battle of Philippopolis", "31 June 1208"], ["Siege of Constantinople", "1235"]], "db_path": "data/spider/database/battle_death/battle_death.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT name, date, result FROM battle"}
{"metadata": {"db_id": "world_1", "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "query_toks": ["SELECT", "CountryCode", ",", "max", "(", "Percentage", ")", "FROM", "countrylanguage", "WHERE", "LANGUAGE", "=", "``", "Spanish", "''", "GROUP", "BY", "CountryCode"], "query_toks_no_value": ["select", "countrycode", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "where", "language", "=", "value", "group", "by", "countrycode"], "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?", "question_toks": ["What", "are", "the", "codes", "of", "countries", "where", "Spanish", "is", "spoken", "by", "the", "largest", "percentage", "of", "people", "?"], "sql": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]], [1, [0, [0, 26, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"Spanish\"", null]], "groupBy": [[0, 23, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"city": ["ID", "Name", "CountryCode", "District", "Population"], "sqlite_sequence": ["name", "seq"], "country": ["Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2"], "countrylanguage": ["CountryCode", "Language", "IsOfficial", "Percentage"]}, "answer": [["ABW", 7.4], ["AND", 44.6], ["ARG", 96.8], ["BLZ", 31.6], ["BOL", 87.7], ["CAN", 0.7], ["CHL", 89.7], ["COL", 99.0], ["CRI", 97.5], ["CUB", 100.0], ["DOM", 98.0], ["ECU", 93.0], ["ESP", 74.4], ["FRA", 0.4], ["GTM", 64.7], ["HND", 97.2], ["MEX", 92.1], ["NIC", 97.6], ["PAN", 76.8], ["PER", 79.8], ["PRI", 51.3], ["PRY", 55.1], ["SLV", 100.0], ["SWE", 0.6], ["URY", 95.7], ["USA", 7.5], ["VEN", 96.9], ["VIR", 13.3]], "db_path": "data/spider/database/world_1/world_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC LIMIT 1"}
{"metadata": {"db_id": "student_transcripts_tracking", "query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.student_id", ",", "T1.first_name", ",", "T1.middle_name", ",", "T1.last_name", ",", "count", "(", "*", ")", ",", "T1.student_id", "FROM", "Students", "AS", "T1", "JOIN", "Student_Enrolment", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "GROUP", "BY", "T1.student_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "student_id", ",", "t1", ".", "first_name", ",", "t1", ".", "middle_name", ",", "t1", ".", "last_name", ",", "count", "(", "*", ")", ",", "t1", ".", "student_id", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "group", "by", "t1", ".", "student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?", "question_toks": ["What", "is", "the", "first", ",", "middle", ",", "and", "last", "name", ",", "along", "with", "the", "id", "and", "number", "of", "enrollments", ",", "for", "the", "student", "who", "enrolled", "the", "most", "in", "any", "program", "?"], "sql": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 47, false], null]]}, "select": [false, [[0, [0, [0, 32, false], null]], [0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]], [3, [0, [0, 0, false], null]], [0, [0, [0, 32, false], null]]]], "where": [], "groupBy": [[0, 32, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Addresses": ["address_id", "line_1", "line_2", "line_3", "city", "zip_postcode", "state_province_county", "country", "other_address_details"], "Courses": ["course_id", "course_name", "course_description", "other_details"], "Departments": ["department_id", "department_name", "department_description", "other_details"], "Degree_Programs": ["degree_program_id", "department_id", "degree_summary_name", "degree_summary_description", "other_details"], "Sections": ["section_id", "course_id", "section_name", "section_description", "other_details"], "Semesters": ["semester_id", "semester_name", "semester_description", "other_details"], "Students": ["student_id", "current_address_id", "permanent_address_id", "first_name", "middle_name", "last_name", "cell_mobile_number", "email_address", "ssn", "date_first_registered", "date_left", "other_student_details"], "Student_Enrolment": ["student_enrolment_id", "degree_program_id", "semester_id", "student_id", "other_details"], "Student_Enrolment_Courses": ["student_course_id", "course_id", "student_enrolment_id"], "Transcripts": ["transcript_id", "transcript_date", "other_details"], "Transcript_Contents": ["student_course_id", "transcript_id"]}, "answer": [[7, "Frida", "Aisha", "Huel", 3, 7]], "db_path": "data/spider/database/student_transcripts_tracking/student_transcripts_tracking.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(T2.student_enrolment_id) AS Num_of_Enrollments\\nFROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id\\nGROUP BY T1.student_id\\nORDER BY COUNT(T2.student_enrolment_id) DESC\\nLIMIT 1"}
{"metadata": {"db_id": "tvshow", "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "query_toks": ["SELECT", "id", "FROM", "TV_Channel", "EXCEPT", "SELECT", "channel", "FROM", "cartoon", "WHERE", "directed_by", "=", "'Ben", "Jones", "'"], "query_toks_no_value": ["select", "id", "from", "tv_channel", "except", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "value"], "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?", "question_toks": ["What", "are", "the", "ids", "of", "the", "TV", "channels", "that", "do", "not", "have", "any", "cartoons", "directed", "by", "Ben", "Jones", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Ben Jones\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "db_table_headers": {"TV_Channel": ["id", "series_name", "Country", "Language", "Content", "Pixel_aspect_ratio_PAR", "Hight_definition_TV", "Pay_per_view_PPV", "Package_Option"], "TV_series": ["id", "Episode", "Air_Date", "Rating", "Share", "18_49_Rating_Share", "Viewers_m", "Weekly_Rank", "Channel"], "Cartoon": ["id", "Title", "Directed_by", "Written_by", "Original_air_date", "Production_code", "Channel"]}, "answer": [["701"], ["703"], ["705"], ["706"], ["708"], ["709"], ["713"], ["714"], ["715"], ["717"], ["719"]], "db_path": "data/spider/database/tvshow/tvshow.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT DISTINCT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')"}
{"metadata": {"db_id": "flight_2", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "query_toks": ["SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "GROUP", "BY", "T1.Airline", "HAVING", "count", "(", "*", ")", ">", "10"], "query_toks_no_value": ["select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "group", "by", "t1", ".", "airline", "having", "count", "(", "*", ")", ">", "value"], "question": "Which airlines have at least 10 flights?", "question_toks": ["Which", "airlines", "have", "at", "least", "10", "flights", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [[false, 3, [0, [3, 0, false], null], 10.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"airlines": ["uid", "Airline", "Abbreviation", "Country"], "airports": ["City", "AirportCode", "AirportName", "Country", "CountryAbbrev"], "flights": ["Airline", "FlightNo", "SourceAirport", "DestAirport"]}, "answer": [["AirTran Airways"], ["Allegiant Air"], ["American Airlines"], ["Continental Airlines"], ["Delta Airlines"], ["Frontier Airlines"], ["JetBlue Airways"], ["Northwest Airlines"], ["Southwest Airlines"], ["US Airways"], ["United Airlines"], ["Virgin America"]], "db_path": "data/spider/database/flight_2/flight_2.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10"}
{"metadata": {"db_id": "concert_singer", "query": "select max(capacity), average from stadium", "query_toks": ["select", "max", "(", "capacity", ")", ",", "average", "from", "stadium"], "query_toks_no_value": ["select", "max", "(", "capacity", ")", ",", "average", "from", "stadium"], "question": "What is the maximum capacity and the average of all stadiums ?", "question_toks": ["What", "is", "the", "maximum", "capacity", "and", "the", "average", "of", "all", "stadiums", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[1, [0, [0, 4, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"stadium": ["Stadium_ID", "Location", "Name", "Capacity", "Highest", "Lowest", "Average"], "singer": ["Singer_ID", "Name", "Country", "Song_Name", "Song_release_year", "Age", "Is_male"], "concert": ["concert_ID", "concert_Name", "Theme", "Stadium_ID", "Year"], "singer_in_concert": ["concert_ID", "Singer_ID"]}, "answer": [[52500, 730]], "db_path": "data/spider/database/concert_singer/concert_singer.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT max(Capacity), avg(Capacity) FROM stadium"}
{"metadata": {"db_id": "poker_player", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T2.Earnings", ">", "300000"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t2", ".", "earnings", ">", "value"], "question": "What are the names of poker players whose earnings is higher than 300000?", "question_toks": ["What", "are", "the", "names", "of", "poker", "players", "whose", "earnings", "is", "higher", "than", "300000", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 3, [0, [0, 6, false], null], 300000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"poker_player": ["Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings"], "people": ["People_ID", "Nationality", "Name", "Birth_Date", "Height"]}, "answer": [["Aleksey Ostapenko"], ["Maksim Botin"]], "db_path": "data/spider/database/poker_player/poker_player.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000"}
{"metadata": {"db_id": "car_1", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "query_toks": ["SELECT", "T1.Model", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "CARS_DATA", "AS", "T2", "ON", "T1.MakeId", "=", "T2.Id", "WHERE", "T2.Cylinders", "=", "4", "ORDER", "BY", "T2.horsepower", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1", ".", "makeid", "=", "t2", ".", "id", "where", "t2", ".", "cylinders", "=", "value", "order", "by", "t2", ".", "horsepower", "desc", "limit", "value"], "question": "For all of the 4 cylinder cars, which model has the most horsepower?", "question_toks": ["For", "all", "of", "the", "4", "cylinder", "cars", ",", "which", "model", "has", "the", "most", "horsepower", "?"], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [["ford"]], "db_path": "data/spider/database/car_1/car_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Model FROM model_list WHERE ModelId IN (SELECT Id FROM cars_data WHERE Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1)"}
{"metadata": {"db_id": "flight_2", "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "T1.AirportCode", "FROM", "AIRPORTS", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.AirportCode", "=", "T2.DestAirport", "OR", "T1.AirportCode", "=", "T2.SourceAirport", "GROUP", "BY", "T1.AirportCode", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "airportcode", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "airportcode", "=", "t2", ".", "destairport", "or", "t1", ".", "airportcode", "=", "t2", ".", "sourceairport", "group", "by", "t1", ".", "airportcode", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "What is the code of airport that has fewest number of flights?", "question_toks": ["What", "is", "the", "code", "of", "airport", "that", "has", "fewest", "number", "of", "flights", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"airlines": ["uid", "Airline", "Abbreviation", "Country"], "airports": ["City", "AirportCode", "AirportName", "Country", "CountryAbbrev"], "flights": ["Airline", "FlightNo", "SourceAirport", "DestAirport"]}, "answer": [], "db_path": "data/spider/database/flight_2/flight_2.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT SourceAirport AS airport_code, COUNT(*) AS num_flights FROM flights GROUP BY SourceAirport ORDER BY num_flights ASC LIMIT 1"}
{"metadata": {"db_id": "wta_1", "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "YEAR", "FROM", "matches", "GROUP", "BY", "YEAR", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "year", "from", "matches", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the year that has the most number of matches.", "question_toks": ["Find", "the", "year", "that", "has", "the", "most", "number", "of", "matches", "."], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 38, false], null]]]], "where": [], "groupBy": [[0, 38, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"players": ["player_id", "first_name", "last_name", "hand", "birth_date", "country_code"], "matches": ["best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year"], "rankings": ["ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "answer": [[2016]], "db_path": "data/spider/database/wta_1/wta_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1"}
{"metadata": {"db_id": "museum_visit", "query": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "query_toks": ["SELECT", "t2.visitor_id", ",", "t1.name", ",", "t1.Level_of_membership", "FROM", "visitor", "AS", "t1", "JOIN", "visit", "AS", "t2", "ON", "t1.id", "=", "t2.visitor_id", "GROUP", "BY", "t2.visitor_id", "ORDER", "BY", "sum", "(", "t2.Total_spent", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "visitor_id", ",", "t1", ".", "name", ",", "t1", ".", "level_of_membership", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "visitor_id", "group", "by", "t2", ".", "visitor_id", "order", "by", "sum", "(", "t2", ".", "total_spent", ")", "desc", "limit", "value"], "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?", "question_toks": ["What", "are", "the", "id", ",", "name", "and", "membership", "level", "of", "visitors", "who", "have", "spent", "the", "largest", "amount", "of", "money", "in", "total", "in", "all", "museum", "tickets", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [4, 12, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"museum": ["Museum_ID", "Name", "Num_of_Staff", "Open_Year"], "visitor": ["ID", "Name", "Level_of_membership", "Age"], "visit": ["Museum_ID", "visitor_ID", "Num_of_Ticket", "Total_spent"]}, "answer": [["3", "Arjen Robben", 1]], "db_path": "data/spider/database/museum_visit/museum_visit.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership ORDER BY SUM(Total_spent) DESC LIMIT 1"}
{"metadata": {"db_id": "world_1", "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"", "query_toks": ["SELECT", "*", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T2.Language", "=", "``", "English", "''", "AND", "IsOfficial", "=", "``", "T", "''", "UNION", "SELECT", "*", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T2.Language", "=", "``", "Dutch", "''", "AND", "IsOfficial", "=", "``", "T", "''"], "query_toks_no_value": ["select", "*", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t2", ".", "language", "=", "value", "and", "isofficial", "=", "value", "union", "select", "*", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t2", ".", "language", "=", "value", "and", "isofficial", "=", "value"], "question": "Which countries have either English or Dutch as an official language?", "question_toks": ["Which", "countries", "have", "either", "English", "or", "Dutch", "as", "an", "official", "language", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"Dutch\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, "db_table_headers": {"city": ["ID", "Name", "CountryCode", "District", "Population"], "sqlite_sequence": ["name", "seq"], "country": ["Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2"], "countrylanguage": ["CountryCode", "Language", "IsOfficial", "Percentage"]}, "answer": [["ABW", "Aruba", "North America", "Caribbean", 193.0, null, 103000, 78.4, 828.0, 793.0, "Aruba", "Nonmetropolitan Territory of The Netherlands", "Beatrix", 129, "AW", "ABW", "Dutch", "T", 5.3], ["AIA", "Anguilla", "North America", "Caribbean", 96.0, null, 8000, 76.1, 63.2, null, "Anguilla", "Dependent Territory of the UK", "Elisabeth II", 62, "AI", "AIA", "English", "T", 0.0], ["ANT", "Netherlands Antilles", "North America", "Caribbean", 800.0, null, 217000, 74.7, 1941.0, null, "Nederlandse Antillen", "Nonmetropolitan Territory of The Netherlands", "Beatrix", 33, "AN", "ANT", "Dutch", "T", 0.0], ["ASM", "American Samoa", "Oceania", "Polynesia", 199.0, null, 68000, 75.1, 334.0, null, "Amerika Samoa", "US Territory", "George W. Bush", 54, "AS", "ASM", "English", "T", 3.1], ["ATG", "Antigua and Barbuda", "North America", "Caribbean", 442.0, 1981, 68000, 70.5, 612.0, 584.0, "Antigua and Barbuda", "Constitutional Monarchy", "Elisabeth II", 63, "AG", "ATG", "English", "T", 0.0], ["AUS", "Australia", "Oceania", "Australia and New Zealand", 7741220.0, 1901, 18886000, 79.8, 351182.0, 392911.0, "Australia", "Constitutional Monarchy, Federation", "Elisabeth II", 135, "AU", "AUS", "English", "T", 81.2], ["BEL", "Belgium", "Europe", "Western Europe", 30518.0, 1830, 10239000, 77.8, 249704.0, 243948.0, "Belgi\u00eb/Belgique", "Constitutional Monarchy, Federation", "Albert II", 179, "BE", "BEL", "Dutch", "T", 59.2], ["BLZ", "Belize", "North America", "Central America", 22696.0, 1981, 241000, 70.9, 630.0, 616.0, "Belize", "Constitutional Monarchy", "Elisabeth II", 185, "BZ", "BLZ", "English", "T", 50.8], ["BMU", "Bermuda", "North America", "North America", 53.0, null, 65000, 76.9, 2328.0, 2190.0, "Bermuda", "Dependent Territory of the UK", "Elisabeth II", 191, "BM", "BMU", "English", "T", 100.0], ["BRB", "Barbados", "North America", "Caribbean", 430.0, 1966, 270000, 73.0, 2223.0, 2186.0, "Barbados", "Constitutional Monarchy", "Elisabeth II", 174, "BB", "BRB", "English", "T", 0.0], ["CAN", "Canada", "North America", "North America", 9970610.0, 1867, 31147000, 79.4, 598862.0, 625626.0, "Canada", "Constitutional Monarchy, Federation", "Elisabeth II", 1822, "CA", "CAN", "English", "T", 60.4], ["CCK", "Cocos (Keeling) Islands", "Oceania", "Australia and New Zealand", 14.0, null, 600, null, 0.0, null, "Cocos (Keeling) Islands", "Territory of Australia", "Elisabeth II", 2317, "CC", "CCK", "English", "T", 0.0], ["CXR", "Christmas Island", "Oceania", "Australia and New Zealand", 135.0, null, 2500, null, 0.0, null, "Christmas Island", "Territory of Australia", "Elisabeth II", 1791, "CX", "CXR", "English", "T", 0.0], ["CYM", "Cayman Islands", "North America", "Caribbean", 264.0, null, 38000, 78.9, 1263.0, 1186.0, "Cayman Islands", "Dependent Territory of the UK", "Elisabeth II", 553, "KY", "CYM", "English", "T", 0.0], ["FLK", "Falkland Islands", "South America", "South America", 12173.0, null, 2000, null, 0.0, null, "Falkland Islands", "Dependent Territory of the UK", "Elisabeth II", 763, "FK", "FLK", "English", "T", 0.0], ["GBR", "United Kingdom", "Europe", "British Islands", 242900.0, 1066, 59623400, 77.7, 1378330.0, 1296830.0, "United Kingdom", "Constitutional Monarchy", "Elisabeth II", 456, "GB", "GBR", "English", "T", 97.3], ["GIB", "Gibraltar", "Europe", "Southern Europe", 6.0, null, 25000, 79.0, 258.0, null, "Gibraltar", "Dependent Territory of the UK", "Elisabeth II", 915, "GI", "GIB", "English", "T", 88.9], ["GUM", "Guam", "Oceania", "Micronesia", 549.0, null, 168000, 77.8, 1197.0, 1136.0, "Guam", "US Territory", "George W. Bush", 921, "GU", "GUM", "English", "T", 37.5], ["HKG", "Hong Kong", "Asia", "Eastern Asia", 1075.0, null, 6782000, 79.5, 166448.0, 173610.0, "Xianggang/Hong Kong", "Special Administrative Region of China", "Jiang Zemin", 937, "HK", "HKG", "English", "T", 2.2], ["IRL", "Ireland", "Europe", "British Islands", 70273.0, 1921, 3775100, 76.8, 75921.0, 73132.0, "Ireland/\u00c9ire", "Republic", "Mary McAleese", 1447, "IE", "IRL", "English", "T", 98.4], ["KNA", "Saint Kitts and Nevis", "North America", "Caribbean", 261.0, 1983, 38000, 70.7, 299.0, null, "Saint Kitts and Nevis", "Constitutional Monarchy", "Elisabeth II", 3064, "KN", "KNA", "English", "T", 0.0], ["LCA", "Saint Lucia", "North America", "Caribbean", 622.0, 1979, 154000, 72.3, 571.0, null, "Saint Lucia", "Constitutional Monarchy", "Elisabeth II", 3065, "LC", "LCA", "English", "T", 20.0], ["LSO", "Lesotho", "Africa", "Southern Africa", 30355.0, 1966, 2153000, 50.8, 1061.0, 1161.0, "Lesotho", "Constitutional Monarchy", "Letsie III", 2437, "LS", "LSO", "English", "T", 0.0], ["MHL", "Marshall Islands", "Oceania", "Micronesia", 181.0, 1990, 64000, 65.5, 97.0, null, "Marshall Islands/Majol", "Republic", "Kessai Note", 2507, "MH", "MHL", "English", "T", 0.0], ["MLT", "Malta", "Europe", "Southern Europe", 316.0, 1964, 380200, 77.9, 3512.0, 3338.0, "Malta", "Republic", "Guido de Marco", 2484, "MT", "MLT", "English", "T", 2.1], ["MNP", "Northern Mariana Islands", "Oceania", "Micronesia", 464.0, null, 78000, 75.5, 0.0, null, "Northern Mariana Islands", "Commonwealth of the US", "George W. Bush", 2913, "MP", "MNP", "English", "T", 4.8], ["MSR", "Montserrat", "North America", "Caribbean", 102.0, null, 11000, 78.0, 109.0, null, "Montserrat", "Dependent Territory of the UK", "Elisabeth II", 2697, "MS", "MSR", "English", "T", 0.0], ["NFK", "Norfolk Island", "Oceania", "Australia and New Zealand", 36.0, null, 2000, null, 0.0, null, "Norfolk Island", "Territory of Australia", "Elisabeth II", 2806, "NF", "NFK", "English", "T", 0.0], ["NIU", "Niue", "Oceania", "Polynesia", 260.0, null, 2000, null, 0.0, null, "Niue", "Nonmetropolitan Territory of New Zealand", "Elisabeth II", 2805, "NU", "NIU", "English", "T", 0.0], ["NLD", "Netherlands", "Europe", "Western Europe", 41526.0, 1581, 15864000, 78.3, 371362.0, 360478.0, "Nederland", "Constitutional Monarchy", "Beatrix", 5, "NL", "NLD", "Dutch", "T", 95.6], ["NRU", "Nauru", "Oceania", "Micronesia", 21.0, 1968, 12000, 60.8, 197.0, null, "Naoero/Nauru", "Republic", "Bernard Dowiyogo", 2728, "NR", "NRU", "English", "T", 7.5], ["NZL", "New Zealand", "Oceania", "Australia and New Zealand", 270534.0, 1907, 3862000, 77.8, 54669.0, 64960.0, "New Zealand/Aotearoa", "Constitutional Monarchy", "Elisabeth II", 3499, "NZ", "NZL", "English", "T", 87.0], ["PLW", "Palau", "Oceania", "Micronesia", 459.0, 1994, 19000, 68.6, 105.0, null, "Belau/Palau", "Republic", "Kuniwo Nakamura", 2881, "PW", "PLW", "English", "T", 3.2], ["SHN", "Saint Helena", "Africa", "Western Africa", 314.0, null, 6000, 76.8, 0.0, null, "Saint Helena", "Dependent Territory of the UK", "Elisabeth II", 3063, "SH", "SHN", "English", "T", 0.0], ["SYC", "Seychelles", "Africa", "Eastern Africa", 455.0, 1976, 77000, 70.4, 536.0, 539.0, "Sesel/Seychelles", "Republic", "France-Albert Ren\u00e9", 3206, "SC", "SYC", "English", "T", 3.8], ["TCA", "Turks and Caicos Islands", "North America", "Caribbean", 430.0, null, 17000, 73.3, 96.0, null, "The Turks and Caicos Islands", "Dependent Territory of the UK", "Elisabeth II", 3423, "TC", "TCA", "English", "T", 0.0], ["TKL", "Tokelau", "Oceania", "Polynesia", 12.0, null, 2000, null, 0.0, null, "Tokelau", "Nonmetropolitan Territory of New Zealand", "Elisabeth II", 3333, "TK", "TKL", "English", "T", 0.0], ["TON", "Tonga", "Oceania", "Polynesia", 650.0, 1970, 99000, 67.9, 146.0, 170.0, "Tonga", "Monarchy", "Taufa'ahau Tupou IV", 3334, "TO", "TON", "English", "T", 0.0], ["TUV", "Tuvalu", "Oceania", "Polynesia", 26.0, 1978, 12000, 66.3, 6.0, null, "Tuvalu", "Constitutional Monarchy", "Elisabeth II", 3424, "TV", "TUV", "English", "T", 0.0], ["UMI", "United States Minor Outlying Islands", "Oceania", "Micronesia/Caribbean", 16.0, null, 0, null, 0.0, null, "United States Minor Outlying Islands", "Dependent Territory of the US", "George W. Bush", null, "UM", "UMI", "English", "T", 0.0], ["USA", "United States", "North America", "North America", 9363520.0, 1776, 278357000, 77.1, 8510700.0, 8110900.0, "United States", "Federal Republic", "George W. Bush", 3813, "US", "USA", "English", "T", 86.2], ["VCT", "Saint Vincent and the Grenadines", "North America", "Caribbean", 388.0, 1979, 114000, 72.3, 285.0, null, "Saint Vincent and the Grenadines", "Constitutional Monarchy", "Elisabeth II", 3066, "VC", "VCT", "English", "T", 0.0], ["VGB", "Virgin Islands, British", "North America", "Caribbean", 151.0, null, 21000, 75.4, 612.0, 573.0, "British Virgin Islands", "Dependent Territory of the UK", "Elisabeth II", 537, "VG", "VGB", "English", "T", 0.0], ["VIR", "Virgin Islands, U.S.", "North America", "Caribbean", 347.0, null, 93000, 78.1, 0.0, null, "Virgin Islands of the United States", "US Territory", "George W. Bush", 4067, "VI", "VIR", "English", "T", 81.7], ["VUT", "Vanuatu", "Oceania", "Melanesia", 12189.0, 1980, 190000, 60.6, 261.0, 246.0, "Vanuatu", "Republic", "John Bani", 3537, "VU", "VUT", "English", "T", 28.3], ["WSM", "Samoa", "Oceania", "Polynesia", 2831.0, 1962, 180000, 69.2, 141.0, 157.0, "Samoa", "Parlementary Monarchy", "Malietoa Tanumafili II", 3169, "WS", "WSM", "English", "T", 0.6], ["ZAF", "South Africa", "Africa", "Southern Africa", 1221037.0, 1910, 40377000, 51.1, 116729.0, 129092.0, "South Africa", "Republic", "Thabo Mbeki", 716, "ZA", "ZAF", "English", "T", 8.5], ["ZWE", "Zimbabwe", "Africa", "Eastern Africa", 390757.0, 1980, 11669000, 37.8, 5951.0, 8670.0, "Zimbabwe", "Republic", "Robert G. Mugabe", 4068, "ZW", "ZWE", "English", "T", 2.2]], "db_path": "data/spider/database/world_1/world_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT DISTINCT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') OR Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch' AND IsOfficial = 'T')"}
{"metadata": {"db_id": "dog_kennels", "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "query_toks": ["SELECT", "professional_id", ",", "last_name", ",", "cell_number", "FROM", "Professionals", "WHERE", "state", "=", "'Indiana", "'", "UNION", "SELECT", "T1.professional_id", ",", "T1.last_name", ",", "T1.cell_number", "FROM", "Professionals", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.professional_id", "=", "T2.professional_id", "GROUP", "BY", "T1.professional_id", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "professional_id", ",", "last_name", ",", "cell_number", "from", "professionals", "where", "state", "=", "value", "union", "select", "t1", ".", "professional_id", ",", "t1", ".", "last_name", ",", "t1", ".", "cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "professional_id", "=", "t2", ".", "professional_id", "group", "by", "t1", ".", "professional_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.", "question_toks": ["Which", "professionals", "live", "in", "the", "state", "of", "Indiana", "or", "have", "done", "treatment", "on", "more", "than", "2", "treatments", "?", "List", "his", "or", "her", "id", ",", "last", "name", "and", "cell", "phone", "."], "sql": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 40, false], null]], [0, [0, [0, 43, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], "\"Indiana\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 40, false], null]], [0, [0, [0, 43, false], null]]]], "where": [], "groupBy": [[0, 33, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, "db_table_headers": {"Breeds": ["breed_code", "breed_name"], "Charges": ["charge_id", "charge_type", "charge_amount"], "Sizes": ["size_code", "size_description"], "Treatment_Types": ["treatment_type_code", "treatment_type_description"], "Owners": ["owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number"], "Dogs": ["dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed"], "Professionals": ["professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number"], "Treatments": ["treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "answer": [[1, "Braun", "(275)939-2435x80863"], [8, "Hyatt", "328.842.3792"], [9, "Kshlerin", "962-983-8109x3509"]], "db_path": "data/spider/database/dog_kennels/dog_kennels.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)"}
{"metadata": {"db_id": "car_1", "query": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';", "query_toks": ["select", "t1.countryid", ",", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "3", "union", "select", "t1.countryid", ",", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "join", "model_list", "as", "t3", "on", "t2.id", "=", "t3.maker", "where", "t3.model", "=", "\"fiat\"", ";"], "query_toks_no_value": ["select", "t1", ".", "countryid", ",", "t1", ".", "countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "countryid", "=", "t2", ".", "country", "group", "by", "t1", ".", "countryid", "having", "count", "(", "*", ")", ">", "value", "union", "select", "t1", ".", "countryid", ",", "t1", ".", "countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "countryid", "=", "t2", ".", "country", "join", "model_list", "as", "t3", "on", "t2", ".", "id", "=", "t3", ".", "maker", "where", "t3", ".", "model", "=", "value"], "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?", "question_toks": ["What", "are", "the", "ids", "and", "names", "of", "all", "countries", "that", "either", "have", "more", "than", "3", "car", "makers", "or", "produce", "fiat", "model", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 3, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"fiat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [[1, "usa"], [2, "germany"], [4, "japan"], [5, "italy"]], "db_path": "data/spider/database/car_1/car_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING count(*) > 3) OR CountryId IN (SELECT DISTINCT Country FROM car_makers WHERE Maker = 'Fiat' AND Maker IN (SELECT Maker FROM model_list WHERE Model = 'Fiat'))"}
{"metadata": {"db_id": "pets_1", "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "query_toks": ["SELECT", "weight", "FROM", "pets", "ORDER", "BY", "pet_age", "LIMIT", "1"], "query_toks_no_value": ["select", "weight", "from", "pets", "order", "by", "pet_age", "limit", "value"], "question": "Find the weight of the youngest dog.", "question_toks": ["Find", "the", "weight", "of", "the", "youngest", "dog", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 13, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Student": ["StuID", "LName", "Fname", "Age", "Sex", "Major", "Advisor", "city_code"], "Has_Pet": ["StuID", "PetID"], "Pets": ["PetID", "PetType", "pet_age", "weight"]}, "answer": [[9.3]], "db_path": "data/spider/database/pets_1/pets_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT MIN(weight) FROM Pets WHERE PetType = \"dog\" AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = \"dog\")"}
{"metadata": {"db_id": "course_teach", "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "query_toks": ["SELECT", "T3.Name", "FROM", "course_arrange", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.Course_ID", "=", "T2.Course_ID", "JOIN", "teacher", "AS", "T3", "ON", "T1.Teacher_ID", "=", "T3.Teacher_ID", "WHERE", "T2.Course", "=", "``", "Math", "''"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "join", "teacher", "as", "t3", "on", "t1", ".", "teacher_id", "=", "t3", ".", "teacher_id", "where", "t2", ".", "course", "=", "value"], "question": "Show the name of the teacher for the math course.", "question_toks": ["Show", "the", "name", "of", "the", "teacher", "for", "the", "math", "course", "."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 9, false], null], [0, 4, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], "\"Math\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"course": ["Course_ID", "Staring_Date", "Course"], "teacher": ["Teacher_ID", "Name", "Age", "Hometown"], "course_arrange": ["Course_ID", "Teacher_ID", "Grade"]}, "answer": [["Kearsley Brown"], ["Vicente Carretero"]], "db_path": "data/spider/database/course_teach/course_teach.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange WHERE Course_ID IN (SELECT Course_ID FROM course WHERE Course = 'math'))"}
{"metadata": {"db_id": "car_1", "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "query_toks": ["SELECT", "T1.CountryName", ",", "T1.CountryId", "FROM", "COUNTRIES", "AS", "T1", "JOIN", "CAR_MAKERS", "AS", "T2", "ON", "T1.CountryId", "=", "T2.Country", "GROUP", "BY", "T1.CountryId", "HAVING", "count", "(", "*", ")", ">", "=", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "countryname", ",", "t1", ".", "countryid", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "countryid", "=", "t2", ".", "country", "group", "by", "t1", ".", "countryid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the names and ids of all countries with at least one car maker?", "question_toks": ["What", "are", "the", "names", "and", "ids", "of", "all", "countries", "with", "at", "least", "one", "car", "maker", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 5, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [["usa", 1], ["germany", 2], ["france", 3], ["japan", 4], ["italy", 5], ["sweden", 6], ["uk", 7], ["korea", 8]], "db_path": "data/spider/database/car_1/car_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT DISTINCT Country FROM car_makers)"}
{"metadata": {"db_id": "poker_player", "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "query_toks": ["SELECT", "T1.Birth_Date", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Earnings", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "birth_date", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "earnings", "asc", "limit", "value"], "question": "What is the birth date of the poker player with the lowest earnings?", "question_toks": ["What", "is", "the", "birth", "date", "of", "the", "poker", "player", "with", "the", "lowest", "earnings", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 6, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"poker_player": ["Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings"], "people": ["People_ID", "Nationality", "Name", "Birth_Date", "Height"]}, "answer": [["August 8, 1986"]], "db_path": "data/spider/database/poker_player/poker_player.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Birth_Date FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player ORDER BY Earnings LIMIT 1)"}
{"metadata": {"db_id": "world_1", "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "District", "FROM", "city", "WHERE", "Population", ">", "(", "SELECT", "avg", "(", "Population", ")", "FROM", "city", ")", "GROUP", "BY", "District"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "district", "from", "city", "where", "population", ">", "(", "select", "avg", "(", "population", ")", "from", "city", ")", "group", "by", "district"], "question": "How many cities in each district have a population that is above the average population across all cities?", "question_toks": ["How", "many", "cities", "in", "each", "district", "have", "a", "population", "that", "is", "above", "the", "average", "population", "across", "all", "cities", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 3, [0, [0, 5, false], null], {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"city": ["ID", "Name", "CountryCode", "District", "Population"], "sqlite_sequence": ["name", "seq"], "country": ["Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2"], "countrylanguage": ["CountryCode", "Language", "IsOfficial", "Percentage"]}, "answer": [[1, "Abidjan"], [1, "Abu Dhabi"], [1, "Adana"], [1, "Addis Abeba"], [1, "Aden"], [1, "Aguascalientes"], [1, "Ahal"], [2, "Aichi"], [1, "Alagoas"], [2, "Alberta"], [1, "Aleksandria"], [1, "Aleppo"], [1, "Alger"], [1, "Almaty Qalasy"], [1, "Altai"], [1, "Amazonas"], [1, "Amman"], [1, "Anambra & Enugu & Eb"], [2, "Andalusia"], [5, "Andhra Pradesh"], [5, "Anhui"], [1, "Ankara"], [1, "Antalya"], [1, "Antananarivo"], [1, "Antioquia"], [1, "Antwerpen"], [1, "Aragonia"], [1, "Aragua"], [1, "Arequipa"], [3, "Arizona"], [1, "Arkangeli"], [1, "Ashanti"], [1, "Assam"], [1, "Astrahan"], [1, "Asunci\u00f3n"], [1, "Atlantique"], [1, "Atl\u00e1ntico"], [1, "Attika"], [1, "Auckland"], [1, "Baden-W\u00fcrttemberg"], [1, "Baghdad"], [2, "Bahia"], [2, "Baijeri"], [3, "Baja California"], [1, "Baki"], [1, "Bali"], [1, "Baluchistan"], [1, "Bamako"], [1, "Banaadir"], [1, "Bangkok"], [1, "Bangui"], [1, "Baskimaa"], [1, "Basra"], [1, "Ba\u0161kortostan"], [1, "Beirut"], [1, "Bengasi"], [1, "Berliini"], [1, "Bihar"], [1, "Bishkek shaary"], [1, "Blantyre"], [2, "Bol\u00edvar"], [1, "Bratislava"], [1, "Brazzaville"], [1, "Bremen"], [1, "British Colombia"], [1, "Brjansk"], [1, "Budapest"], [12, "Buenos Aires"], [1, "Bukarest"], [1, "Bulawayo"], [1, "Burjatia"], [1, "Bursa"], [8, "California"], [1, "Callao"], [1, "Campania"], [1, "Canary Islands"], [2, "Cap-Vert"], [1, "Carabobo"], [1, "Casablanca"], [1, "Cear\u00e1"], [2, "Central"], [2, "Central Java"], [1, "Central Macedonia"], [1, "Central Serbia"], [1, "Central Visayas"], [1, "Centre"], [1, "Chandigarh"], [1, "Chari-Baguirmi"], [2, "Chhatisgarh"], [1, "Chiapas"], [4, "Chiba"], [2, "Chihuahua"], [1, "Chisinau"], [1, "Chittagong"], [1, "Chollabuk"], [1, "Chongqing"], [1, "Chungchongbuk"], [2, "Coahuila de Zaragoza"], [1, "Coast"], [1, "Cochabamba"], [2, "Colorado"], [1, "Conakry"], [1, "Constantine"], [1, "Cort\u00e9s"], [1, "C\u00f3rdoba"], [1, "Damascus"], [1, "Dar es Salaam"], [1, "Delhi"], [1, "Dhaka"], [1, "District of Columbia"], [1, "Distrito Central"], [4, "Distrito Federal"], [1, "Distrito Nacional"], [1, "Diyarbakir"], [1, "Djibouti"], [2, "Dnipropetrovsk"], [1, "Doha"], [1, "Dolnoslaskie"], [3, "Donetsk"], [1, "Dubai"], [1, "Durango"], [1, "East Azerbaidzan"], [2, "East Java"], [1, "East Kasai"], [1, "Eastern Cape"], [1, "Ehime"], [1, "Emilia-Romagna"], [7, "England"], [1, "Esfahan"], [1, "Eskisehir"], [1, "Estuaire"], [1, "Fars"], [1, "Federaatio"], [2, "Florida"], [2, "Fujian"], [2, "Fukuoka"], [1, "Fukushima"], [1, "F\u00e8s-Boulemane"], [1, "Gansu"], [7, "Gauteng"], [1, "Gaza"], [1, "Gaziantep"], [1, "Georgia"], [1, "Gifu"], [1, "Gilan"], [1, "Giza"], [1, "Goi\u00e1s"], [1, "Gomel"], [1, "Grad Sofija"], [1, "Grad Zagreb"], [1, "Greater Accra"], [3, "Guanajuato"], [4, "Guangdong"], [3, "Guangxi"], [1, "Guatemala"], [1, "Guayas"], [1, "Guerrero"], [2, "Guizhou"], [5, "Gujarat"], [1, "Habarovsk"], [1, "Hainan"], [1, "Haiphong"], [1, "Hamadan"], [1, "Hamburg"], [1, "Hamgyong N"], [1, "Hamgyong P"], [1, "Hanoi"], [1, "Harare"], [1, "Harjumaa"], [1, "Harkova"], [1, "Haryana"], [1, "Haute-Za\u00efre"], [1, "Hawaii"], [6, "Hebei"], [9, "Heilongjiang"], [7, "Henan"], [1, "Herson"], [1, "Hessen"], [1, "Hims"], [2, "Hiroshima"], [1, "Hlavn\u00ed mesto Praha"], [1, "Ho Chi Minh City"], [2, "Hokkaido"], [1, "Hongkong"], [1, "Horad Minsk"], [1, "Hsinchu"], [4, "Hubei"], [4, "Hunan"], [4, "Hyogo"], [1, "Illinois"], [1, "Inchon"], [1, "Indiana"], [3, "Inner Mongolia"], [1, "Irbil"], [1, "Irkutsk"], [1, "Ishikawa"], [1, "Islamabad"], [1, "Istanbul"], [1, "Ivanovo"], [1, "Izmir"], [1, "I\u00e7el"], [1, "Jakarta Raya"], [3, "Jalisco"], [1, "Jambi"], [1, "Jammu and Kashmir"], [1, "Jaroslavl"], [1, "Jerusalem"], [2, "Jharkhand"], [7, "Jiangsu"], [2, "Jiangxi"], [4, "Jilin"], [1, "Jizn\u00ed Morava"], [1, "Kabol"], [1, "Kadiogo"], [1, "Kaduna"], [1, "Kagoshima"], [1, "Kairo"], [1, "Kalimantan Barat"], [1, "Kalimantan Selatan"], [1, "Kalimantan Timur"], [1, "Kaliningrad"], [5, "Kanagawa"], [1, "Kano & Jigawa"], [1, "Kaohsiung"], [3, "Karnataka"], [1, "Karotegin"], [1, "Katalonia"], [1, "Kaunas"], [1, "Kayseri"], [1, "Keelung"], [2, "Kemerovo"], [3, "Kerala"], [1, "Kerman"], [1, "Kermanshah"], [3, "Khartum"], [1, "Khorasan"], [1, "Khulna"], [1, "Khuzestan"], [1, "Kinshasa"], [1, "Kiova"], [1, "Kirov"], [1, "Konya"], [1, "Kouilou"], [1, "Kowloon and New Kowl"], [2, "Krasnodar"], [1, "Krasnojarsk"], [1, "Kujawsko-Pomorskie"], [1, "Kumamoto"], [1, "Kurgan"], [1, "Kursk"], [4, "KwaZulu-Natal"], [1, "Kwangju"], [1, "Kwara & Kogi"], [7, "Kyonggi"], [1, "Kyongsangbuk"], [3, "Kyongsangnam"], [1, "Kyoto"], [1, "K\u00f8benhavn"], [1, "La Habana"], [1, "La Libertad"], [2, "La Paz"], [1, "Lagos"], [1, "Lambayeque"], [1, "Lampung"], [1, "Lara"], [1, "Latium"], [1, "Leinster"], [12, "Liaoning"], [1, "Liguria"], [1, "Lilongwe"], [1, "Lima"], [1, "Lipetsk"], [2, "Lisboa"], [1, "Littoral"], [1, "Lodzkie"], [1, "Lombardia"], [1, "Loreto"], [1, "Louisiana"], [1, "Luanda"], [1, "Lubelskie"], [1, "Lugansk"], [1, "Lusaka"], [1, "Luxor"], [1, "Lviv"], [1, "Macau"], [5, "Madhya Pradesh"], [1, "Madrid"], [1, "Maekel"], [1, "Magdalena"], [13, "Maharashtra"], [1, "Malopolskie"], [1, "Managua"], [1, "Mandalay"], [1, "Manitoba"], [2, "Maputo"], [1, "Maranh\u00e3o"], [1, "Maritime"], [1, "Markazi"], [1, "Marrakech-Tensift-Al"], [1, "Maryland"], [1, "Massachusetts"], [1, "Mato Grosso"], [1, "Mato Grosso do Sul"], [1, "Mazowieckie"], [1, "Medina"], [3, "Mekka"], [1, "Mekn\u00e8s-Tafilalet"], [1, "Michigan"], [1, "Michoac\u00e1n de Ocampo"], [1, "Midi-Pyr\u00e9n\u00e9es"], [4, "Minas Gerais"], [1, "Minnesota"], [1, "Miranda"], [1, "Missouri"], [1, "Miyagi"], [1, "Mogiljov"], [1, "Montevideo"], [1, "Montserrado"], [1, "Moscow (City)"], [1, "Murcia"], [1, "Murmansk"], [1, "Mykolajiv"], [9, "M\u00e9xico"], [1, "Nagano"], [1, "Nagasaki"], [1, "Nairobi"], [1, "Namangan"], [1, "Nampo-si"], [1, "Nara"], [12, "National Capital Reg"], [1, "Nebraska"], [1, "Nevada"], [1, "New Mexico"], [1, "New South Wales"], [1, "New York"], [1, "Newmaa"], [1, "Niamey"], [1, "Niedersachsen"], [1, "Niigata"], [1, "Ninawa"], [1, "Ningxia"], [1, "Nizni Novgorod"], [1, "Noord-Holland"], [7, "Nordrhein-Westfalen"], [1, "Norte de Santander"], [1, "North Carolina"], [1, "Northern Mindanao"], [1, "Nothwest Border Prov"], [1, "Nouakchott"], [1, "Novosibirsk"], [3, "Nuevo Le\u00f3n"], [1, "Odesa"], [1, "Ogun"], [2, "Ohio"], [1, "Oita"], [2, "Okayama"], [2, "Oklahoma"], [1, "Omsk"], [1, "Ondo & Ekiti"], [4, "Ontario"], [1, "Oran"], [1, "Oregon"], [1, "Orenburg"], [1, "Oriental"], [2, "Orissa"], [6, "Osaka"], [1, "Oslo"], [1, "Ouest"], [5, "Oyo & Osun"], [1, "Panam\u00e1"], [2, "Paran\u00e1"], [2, "Para\u00edba"], [2, "Par\u00e1"], [1, "Peking"], [1, "Pennsylvania"], [1, "Penza"], [1, "Perak"], [1, "Perm"], [3, "Pernambuco"], [1, "Phnom Penh"], [1, "Piau\u00ed"], [1, "Pichincha"], [1, "Piemonte"], [1, "Pietari"], [1, "Pomorskie"], [1, "Port Said"], [1, "Primorje"], [1, "Provence-Alpes-C\u00f4te"], [1, "Puebla"], [11, "Punjab"], [1, "Pusan"], [1, "Pyongyang-si"], [1, "Qaraghandy"], [1, "Qinghai"], [1, "Qom"], [1, "Quang Nam-Da Nang"], [1, "Queensland"], [1, "Quer\u00e9taro de Arteaga"], [1, "Quintana Roo"], [1, "Qu\u00e9bec"], [2, "Rabat-Sal\u00e9-Zammour-Z"], [5, "Rajasthan"], [1, "Rangoon [Yangon]"], [1, "Rh\u00f4ne-Alpes"], [1, "Riau"], [1, "Riika"], [1, "Rio Grande do Norte"], [1, "Rio Grande do Sul"], [8, "Rio de Janeiro"], [1, "Risaralda"], [1, "Rivers & Bayelsa"], [1, "Riyadh"], [1, "Rjazan"], [1, "Rostov-na-Donu"], [3, "Saitama"], [2, "Saksi"], [1, "Salta"], [2, "Samara"], [1, "Samarkand"], [1, "San Juan"], [1, "San Luis Potos\u00ed"], [1, "San Salvador"], [1, "Sanaa"], [1, "Sanliurfa"], [1, "Santa Catarina"], [1, "Santa Cruz"], [2, "Santa F\u00e9"], [1, "Santaf\u00e9 de Bogot\u00e1"], [1, "Santander"], [3, "Santiago"], [1, "Santiago de Cuba"], [1, "Saratov"], [2, "Scotland"], [1, "Seoul"], [1, "Sergipe"], [2, "Shaanxi"], [2, "Shaba"], [7, "Shandong"], [1, "Shanghai"], [3, "Shanxi"], [2, "Shizuoka"], [3, "Sichuan"], [3, "Sinaloa"], [2, "Sindh"], [1, "Sisilia"], [1, "Sistan va Baluchesta"], [1, "Skopje"], [1, "Smolensk"], [1, "Sofala"], [2, "Sonora"], [1, "South Australia"], [1, "South Kazakstan"], [2, "Southern Mindanao"], [2, "Southern Tagalog"], [1, "Suez"], [1, "Sulawesi Selatan"], [1, "Sumatera Barat"], [1, "Sumatera Selatan"], [1, "Sumatera Utara"], [2, "Sverdlovsk"], [13, "S\u00e3o Paulo"], [1, "Tabasco"], [1, "Taegu"], [1, "Taejon"], [1, "Taichung"], [1, "Tainan"], [5, "Taipei"], [2, "Tamaulipas"], [5, "Tamil Nadu"], [1, "Tanger-T\u00e9touan"], [2, "Tatarstan"], [1, "Tbilisi"], [2, "Teheran"], [2, "Tennessee"], [6, "Texas"], [1, "Tianjin"], [1, "Tjumen"], [1, "Tochigi"], [3, "Tokyo-to"], [1, "Tolima"], [1, "Tomsk"], [1, "Toscana"], [1, "Toskent Shahri"], [1, "Tripoli"], [1, "Tucum\u00e1n"], [1, "Tula"], [1, "Tunis"], [1, "Tver"], [2, "T\u0161eljabinsk"], [1, "T\u0161uvassia"], [1, "Udmurtia"], [1, "Ulaanbaatar"], [1, "Uljanovsk"], [12, "Uttar Pradesh"], [1, "Valencia"], [1, "Valle"], [2, "Veracruz"], [1, "Viangchan"], [1, "Victoria"], [1, "Vilna"], [1, "Vinnytsja"], [1, "Virginia"], [1, "Volgograd"], [1, "Voronez"], [1, "Wakayama"], [1, "Washington"], [1, "West Australia"], [1, "West Azerbaidzan"], [3, "West Bengali"], [1, "West G\u00f6tanmaan l\u00e4n"], [4, "West Java"], [1, "West Kasai"], [2, "Western"], [1, "Western Cape"], [1, "Western Mindanao"], [2, "Western Visayas"], [1, "Wielkopolskie"], [1, "Wien"], [1, "Wilayah Persekutuan"], [1, "Wisconsin"], [1, "Xinxiang"], [1, "Yerevan"], [1, "Yogyakarta"], [1, "Yucat\u00e1n"], [1, "Yunnan"], [1, "Zachodnio-Pomorskie"], [1, "Zaporizzja"], [3, "Zhejiang"], [2, "Zuid-Holland"], [1, "Zulia"], [1, "al-Daqahliya"], [2, "al-Gharbiya"], [1, "al-Qalyubiya"], [1, "al-Sharqiya"], [1, "al-Sulaymaniya"], [1, "al-Tamim"], [1, "al-Zarqa"], [1, "\u00cele-de-France"], [1, "\u2013"]], "db_path": "data/spider/database/world_1/world_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District"}
{"metadata": {"db_id": "network_1", "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "query_toks": ["SELECT", "T2.name", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "GROUP", "BY", "T1.student_id", "HAVING", "count", "(", "*", ")", ">", "=", "3"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "group", "by", "t1", ".", "student_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the names of high schoolers who have at least 3 friends.", "question_toks": ["Show", "the", "names", "of", "high", "schoolers", "who", "have", "at", "least", "3", "friends", "."], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [[false, 5, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Highschooler": ["ID", "name", "grade"], "Friend": ["student_id", "friend_id"], "Likes": ["student_id", "liked_id"]}, "answer": [["Andrew"]], "db_path": "data/spider/database/network_1/network_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT H.name FROM Highschooler AS H JOIN Friend AS F ON H.ID = F.student_id GROUP BY H.ID HAVING count(*) >= 3"}
{"metadata": {"db_id": "museum_visit", "query": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "query_toks": ["SELECT", "sum", "(", "t2.Total_spent", ")", "FROM", "visitor", "AS", "t1", "JOIN", "visit", "AS", "t2", "ON", "t1.id", "=", "t2.visitor_id", "WHERE", "t1.Level_of_membership", "=", "1"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "total_spent", ")", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "visitor_id", "where", "t1", ".", "level_of_membership", "=", "value"], "question": "What is the total ticket expense of the visitors whose membership level is 1?", "question_toks": ["What", "is", "the", "total", "ticket", "expense", "of", "the", "visitors", "whose", "membership", "level", "is", "1", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 10, false], null]]}, "select": [false, [[4, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], 1.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"museum": ["Museum_ID", "Name", "Num_of_Staff", "Open_Year"], "visitor": ["ID", "Name", "Level_of_membership", "Age"], "visit": ["Museum_ID", "visitor_ID", "Num_of_Ticket", "Total_spent"]}, "answer": [[570.84]], "db_path": "data/spider/database/museum_visit/museum_visit.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT SUM(T1.Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1"}
{"metadata": {"db_id": "poker_player", "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "query_toks": ["SELECT", "T1.Birth_Date", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Earnings", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "birth_date", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "earnings", "asc", "limit", "value"], "question": "Return the birth date of the poker player with the lowest earnings.", "question_toks": ["Return", "the", "birth", "date", "of", "the", "poker", "player", "with", "the", "lowest", "earnings", "."], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 6, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"poker_player": ["Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings"], "people": ["People_ID", "Nationality", "Name", "Birth_Date", "Height"]}, "answer": [["August 8, 1986"]], "db_path": "data/spider/database/poker_player/poker_player.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT p.Birth_Date FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings ASC LIMIT 1"}
{"metadata": {"db_id": "battle_death", "query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "battle", "WHERE", "id", "NOT", "IN", "(", "SELECT", "lost_in_battle", "FROM", "ship", "WHERE", "tonnage", "=", "'225", "'", ")", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "battle", "where", "id", "not", "in", "(", "select", "lost_in_battle", "from", "ship", "where", "tonnage", "=", "value", ")"], "question": "How many battles did not lose any ship with tonnage '225'?", "question_toks": ["How", "many", "battles", "did", "not", "lose", "any", "ship", "with", "tonnage", "'225", "'", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"225\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"battle": ["id", "name", "date", "bulgarian_commander", "latin_commander", "result"], "ship": ["lost_in_battle", "id", "name", "tonnage", "ship_type", "location", "disposition_of_ship"], "death": ["caused_by_ship_id", "id", "note", "killed", "injured"]}, "answer": [[7]], "db_path": "data/spider/database/battle_death/battle_death.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT COUNT(*) FROM battle AS b LEFT JOIN ship AS s ON b.id = s.lost_in_battle WHERE s.tonnage <> '225' OR s.tonnage IS NULL"}
{"metadata": {"db_id": "car_1", "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "query_toks": ["SELECT", "CountryName", "FROM", "countries", "EXCEPT", "SELECT", "T1.CountryName", "FROM", "countries", "AS", "T1", "JOIN", "CAR_MAKERS", "AS", "T2", "ON", "T1.countryId", "=", "T2.Country", ";"], "query_toks_no_value": ["select", "countryname", "from", "countries", "except", "select", "t1", ".", "countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "countryid", "=", "t2", ".", "country"], "question": "What are the name of the countries where there is not a single car maker?", "question_toks": ["What", "are", "the", "name", "of", "the", "countries", "where", "there", "is", "not", "a", "single", "car", "maker", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [["australia"], ["brazil"], ["egypt"], ["mexico"], ["new zealand"], ["nigeria"], ["russia"]], "db_path": "data/spider/database/car_1/car_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT CountryName FROM countries WHERE CountryName NOT IN (SELECT DISTINCT Country FROM car_makers)"}
{"metadata": {"db_id": "car_1", "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "query_toks": ["SELECT", "T2.horsepower", ",", "T1.Make", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "CARS_DATA", "AS", "T2", "ON", "T1.MakeId", "=", "T2.Id", "WHERE", "T2.cylinders", "=", "3", "ORDER", "BY", "T2.horsepower", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "horsepower", ",", "t1", ".", "make", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1", ".", "makeid", "=", "t2", ".", "id", "where", "t2", ".", "cylinders", "=", "value", "order", "by", "t2", ".", "horsepower", "desc", "limit", "value"], "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "question_toks": ["What", "is", "the", "maximum", "horsepower", "and", "the", "make", "of", "the", "car", "models", "with", "3", "cylinders", "?"], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 20, false], null]], [0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 3.0, null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [["97", "mazda rx2 coupe"]], "db_path": "data/spider/database/car_1/car_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT max(Horsepower), Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Maker = T2.Maker JOIN cars_data AS T3 ON T2.ModelId = T3.Id WHERE Cylinders = 3 GROUP BY Maker ORDER BY max(Horsepower) DESC LIMIT 1"}
{"metadata": {"db_id": "poker_player", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Earnings", "DESC"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "earnings", "desc"], "question": "What are the names of poker players in descending order of earnings?", "question_toks": ["What", "are", "the", "names", "of", "poker", "players", "in", "descending", "order", "of", "earnings", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 6, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"poker_player": ["Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings"], "people": ["People_ID", "Nationality", "Name", "Birth_Date", "Height"]}, "answer": [["Maksim Botin"], ["Aleksey Ostapenko"], ["Teodor Salparov"], ["Semen Poltavskiy"], ["Yevgeni Sivozhelez"]], "db_path": "data/spider/database/poker_player/poker_player.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings DESC"}
{"metadata": {"db_id": "voter_1", "query": "SELECT count(*) FROM area_code_state", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "area_code_state"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "area_code_state"], "question": "How many states are there?", "question_toks": ["How", "many", "states", "are", "there", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"AREA_CODE_STATE": ["area_code", "state"], "CONTESTANTS": ["contestant_number", "contestant_name"], "VOTES": ["vote_id", "phone_number", "state", "contestant_number", "created"]}, "answer": [[305]], "db_path": "data/spider/database/voter_1/voter_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT count(DISTINCT state) FROM AREA_CODE_STATE"}
{"metadata": {"db_id": "battle_death", "query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10", "query_toks": ["SELECT", "T1.id", ",", "T1.name", "FROM", "battle", "AS", "T1", "JOIN", "ship", "AS", "T2", "ON", "T1.id", "=", "T2.lost_in_battle", "JOIN", "death", "AS", "T3", "ON", "T2.id", "=", "T3.caused_by_ship_id", "GROUP", "BY", "T1.id", "HAVING", "sum", "(", "T3.killed", ")", ">", "10"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "lost_in_battle", "join", "death", "as", "t3", "on", "t2", ".", "id", "=", "t3", ".", "caused_by_ship_id", "group", "by", "t1", ".", "id", "having", "sum", "(", "t3", ".", "killed", ")", ">", "value"], "question": "What are the ids and names of the battles that led to more than 10 people killed in total.", "question_toks": ["What", "are", "the", "ids", "and", "names", "of", "the", "battles", "that", "led", "to", "more", "than", "10", "people", "killed", "in", "total", "."], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 7, false], null], "and", [false, 2, [0, [0, 8, false], null], [0, 14, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [[false, 3, [0, [4, 17, false], null], 10.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"battle": ["id", "name", "date", "bulgarian_commander", "latin_commander", "result"], "ship": ["lost_in_battle", "id", "name", "tonnage", "ship_type", "location", "disposition_of_ship"], "death": ["caused_by_ship_id", "id", "note", "killed", "injured"]}, "answer": [[5, "Battle of Messinopolis"], [6, "Battle of Boruy"], [8, "Siege of Constantinople"]], "db_path": "data/spider/database/battle_death/battle_death.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT id, name FROM battle WHERE id IN (SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id HAVING SUM(killed) > 10)"}
{"metadata": {"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRLINES", "AS", "T2", "ON", "T1.Airline", "=", "T2.uid", "WHERE", "T2.Airline", "=", "``", "JetBlue", "Airways", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airlines", "as", "t2", "on", "t1", ".", "airline", "=", "t2", ".", "uid", "where", "t2", ".", "airline", "=", "value"], "question": "Give the number of Jetblue Airways flights.", "question_toks": ["Give", "the", "number", "of", "Jetblue", "Airways", "flights", "."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"JetBlue Airways\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"airlines": ["uid", "Airline", "Abbreviation", "Country"], "airports": ["City", "AirportCode", "AirportName", "Country", "CountryAbbrev"], "flights": ["Airline", "FlightNo", "SourceAirport", "DestAirport"]}, "answer": [[100]], "db_path": "data/spider/database/flight_2/flight_2.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT count(*) FROM flights WHERE Airline = 'Jetblue Airways'"}
{"metadata": {"db_id": "car_1", "query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "query_toks": ["select", "count", "(", "*", ")", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1", ".", "countryid", "=", "t2", ".", "country", "group", "by", "t1", ".", "countryid", "having", "count", "(", "*", ")", ">", "value"], "question": "How many countries has more than 2 car makers ?", "question_toks": ["How", "many", "countries", "has", "more", "than", "2", "car", "makers", "?"], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [[4], [4], [3], [5]], "db_path": "data/spider/database/car_1/car_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT COUNT(DISTINCT Country) FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Maker) > 2"}
{"metadata": {"db_id": "network_1", "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "query_toks": ["SELECT", "T2.name", ",", "count", "(", "*", ")", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "GROUP", "BY", "T1.student_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "group", "by", "t1", ".", "student_id"], "question": "Show the names of high school students and their corresponding number of friends.", "question_toks": ["Show", "the", "names", "of", "high", "school", "students", "and", "their", "corresponding", "number", "of", "friends", "."], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Highschooler": ["ID", "name", "grade"], "Friend": ["student_id", "friend_id"], "Likes": ["student_id", "liked_id"]}, "answer": [["Haley", 1], ["Alexis", 2], ["Jordan", 1], ["Austin", 1], ["Tiffany", 1], ["Kris", 2], ["Jessica", 1], ["Jordan", 2], ["Logan", 1], ["Gabriel", 2], ["Cassandra", 1], ["Andrew", 3], ["Gabriel", 1], ["Kyle", 1]], "db_path": "data/spider/database/network_1/network_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Highschooler.name, count(Friend.friend_id) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name"}
{"metadata": {"db_id": "world_1", "query": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "query_toks": ["select", "sum", "(", "population", ")", ",", "avg", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "\"north america\"", "and", "surfacearea", ">", "3000"], "query_toks_no_value": ["select", "sum", "(", "population", ")", ",", "avg", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "value", "and", "surfacearea", ">", "value"], "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "question_toks": ["Give", "the", "total", "population", "and", "average", "surface", "area", "corresponding", "to", "countries", "in", "North", "America", "that", "have", "a", "surface", "area", "greater", "than", "3000", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]], [5, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"north america\"", null], "and", [false, 3, [0, [0, 12, false], null], 3000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"city": ["ID", "Name", "CountryCode", "District", "Population"], "sqlite_sequence": ["name", "seq"], "country": ["Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2"], "countrylanguage": ["CountryCode", "Language", "IsOfficial", "Percentage"]}, "answer": [[null, null]], "db_path": "data/spider/database/world_1/world_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT sum(Population) , avg(SurfaceArea) FROM country WHERE Continent = \"North America\" AND SurfaceArea > 3000"}
{"metadata": {"db_id": "car_1", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "query_toks": ["SELECT", "DISTINCT", "T1.model", "FROM", "MODEL_LIST", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.model", "=", "T2.model", "JOIN", "CARS_DATA", "AS", "T3", "ON", "T2.MakeId", "=", "T3.id", "WHERE", "T3.year", ">", "1980", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "model", "=", "t2", ".", "model", "join", "cars_data", "as", "t3", "on", "t2", ".", "makeid", "=", "t3", ".", "id", "where", "t3", ".", "year", ">", "value"], "question": "Which distinct car models are the produced after 1980?", "question_toks": ["Which", "distinct", "car", "models", "are", "the", "produced", "after", "1980", "?"], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 14, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [true, [[0, [0, [0, 12, false], null]]]], "where": [[false, 3, [0, [0, 23, false], null], 1980.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [["plymouth"], ["buick"], ["dodge"], ["chevrolet"], ["toyota"], ["honda"], ["subaru"], ["datsun"], ["mazda"], ["ford"], ["volkswagen"], ["renault"], ["peugeot"], ["saab"], ["volvo"], ["oldsmobile"], ["chrysler"], ["pontiac"], ["amc"], ["mercury"], ["nissan"]], "db_path": "data/spider/database/car_1/car_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT DISTINCT Model FROM model_list JOIN cars_data ON model_list.ModelId = cars_data.Id WHERE Year > 1980"}
{"metadata": {"db_id": "wta_1", "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "query_toks": ["SELECT", "T1.country_code", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "matches", "AS", "T2", "ON", "T1.player_id", "=", "T2.winner_id", "WHERE", "T2.tourney_name", "=", "'WTA", "Championships", "'", "INTERSECT", "SELECT", "T1.country_code", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "matches", "AS", "T2", "ON", "T1.player_id", "=", "T2.winner_id", "WHERE", "T2.tourney_name", "=", "'Australian", "Open", "'"], "query_toks_no_value": ["select", "t1", ".", "country_code", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "winner_id", "where", "t2", ".", "tourney_name", "=", "value", "intersect", "select", "t1", ".", "country_code", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "winner_id", "where", "t2", ".", "tourney_name", "=", "value"], "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?", "question_toks": ["What", "are", "the", "country", "code", "and", "first", "name", "of", "the", "players", "who", "won", "in", "both", "tourney", "WTA", "Championships", "and", "Australian", "Open", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 32, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"WTA Championships\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 32, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"Australian Open\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "db_table_headers": {"players": ["player_id", "first_name", "last_name", "hand", "birth_date", "country_code"], "matches": ["best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year"], "rankings": ["ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "answer": [["GER", "Angelique"], ["USA", "Serena"]], "db_path": "data/spider/database/wta_1/wta_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT DISTINCT players.country_code, players.first_name\\nFROM players\\nJOIN matches\\nON players.player_id = matches.winner_id\\nWHERE matches.tourney_name = 'WTA Championships'\\nAND EXISTS (SELECT 1\\nFROM matches\\nWHERE matches.tourney_name = 'Australian Open'\\nAND matches.winner_id = players.player_id)"}
{"metadata": {"db_id": "world_1", "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "query_toks": ["SELECT", "avg", "(", "GNP", ")", ",", "sum", "(", "population", ")", "FROM", "country", "WHERE", "GovernmentForm", "=", "``", "US", "Territory", "''"], "query_toks_no_value": ["select", "avg", "(", "gnp", ")", ",", "sum", "(", "population", ")", "from", "country", "where", "governmentform", "=", "value"], "question": "Give the mean GNP and total population of nations which are considered US territory.", "question_toks": ["Give", "the", "mean", "GNP", "and", "total", "population", "of", "nations", "which", "are", "considered", "US", "territory", "."], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 16, false], null]], [4, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], "\"US Territory\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"city": ["ID", "Name", "CountryCode", "District", "Population"], "sqlite_sequence": ["name", "seq"], "country": ["Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2"], "countrylanguage": ["CountryCode", "Language", "IsOfficial", "Percentage"]}, "answer": [[510.3333333333333, 329000]], "db_path": "data/spider/database/world_1/world_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT avg(GNP), sum(Population) FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') AND Region = 'US Territory'"}
{"metadata": {"db_id": "poker_player", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Final_Table_Made"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "final_table_made"], "question": "List the names of poker players ordered by the final tables made in ascending order.", "question_toks": ["List", "the", "names", "of", "poker", "players", "ordered", "by", "the", "final", "tables", "made", "in", "ascending", "order", "."], "sql": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 3, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"poker_player": ["Poker_Player_ID", "People_ID", "Final_Table_Made", "Best_Finish", "Money_Rank", "Earnings"], "people": ["People_ID", "Nationality", "Name", "Birth_Date", "Height"]}, "answer": [["Teodor Salparov"], ["Maksim Botin"], ["Yevgeni Sivozhelez"], ["Semen Poltavskiy"], ["Aleksey Ostapenko"]], "db_path": "data/spider/database/poker_player/poker_player.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT p.Name FROM people AS p JOIN poker_player AS pp ON p.People_ID = pp.People_ID ORDER BY pp.Final_Table_Made ASC"}
{"metadata": {"db_id": "dog_kennels", "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "query_toks": ["SELECT", "avg", "(", "age", ")", "FROM", "Dogs", "WHERE", "dog_id", "IN", "(", "SELECT", "dog_id", "FROM", "Treatments", ")"], "query_toks_no_value": ["select", "avg", "(", "age", ")", "from", "dogs", "where", "dog_id", "in", "(", "select", "dog_id", "from", "treatments", ")"], "question": "What is the average age of the dogs who have gone through any treatments?", "question_toks": ["What", "is", "the", "average", "age", "of", "the", "dogs", "who", "have", "gone", "through", "any", "treatments", "?"], "sql": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 26, false], null]]]], "where": [[false, 8, [0, [0, 20, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 45, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"Breeds": ["breed_code", "breed_name"], "Charges": ["charge_id", "charge_type", "charge_amount"], "Sizes": ["size_code", "size_description"], "Treatment_Types": ["treatment_type_code", "treatment_type_description"], "Owners": ["owner_id", "first_name", "last_name", "street", "city", "state", "zip_code", "email_address", "home_phone", "cell_number"], "Dogs": ["dog_id", "owner_id", "abandoned_yn", "breed_code", "size_code", "name", "age", "date_of_birth", "gender", "weight", "date_arrived", "date_adopted", "date_departed"], "Professionals": ["professional_id", "role_code", "first_name", "street", "city", "state", "zip_code", "last_name", "email_address", "home_phone", "cell_number"], "Treatments": ["treatment_id", "dog_id", "professional_id", "treatment_type_code", "date_of_treatment", "cost_of_treatment"]}, "answer": [[5.111111111111111]], "db_path": "data/spider/database/dog_kennels/dog_kennels.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)"}
{"metadata": {"db_id": "tvshow", "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "query_toks": ["SELECT", "country", "FROM", "TV_Channel", "EXCEPT", "SELECT", "T1.country", "FROM", "TV_Channel", "AS", "T1", "JOIN", "cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.written_by", "=", "'Todd", "Casey", "'"], "query_toks_no_value": ["select", "country", "from", "tv_channel", "except", "select", "t1", ".", "country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "written_by", "=", "value"], "question": "What are the countries that are not playing cartoons written by Todd Casey?", "question_toks": ["What", "are", "the", "countries", "that", "are", "not", "playing", "cartoons", "written", "by", "Todd", "Casey", "?"], "sql": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], "\"Todd Casey\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "db_table_headers": {"TV_Channel": ["id", "series_name", "Country", "Language", "Content", "Pixel_aspect_ratio_PAR", "Hight_definition_TV", "Pay_per_view_PPV", "Package_Option"], "TV_series": ["id", "Episode", "Air_Date", "Rating", "Share", "18_49_Rating_Share", "Viewers_m", "Weekly_Rank", "Channel"], "Cartoon": ["id", "Title", "Directed_by", "Written_by", "Original_air_date", "Production_code", "Channel"]}, "answer": [["Poland"]], "db_path": "data/spider/database/tvshow/tvshow.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')"}
{"metadata": {"db_id": "world_1", "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "query_toks": ["SELECT", "DISTINCT", "T1.Region", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "WHERE", "T2.Language", "=", "``", "English", "''", "OR", "T2.Language", "=", "``", "Dutch", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "region", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "where", "t2", ".", "language", "=", "value", "or", "t2", ".", "language", "=", "value"], "question": "Which regions speak Dutch or English?", "question_toks": ["Which", "regions", "speak", "Dutch", "or", "English", "?"], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [true, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null], "or", [false, 2, [0, [0, 24, false], null], "\"Dutch\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"city": ["ID", "Name", "CountryCode", "District", "Population"], "sqlite_sequence": ["name", "seq"], "country": ["Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2"], "countrylanguage": ["CountryCode", "Language", "IsOfficial", "Percentage"]}, "answer": [["Caribbean"], ["Polynesia"], ["Australia and New Zealand"], ["Western Europe"], ["Middle East"], ["Central America"], ["North America"], ["Southeast Asia"], ["Nordic Countries"], ["South America"], ["British Islands"], ["Southern Europe"], ["Micronesia"], ["Eastern Asia"], ["Southern Africa"], ["Southern and Central Asia"], ["Western Africa"], ["Eastern Africa"], ["Micronesia/Caribbean"], ["Melanesia"]], "db_path": "data/spider/database/world_1/world_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT DISTINCT Region FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('Dutch', 'English'))"}
{"metadata": {"db_id": "car_1", "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "query_toks": ["SELECT", "DISTINCT", "T1.model", "FROM", "MODEL_LIST", "AS", "T1", "JOIN", "CAR_NAMES", "AS", "T2", "ON", "T1.Model", "=", "T2.Model", "JOIN", "CARS_DATA", "AS", "T3", "ON", "T2.MakeId", "=", "T3.Id", "JOIN", "CAR_MAKERS", "AS", "T4", "ON", "T1.Maker", "=", "T4.Id", "WHERE", "T3.weight", "<", "3500", "AND", "T4.FullName", "!", "=", "'Ford", "Motor", "Company", "'", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1", ".", "model", "=", "t2", ".", "model", "join", "cars_data", "as", "t3", "on", "t2", ".", "makeid", "=", "t3", ".", "id", "join", "car_makers", "as", "t4", "on", "t1", ".", "maker", "=", "t4", ".", "id", "where", "t3", ".", "weight", "<", "value", "and", "t4", ".", "fullname", "!", "=", "value"], "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "question_toks": ["Which", "models", "are", "lighter", "than", "3500", "but", "not", "built", "by", "the", "'Ford", "Motor", "Company", "'", "?"], "sql": {"from": {"table_units": [["table_unit", 3], ["table_unit", 4], ["table_unit", 5], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 14, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 6, false], null]]}, "select": [true, [[0, [0, [0, 12, false], null]]]], "where": [[false, 4, [0, [0, 21, false], null], 3500.0, null], "and", [false, 7, [0, [0, 8, false], null], "\"Ford Motor Company\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [["plymouth"], ["amc"], ["citroen"], ["buick"], ["toyota"], ["datsun"], ["volkswagen"], ["peugeot"], ["audi"], ["saab"], ["bmw"], ["chevrolet"], ["pontiac"], ["opel"], ["fiat"], ["dodge"], ["mazda"], ["volvo"], ["renault"], ["honda"], ["subaru"], ["oldsmobile"], ["mercedes-benz"], ["triumph"], ["chrysler"], ["nissan"]], "db_path": "data/spider/database/car_1/car_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Model FROM model_list WHERE ModelId IN (SELECT Id FROM cars_data WHERE Weight < 3500) AND Maker != 'Ford Motor Company'"}
{"metadata": {"db_id": "world_1", "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "query_toks": ["SELECT", "T1.Name", ",", "T1.Population", "FROM", "city", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.CountryCode", "=", "T2.CountryCode", "WHERE", "T2.Language", "=", "``", "English", "''", "ORDER", "BY", "T1.Population", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "population", "from", "city", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "countrycode", "=", "t2", ".", "countrycode", "where", "t2", ".", "language", "=", "value", "order", "by", "t1", ".", "population", "desc", "limit", "value"], "question": "What is the most populace city that speaks English?", "question_toks": ["What", "is", "the", "most", "populace", "city", "that", "speaks", "English", "?"], "sql": {"from": {"table_units": [["table_unit", 0], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 5, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"city": ["ID", "Name", "CountryCode", "District", "Population"], "sqlite_sequence": ["name", "seq"], "country": ["Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2"], "countrylanguage": ["CountryCode", "Language", "IsOfficial", "Percentage"]}, "answer": [["New York", 8008278]], "db_path": "data/spider/database/world_1/world_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode AND countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1"}
{"metadata": {"db_id": "world_1", "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "query_toks": ["SELECT", "sum", "(", "Population", ")", ",", "GovernmentForm", "FROM", "country", "GROUP", "BY", "GovernmentForm", "HAVING", "avg", "(", "LifeExpectancy", ")", ">", "72"], "query_toks_no_value": ["select", "sum", "(", "population", ")", ",", "governmentform", "from", "country", "group", "by", "governmentform", "having", "avg", "(", "lifeexpectancy", ")", ">", "value"], "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "question_toks": ["What", "are", "the", "different", "government", "forms", "and", "what", "is", "the", "total", "population", "of", "each", "for", "government", "forms", "that", "have", "an", "average", "life", "expectancy", "greater", "than", "72", "?"], "sql": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]], [0, [0, [0, 19, false], null]]]], "where": [], "groupBy": [[0, 19, false]], "having": [[false, 3, [0, [5, 15, false], null], 72.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"city": ["ID", "Name", "CountryCode", "District", "Population"], "sqlite_sequence": ["name", "seq"], "country": ["Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2"], "countrylanguage": ["CountryCode", "Language", "IsOfficial", "Percentage"]}, "answer": [[3947000, "Commonwealth of the US"], [1972000, "Constitutional Monarchy (Emirate)"], [82516000, "Constitutional Monarchy, Federation"], [193050, "Dependent Territory of the UK"], [2441000, "Emirate Federation"], [7160400, "Federation"], [617000, "Monarchy (Emirate)"], [2870000, "Monarchy (Sultanate)"], [464000, "Nonmetropolitan Territory of France"], [320000, "Nonmetropolitan Territory of The Netherlands"], [1731000, "Overseas Department of France"], [78000, "Parliamentary Coprincipality"], [99000, "Part of Denmark"], [115072000, "Socialistic Republic"], [5605000, "Socialistic State"], [7255000, "Special Administrative Region of China"], [329000, "US Territory"]], "db_path": "data/spider/database/world_1/world_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT GovernmentForm, SUM(Population) FROM country WHERE GovernmentForm IN (SELECT GovernmentForm FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm) GROUP BY GovernmentForm"}
{"metadata": {"db_id": "car_1", "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "query_toks": ["SELECT", "avg", "(", "T2.edispl", ")", "FROM", "CAR_NAMES", "AS", "T1", "JOIN", "CARS_DATA", "AS", "T2", "ON", "T1.MakeId", "=", "T2.Id", "WHERE", "T1.Model", "=", "'volvo", "'", ";"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "edispl", ")", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1", ".", "makeid", "=", "t2", ".", "id", "where", "t1", ".", "model", "=", "value"], "question": "What is the average edispl of the cars of model volvo?", "question_toks": ["What", "is", "the", "average", "edispl", "of", "the", "cars", "of", "model", "volvo", "?"], "sql": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[5, [0, [0, 19, false], null]]]], "where": [[false, 2, [0, [0, 14, false], null], "\"volvo\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "db_table_headers": {"continents": ["ContId", "Continent"], "countries": ["CountryId", "CountryName", "Continent"], "car_makers": ["Id", "Maker", "FullName", "Country"], "model_list": ["ModelId", "Maker", "Model"], "car_names": ["MakeId", "Model", "Make"], "cars_data": ["Id", "MPG", "Cylinders", "Edispl", "Horsepower", "Weight", "Accelerate", "Year"]}, "answer": [[133.5]], "db_path": "data/spider/database/car_1/car_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT AVG(Edispl) FROM cars_data WHERE Id IN (SELECT Id FROM car_names WHERE Model = \"volvo\")"}
{"metadata": {"db_id": "wta_1", "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "YEAR", "FROM", "matches", "GROUP", "BY", "YEAR", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "year", "from", "matches", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which year had the most matches?", "question_toks": ["Which", "year", "had", "the", "most", "matches", "?"], "sql": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 38, false], null]]]], "where": [], "groupBy": [[0, 38, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"players": ["player_id", "first_name", "last_name", "hand", "birth_date", "country_code"], "matches": ["best_of", "draw_size", "loser_age", "loser_entry", "loser_hand", "loser_ht", "loser_id", "loser_ioc", "loser_name", "loser_rank", "loser_rank_points", "loser_seed", "match_num", "minutes", "round", "score", "surface", "tourney_date", "tourney_id", "tourney_level", "tourney_name", "winner_age", "winner_entry", "winner_hand", "winner_ht", "winner_id", "winner_ioc", "winner_name", "winner_rank", "winner_rank_points", "winner_seed", "year"], "rankings": ["ranking_date", "ranking", "player_id", "ranking_points", "tours"]}, "answer": [[2016]], "db_path": "data/spider/database/wta_1/wta_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT year, COUNT() FROM matches GROUP BY year ORDER BY COUNT() DESC LIMIT 1"}
{"metadata": {"db_id": "world_1", "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Name", "FROM", "country", "AS", "T1", "JOIN", "countrylanguage", "AS", "T2", "ON", "T1.Code", "=", "T2.CountryCode", "GROUP", "BY", "T1.Name", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "countrycode", "group", "by", "t1", ".", "name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Give the name of the nation that uses the greatest amount of languages.", "question_toks": ["Give", "the", "name", "of", "the", "nation", "that", "uses", "the", "greatest", "amount", "of", "languages", "."], "sql": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "db_table_headers": {"city": ["ID", "Name", "CountryCode", "District", "Population"], "sqlite_sequence": ["name", "seq"], "country": ["Code", "Name", "Continent", "Region", "SurfaceArea", "IndepYear", "Population", "LifeExpectancy", "GNP", "GNPOld", "LocalName", "GovernmentForm", "HeadOfState", "Capital", "Code2"], "countrylanguage": ["CountryCode", "Language", "IsOfficial", "Percentage"]}, "answer": [["United States"]], "db_path": "data/spider/database/world_1/world_1.sqlite", "pad_token_id": 50256}, "chatgpt_program": "SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage GROUP BY CountryCode HAVING COUNT() = (SELECT MAX(num_lang) FROM (SELECT COUNT() AS num_lang FROM countrylanguage GROUP BY CountryCode)))"}
